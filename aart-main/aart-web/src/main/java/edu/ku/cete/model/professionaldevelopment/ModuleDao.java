package edu.ku.cete.model.professionaldevelopment;

import edu.ku.cete.domain.professionaldevelopment.Module;
import edu.ku.cete.domain.professionaldevelopment.ModuleExample;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

public interface ModuleDao {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    int countByExample(ModuleExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    int deleteByExample(ModuleExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    int insert(Module record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    int insertSelective(Module record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    List<Module> selectByExample(ModuleExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    Module selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    int updateByExampleSelective(@Param("record") Module record, @Param("example") ModuleExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    int updateByExample(@Param("record") Module record, @Param("example") ModuleExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    int updateByPrimaryKeySelective(Module record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.module
     *
     * @mbggenerated Thu Aug 29 16:10:44 CDT 2013
     */
    int updateByPrimaryKey(Module record);
    
    /**
     * 
     * @return List<Module>
     */
    List<Module> getModulesForAdmin(@Param("sortByColumn") String sortByColumn, @Param("sortType") String sortType, 
    		@Param("offset") int offset, @Param("limit") int limitCount);
    
    /**
     * 
     * @return int
     */
	int countModulesForAdmin();
	
	
	 /**
     * 
     * @return List<Module>
     */
    List<Module> getModulesForStateAdmin(@Param("organizationId") Long organizationId, @Param("sortByColumn") String sortByColumn, @Param("sortType") String sortType, @Param("offset") int offset,
    						@Param("limit") int limitCount);
	
    /**
     * 
     * @return int
     */
	int countModulesForStateAdmin(@Param("organizationId") Long organizationId);
    
    
    /**
     * 
     * @param orderByClause 
	 * @return List<Module>
     */
    List<Module> getModules(
    		@Param("organizationId") Long organizationId,
    		@Param("modulesCollectionsCriteriaMap") Map<String,String> modulesCollectionsCriteriaMap,
    		@Param("sortByColumn") String sortByColumn, 
    		@Param("sortType") String sortType, 
    		@Param("offset") Integer offset,
    		@Param("limit") Integer limitCount,
    		@Param("userId") Long userId,
    		@Param("userModulesOnly") boolean userModulesOnly);
    
    /**
     * 
     * @return int
     */
	Integer countModules(
			@Param("organizationId") Long organizationId,
			@Param("modulesCollectionsCriteriaMap") Map<String,String> modulesCollectionsCriteriaMap,
			@Param("userId") Long userId,
    		@Param("userModulesOnly") boolean userModulesOnly);
	
	/**
	 * @param moduleId
	 * @return
	 */
	Module getByModuleId(@Param("moduleId") Long moduleId);
	
	/**
	 * @param moduleId
	 * @return
	 */
	List<Module> getModuleByName(@Param("name") String name);
	
	/**
	 * @param moduleId
	 * @param userId
	 * @return
	 */
	int insertUserModule(Long userId, Long moduleId);
	
	List<Module> findModuleDetailsById(@Param("moduleId") Long moduleId);

	List<Module> getModulesForPDuser(
			@Param("modulesCollectionsCriteriaMap") Map<String,String> modulesCollectionsCriteriaMap,
    		@Param("sortByColumn") String sortByColumn,
    		@Param("sortType") String sortType,
    		@Param("offset") Integer offset,
    		@Param("limit") Integer limitCount,
    		@Param("userId") Long userId,
    		@Param("organizationId") Long organizationId);
}