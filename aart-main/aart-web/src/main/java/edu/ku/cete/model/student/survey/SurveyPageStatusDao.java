package edu.ku.cete.model.student.survey;

import edu.ku.cete.domain.student.survey.SurveyPageStatus;
import edu.ku.cete.domain.student.survey.SurveyPageStatusExample;
import java.util.List;
import org.apache.ibatis.annotations.Param;

public interface SurveyPageStatusDao {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    int countByExample(SurveyPageStatusExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    int deleteByExample(SurveyPageStatusExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    int insert(SurveyPageStatus record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    int insertSelective(SurveyPageStatus record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    List<SurveyPageStatus> selectByExample(SurveyPageStatusExample example);
    
    List<SurveyPageStatus> selectDistinctSurveyStatus(@Param("surveyId") Long surveyId);   

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    SurveyPageStatus selectByPrimaryKey(Long id);
    /**
     * check if for the given page there are questions without any responses.
     * If such questions exist and they do not have a prerequisite, then this section is not completed.
     * In the above case false is returned.
     */
    Boolean checkCompletionBySurveyAndPageNum(
    		@Param("globalPageNum") Integer globalPageNum,@Param("surveyId") Long surveyId, @Param("stateId") Long stateId,
    		@Param("coreSetQuestions") boolean coreSetQuestions);
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    int updateByExampleSelective(@Param("record") SurveyPageStatus record, @Param("example") SurveyPageStatusExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    int updateByExample(@Param("record") SurveyPageStatus record, @Param("example") SurveyPageStatusExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    int updateByPrimaryKeySelective(SurveyPageStatus record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    int updateByPrimaryKey(SurveyPageStatus record);
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.survey_page_status
     *
     * @mbggenerated Wed Jun 05 07:56:10 CDT 2013
     */
    List<Integer> getPageStatusList(@Param("surveyId") Long surveyId);

	List<SurveyPageStatus> getAllSurveyPageStatus(@Param("surveyId") Long surveyId);
}