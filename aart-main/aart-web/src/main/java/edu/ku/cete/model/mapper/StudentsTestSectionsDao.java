package edu.ku.cete.model.mapper;

import java.util.List;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.StudentsTestSections;
import edu.ku.cete.domain.StudentsTestSectionsCriteria;
import edu.ku.cete.domain.StudentsTests;

public interface StudentsTestSectionsDao {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    int countByStudentsTestSectionsCriteria(StudentsTestSectionsCriteria studentsTestSectionsCriteria);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    int deleteByStudentsTestSectionsCriteria(StudentsTestSectionsCriteria studentsTestSectionsCriteria);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    int insert(StudentsTestSections record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    int insertSelective(StudentsTestSections record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    List<StudentsTestSections> selectByStudentsTestSectionsCriteria(StudentsTestSectionsCriteria studentsTestSectionsCriteria);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    StudentsTestSections selectByPrimaryKey(Long id);
    
    /**
     * @param studentsTestsIdsList
     * @return
     */
    List<StudentsTestSections> selectByStudentsTestIdAndStatusId(@Param("studentsTestsIdsList")List<Long> studentsTestsIdsList,
    		@Param("studentsTestSectionsStatusId")Long studentsTestSectionsStatusId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    int updateByStudentsTestSectionsCriteriaSelective(@Param("record") StudentsTestSections record, @Param("studentsTestSectionsCriteria") StudentsTestSectionsCriteria studentsTestSectionsCriteria);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    int updateByStudentsTestSectionsCriteria(@Param("record") StudentsTestSections record, @Param("studentsTestSectionsCriteria") StudentsTestSectionsCriteria studentsTestSectionsCriteria);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    int updateByPrimaryKeySelective(StudentsTestSections record);

    int updateStatusByStudentsTestsIds(@Param("studentsTestSections") StudentsTestSections studentsTestSections,
    		@Param("studentsTestsIdsList")List<Long> studentsTestsIdsList,
    		@Param("studentsTestSectionsStatusId")Long studentsTestSectionsStatusId);
    
    
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstestsections
     *
     * @mbggenerated Wed Dec 12 15:45:42 CST 2012
     */
    int updateByPrimaryKey(StudentsTestSections record);

	/**
	 * Select students test sections in all the given status ids.
	 * @param studentsTestsIdsList
	 * @param allStatusIds
	 * @return
	 */
	List<StudentsTestSections> selectByStudentsTestIdAndStatus(
    		@Param("studentsTestsIdsList")List<Long> studentsTestsIdsList,
    		@Param("statusIds")List<Long> statusIds
			);

	/**
	 * updateStatusByStudentsTestsIds
	 * 
	 * updates the students test section status from the given statuses to 
	 * reactivated status.
	 * 
	 * @param studentTestSection
	 * @param studentTestIds
	 * @param statusIds
	 * @return
	 */
	int updateStatusByStudentTestAndStatus(
			@Param("studentTestSection")StudentsTestSections studentTestSection,
			@Param("studentTestIds")List<Long> studentTestIds,
			@Param("statusIds")List<Long> statusIds);
	
	int updateStatusForReactivationByStudentTest(
			@Param("studentTest")StudentsTests studentTest,
			@Param("studentTestSection")StudentsTestSections studentTestSection,
			@Param("studentIds")List<Long> studentIds,
			@Param("testSessionId")Long testSessionId);
	
	/**
	 * @param studentsTestsIds
	 * @return
	 */
	  int deleteByStudentsTestsIds(@Param("studentsTestsIds") List<Long> studentsTestsIds);

	/**
	 * @param studentsTestId
	 * @return
	 */
	Integer deleteByStudentsTestId(Long studentsTestId);
	
	int unenrollByStudentsTestId(@Param("studentsTestId") Long studentsTestId, @Param("statusCode") String statusCode,
			@Param("userId") Long userId);
	
	int unenrollByStudentsTestSectionsId(@Param("studentTestSectionsId") Long studentTestSectionsId, @Param("statusCode") String statusCode,
			@Param("userId") Long userId);
	
	int updateStatusByStudentTestIds(@Param("studentTestSection")StudentsTestSections studentTestSection,
			@Param("studentTestIds")List<Long> studentTestIds);

	List<StudentsTestSections> selectByStudentsTestsId(@Param("studentsTestId") Long studentsTestsId);

	void updateStatusByStudentAndTestSession(
			@Param("studentTestSection") StudentsTestSections studentTestSection,
			@Param("studentIds") List<Long> studentIds,
			@Param("testSessionId") Long testSessionId);

	void updateStatusAndPreviousStatusByStudentAndTestSession(
			@Param("studentTestSection") StudentsTestSections studentTestSection,
			@Param("studentIds") List<Long> studentIds,
			@Param("testSessionId") Long testSessionId);
	
	List<StudentsTestSections> selectByStudentsIds(@Param("studentsIds") List<Long> studentsIds, @Param("testSessionId") Long testSessionId);
	List<Long> findIdsByStudentsTests(@Param("studentsTestIds") List<Long> studentsTestsIds);
	List<Long> findStudentTestSectionsIdsByStudentsTestsForDeactivation( @Param("studentsTestIds") List<Long> studentsTestIds);

	void deactivateByPrimaryKeyWithStatus(@Param("studentsTestSectionsId") Long studentsTestSectionsId, @Param("newStatusPrefix") String newStatusPrefix, @Param("modifiedUserId") Long modifiedUserId);
    void reactivateByPrimaryKeyForGradeChange(@Param("studentsTestSectionsId")Long studentsTestSectionsId, @Param("modifiedUserId")Long modifiedUserId);
    void reactivateByPrimaryKeyForRosterChange(@Param("studentsTestSectionsId")Long studentsTestSectionsId, @Param("modifiedUserId")Long modifiedUserId);

	void insertInterim(StudentsTestSections sts);
}