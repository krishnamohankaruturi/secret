package edu.ku.cete.model;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.report.InterimStudentReport;
import edu.ku.cete.domain.report.ReportsMedianScore;
import edu.ku.cete.domain.report.StudentReport;
import edu.ku.cete.web.KAPStudentScoreDTO;
import edu.ku.cete.web.StudentReportDTO;

public interface StudentReportMapper {

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studentreport
	 * @mbggenerated  Tue Jul 07 15:11:12 CDT 2015
	 */
	int insert(StudentReport record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studentreport
	 * @mbggenerated  Tue Jul 07 15:11:12 CDT 2015
	 */
	int insertSelective(StudentReport record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studentreport
	 * @mbggenerated  Tue Jul 07 15:11:12 CDT 2015
	 */
	StudentReport selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studentreport
	 * @mbggenerated  Tue Jul 07 15:11:12 CDT 2015
	 */
	int updateByPrimaryKeySelective(StudentReport record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studentreport
	 * @mbggenerated  Tue Jul 07 15:11:12 CDT 2015
	 */
	int updateByPrimaryKey(StudentReport record);

	int deleteSpecificStudents(@Param("assessmentProgramId")Long assessmentProgramId, @Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId, @Param("studentId") Long studentId, @Param("schoolYear") Long schoolYear);
	
	List<ReportsMedianScore> selectAllOrgsFromStudentReport(@Param("assessmentProgramId")Long assessmentProgramId, @Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId, @Param("offset") Integer offset, @Param("pageSize") Integer pageSize);
	
	List<ReportsMedianScore> selectDistinctSchoolIdsFromStudentReport(@Param("assessmentProgramId")Long assessmentProgramId, @Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId, @Param("offset") Integer offset, @Param("pageSize") Integer pageSize);
	
	List<ReportsMedianScore> selectDistinctStateIdsFromStudentReport(@Param("assessmentProgramId")Long assessmentProgramId, @Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId, @Param("offset") Integer offset, @Param("pageSize") Integer pageSize);
	
	List<ReportsMedianScore> selectDistinctDistrictIdsFromStudentReport(@Param("assessmentProgramId")Long assessmentProgramId, @Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId, @Param("offset") Integer offset, @Param("pageSize") Integer pageSize);
	
	List<StudentReport> selectAllStudentsBySchoolAssessmentSubjectGrade(@Param("schoolId") Long schoolId,
			@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear);
	
	List<StudentReport> selectAllStudentsByStateAssessmentSubjectGrade(@Param("stateId") Long stateId,
			@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear);
	
	List<StudentReport> selectAllStudentsByDistrictAssessmentSubjectGrade(@Param("districtId") Long districtId,
			@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear);
	
	
	StudentReport getScaleScoreAndPerformanceLevel(@Param("studentId") Long studentId, @Param("enrollmentId") Long enrollmentId, @Param("stage1TestId") Long stage1TestId,
			@Param("stage2TestId") Long stage2TestId, @Param("gradeId") Long gradeId, @Param("contentAreaId") Long contentAreaId);
	
	Long countByCriteria(Map<String, Object> parameters);
	
	List<StudentReportDTO> selectByCriteria(Map<String, Object> criteria);
	
	int updateStudentReportFilePath(@Param("filePath") String filePath,@Param("generated") Boolean generated, @Param("id") Long id, @Param("batchReportProcessId") Long batchReportProcessId, @Param("attendanceSchoolName") String attendanceSchoolName,@Param("districtName") String districtName, @Param("progressionText") String progressionText);

	StudentReport selectByPrimaryKeyAndUserOrg(@Param("id") Long id, @Param("userOrgId") Long userOrgId);	

	List<Long> getSchoolIdsFromStudentReportByStateIdAssmntProgIdAndSchoolYear(@Param("stateId") Long stateId,@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("currentSchoolYear") Long currentSchoolYear,@Param("gradeCourseAbbrName") String gradeCourseAbbrName,  @Param("offset") Integer offset, @Param("pageSize") Integer pageSize);
	
	List<Long> getDistrictIdsFromStudentReportByStateIdAssmntProgIdAndSchoolYear(@Param("stateId") Long stateId,@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("currentSchoolYear") Long currentSchoolYear,@Param("offset") Integer offset, @Param("pageSize") Integer pageSize);
	

	List<String> geGradeCoursesAbbrNamesByAssmntPrgmAndSchoolYear(@Param("stateId") Long stateId,@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("currentSchoolYear") int currentSchoolYear);

	List<StudentReport> getStudentReportsForSchoolReportPdf(@Param("assessmentProgramId") Long assessmentProgramId, @Param("gradeCourseAbbrName") String gradeCourseAbbrName,
			@Param("schoolYear") Long schoolYear, @Param("attendanceSchoolId") Long attendanceSchoolId);
	
	List<StudentReport> selectAllByAssessmentProgramIdContentAreaIdGradeIdStudentId(@Param("assessmentProgramId") Long assessmentProgramId, @Param("gradeId") Long gradeId,
			@Param("contentAreaId") Long contentAreaId, @Param("studentId") Long studentId,@Param("schoolYear") Long schoolYear);

	StudentReport getPreviousYearReport(StudentReport studentReport);
	
	List<Long> getSchoolIdsFromExternalStudentReportByStateIdAssmntProgIdAndSchoolYear(@Param("stateId") Long stateId,@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("currentSchoolYear") Long currentSchoolYear,@Param("gradeCourseAbbrName") String gradeCourseAbbrName,  @Param("offset") Integer offset, @Param("pageSize") Integer pageSize, @Param("reportType") String  reportType);

	
	List<Long> getDistrictIdsFromExternalStudentReportByStateIdAssmntProgIdAndSchoolYear(@Param("stateId") Long stateId,@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("currentSchoolYear") Long currentSchoolYear, @Param("offset") Integer offset, @Param("pageSize") Integer pageSize, @Param("reportType") String  reportType);

	
	List<StudentReport> getExternalStudentReportsForSchoolReportPdf(@Param("assessmentProgramId") Long assessmentProgramId, @Param("gradeCourseAbbrName") String gradeCourseAbbrName,
			@Param("schoolYear") Long schoolYear, @Param("attendanceSchoolId") Long attendanceSchoolId, @Param("reportType") String  reportType);

	List<String> geGradeCoursesAbbrNamesByAssmntPrgmAndSchoolYearForExternalReport(@Param("stateId") Long stateId,@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("currentSchoolYear") int currentSchoolYear, @Param("reportType") String  reportType);
	
	
	List<StudentReport> selectAllStudentsBySchoolAssmntSubjectGradeForMdptLevel(@Param("schoolId") Long schoolId,
			@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear);
	
	List<StudentReport> selectAllStudentsByStateAssmntSubjectGradeForMdptLevel(@Param("stateId") Long stateId,
			@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear);
	
	List<StudentReport> selectAllStudentsByDistrictAssmntSubjectGradeForMdptLevel(@Param("districtId") Long districtId,
			@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear);
	
	
	List<StudentReport> selectAllStudentsBySchoolAssmntSubjectGradeForCombinedLevel(@Param("schoolId") Long schoolId,
			@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear);
	
	List<StudentReport> selectAllStudentsByStateAssmntSubjectGradeForCombinedLevel(@Param("stateId") Long stateId,
			@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear);
	
	List<StudentReport> selectAllStudentsByDistrictAssmntSubjectGradeForCombinedLevel(@Param("districtId") Long districtId,
			@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear);

	Long getNonScorableMDPTForSCCodes(@Param("studentId") Long studentId,
			@Param("studentPerformanceTestId") Long studentPerformanceTestId);

	List<StudentReport> getExternalStudentReportsForDistrictReportPdf(
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("schoolYear") Long schoolYear,
			@Param("assessmentProgramCode") String assessmentProgramCode,
			@Param("districtId") Long districtId, @Param("reportType") String  reportType);

	List<StudentReport> getStudentReportsForDistrictReportPdf(
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("schoolYear") Long schoolYear,
			@Param("districtId") Long districtId);	
	
	List<Long> getStudentReportSchoolYearsBySubject(@Param("contentAreaId") List<Long> contentAreaId);
	
	List<KAPStudentScoreDTO> generateKAPStudentScoreExtract(@Param("organizationId")Long orgId, @Param("orgType")String orgType, @Param("contentAreaId")List<Long> contentAreaId, 
			@Param("schoolYears")List<Long> schoolYears, @Param("gradeIds")List<String> gradeIds, @Param("includeSubscore")String includeSubscores, @Param("currentSchoolYear")Long currentSchoolYear,
			@Param("stateStudentIdentifier") String stateStudentIdentifier);
	
	List<StudentReport> selectStudentReportsByStudentIdSubjSchYrGrade(@Param("stateStudentIdentifier") String stateStudentIdentifier,
			@Param("contentAreaId")List<Long> contentAreaId, @Param("schoolYears")List<Long> schoolYears, @Param("gradeIds")List<Long> gradeIds);
	

	List<KAPStudentScoreDTO> generateKAPStudentScoreExtractForDistrictUser(@Param("organizationId")Long orgId, @Param("orgType")String orgType, @Param("contentAreaId")List<Long> contentAreaId, 
			@Param("schoolYears")List<Long> schoolYears, @Param("gradeIds")List<String> gradeIds, @Param("includeSubscore")String includeSubscores, @Param("currentSchoolYear")Long currentSchoolYear,
			@Param("stateStudentIdentifier") String stateStudentIdentifier);
	
	int getStudentReportCountByStudentIdSubject(@Param("stateStudentIdentifier") String stateStudentIdentifier,	@Param("contentAreaId")List<Long> contentAreaId);
	
	int getStudentReportCountByStudentIdSubjectUserOrg(@Param("stateStudentIdentifier") String stateStudentIdentifier,	@Param("contentAreaId")List<Long> contentAreaId, @Param("organizationId")Long orgId, @Param("orgType")String orgType);


	List<StudentReport> getStudentReportsForDynamicBundleReport(
			@Param("subjectIds") List<Long> subjectIds, 
			@Param("schoolIds") List<Long> schoolIds, 
			@Param("gradeIds") List<Long> gradeIds,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentProgramCode") String assessmentProgramCode,
			@Param("schoolYear") Long schoolYear,
			@Param("sort1") String sort1,
			@Param("sort2") String sort2,
			@Param("sort3") String sort3);
	
    List<StudentReport> getExternalStudentReportsForDynamicBundleReport(
				@Param("subjectIds") List<Long> subjectIds, 
				@Param("schoolIds") List<Long> schoolIds, 
				@Param("gradeIds") List<Long> gradeIds,
				@Param("assessmentProgramId") Long assessmentProgramId,
				@Param("assessmentProgramCode") String assessmentProgramCode,
				@Param("schoolYear") Long schoolYear,
				@Param("sort1") String sort1,
				@Param("sort2") String sort2,
				@Param("sort3") String sort3,
				@Param("reportType") String reportType);
	
	List<Long> getStudentsForReportProcessByStudentId(@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear,
			@Param("testingProgramId") Long testingProgramId);
	
	int updateStudentReportReprocessByStudentId(StudentReport record);
	
	int updateStudentReportReprocessByStudentIdByIsrOption(@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("contentAreaId")Long contentAreaId, 
			@Param("gradeId")Long gradeId,
			@Param("schoolYear") Long schoolYear, 
			@Param("isrByStudentIdOption") String isrByStudentIdOption,
			@Param("testingProgramId") Long testingProgramId);
	
	int UpdateStudentReportReprocessStatus(@Param("studentReportReprocessId") Long studentReportReprocessId,@Param("studentReportReprocessStatus") Boolean studentReportReprocessStatus);

	int getCountOfStudentReports(@Param("subjectIds") List<Long> subjectIds, 
			@Param("schoolIds") List<Long> schoolIds, 
			@Param("gradeIds") List<Long> gradeIds,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentProgramCode") String assessmentProgramCode,
			@Param("schoolYear") Long schoolYear,
			@Param("sort1") String sort1,
			@Param("sort2") String sort2,
			@Param("sort3") String sort3);
	
	int getCountOfExternalStudentReports(@Param("subjectIds") List<Long> subjectIds, 
			@Param("schoolIds") List<Long> schoolIds, 
			@Param("gradeIds") List<Long> gradeIds,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentProgramCode") String assessmentProgramCode,
			@Param("schoolYear") Long schoolYear,
			@Param("sort1") String sort1,
			@Param("sort2") String sort2,
			@Param("sort3") String sort3,
			@Param("reportType") String reportType);
	
	List<Long> getSchoolIdsForStudentSummaryBundledReports(@Param("stateId") Long stateId,
			@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("currentSchoolYear") Long currentSchoolYear,
			@Param("gradeCourseAbbrName") String gradeCourseAbbrName,
			@Param("reportType") String reportType,
			@Param("offset") Integer offset, 
			@Param("pageSize") Integer pageSize);
	
	List<String> geGradeCoursesAbbrNamesForStudentSummaryBundledReports(@Param("stateId") Long stateId,@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("currentSchoolYear") int currentSchoolYear, @Param("reportType") String reportType);
	
	List<Long> getDistrictIdsForStudentSummaryBundledReports(@Param("stateId") Long stateId, @Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("currentSchoolYear") Long currentSchoolYear, @Param("reportType") String reportType, @Param("offset") Integer offset, @Param("pageSize") Integer pageSize);
	
	List<StudentReport> getExternalStudentReportsForStudentSummaryBundledReport(@Param("assessmentProgramId") Long assessmentProgramId, @Param("gradeCourseAbbrName") String gradeCourseAbbrName,
			@Param("schoolYear") Long schoolYear, @Param("attendanceSchoolId") Long attendanceSchoolId, @Param("reportType") String reportType);
	
	List<StudentReport> getExternalStudentReportsForStudentSummaryDistrictBundledReport(
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("schoolYear") Long schoolYear,
			@Param("assessmentProgramCode") String assessmentProgramCode,
			@Param("districtId") Long districtId,
			@Param("reportType") String reportType);
	
	List<Long> getDistrictIdsForSchoolSummaryBundledReports(@Param("stateId") Long stateId, @Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("currentSchoolYear") Long currentSchoolYear, @Param("reportType") String reportType, @Param("offset") Integer offset, @Param("pageSize") Integer pageSize);
	
	List<StudentReport> getExternalStudentReportsForSchoolSummaryDistrictBundledReport(
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("schoolYear") Long schoolYear,
			@Param("assessmentProgramCode") String assessmentProgramCode,
			@Param("districtId") Long districtId,
			@Param("reportType") String reportType);
	
	 List<StudentReport> getExternalStudentSummaryReportsForDynamicBundleReport(
				@Param("schoolIds") List<Long> schoolIds, 
				@Param("gradeIds") List<Long> gradeIds,
				@Param("assessmentProgramId") Long assessmentProgramId,
				@Param("assessmentProgramCode") String assessmentProgramCode,
				@Param("schoolYear") Long schoolYear,
				@Param("sort1") String sort1,
				@Param("sort2") String sort2,
				@Param("sort3") String sort3,
				@Param("reportType") String reportType);
	 
	 int getCountOfExternalStudentSummaryReports(@Param("schoolIds") List<Long> schoolIds, 
				@Param("gradeIds") List<Long> gradeIds,
				@Param("assessmentProgramId") Long assessmentProgramId,
				@Param("assessmentProgramCode") String assessmentProgramCode,
				@Param("schoolYear") Long schoolYear,
				@Param("sort1") String sort1,
				@Param("sort2") String sort2,
				@Param("sort3") String sort3,
				@Param("reportType") String reportType);
	 
	 int updatePredictiveStudentReportByStudentId(InterimStudentReport record);
	 
	 int updateStudentReportReprocessByStudentByIsrOption(@Param("studentId") Long studentId,
				@Param("assessmentProgramId") Long assessmentProgramId,
				@Param("contentAreaId") Long contentAreaId, 
				@Param("gradeId") Long gradeId,
				@Param("schoolYear") Long schoolYear, 
				@Param("isrByStudentIdOption") String isrByStudentIdOption,
				@Param("testingProgramId") Long testingProgramId);

	List<Long> getStudentIdsFromStudentReport(@Param("assessmentProgramId") Long assessmentProgramId,
			    @Param("schoolYear") Long schoolYear, 
			    @Param("stateId") Long stateId, 
			    @Param("gradeCourseId") Long gradeCourseId,
			    @Param("contentAreaId") Long contentAreaId, 
			    @Param("processByStudentId") String processByStudentId,
			    @Param("reprocessEntireDistrict") String reprocessEntireDistrict, 
			    @Param("offset") int offset, 
			    @Param("pageSize") int pageSize);

	List<StudentReport> getStudentForKELPAReport(@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("schoolYear") Long schoolYear, 
			@Param("stateId") Long stateId, 
			@Param("studentId") Long studentId,
			@Param("processByStudentId") String processByStudentId,
			@Param("reprocessEntireDistrict") String reprocessEntireDistrict,
			@Param("gradeCourseId") Long gradeCourseId, 
			@Param("contentAreaId") Long contentAreaId
			);
}