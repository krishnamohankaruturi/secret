package edu.ku.cete.model;

import java.math.BigDecimal;
import java.util.List;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.report.RawToScaleScores;

public interface RawToScaleScoresMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table rawtoscalescores
	 * @mbggenerated  Mon Mar 21 02:47:21 CDT 2016
	 */
	int insert(RawToScaleScores record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table rawtoscalescores
	 * @mbggenerated  Mon Mar 21 02:47:21 CDT 2016
	 */
	int insertSelective(RawToScaleScores record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table rawtoscalescores
	 * @mbggenerated  Mon Mar 21 02:47:21 CDT 2016
	 */
	RawToScaleScores selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table rawtoscalescores
	 * @mbggenerated  Mon Mar 21 02:47:21 CDT 2016
	 */
	int updateByPrimaryKeySelective(RawToScaleScores record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table rawtoscalescores
	 * @mbggenerated  Mon Mar 21 02:47:21 CDT 2016
	 */
	int updateByPrimaryKey(RawToScaleScores record);

	int deleteAll(@Param("schoolYear") Long schoolYear);
	
	int deleteRawToScaleScores(@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("subjectId") Long subjectId, 
			@Param("schoolYear") Long schoolYear, 
			@Param("testingProgramId") Long testingProgramId, 
			@Param("reportCycle") String reportCycle);
	
	int checkDuplicateTestIdsWithRawScore(@Param("testId1")Long testId1, @Param("testId2")Long testId2,@Param("testId3")Long testId3, @Param("testId4")Long testId4,
			@Param("performanceTestId")Long performanceTestId, 
			@Param("rawScore")BigDecimal rawScore,  @Param("scaleScore")Long scaleScore, 
			@Param("assessmentProgramId") Long assessmentProgramId, @Param("subjectId") Long subjectId, @Param("gradeId") Long gradeId,
			@Param("domain") String domain,
			@Param("schoolYear") Long schoolYear, @Param("testingProgramName") String testingProgramName, @Param("reportCycle") String reportCycle);
	
	List<Long> selectDistinctTestIds(@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("subjectId") Long subjectId, 
			@Param("gradeId") Long gradeId, 
			@Param("schoolYear") Long schoolYear, 
			@Param("testingProgramId") Long testingProgramId, 
			@Param("reportCycle") String reportCycle);
	
	RawToScaleScores selectByTestId1TestId2RawScore(@Param("testIds") List<Long> testIds, @Param("rawScore")BigDecimal rawScore, 
			@Param("assessmentProgramId") Long assessmentProgramId, @Param("subjectId") Long subjectId, @Param("schoolYear") Long schoolYear);
	
	RawToScaleScores selectByTestIdsAPSubjIdGradeId(@Param("testIds") List<Long> testIds, 
			@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("subjectId") Long subjectId, 
			@Param("gradeId") Long gradeId, 
			@Param("schoolYear") Long schoolYear, 
			@Param("testId1")Long testId1,
			@Param("testId2")Long testId2,
			@Param("testId3")Long testId3, 
			@Param("testId4")Long testId4,
			@Param("performanceTestId")Long performanceTestId, 
			@Param("rawScore")BigDecimal rawScore, 
			@Param("testingProgramId") Long testingProgramId, 
			@Param("reportCycle") String reportCycle);
	
	RawToScaleScores getFirstIncludePerformanceFlagForAssessmentProgramSubjectGrade(@Param("assessmentProgramId") Long assessmentProgramId, @Param("subjectId") Long subjectId, 
			@Param("gradeId") Long gradeId, @Param("schoolYear") Long schoolYear, @Param("testingProgramName") String testingProgramName, @Param("reportCycle") String reportCycle);
	
}