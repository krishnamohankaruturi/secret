package edu.ku.cete.model;

import java.util.List;
import java.util.Set;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.StudentTracker;
import edu.ku.cete.domain.content.ContentArea;

public interface StudentTrackerMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studenttracker
	 * @mbggenerated  Fri Nov 20 12:26:27 CST 2015
	 */
	int insert(StudentTracker record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studenttracker
	 * @mbggenerated  Fri Nov 20 12:26:27 CST 2015
	 */
	int insertSelective(StudentTracker record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studenttracker
	 * @mbggenerated  Fri Nov 20 12:26:27 CST 2015
	 */
	StudentTracker selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studenttracker
	 * @mbggenerated  Fri Nov 20 12:26:27 CST 2015
	 */
	int updateByPrimaryKeySelective(StudentTracker record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studenttracker
	 * @mbggenerated  Fri Nov 20 12:26:27 CST 2015
	 */
	int updateByPrimaryKey(StudentTracker record);

	/**
     * @author bmohanty_sta
     * Biyatpragyan Mohanty : bmohanty_sta@ku.edu : US15536 : Student Tracker - Simple Version 1 (preliminary)
     * Get all untracked students for current school year, subject, contracting organization and DLM assessment program
     * @param currentSchoolYear
     * @param contentArea
     * @param contentAreaId
     * @param stateOrganizationId
     * @param assessmentProgramId
     * @return
     */
    List<StudentTracker> getUntrackedStudents(@Param("currentSchoolYear") Long currentSchoolYear,
	@Param("contentArea") ContentArea contentArea, 
	@Param("contractingOrganizationId") Long contractingOrganizationId, @Param("assessmentProgramId") Long assessmentProgramId, 
	@Param("operationalTestWindowId") Long operationalTestWindowId, 
	@Param("offset") Integer offset, @Param("pageSize") Integer pageSize);
    
    List<StudentTracker> getOnlyUntrackedStudents(@Param("currentSchoolYear") Long currentSchoolYear,
	@Param("contentArea") ContentArea contentArea, 
	@Param("contractingOrganizationId") Long contractingOrganizationId, @Param("assessmentProgramId") Long assessmentProgramId, @Param("operationalTestWindowId") Long operationalTestWindowId, 
	@Param("offset") Integer offset, @Param("pageSize") Integer pageSize);    
    
    List<StudentTracker> getTrackedStudents(@Param("currentSchoolYear") Long currentSchoolYear,
    		 @Param("contentAreaId") Long contentAreaId, @Param("contractingOrganizationId") Long contractingOrganizationId,
    		 @Param("assessmentProgramId") Long assessmentProgramId, @Param("poolType") String poolType, @Param("operationalTestWindowId") Long operationalTestWindowId,
    		 @Param("isInterim") boolean isInterim, @Param("offset") Integer offset, @Param("pageSize") Integer pageSize);
 	
    StudentTracker selectByStudentAndContentArea(@Param("studentId") Long studentId, @Param("contentAreaId") Long contentAreaId, 
    		@Param("operationalWindowId") Long operationalWindowId, @Param("courseId") Long courseId, @Param("schoolYear") Long schoolYear);
    
    int changeStatusToUnTrackedByIds(@Param("studentTrackerIds") Set<Long> studentTrackerIds, 
			@Param("userId") Long userId);
}