package edu.ku.cete.model;

import edu.ku.cete.domain.content.GradeCourse;
import edu.ku.cete.domain.content.GradeCourseExample;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

public interface GradeCourseDao {
	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.gradecourse
	 *
	 * @mbggenerated Wed Sep 12 13:56:00 CDT 2012
	 */
	int countByExample(GradeCourseExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.gradecourse
	 *
	 * @mbggenerated Wed Sep 12 13:56:00 CDT 2012
	 */
	int deleteByExample(GradeCourseExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.gradecourse
	 *
	 * @mbggenerated Wed Sep 12 13:56:00 CDT 2012
	 */
	int deleteByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.gradecourse
	 *
	 * @mbggenerated Wed Sep 12 13:56:00 CDT 2012
	 */
	List<GradeCourse> selectByExample(GradeCourseExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.gradecourse
	 *
	 * @mbggenerated Wed Sep 12 13:56:00 CDT 2012
	 */
	GradeCourse selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.gradecourse
	 *
	 * @mbggenerated Wed Sep 12 13:56:00 CDT 2012
	 */
	int updateByExampleSelective(@Param("record") GradeCourse record, @Param("example") GradeCourseExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.gradecourse
	 *
	 * @mbggenerated Wed Sep 12 13:56:00 CDT 2012
	 */
	int updateByExample(@Param("record") GradeCourse record, @Param("example") GradeCourseExample example);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.gradecourse
	 *
	 * @mbggenerated Wed Sep 12 13:56:00 CDT 2012
	 */
	int updateByPrimaryKeySelective(GradeCourse record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.gradecourse
	 *
	 * @mbggenerated Wed Sep 12 13:56:00 CDT 2012
	 */
	int updateByPrimaryKey(GradeCourse record);

	/**
	 * Finds GradeCourses by their unique key or name and origination code.
	 * 
	 * @param name
	 * @return
	 */
	GradeCourse findByName(@Param("name") String name);

	/**
	 *
	 * @param assessmentProgramId
	 *            long
	 * @return List<GradeCourse>
	 */
	List<GradeCourse> findByAssessmentProgram(@Param("assessmentProgramId") long assessmentProgramId);

	/**
	 *
	 * @return long
	 */
	long lastid();

	/**
	 *
	 * @param assessmentId
	 *            Long
	 * @return List<GradeCourse>
	 */
	List<GradeCourse> findByAssessmentId(@Param("assessmentId") Long assessmentId);

	/**
	 * Finds GradeCourses by their unique code from the new assessment program
	 * grades table
	 * 
	 * @param code
	 * @return {@link GradeCourse}
	 */
	GradeCourse findByGradeCode(@Param("code") String code);

	/**
	 * find the assessmentprogramgrades id by the code.
	 * 
	 * @param code
	 * @return
	 */
	Long findAssessmentProgramGradesIDByCode(@Param("code") String code);

	/**
	 * @return
	 */
	List<GradeCourse> selectAllGradeCourses();

	/**
	 * @return
	 */
	List<GradeCourse> selectGradeCourseByContentAreaId(@Param("contentAreaId") Long contentAreaId);

	/**
	 * 
	 * @param subjectAreaId
	 * @return
	 */
	List<GradeCourse> selectGradeCourseByTestTypeIdSubjectAreaId(@Param("subjectAreaId") Long subjectAreaId,
			@Param("testTypeId") Long testTypeId);

	List<GradeCourse> findByTestTypeAndContentArea(@Param("contentAreaId") Long contentAreaId,
			@Param("testTypeId") Long testTypeId, @Param("assessmentId") Long assessmentId);

	List<GradeCourse> selectGradeCourseOfKansasBreakDay();

	/**
	 * 
	 * @param gradeCourseId
	 * @return
	 */

	String findGradeCodeByGradeCourseId(@Param("gradeCourseId") Long gradeCourseId);

	List<GradeCourse> findAllIndependentGrades();

	GradeCourse findIndependentGradeByAbbreviatedName(@Param("abbreviatedName") String abbreviatedName);

	GradeCourse basicFindIndependentGradeByAbbreviatedName(@Param("abbreviatedName") String abbreviatedName);
	
	GradeCourse findByContentAreaAndAbbreviatedName(@Param("contentAreaId") Long contentAreaId,
			@Param("abbreviatedName") String abbreviatedName);

	/**
	 * Biyatpragyan Mohanty : bmohanty_sta@ku.edu : US15421 : Roster - refactor
	 * Add Roster manually page Get all courses that are related a content area,
	 * This is achieved by getting the gradecourse data that has course column
	 * as true i.e. they are only courses.
	 * 
	 * @param contentAreaId
	 * @return
	 */
	List<GradeCourse> findCoursesByContentArea(@Param("contentAreaId") Long contentAreaId);

	/**
	 * Venkata Krishna Jagarlamudi: US15408 : Roster - Upload enhancements To
	 * get the valid course list associated to the content area to validate the
	 * course area passed in roster file
	 * 
	 * @param contentAreaId
	 * @return courses list
	 */
	List<String> getCourseNamesByContentAreaId(@Param("contentAreaId") Long contentAreaId);

	List<GradeCourse> selectGradeCourseByContentAreaIdForTestCoordination(
			@Param("assessmentProgramId") Long assessmentProgramId, @Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId);

	List<GradeCourse> selectGradeCourseByContentAreaIdForTestManagement(
			@Param("assessmentProgramId") Long assessmentProgramId, @Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId);

	List<GradeCourse> findGradesByContentAreaAndAssessmentProgram(
			@Param("assessmentProgramId") Long assessmentProgramId, @Param("contentAreaId") Long contentAreaId);

	List<GradeCourse> getGradesWhereReportsHaveProcessed(Map<String, Object> parameters);

	List<GradeCourse> selectOrgGradeCourses(Long schoolId);

	List<GradeCourse> getCoursesListByOtwId(@Param("operationalTestWindowId") Long operationalTestWindowId);

	List<GradeCourse> getDistinctGradesByAssessmentPrgmId(@Param("assessmentProgramId") Long assessmentProgramId);
	
	List<GradeCourse> getDistinctGradesByAssessmentPrgmIdBanded(@Param("assessmentProgramId") Long assessmentProgramId);

	List<GradeCourse> getGradesUsingAssessmentProgramAndCourseForExternalReport(
			@Param("assessmentProgramId") Long assessmentProgramId, @Param("contentAreaId") Long contentAreaId,
			@Param("assessmentCode") String assessmentCode, @Param("reportType") String reportType, @Param("reportYear") Long reportYear);

	List<GradeCourse> getGradeCourse();

	List<GradeCourse> getGradeCourseInterim(@Param("contentAreaId") Long contentAreaId, @Param("purpose") Long purpose,
			@Param("isInterim") Boolean isInterim, @Param("organizationId") Long organizationId,
			@Param("assessmentProgramId") Long assessmentProgramId);

	List<GradeCourse> findGradesForStudentScoreExtract(@Param("contentAreaId") List<Long> contentAreaId);



	List<GradeCourse> getGradesForItiBPCoverageExtract(@Param("contentAreaId") Long contentAreaId,
			@Param("narrowOrgId") Long narrowOrgId, @Param("schoolYear") Long schoolYear,
			@Param("isTeacher") boolean isTeacher, @Param("educatorId") Long educatorId);

	List<GradeCourse> getGradesForBundledReporting(@Param("districtId") Long districtId,
			@Param("schoolIds") Long[] schoolIds, @Param("subjectIds") Long[] subjectIds,
			@Param("assessmentProgId") Long assessmentProgId, @Param("assessmentProgCode") String assessmentProgCode,
			@Param("schoolYear") int schoolYear, @Param("reportTypeCode") String reportTypeCode);

	GradeCourse selectGradeByAbbreviatedNameAndContentAreaId(@Param("abbreviatedName") String abbreviatedName,
			@Param("contentAreaId") Long contentAreaId);

	GradeCourse findByContentAreaAbbreviatedNameAndGradeCourseAbbreviatedName(
			@Param("contentAreaAbbreviatedName") String contentAreaAbbreviatedName,
			@Param("gradeCourseAbbreviatedName") String gradeCourseAbbreviatedName);

	List<GradeCourse> getGradesForDynamicStudentSummaryBundledReport(@Param("districtId") Long districtId,
			@Param("schoolIds") Long[] schoolIds, @Param("assessmentProgId") Long assessmentProgId,
			@Param("assessmentProgCode") String assessmentProgCode, @Param("schoolYear") int schoolYear);

	List<GradeCourse> findGradeByAbbreviatedName(@Param("abbreviatedName") String currentGradelevel);

	List<GradeCourse> selectAllGradeCoursesDropdown(@Param("assessmentProgramId") Long currentAssessmentProgramId);

	GradeCourse getGradesForScoring(@Param("abbreviatedName") String abbreviatedName);

	List<GradeCourse> getGradesForReportGeneration(@Param("contentAreaId") Long subjectId,
			@Param("assessmentProgramId") Long assessmentProgramId, @Param("schoolYear") Long schoolyear, @Param("stateId") Long stateId);
	
	List<GradeCourse> findByContentAreaId(@Param("contentAreaId") Long contentAreaId);

	List<GradeCourse> getGradeBandsByContentAreaIdAndOTWId(@Param("operationalTestWindowId") Long operationalTestWindowId,
			@Param("contentAreaId") Long contentAreaId);
	List<GradeCourse>  getGradeCourseToGradeBandMap(@Param("operationalTestWindowId") Long operationalTestWindowId,
			@Param("contentAreaId") Long contentAreaId);

	GradeCourse getByEnrollmentsRostersId(Long enrollmentsRostersId);
	
	List<GradeCourse>  getGradeBandsBySchoolIDAndAssesmentProgrammIDAndYear(@Param("schoolID") Long schoolID,
			@Param("assessmentProgramId") Long assessmentProgramId, @Param("schoolYear") Long schoolYear,
			@Param("teacherID") Long teacherID);
}