package edu.ku.cete.model;

import java.util.List;
import java.util.Map;
import org.apache.ibatis.annotations.Param;
import edu.ku.cete.domain.Externalstudentreports;
import edu.ku.cete.report.domain.ExternalStudentReportResults;
import edu.ku.cete.web.ExternalStudentReportDTO;

public interface ExternalstudentreportsMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table externalstudentreports
	 * @mbggenerated  Tue May 16 10:20:24 CDT 2017
	 */
	int insert(Externalstudentreports record);
	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table externalstudentreports
	 * @mbggenerated  Tue May 16 10:20:24 CDT 2017
	 */
	int insertSelective(Externalstudentreports record);
	List<ExternalStudentReportDTO> selectByCriteria(Map<String, Object> criteria);
    Long countByCriteria(Map<String, Object> parameters);
	
    Externalstudentreports selectByPrimaryKeyAndUserOrg(@Param("id") Long id, @Param("userOrgId") Long userOrgId);
    
    List<ExternalStudentReportDTO> selectByCriteriaForTeacherRoster(Map<String, Object> criteria);
    Long countByCriteriaForTeacherRoster(Map<String, Object> parameters);
    
    List<ExternalStudentReportDTO> getExternalStudentSummaryReports(Map<String, Object> criteria);
    
    Long countOfStudentSummaryReports(Map<String, Object> parameters);
    
    List<ExternalStudentReportDTO> getStudentSummaryReportsByRosterId(Map<String, Object> criteria);
 
    Long countOfStudentSummaryReportsByRosterId(Map<String, Object> parameters);
    
	int deleteByStateSchoolYearAssessmentProgramReportType(@Param("assessmentProgramId") Long assessmentProgramId,@Param("schoolYear") Long schoolYear, @Param("stateId") Long stateId,@Param("reportType") String reportType);
	
	int insertResults(ExternalStudentReportResults externalStudentReportResults);
	
	int deleteExternalStudentReportResults(@Param("stateId") Long stateId, @Param("assessmentProgramId")Long assessmentProgramId,
			@Param("subjectId") Long subjectId,@Param("schoolYear") Long schoolYear,@Param("testingProgramId") Long testingProgramId,
			@Param("reportCycle") String reportCycle);

	List<String> getDistinctAssessmentCode(@Param("assessmentProgramId") Long assessmentProgramId,@Param("stateId") Long stateId, @Param("schoolYear") Long schoolYear,@Param("testingProgramId") Long testingProgramId,@Param("reportCycle") String reportCycle, @Param("gradeCourseId") Long gradeCourseId, @Param("contentAreaId") Long contentAreaId);
		
	List<Long> getStudentIdsForReportGeneration(@Param("assessmentProgramId") Long assessmentProgramId,@Param("schoolYear") Long schoolYear,@Param("stateId") Long stateId,@Param("assessmentCode") String assessmentCode, @Param("reportCycle") String reportCycle, @Param("testingProgramId") Long testingProgramId, @Param("gradeCourseId") Long gradeCourseId, @Param("contentAreaId") Long contentAreaId, @Param("processByStudentId") String processByStudentId,@Param("reprocessEntireDistrict") String reprocessEntireDistrict, @Param("offset") Integer offset,@Param("pageSize") Integer pageSize);
	
	ExternalStudentReportDTO getStudentForReportGeneration(@Param("assessmentProgramId") Long assessmentProgramId,@Param("schoolYear") Long schoolYear,@Param("stateId") Long stateId,@Param("assessmentCode") String assessmentCode,  @Param("reportCycle") String reportCycle, @Param("testingProgramId") Long testingProgramId, @Param("processByStudentId")  String processByStudentId, @Param("reprocessEntireDistrict")  String reprocessEntireDistrict, @Param("studentId") Long studentId);
	
	void updateStudentReportFilePath(ExternalStudentReportDTO externalStudentReportDTO);
	
	void updateAllExternalStudentReportFilePath(@Param("assessmentProgramId") Long assessmentProgramId, @Param("subjectId") Long subjectId, @Param("gradeId") Long gradeId,@Param("schoolYear") Long schoolYear,@Param("reportCycle") String reportCycle, @Param("testingProgramId") Long testingProgramId, @Param("organizationId") Long organizationId, @Param("reportType") String reportType, @Param("userId")  Long userId);
	
	List<ExternalStudentReportDTO> selectAllExternalStudentReports(@Param("assessmentProgramId") Long assessmentProgramId,@Param("gradeId") Long gradeId,@Param("contentAreaId") Long contentAreaId,@Param("organizationId") Long organizationId,@Param("schoolYear") Long schoolYear, @Param("reportCycle") String reportCycle, @Param("testingProgramId") Long testingProgramId, @Param("reportType") String reportType);
	Integer updateResults(
			ExternalStudentReportResults externalStudentReportResults);
	
}