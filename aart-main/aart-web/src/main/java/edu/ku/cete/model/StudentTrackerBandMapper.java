package edu.ku.cete.model;

import java.util.List;
import java.util.Set;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.StudentTrackerBand;
import edu.ku.cete.domain.test.ContentFrameworkDetail;

public interface StudentTrackerBandMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studenttrackerband
	 * @mbggenerated  Thu Nov 19 12:00:48 CST 2015
	 */
	int insert(StudentTrackerBand record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studenttrackerband
	 * @mbggenerated  Thu Nov 19 12:00:48 CST 2015
	 */
	int insertSelective(StudentTrackerBand record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studenttrackerband
	 * @mbggenerated  Thu Nov 19 12:00:48 CST 2015
	 */
	StudentTrackerBand selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studenttrackerband
	 * @mbggenerated  Thu Nov 19 12:00:48 CST 2015
	 */
	int updateByPrimaryKeySelective(StudentTrackerBand record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table studenttrackerband
	 * @mbggenerated  Thu Nov 19 12:00:48 CST 2015
	 */
	int updateByPrimaryKey(StudentTrackerBand record);

	StudentTrackerBand selectLatestWithTestSessionByStudentTracker(@Param("studentTrackerId") Long studentTrackerId, 
			@Param("testSpecId") Long testSpecId, @Param("operationalWindowId") Long operationalWindowId);
	
	StudentTrackerBand selectLatestByStudentTracker(@Param("studentTrackerId") Long studentTrackerId);	
	
	List<StudentTrackerBand> selectByStudentId(@Param("studentId") Long studentId);
		
	List<StudentTrackerBand> selectByStudentIdWithActiveOTW(@Param("studentId") Long studentId);
	
	int countBandsByStudentTracker(@Param("studentTrackerId") Long studentTrackerId, 
			@Param("testSpecificationId") Long testSpecificationId, @Param("operationalWindowId") Long operationalWindowId);
	
	List<String> selectEEsByStudentTracker(@Param("studentTrackerId") Long studentTrackerId, 
			@Param("testSpecificationId") Long testSpecificationId,@Param("operationalWindowId") Long operationalWindowId );
	
	int inactiveByIds(@Param("studentTrackerBandIds") Set<Long> studentTrackerBandIds, 
			@Param("userId") Long userId);
	int reactivateByIds(@Param("studentTrackerBandIds") Set<Long> studentTrackerBandIds, 
			@Param("userId") Long userId);
	
	int clearTestSessionByStudentIdAndTestSessionId(@Param("studentId") Long studentId, 
			@Param("testSessionId") Long testSessionId, @Param("userId") Long userId);

	List<Long> findStudentTrackerBandsByStudentAndTestSession( @Param("studentId") Long studentId,  @Param("testSessionIds") List<Long> testSessionIds,  @Param("activeFlag") boolean activeFlag);	
	List<Long> getBandsForStudentAndContentArea( @Param("studentId") Long studentId, @Param("contentAreaId") Long contentAreaId);
	List<StudentTrackerBand> selectByPrimaryKeys( @Param("studentTrackerIds") List<Long> studentTrackerIds);

	List<StudentTrackerBand> getStudentTrackerBandByFieldTestEEs(@Param("studentTrackerId") Long studentTrackerId, 
			@Param("listOfContentCodesInFieldTests") List<ContentFrameworkDetail> listOfContentCodesInFieldTests);
}