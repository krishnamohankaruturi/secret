package edu.ku.cete.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import edu.ku.cete.domain.common.Assessment;
import edu.ku.cete.domain.common.AssessmentExample;
import edu.ku.cete.domain.security.TestingProgram;
import edu.ku.cete.domain.security.TestingProgramExample;
import edu.ku.cete.model.announcements.CMStateDAO;
import edu.ku.cete.model.common.AssessmentDao;
import edu.ku.cete.model.security.TestingProgramDao;
import edu.ku.cete.service.AssessmentService;
import edu.ku.cete.util.ParsingConstants;
import edu.ku.cete.util.RecordSaveStatus;
import edu.ku.cete.util.UploadSpecification;

/**
 * @author nicholas.studt
 */
@Service
@Transactional(readOnly = true, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
public class AssessmentServiceImpl implements AssessmentService {

	/** Generated Serial. */
	private static final long serialVersionUID = 2735963534122808411L;
	/**
	 * logger.
	 */
	private static final Log LOGGER = LogFactory.getLog(AssessmentServiceImpl.class);

	@Value("${UnKnownTestingProgram}")
	private String UnKnownTestingProgram;

	/** AssessmentDao holder. */
	@Autowired
	private AssessmentDao assessmentDao;

	@Autowired
	private CMStateDAO cmOAPDAO;
	/** TestingProgramDao holder. */
	@Autowired
	private TestingProgramDao testingProgramDao;
	@Autowired
	private UploadSpecification uploadSpecification;

	/**
	 * @return the assessmentDao
	 */
	public final AssessmentDao getAssessmentDao() {
		return assessmentDao;
	}

	/**
	 * @param newAssessmentDao
	 *            the assessmentDao to set
	 */
	public final void setAssessmentDao(final AssessmentDao newAssessmentDao) {
		this.assessmentDao = newAssessmentDao;
	}

	/**
	 * @return the uploadSpecification
	 */
	public UploadSpecification getUploadSpecification() {
		return uploadSpecification;
	}

	/**
	 * @param uploadSpecification
	 *            the uploadSpecification to set
	 */
	public void setUploadSpecification(UploadSpecification uploadSpecification) {
		this.uploadSpecification = uploadSpecification;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.assessment
	 *
	 * @mbggenerated Mon Jun 04 11:52:02 CDT 2012
	 */
	public int countByExample(AssessmentExample example) {
		return assessmentDao.countByExample(example);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.assessment
	 *
	 * @mbggenerated Mon Jun 04 11:52:02 CDT 2012
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public int deleteByExample(AssessmentExample example) {
		return assessmentDao.deleteByExample(example);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.assessment
	 *
	 * @mbggenerated Mon Jun 04 11:52:02 CDT 2012
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public int deleteByPrimaryKey(Assessment key) {
		return assessmentDao.deleteByPrimaryKey(key);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.assessment
	 *
	 * @mbggenerated Mon Jun 04 11:52:02 CDT 2012
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public Assessment insert(Assessment record) {
		assessmentDao.insert(record);
		return record;
	}

	/**
	 * testType cannot be null.
	 */
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public Assessment insertIfNotPresent(String assessmentCode) {
		AssessmentExample assessmentExample = new AssessmentExample();
		Assessment assessment = null;
		// case conversion is done because test subject name ,
		// test type name are converted in to caps before inserting.
		// TODO change it to assessment code
		assessmentExample.createCriteria().andAssessmentCodeEqualTo(assessmentCode);
		List<Assessment> assessments = assessmentDao.selectByExample(assessmentExample);
		if (assessments != null && CollectionUtils.isNotEmpty(assessments)) {
			if (assessments.size() == 1) {
				assessment = assessments.get(0);
				assessment.setSaveStatus(RecordSaveStatus.ASSESSMENT_FOUND);
			} else {
				LOGGER.debug("Multiple assessments found for " + assessmentCode + " and are " + assessments);
				assessment = assessments.get(0);
				assessment.setSaveStatus(RecordSaveStatus.MULTIPLE_ASSESSMENTS_FOUND);
			}
		} else {
			LOGGER.debug("No assessments found for " + assessmentCode);

			// null check is not necessary because this testing program has
			// to reside for the application to function.
			// no check on unique list because of unique constraint.
			TestingProgramExample testingProgramExample = new TestingProgramExample();
			testingProgramExample.createCriteria().andProgramNameEqualTo(UnKnownTestingProgram);
			List<TestingProgram> testingPrograms = testingProgramDao.selectByExample(testingProgramExample);

			assessment = new Assessment();
			assessment.setTestingProgramId(testingPrograms.get(0).getId());
			assessment.setAssessmentName(assessmentCode);
			assessment.setAssessmentCode(assessmentCode);
			assessment.setAssessmentDescription(ParsingConstants.CREATED_WHEN_UPLOAD);
			assessmentDao.insert(assessment);
			assessment.setId(assessmentDao.lastid());
		}
		return assessment;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * edu.ku.cete.service.AssessmentService#saveAssessment(edu.ku.cete.domain.
	 * common.Assessment)
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public Assessment saveAssessment(Assessment assessment) {
		AssessmentExample assessmentExample = new AssessmentExample();
		// case conversion is done because test subject name ,
		// test type name are converted in to caps before inserting.
		// TODO change it to assessment code
		assessmentExample.createCriteria().andAssessmentCodeEqualTo(assessment.getAssessmentCode());
		List<Assessment> assessments = assessmentDao.selectByExample(assessmentExample);
		if (assessments != null && CollectionUtils.isNotEmpty(assessments)) {
			if (assessments.size() == 1) {
				assessment = assessments.get(0);
				assessment.setSaveStatus(RecordSaveStatus.ASSESSMENT_FOUND);
			} else {
				LOGGER.debug(
						"Multiple assessments found for " + assessment.getAssessmentCode() + " and are " + assessments);
				assessment = assessments.get(0);
				assessment.setSaveStatus(RecordSaveStatus.MULTIPLE_ASSESSMENTS_FOUND);
			}
		} else {
			LOGGER.debug("No assessments found for " + assessment.getAssessmentCode());

			// null check is not necessary because this testing program has
			// to reside for the application to function.
			// no check on unique list because of unique constraint.
			TestingProgramExample testingProgramExample = new TestingProgramExample();
			testingProgramExample.createCriteria().andProgramNameEqualTo(UnKnownTestingProgram);
			List<TestingProgram> testingPrograms = testingProgramDao.selectByExample(testingProgramExample);

			assessment.setTestingProgramId(testingPrograms.get(0).getId());
			assessment.setAssessmentDescription(ParsingConstants.CREATED_WHEN_UPLOAD);
			assessmentDao.insert(assessment);
		}

		return assessment;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.assessment
	 *
	 * @mbggenerated Mon Jun 04 11:52:02 CDT 2012
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public Assessment insertSelective(Assessment record) {
		assessmentDao.insertSelective(record);
		return record;
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.assessment
	 *
	 * @mbggenerated Mon Jun 04 11:52:02 CDT 2012
	 */
	@Override
	@Transactional(readOnly = true, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public List<Assessment> selectByExample(AssessmentExample example) {
		return assessmentDao.selectByExample(example);
	}

	@Override
	@Transactional(readOnly = true, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public Assessment getById(Long id) {
		return assessmentDao.selectByPrimaryKey(id);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.assessment
	 *
	 * @mbggenerated Mon Jun 04 11:52:02 CDT 2012
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public int updateByExampleSelective(Assessment record, AssessmentExample example) {
		return assessmentDao.updateByExampleSelective(record, example);
	}

	/**
	 * This method was generated by MyBatis Generator. This method corresponds
	 * to the database table public.assessment
	 *
	 * @mbggenerated Mon Jun 04 11:52:02 CDT 2012
	 */
	@Override
	@Transactional(readOnly = false, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public int updateByExample(Assessment record, AssessmentExample example) {
		return assessmentDao.updateByExample(record, example);
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see edu.ku.cete.service.AssessmentService#
	 * getByAssessmentProgramIdAndTestingProgramId(java.lang.Long,
	 * java.lang.Long)
	 */
	public List<Assessment> getByAssessmentProgramIdAndTestingProgramId(Long assessmentProgramId,
			Long testingProgramId) {
		List<Assessment> result = new ArrayList<Assessment>();
		result = assessmentDao.getByAssessmentProgramIdAndTestingProgramId(assessmentProgramId, testingProgramId);
		return result;
	}

	/**
	 * @return
	 */
	@Override
	@Transactional(readOnly = true, propagation = Propagation.REQUIRED, isolation = Isolation.DEFAULT)
	public List<Assessment> selectAllAssessments() {
		return assessmentDao.selectAllAssessments();
	}

	@Override
	public List<Assessment> getAssessmentsForAutoRegistration(Long testingProgramId, Long assessmentProgramId) {
		return assessmentDao.getAssessmentsForAutoRegistration(testingProgramId, assessmentProgramId);
	}
}
