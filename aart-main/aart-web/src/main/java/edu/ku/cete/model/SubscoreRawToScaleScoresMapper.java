package edu.ku.cete.model;

import java.math.BigDecimal;
import java.util.List;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.report.SubscoreRawToScaleScores;

public interface SubscoreRawToScaleScoresMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table subscoresrawtoscale
	 * @mbggenerated  Thu Apr 07 12:42:12 CDT 2016
	 */
	int insert(SubscoreRawToScaleScores record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table subscoresrawtoscale
	 * @mbggenerated  Thu Apr 07 12:42:12 CDT 2016
	 */
	int insertSelective(SubscoreRawToScaleScores record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table subscoresrawtoscale
	 * @mbggenerated  Thu Apr 07 12:42:12 CDT 2016
	 */
	SubscoreRawToScaleScores selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table subscoresrawtoscale
	 * @mbggenerated  Thu Apr 07 12:42:12 CDT 2016
	 */
	int updateByPrimaryKeySelective(SubscoreRawToScaleScores record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table subscoresrawtoscale
	 * @mbggenerated  Thu Apr 07 12:42:12 CDT 2016
	 */
	int updateByPrimaryKey(SubscoreRawToScaleScores record);

	int deleteAll(@Param("schoolYear") Long schoolYear);
    
    int deleteSubscoreRawToScaleScores(@Param("assessmentProgramId") Long assessmentProgramId, @Param("subjectId") Long subjectId, @Param("schoolYear") Long schoolYear);
	
    int checkIfSubscoreDefinitionNameExists(@Param("assessmentProgramId")Long assessmentProgramId, @Param("subjectId")Long subjectId, @Param("gradeId")Long gradeId, @Param("subScoreDefinitionName")String subScoreDefinitionName);
    
    List<String> getDistinctSubscoreMapping(@Param("assessmentProgramId")Long assessmentProgramId, @Param("subjectId")Long subjectId, @Param("gradeId")Long gradeId, @Param("testId")Long testId);
    
    List<Long> selectDistinctTestIds(@Param("assessmentProgramId") Long assessmentProgramId, @Param("subjectId") Long subjectId, 
			 @Param("gradeId") Long gradeId, @Param("schoolYear") Long schoolYear);
    //SubscoreRawToScaleScores checkDuplicateTestIdsWithRawScore(@Param("testId1")Long testId1, @Param("testId2")Long testId2, @Param("rawScore")BigDecimal rawScore);
    
    SubscoreRawToScaleScores getRatingForSubscoreRawScore(@Param("testIds") List<Long> testIds, @Param("subScoreDefinitionName") String subScoreDefinitionName, @Param("rawScore") BigDecimal rawScore, 
    		@Param("assessmentProgramId") Long assessmentProgramId, @Param("subjectId") Long subjectId, @Param("gradeId") Long gradeId, @Param("schoolYear") Long schoolYear, @Param("testId1")Long testId1, @Param("testId2")Long testId2,@Param("testId3")Long testId3, @Param("testId4")Long testId4,
			@Param("performanceTestId")Long performanceTestId);
    
}