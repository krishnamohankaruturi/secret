package edu.ku.cete.model.enrollment;

import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.Educator;
import edu.ku.cete.domain.enrollment.Enrollment;
import edu.ku.cete.domain.enrollment.Roster;
import edu.ku.cete.domain.enrollment.RosterExample;
import edu.ku.cete.domain.enrollment.StudentRoster;
import edu.ku.cete.domain.security.Restriction;
import edu.ku.cete.web.ITIBPCoverageExtractRostersDTO;
import edu.ku.cete.web.RosterDTO;
import edu.ku.cete.web.RosterExtractDTO;

public interface RosterDao {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    int countByExample(RosterExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    int deleteByExample(RosterExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    int deleteByPrimaryKey(Long id);
    /**
	 * @return {@link Long}
	 */
	long lastid();
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    int insert(Roster record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    int insertSelective(Roster record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    List<Roster> selectByExample(RosterExample example);
    /**
     * @param rosterExample
     * @return
     */
    List<Roster> selectByEnrollment(RosterExample rosterExample);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    Roster selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    int updateByExampleSelective(@Param("record") Roster record, @Param("example") RosterExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    int updateByExample(@Param("record") Roster record, @Param("example") RosterExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    int updateByPrimaryKeySelective(Roster record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.roster
     *
     * @mbggenerated Mon May 07 11:35:01 CDT 2012
     */
    int updateByPrimaryKey(Roster record);

    /**
     *
     *@param teacherId {@link Long}
     *@param organizationId {@link Long}
     *@return List<Roster>
     */
    List<Roster> findByTeacherId(@Param("teacherId")long teacherId,
    		@Param("organizationId")long organizationId);

    /**
     *
     *@param teacherId {@link Long}
     *@param selectedOrganizationId {@link Long}
     *@param restriction {@link Restriction}
     *@return List<RosterDTO>
     */
    List<RosterDTO> getRosterDtoByUserAndOrg(
    		@Param("teacherId")long teacherId,
    		@Param("selectedOrganizationId") Long selectedOrganizationId,
    		@Param("restriction")Restriction restriction);
    /**
    *
    *@param userId {@link Long}
    *@param restriction {@link Restriction}
    *@param userOrganizationId {@link Long}
    *@return List<RosterDTO>
    */
   List<Roster> getRosterByUserRestrictionAndOrganization(
   		@Param("userId")long userId,
   		@Param("restriction")Restriction restriction,
   		@Param("userOrganizationId") long userOrganizationId);
   
   List<Roster> getRosterForReports(Map<String, Object> parameters);
   
    /**
     * @param organizationId {@link Long}
     * @return {@link List}
     */
    List<RosterDTO> getRosterDtoByOrg(@Param("organizationId")long organizationId);
    
    /**
     * @param rosterIds {@link List}
     * @return {@link List}
     */
    List<RosterDTO> getRosterDtoInRosterIds(@Param("rosterIds")List<Long> rosterIds);

    /**
     *TODO change it to group by and in clause sql.
     *@param rosterId
     *@return
     */
    Integer getNumberOfStudents(@Param("rosterId")long rosterId);
    
    Integer getNumberOfActiveStudents(@Param("rosterId")long rosterId);
    
    /**
     * @param organizationId
     * @param orderByClause
     * @param offset
     * @param limitCount
     * @return
     */
    List<RosterDTO> getRostersToViewByOrg(@Param("organizationId") Long organizationId,
    		@Param("orderByColumn") String orderByColumn,@Param("order") String order, @Param("offset") Integer offset,
    		@Param("limitCount") Integer limitCount);
    
    /**
     * @param organizationId
     * @return
     */
    Integer countRostersToViewByOrg(@Param("organizationId") Long organizationId);
    
    /**
     * @param organizationId
     * @param orderByClause
     * @param offset
     * @param limitCount
     * @return
     */
    List<RosterDTO> getRostersToViewByOrg(Map<String,Object> filters);
    
    List<RosterDTO> findRostersforTeacherIdInCurrentYearForMergeUser(Map<String,Object> filters);
    
    /**
     * @param organizationId
     * @return
     */
    Integer countRostersToViewByOrg(Map<String,Object> filters);
    
    List<Roster> selectByStateSubjectAreaAndEnrollment(@Param("code") String code, @Param("enrollmentId") Long enrollmentId);
    
    /**
    *
    *@param teacherId {@link Long}
    *@param organizationId {@link Long}
     * @param currentSchoolYear 
    *@return List<Roster>
    */
	List<Roster> findRostersforTeacherId(@Param("teacherId") long teacherId,
			@Param("organizationId") long organizationId, @Param("currentSchoolYear") int currentSchoolYear);
    
   /**
    * @author Venkata Krishna Jagarlamudi
    * US15407: Roster - Associate with school year
    * @param loggedInUserOrgId
    * @return currentSchoolYear
    */
   int getCurrentSchoolYear(@Param("loggedInUserOrgId")long loggedInUserOrgId);

	List<RosterExtractDTO> getRosterDataExtractForOrg(@Param("organizationId") Long orgId, @Param("isTeacher") Boolean isTeacher,
			@Param("educatorId") Long educatorId, @Param("currentSchoolYear") int currentSchoolYear,@Param("assessmentPrograms") List<Long> assessmentPrograms);
	
	/**
	 * @author bmohanty_sta
	 * Biyatpragyan Mohanty : bmohanty_sta@ku.edu : US15500 : DLM Class Roster Report - online report
	 * Get educator details by roster id.
	 * @param rosterId
	 * @return
	 */
	Educator selectEducatorByRosterId(@Param("rosterId") long rosterId);
	
	List<Roster> selectByContentAreaAndEnrollment(@Param("contentAreaId") Long contentAreaId,
   		@Param("enrollment") Enrollment enrollment);
	
	//Added to fix DE10302
	Integer getRosterByTeacher(@Param("userId") Long userId);
	
	List<Roster> selectRosterByRosterAndAttendanceSchool(@Param("rosterCourseSectionName") String rosterCourseSectionName, @Param("rosterTeacherId") Long rosterTeacherId,
			@Param("rosterStateSubjectAreaId") Long rosterStateSubjectAreaId, @Param("rosterStatecoursecode") String rosterStatecoursecode,
			@Param("rosterCurrentSchoolYear") Integer rosterCurrentSchoolYear, @Param("rosterAypSchoolId") Long rosterAypSchoolId,  @Param("attendanceSchoolId") Long attendanceSchoolId);

	List<Roster> getRostersBySubject(@Param("subjectId")Long subjectId, @Param("schoolId")Long schoolId,
		@Param("rosterCurrentSchoolYear") Integer rosterCurrentSchoolYear,
		@Param("isTeacher") boolean isTeacher,
		@Param("educatorId") Long educatorId);

	Roster getRostersByStudentEnrollInformation(@Param("studentId")Long studentId, @Param("attendanceSchoolIdentifier")String attendanceSchoolIdentifier,
		@Param("subjectAbbreviatedName")String subjectAbbreviatedName, @Param("courseAbbreviatedName")String courseAbbreviatedName, @Param("currentSchoolYear")Long currentSchoolYear);
	/**
	    * @author Udaya Kiran Jagana
	    * US18182: Roster - json data format
	    * @param Roster
	    * @return Roster
	    */

	Roster getRosterJsonFormatData (@Param("rosterId") long rosterId);

	List<Roster> getRosterByRosterAndAttendanceSchool(@Param("rosterCourseSectionName") String rosterCourseSectionName, @Param("rosterTeacherId") Long rosterTeacherId,
			@Param("rosterStateSubjectAreaId") Long rosterStateSubjectAreaId, @Param("rosterStatecoursecode") String rosterStatecoursecode,
			@Param("rosterCurrentSchoolYear") Integer rosterCurrentSchoolYear, @Param("rosterAypSchoolId") Long rosterAypSchoolId,  @Param("attendanceSchoolId") Long attendanceSchoolId);
	
	List<Long> getRosterIdsForStudentAndSchoolYear(@Param("studentId") Long studentId, @Param("schoolYear") int schoolYear);

	List<Roster> getRostersByOrgId(@Param("sourceSchoolId") Long sourceSchoolId, @Param("currentSchoolYear") Long currentSchoolYear);

	void transferRoster(Roster roster);

	void disableRoster(Roster roster);
	
	Long getCountByOrganizationId(@Param("organizationId") Long organizationId, @Param("schoolYear") Long schoolYear);

	int checkIfRosterHasEnrollments(@Param("rosterId") Long rosterId);
	
	List<StudentRoster> checkIfRosterExistsForEnrollmentSubjectCourse(@Param("enrollmentId") Long enrollmentId, @Param("subjectId") Long subjectId, 
			@Param("courseId") Long courseId, @Param("schoolYear") Long schoolYear, @Param("assessmentProgramCode") String assessmentProgramCode);
	
	List<StudentRoster> checkForTestSessionsOnExitedRostersAlso(@Param("enrollmentId") Long enrollmentId, @Param("subjectId") Long subjectId, 
			@Param("courseId") Long courseId, @Param("schoolYear") Long schoolYear, @Param("assessmentProgramCode") String assessmentProgramCode);

	List<ITIBPCoverageExtractRostersDTO> getrosterDetalsGroupByTeacherForITIBP(@Param("orgId") Long orgId, @Param("gradeId") Long gradeId, @Param("subjectId") Long subjectId, 
			@Param("currentSchoolYear") int currentSchoolYear, @Param("isTeacher") boolean isTeacher, @Param("teacherId") Long teacherId);

	List<ITIBPCoverageExtractRostersDTO> getRosterDetailsForITIBluePrintExtract(@Param("orgId") Long orgId, @Param("gradeId") Long gradeId, @Param("subjectId") Long subjectId, 
			@Param("currentSchoolYear") int currentSchoolYear, @Param("teacherIds") List<Long> teacherIds);	

	Long getDeactivateCountByOrganizationId(@Param("organizationId") Long organizationId, @Param("schoolYear") Long schoolYear);
	
	List<Long> getRosterIdsByEnrollmentId(@Param("enrollmentId") Long enrollmentId);

	//List<Roster> findRostersforTeacherIdInCurrentYear(@Param("teacherId")Long currentContextUserId,@Param("organizationId") Long currentOrganizationId,@Param("currentSchoolYear") Long currentSchoolYear);
	
	List<Roster> getRosterForTeacherReports(@Param("userId") Long userId, @Param("currentSchoolYear") Long currentSchoolYear, @Param("apId") Long apId,
				@Param("authorityId") Long authorityId, @Param("groupId") Long groupId, @Param("organizationId") Long organizationId);
	
	Roster rosterInformationForAudit(@Param("rosterId") Long rosterId);
	
	boolean checkActiveStudentsCountOnRoster(@Param("classroomId") Long classroomId, @Param("schoolYear") int schoolYear);
	
	void deleteIfNoStudentPresent(@Param("rosterId") Long rosterId, @Param("modifiedUserId") Long modifiedUserId);

	List<Long> getRosterIdsByEnrollmentIdAndSchoolId(@Param("enrollmentId")Long enrollmentId, @Param("schoolId")Long schoolId);

	List<Roster> getRostersByEnrollmentId(@Param("enrollmentId")Long enrollmentId);
	
	List<Long> getRosterIdByTeacherIdTestSessionId(@Param("teacherId")Long teacherId, @Param("testSessionId")Long testSessionId);

	List<Long> getOldRosterIdsByEnrollmentId(@Param("oldEnrollmentId")Long oldEnrollmentId);

	List<Long> getOldRosterIdsByEnrollmentIdForHGSS(@Param("enrollmentId")Long oldEnrollmentId);
	
	List<Roster> getByClassroomId(@Param("classroomId") Long classroomId);
	
	List<Long> getClassroomIds(@Param ("userId") Long userId,@Param ("schoolYear") Long schoolYear);
	
    List<RosterDTO> findRostersforTeacherIdInCurrentYearForMergeUser(@Param("organizationId") Long organizationId,
    		@Param("orderByColumn") String orderByColumn,@Param("order") String order, @Param("offset") Integer offset,
    		@Param("limitCount") Integer limitCount);


}