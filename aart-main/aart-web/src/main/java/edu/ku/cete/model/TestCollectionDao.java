package edu.ku.cete.model;

import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.ibatis.annotations.MapKey;
import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.QCTestCollectionDTO;
import edu.ku.cete.domain.TestCollectionDTO;
import edu.ku.cete.domain.content.Stage;
import edu.ku.cete.domain.content.TestCollection;
import edu.ku.cete.domain.content.TestCollectionExample;
import edu.ku.cete.domain.test.ContentFrameworkDetail;
import edu.ku.cete.web.DLMTestStatusExtractDTO;
import edu.ku.cete.web.IAPStudentTestStatusDTO;

public interface TestCollectionDao {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    int countByExample(TestCollectionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    int deleteByExample(TestCollectionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    int insert(TestCollection record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    int insertSelective(TestCollection record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    List<TestCollection> selectByExample(TestCollectionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    TestCollection selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    int updateByExampleSelective(@Param("record") TestCollection record, @Param("example") TestCollectionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    int updateByExample(@Param("record") TestCollection record, @Param("example") TestCollectionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    int updateByPrimaryKeySelective(TestCollection record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testcollection
     *
     * @mbggenerated Wed Sep 12 16:14:17 CDT 2012
     */
    int updateByPrimaryKey(TestCollection record);

    /**
     *
     * @param testSessionId {@link Long}
     * @return {@link TestCollection}
     */
    TestCollection selectByTestSession(@Param("testSessionId") long testSessionId);
    
    /**
     * This method selects test collections and tests of deployed
     * status for both system defined enrollment and manual enrollment type. 
     *
     * @param testStatusId
     * @param systemEnrollmentRuleId
     * @param manualEnrollmentRuleId
     * @param organizationId
     * @param qcComplete
     * @param hasHighStakesPermission
     * @param orderByClause
     * @param offset
     * @param limitCount
     * @return
     */
    List<TestCollectionDTO> selectTestsAndTestCollections(@Param("testStatusId") Long testStatusId,
    		@Param("systemEnrollmentRuleId") Long systemEnrollmentRuleId,
    		@Param("manualEnrollmentRuleId") Long manualEnrollmentRuleId,
    		@Param("organizationId") Long organizationId,
    		@Param("qcComplete") Boolean qcComplete,
    		@Param("hasHighStakesPermission") Boolean hasHighStakesPermission,
    		@Param("testsAndTestCollectionsCriteriaMap") Map<String,String> testsAndTestCollectionsCriteriaMap,
    		@Param("orderByClause") String orderByClause, 
    		@Param("offset") Integer offset, 
    		@Param("limit") Integer limit);

    List<TestCollectionDTO> selectTestsAndManualTestCollections(@Param("testStatusId") Long testStatusId,
    		@Param("manualEnrollmentRuleId") Long manualEnrollmentRuleId,
    		@Param("organizationId") Long organizationId,
    		@Param("qcComplete") Boolean qcComplete,
    		@Param("hasHighStakesPermission") Boolean hasHighStakesPermission,
    		@Param("testsAndTestCollectionsCriteriaMap") Map<String,String> testsAndTestCollectionsCriteriaMap,
    		@Param("orderByClause") String orderByClause, 
    		@Param("offset") Integer offset, 
    		@Param("limit") Integer limit);
    /**
     * @param testStatusId
     * @param systemEnrollmentRuleId
     * @param manualEnrollmentRuleId
     * @param organizationId
     * @param qcComplete
     * @param hasHighStakesPermission
     * @return
     */
    Integer countTestsAndTestCollections(@Param("testStatusId") Long testStatusId,
    		@Param("systemEnrollmentRuleId") Long systemEnrollmentRuleId,
    		@Param("manualEnrollmentRuleId") Long manualEnrollmentRuleId,
    		@Param("organizationId") Long organizationId,
    		@Param("qcComplete")Boolean qcComplete,
    		@Param("hasHighStakesPermission")Boolean hasHighStakesPermission,
    		@Param("testsAndTestCollectionsCriteriaMap") Map<String,String> testsAndTestCollectionsCriteriaMap);
    
    Integer countTestsAndManualTestCollections(@Param("testStatusId") Long testStatusId,
    		@Param("manualEnrollmentRuleId") Long manualEnrollmentRuleId,
    		@Param("organizationId") Long organizationId,
    		@Param("qcComplete")Boolean qcComplete,
    		@Param("hasHighStakesPermission")Boolean hasHighStakesPermission,
    		@Param("testsAndTestCollectionsCriteriaMap") Map<String,String> testsAndTestCollectionsCriteriaMap);
    /**
     * This method selects tests of deployed
     * status for both system defined enrollment and manual enrollment type.
     *
     * @param testStatusId
     * @param organizationId
     * @param qcComplete
     * @param hasHighStakesPermission
     * @param orderByClause
     * @param offset
     * @param limitCount
     * @return
     */
    List<TestCollectionDTO> selectTestsAndTestCollectionsForQCAdmin(@Param("testStatusId") Long testStatusId,    		
    		@Param("organizationId") Long organizationId,
    		@Param("qcComplete") Boolean qcComplete,
    		@Param("hasHighStakesPermission") Boolean hasHighStakesPermission,
    		@Param("testsAndTestCollectionsCriteriaMap") Map<String,String> testsAndTestCollectionsCriteriaMap,
    		@Param("orderByClause") String orderByClause, 
    		@Param("offset") Integer offset, 
    		@Param("limit") Integer limit);
    
    /**
     * @param testStatusId
     * @param organizationId
     * @param qcComplete
     * @param hasHighStakesPermission
     * @return
     */
    Integer countTestsAndTestCollectionsForQCAdmin(@Param("testStatusId") Long testStatusId,    		
    		@Param("organizationId") Long organizationId,
    		@Param("qcComplete")Boolean qcComplete,
    		@Param("hasHighStakesPermission")Boolean hasHighStakesPermission,
    		@Param("testsAndTestCollectionsCriteriaMap") Map<String,String> testsAndTestCollectionsCriteriaMap);
    
    /**
     * @param testStatusId
     * @param organizationId
     * @param qcComplete
     * @param hasHighStakesPermission
     * @return
     */
    List<QCTestCollectionDTO> selectTestsAndTestCollectionsForQCControl(@Param("testStatusId") Long testStatusId,    		
    		@Param("currentAssessmentProgramId") Long currentAssessmentProgramId,
    		@Param("hasHighStakesPermission")Boolean hasHighStakesPermission,
    		@Param("offset")int offset,
    		@Param("limitCount")int limitCount,
    		@Param("criteria") Map<String,Object> criteria
    		);
    
    /**
     * @param testStatusId
     * @param organizationId
     * @param qcComplete
     * @param hasHighStakesPermission
     * @return
     */
    Integer countTestsAndTestCollectionsForQCControl(@Param("testStatusId") Long testStatusId,    		
    		@Param("currentAssessmentProgramId") Long currentAssessmentProgramId,
    		@Param("hasHighStakesPermission")Boolean hasHighStakesPermission,
    		@Param("criteria") Map<String,Object> criteria
    		);
    
    /**
     * @param assessmentProgramName
     * @param testingProgramAbbr
     * @param assessmentCode
     * @param grade
     * @param testTypeCode
     * @param subjectAreaCode
     * @return
     */
    List<TestCollection> selectTestCollectionForAutoRegistration(@Param("assessmentProgramName") String assessmentProgramName, 
    		@Param("testingProgramAbbr") String testingProgramAbbr, 
    		@Param("assessmentCode") String assessmentCode,
    		@Param("grade") String grade, @Param("testTypeCode") String testTypeCode, 
    		@Param("subjectAreaCode") String subjectAreaCode);

    /**
     * @param assessmentProgramId
     * @param testingProgramId
     * @param assessmentId
     * @param grade
     * @param testTypeCode
     * @param subjectAreaCode
     * @return
     */
	List<TestCollection> selectTestCollectionForAutoRegistrationById(@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("testingProgramId") Long testingProgramId, 
			@Param("assessmentId") Long assessmentId,
			@Param("testStatusId") Long testStatusId,
			@Param("grade") String grade, 
			@Param("testTypeCode") String testTypeCode, 
    		@Param("subjectAreaCode") String subjectAreaCode);

	/**
	 * @param assessmentProgramId
	 * @param testingProgramId
	 * @param assessmentId
	 * @param grade
	 * @param testTypeCode
	 * @param subjectAreaCode
	 * @return
	 */
	List<TestCollection> selectTestCollectionForAutoRegistrationByCourse(@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("testingProgramId") Long testingProgramId, 
			@Param("assessmentId") Long assessmentId,
			@Param("testStatusId") Long testStatusId,
			@Param("gradeName") String gradeName, 
			@Param("testTypeCode") String testTypeCode, 
    		@Param("subjectAreaCode") String subjectAreaCode);

	/**
	 * 
	 * @param linkageLevelLowerBound
	 * @param linkageLevelUpperBound
	 * @param gradeCourseCode
	 * @param contentAreaCode
	 * @param excludeCollections
	 * @return
	 */
	List<TestCollection> selectByAverageLinkageLevelAndContentArea(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, @Param("gradeCourseCode") String gradeCourseCode, 
			@Param("contentAreaCode") String contentAreaCode, @Param("excludeCollections") List<String> excludeCollections, @Param("poolType") String poolType);
	
	/**
	 * 
	 * @param linkageLevelLowerBound
	 * @param linkageLevelUpperBound
	 * @param gradeCourseCode
	 * @param contentAreaCode
	 * @param excludeCollections
	 * @return
	 */
	List<TestCollection> selectByAverageLinkageLevelAndContentAreaWithGradeBand(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, @Param("gradeCourseCode") String gradeCourseCode, 
			@Param("contentAreaCode") String contentAreaCode, @Param("excludeCollections") List<String> excludeCollections, @Param("poolType") String poolType);
	
	/**
	 * 
	 * @param linkageLevelLowerBound
	 * @param linkageLevelUpperBound
	 * @param gradeCourseCode
	 * @param contentAreaCode
	 * @param excludeCollections
	 * @return
	 */
	List<TestCollection> selectByAverageLinkageLevelAndContentAreaForDLMMultiAssign(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, @Param("gradeCourseCode") String gradeCourseCode, 
			@Param("contentAreaCode") String contentAreaCode, @Param("excludeCollections") List<Long> excludeCollections, @Param("poolType") String poolType, @Param("operationalTestWindowId") Long operationalTestWindowId);
	
	/**
	 * 
	 * @param linkageLevelLowerBound
	 * @param linkageLevelUpperBound
	 * @param gradeCourseCode
	 * @param contentAreaCode
	 * @param excludeCollections
	 * @return
	 */
	List<TestCollection> selectByAverageLinkageLevelAndContentAreaWithGradeBandForDLMMultiAssign(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, @Param("gradeCourseCode") String gradeCourseCode, 
			@Param("contentAreaCode") String contentAreaCode, @Param("excludeCollections") List<Long> excludeCollections, @Param("poolType") String poolType, @Param("operationalTestWindowId") Long operationalTestWindowId);
	
	/**
	 * 
	 * @param linkageLevelLowerBound
	 * @param linkageLevelUpperBound
	 * @param gradeCourseCode
	 * @param contentAreaCode
	 * @param excludeCollections
	 * @return
	 */
	List<TestCollection> itiSelectByAverageLinkageLevelAndContentArea(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, @Param("gradeCourseCode") String gradeCourseCode, @Param("contentAreaId") Long contentAreaId, @Param("studentId") Long studentId, @Param("excludeCollections") List<String> excludeCollections,@Param("eElement") List<String> eElement, @Param("pnpAttributeName") String pnpAttributeName, @Param("sourceCode") String sourceCode);
	
	/**
	 * 
	 * @param linkageLevelLowerBound
	 * @param linkageLevelUpperBound
	 * @param gradeCourseCode
	 * @param contentAreaCode
	 * @param excludeCollections
	 * @return
	 */
	List<TestCollection> itiSelectByAverageLinkageLevelAndContentAreaWithGradeBand(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, @Param("gradeCourseCode") String gradeCourseCode, @Param("contentAreaId") Long contentAreaId, @Param("studentId") Long studentId, @Param("excludeCollections") List<String> excludeCollections,@Param("eElement") List<String> eElement, @Param("pnpAttributeName") String pnpAttributeName,  @Param("sourceCode") String sourceCode);
	
	/**
	 * 
	 * @param gradeCourseCode
	 * @param contentAreaCode
	 * @return
	 */
	List<ContentFrameworkDetail> itiSelectContentCodeUsedInElgibleTestCollections(@Param("testSpecExternalId") Long testSpecExternalId, @Param("stateId") Long stateId);	
	
	/**
	 * 
	 * @param contentAreaId 
	 * @param gradeCourseCode 
	 * @param gradeCourseCode
	 * @param rosterId 
	 * @param studentId 
	 * @param contentAreaCode
	 * @return
	 */
	List<ContentFrameworkDetail> itiSelectContentCodeUsedInElgibleTestCollectionsForSingleEE(@Param("testSpecExternalId") Long testSpecExternalId, @Param("gradeCourseCode") String gradeCourseCode, 
			@Param("contentAreaId") Long contentAreaId, @Param("studentId") Long studentId, @Param("rosterId") Long rosterId, @Param("stateId") Long stateId);
	
	
	List<DLMTestStatusExtractDTO> dlmTestStatusReport(@Param("organizationId") Long orgId
			, @Param("isTeacher") Boolean isTeacher, @Param("educatorId") Long educatorId
			, @Param("currentSchoolYear") int currentSchoolYear, @Param("iniToDate") Date iniToDate, @Param("iniFromDate") Date iniFromDate,
			@Param("eoyToDate") Date eoyToDate,@Param("eoyFromDate") Date eoyFromDate, @Param("contractOrgId") Long contractOrgId);

	ComplexityBandDao getComplexityBandById(@Param("id") Long complexityBandId);
	
	List<Long> selectTestidOnPNP(@Param("testIds") List<Long> testIds, @Param("pnpAttribute") String pnpAttribute);
	
	List<TestCollection> selectForAutoGradeBand(@Param("assessmentProgramCode") String assessmentProgramCode, @Param("randomizationTypeCode") String randomizationTypeCode, 
		@Param("assessmentId") Long assessmentId, @Param("testStatusId") Long testStatusId,
		@Param("gradeCourseId") Long gradeCourseId, @Param("testTypeId") Long testTypeId, 
		@Param("contentAreaId") Long contentAreaId, @Param("contentAreaCode") String contentAreaCode,
		@Param("assessmentCode") String assessmentCode, @Param("operationalTestWindowId") Long operationalTestWindowId,
		@Param("stageId") Long stageId);
	
	List<TestCollection> selectForAutoGradeCourse(@Param("assessmentProgramCode") String assessmentProgramCode, @Param("randomizationTypeCode") String randomizationTypeCode, 
			@Param("assessmentId") Long assessmentId, @Param("testStatusId") Long testStatusId,
			@Param("gradeCourseId") Long gradeCourseId, @Param("testTypeId") Long testTypeId, 
			@Param("contentAreaId") Long contentAreaId, @Param("contentAreaCode") String contentAreaCode,
			@Param("assessmentCode") String assessmentCode, @Param("operationalTestWindowId") Long operationalTestWindowId,
			@Param("stageId") Long stageId);
	
	Long itiNoTestCollectionReason(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, @Param("gradeCourseCode") String gradeCourseCode, @Param("contentAreaId") Long contentAreaId, @Param("studentId") Long studentId, @Param("excludeCollections") List<String> excludeCollections,@Param("eElement") String eElement, @Param("pnpAttributeName") String pnpAttributeName);
	
	List<TestCollection> selectForDlmAutoRegistrationGradeBand(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, @Param("gradeCourseCode") String gradeCourseCode, 
			@Param("contentAreaCode") String contentAreaCode, @Param("studentId") Long studentId,
			@Param("eElement") List<String> eElement, @Param("poolType") String poolType, @Param("testSpecId") Long testSpecId, 
			@Param("operationalWindowId") Long operationalWindowId);

	List<TestCollection> selectForDlmAutoRegistrationGradeCourse(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, @Param("gradeCourseCode") String gradeCourseCode, 
			@Param("contentAreaCode") String contentAreaCode, @Param("studentId") Long studentId, 
			@Param("eElement") List<String> eElement, @Param("poolType") String poolType, @Param("testSpecId") Long testSpecId,
			@Param("operationalWindowId") Long operationalWindowId);

	TestCollection selectTestCollectionById(@Param("testCollectionId") Long testCollectionId, @Param("stateId") Long stateId);

	List<TestCollection> selectForAutoGradeBandWithTestExternalId(
			@Param("assessmentProgramCode") String assessmentProgramCode, @Param("randomizationTypeCode") String randomizationTypeCode, 
			@Param("assessmentId") Long assessmentId, @Param("testStatusId") Long testStatusId,
			@Param("gradeCourseId") Long gradeCourseId, @Param("testTypeId") Long testTypeId, 
			@Param("contentAreaId") Long contentAreaId, @Param("contentAreaCode") String contentAreaCode,
			@Param("assessmentCode") String assessmentCode, @Param("testExternalId") Long testExternalId);

	List<TestCollection> selectForAutoGradeCourseWithTestExternalId(
			@Param("assessmentProgramCode") String assessmentProgramCode, @Param("randomizationTypeCode") String randomizationTypeCode, 
			@Param("assessmentId") Long assessmentId, @Param("testStatusId") Long testStatusId,
			@Param("gradeCourseId") Long gradeCourseId, @Param("testTypeId") Long testTypeId, 
			@Param("contentAreaId") Long contentAreaId, @Param("contentAreaCode") String contentAreaCode,
			@Param("assessmentCode") String assessmentCode, @Param("testExternalId") Long testExternalId);
	
		
	List<TestCollection> selectForAMPPPGradeBandWithTestExternalId(
			@Param("assessmentProgramCode") String assessmentProgramCode, @Param("randomizationTypeCode") String randomizationTypeCode, 
			@Param("assessmentId") Long assessmentId, 
			@Param("gradeCourseId") Long gradeCourseId, @Param("testTypeId") Long testTypeId, 
			@Param("contentAreaId") Long contentAreaId, @Param("contentAreaCode") String contentAreaCode,
			@Param("assessmentCode") String assessmentCode, @Param("testExternalId") Long testExternalId,
			@Param("operationalTestWindowId") Long operationalTestWindowId);

	List<TestCollection> selectForAMPPPGradeCourseWithTestExternalId(
			@Param("assessmentProgramCode") String assessmentProgramCode, @Param("randomizationTypeCode") String randomizationTypeCode, 
			@Param("assessmentId") Long assessmentId, 
			@Param("gradeCourseId") Long gradeCourseId, @Param("testTypeId") Long testTypeId, 
			@Param("contentAreaId") Long contentAreaId, @Param("contentAreaCode") String contentAreaCode,
			@Param("assessmentCode") String assessmentCode, @Param("testExternalId") Long testExternalId,
			@Param("operationalTestWindowId") Long operationalTestWindowId);

	List<Long> getAvailableTestOverviewsForGradeAndCourse(@Param("gradeCourseCode") String gradeCourseCode, 
			@Param("contentAreaId") Long contentAreaId, @Param("stateId") Long stateId);
		
	List<TestCollection> selectForAutoGradeCourseForAdaptive(@Param("assessmentProgramCode") String assessmentProgramCode, @Param("randomizationTypeCode") String randomizationTypeCode, 
			@Param("assessmentId") Long assessmentId, @Param("testStatusId") Long testStatusId,
			@Param("gradeCourseId") Long gradeCourseId, @Param("testTypeId") Long testTypeId, 
			@Param("contentAreaId") Long contentAreaId, @Param("contentAreaCode") String contentAreaCode,
			@Param("assessmentCode") String assessmentCode, @Param("otwId") Long otwId, @Param("enrollmentMethodCode") String enrollmentMethodCode);
	
	List<TestCollection> selectForAutoGradeCourseForPredictive(@Param("assessmentProgramCode") String assessmentProgramCode,
			@Param("randomizationTypeCode") String randomizationTypeCode, 
			@Param("assessmentId") Long assessmentId, @Param("testStatusId") Long testStatusId,
			@Param("gradeCourseId") Long gradeCourseId, @Param("testTypeId") Long testTypeId, 
			@Param("contentAreaId") Long contentAreaId, @Param("contentAreaCode") String contentAreaCode,
			@Param("assessmentCode") String assessmentCode, @Param("otwId") Long otwId, @Param("enrollmentMethodCode") String enrollmentMethodCode);
	
	Integer countTestCollectionPanels(@Param("testCollectionId") Long testCollectionId);

	List<TestCollection> selectTestCollectionsForDLMFixedAssign(@Param("gradeCourseAbbrName")String gradeCourseAbbrName, @Param("contentAreaId")Long contentAreaId,
			@Param("excludeTestCollections")List<Long> excludeTestCollections, @Param("operationalTestWindowId")Long operationalTestWindowId);

	void softDeleteById(@Param("id")Long id);
	
	List<TestCollection> getTestCollectionsForBatchAutoGradeBand(@Param("assessmentProgramCode") String assessmentProgramCode, @Param("randomizationTypeCode") String randomizationTypeCode, 
			@Param("assessmentId") Long assessmentId, @Param("testStatusId") Long testStatusId,
			@Param("gradeCourseId") Long gradeCourseId, @Param("testTypeId") Long testTypeId, 
			@Param("contentAreaId") Long contentAreaId, @Param("contentAreaCode") String contentAreaCode,
			@Param("assessmentCode") String assessmentCode, @Param("operationalTestWindowId") Long operationalTestWindowId);
	
	List<TestCollection> getTestCollectionsForBatchAutoGradeCourse(@Param("assessmentProgramCode") String assessmentProgramCode, @Param("randomizationTypeCode") String randomizationTypeCode, 
			@Param("assessmentId") Long assessmentId, @Param("testStatusId") Long testStatusId,
			@Param("gradeCourseId") Long gradeCourseId, @Param("testTypeId") Long testTypeId, 
			@Param("contentAreaId") Long contentAreaId, @Param("contentAreaCode") String contentAreaCode,
			@Param("assessmentCode") String assessmentCode, @Param("operationalTestWindowId") Long operationalTestWindowId);

	List<DLMTestStatusExtractDTO> dlmTestAdminMonitoringSummary(@Param("summaryLevel") String summaryLevel,
			@Param("schoolYear") Long schoolYear, @Param("stateId") Long stateId, @Param("childOrgIds") List<Long> childOrgIds,
			@Param("shouldOnlySeeRosteredStudents") boolean shouldOnlySeeRosteredStudents, @Param("educatorId") Long educatorId);

	List<ContentFrameworkDetail> getStudentITITestsForSubGradeAndCriteria(@Param("criteria") Long criteria, @Param("gradeCourseAbbrName") String gradeCourseAbbrName, 
			@Param("contentAreaId") Long contentAreaId, @Param("studentId") Long studentId, @Param("schoolYear") int schoolYear);
	
	List<ContentFrameworkDetail> getAllStudentITIEEsForSubGradeAndCriteriaUnderTeachers(@Param("criteria") Long criteria, @Param("gradeCourseAbbrName") String gradeCourseAbbrName, 
			@Param("contentAreaId") Long contentAreaId, @Param("studentId") Long studentId, @Param("teacherIds") List<Long> teacherIds,
			@Param("schoolYear") Long schoolYear);

	List<TestCollection> selectTestCollectionsForDLMResearchSurvey(@Param("operationalTestWindowId")Long operationalTestWindowId, 
			@Param("gradeAbbrName")String gradeAbbrName, @Param("contentAreaId") Long contentAreaId, @Param("stageCodes") List<String> stageCodes);
	
	@MapKey("actuallinkagelevel")
	Map<String, Map<String, String>> getActualAndMappedLikageLevelsByContentArea(@Param("contentAreaAbbrName")String contentAreaAbbrName);

	List<TestCollection> getTestCollectionsByTestId(@Param("testId")Long testId);
	
	List<ContentFrameworkDetail> getEEsTestedInStudentTracker(@Param("studentTrackerId") Long studentTrackerId, @Param("testSpecId") Long testSpecId, 
			@Param("operationalWindowId") Long operationalWindowId);

	List<ContentFrameworkDetail> getContentCodesForFieldTests(@Param("multiAssignTestWindowId")Long multiAssignTestWindowId, @Param("orgPoolType")String orgPoolType,
			@Param("gradeCode")String gradeCode, @Param("contentAreaId") Long contentAreaId);
	
	Long getStageIdByStageCode(@Param("stageCode") String stageCode);
	
	List<TestCollection> getTestCollectionsForISmartAutoGradeBand(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, 
			@Param("gradeCourseCode") String gradeCourseCode, 
			@Param("contentAreaId") Long contentAreaId,
			@Param("operationalWindowId") Long operationalWindowId);
	
	List<TestCollection> getTestCollectionsForISmartAutoGradeCourse(@Param("linkageLevelLowerBound") Float linkageLevelLowerBound, 
			@Param("linkageLevelUpperBound") Float linkageLevelUpperBound, 
			@Param("gradeCourseCode") String gradeCourseCode, 
			@Param("contentAreaId") Long contentAreaId,
			@Param("operationalWindowId") Long operationalWindowId);
	
	List<TestCollection> getTestCollectionsForBatchAutoByGradeBandOTWId(@Param("assessmentProgramId") Long assessmentProgramId, 			
			@Param("contentAreaId") Long contentAreaId, 
			@Param("gradeBandId") Long gradeBandId,			
			@Param("operationalTestWindowId") Long operationalTestWindowId,
			@Param("randomizationTypeCode") String randomizationTypeCode, 
			@Param("testStatusId") Long testStatusId,
			@Param("stageCode") String stageCode);
	
	Stage getStageByCode(@Param("stageCode") String stageCode);
	
	List<DLMTestStatusExtractDTO> dlmTestAdminMonitoringSummaryForIEStates(@Param("summaryLevel") String summaryLevel,
			@Param("schoolYear") Long schoolYear, @Param("stateId") Long stateId, @Param("childOrgIds") List<Long> childOrgIds,
			@Param("shouldOnlySeeRosteredStudents") boolean shouldOnlySeeRosteredStudents, @Param("educatorId") Long educatorId, @Param("testingCyleIDs") List<Long> testingCyleIDs);
	
}