package edu.ku.cete.model;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.ibatis.annotations.MapKey;
import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.StudentTestInfo;
import edu.ku.cete.domain.TestSession;
import edu.ku.cete.domain.TestSessionExample;
import edu.ku.cete.domain.content.Stage;
import edu.ku.cete.domain.testsession.AutoRegisteredTestSessionDTO;
import edu.ku.cete.domain.testsession.TestSessionRoster;
import edu.ku.cete.web.AssignScorerTestSessionDTO;
import edu.ku.cete.web.KELPATestAdministrationDTO;
import edu.ku.cete.web.KSDEStudentTestDetailsDTO;
import edu.ku.cete.web.ScorerTestSessionStudentDTO;
import edu.ku.cete.web.StudentTestDTO;
import edu.ku.cete.web.StudentTestSectionsDTO;
import edu.ku.cete.web.StudentTestSessionInfoDTO;
import edu.ku.cete.web.TestFormMediaResourceDTO;
import edu.ku.cete.web.TestSessionPdfDTO;

public interface TestSessionDao {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testsession
     *
     * @mbggenerated Thu Oct 04 09:06:00 CDT 2012
     */
    int countByExample(TestSessionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testsession
     *
     * @mbggenerated Thu Oct 04 09:06:00 CDT 2012
     */
    int deleteByExample(TestSessionExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testsession
     *
     * @mbggenerated Thu Oct 04 09:06:00 CDT 2012
     */
    int insert(TestSession record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testsession
     *
     * @mbggenerated Thu Oct 04 09:06:00 CDT 2012
     */
    int insertSelective(TestSession record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testsession
     * @param categoryId 
     *
     * @mbggenerated Thu Oct 04 09:06:00 CDT 2012
     */
    List<TestSession> selectByExample(TestSessionExample example);
    
    List<TestSession> selectByExampleAndCategory(@Param("rosterId")Long rosterId,@Param("categoryId")Long categoryId);

    
    List<TestSession> selectByRosterAndCategory(@Param("rosterId")Long rosterId,@Param("categoryIds")Long categoryIds[]);
    
    List<TestSession> findByAutoRegistrationCriteria(@Param("assessmentId") Long assessmentId, @Param("testTypeId")Long testTypeId,
    		@Param("contentAreaId")Long contentAreaId, @Param("gradeCourseId")Long gradeCourseId,
    		@Param("attendanceSchoolId")Long attendanceSchoolId,@Param("currentSchoolYear")Long currentSchoolYear, 
    		@Param("stageId") Long stageId, @Param("sourceType") String sourceType, @Param("operationalTestWindowId") Long operationalTestWindowId,
    		@Param("testSessionPrefix") String testSessionPrefix);
    
    String findPredecessorStageStatus(@Param("assessmentId") Long assessmentId, @Param("testTypeId")Long testTypeId,
    		@Param("contentAreaId")Long contentAreaId, @Param("gradeCourseId")Long gradeCourseId,
    		@Param("attendanceSchoolId")Long attendanceSchoolId,@Param("currentSchoolYear")Long currentSchoolYear, @Param("stageId") Long stageId,
    		@Param("studentId") Long studentId, @Param("operationalTestWindowId") Long operationalTestWindowId);
 
    StudentTestInfo findPredecessorTestInfo(@Param("assessmentId") Long assessmentId, @Param("testTypeId")Long testTypeId,
    		@Param("contentAreaId")Long contentAreaId, @Param("gradeCourseId")Long gradeCourseId,
    		@Param("attendanceSchoolId")Long attendanceSchoolId,@Param("currentSchoolYear")Long currentSchoolYear, @Param("stageId") Long stageId,
    		@Param("studentId") Long studentId, @Param("operationalTestWindowId") Long operationalTestWindowId);
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.testsession
     *
     * @mbggenerated Thu Oct 04 09:06:00 CDT 2012
     */
    int updateByExampleSelective(@Param("record") TestSession record, @Param("example") TestSessionExample example);

    /**
     * This method was generated by MyBatis testStatusGenerator.
     * This method corresponds to the database table public.testsession
     *
     * @mbggenerated Thu Oct 04 09:06:00 CDT 2012
     */
    int updateByExample(@Param("record") TestSession record, @Param("example") TestSessionExample example);

    /**
     *
     * @return
     */
    long getLastId();

    /**
     *
     * @param rosterId long
     */
    void removeEmptySessions(@Param("rosterId")long rosterId);

    /**
     * @param testSessionId long
     * @return {@link TestSession}
     */
    TestSession findByPrimaryKey(@Param("testSessionId")long testSessionId);

    /**
     * Returns the Test Session with the roster object that it is associated to, and the content area for the roster that
     * represents the Roster's state course identifier.
     * @param testSessionId
     * @return {@link TestSession}
     */
    TestSession findWithAssociationsByPrimaryKey(@Param("testSessionId")long testSessionId);
    
    /**
     * Returns the testsession, roster, student, test and educator details.
     * @param testSessionId {@link long}
     * @return {@link List<TestSessionPdfDTO>}
     */
    List<TestSessionPdfDTO> findTestSessionTicketDetailsById(
    		@Param("testSessionIds") List<Long> testSessionIds, 
    		@Param("educatorId") Long educatorId,
    		@Param("isTeacher") boolean isTeacher, @Param("organizationId")Long organizationId);

    /**
     * Returns the student, their enrolled school along with each roster they are part of.
     * 
     * i/p 1: selected organization (typically school), optional.Used as attendance school in search.
     * i/p 2: user organizations.Search for all students with in the users organization tree.  
     * i/p 3: educator id. Search for all rosters, for the given teacher.
     * i/p 4: hasViewAllRosterPermission. If true all rosters in the selected school(s) or users organization tree will be returned.
     * If false then 
     * @param limitCount 
     * @param enrollment
     * @return
     */
    
	/**
	 * Bishnupriya Nayak :US19343 : Test Management TestSession Completion
	 * Status Display
	 */
    List<TestSessionRoster> getTestSessionWithRoster(
    		@Param("userOrganizationId") Long userOrganizationId,
    		@Param("currentSchoolYear") Long currentSchoolYear,
    		@Param("educatorId") Long educatorId,
    		@Param("hasViewAllPermission") boolean hasViewAllPermission,
    		@Param("sortByColumn") String sortByColumn,
    		@Param("sortType") String sortType,
    		@Param("offset") int offset,
    		@Param("limit") int limitCount,
    		@Param("studentRosterCriteriaMap") Map<String,String> studentRosterCriteriaMap,
    		@Param("systemEnrollmentRuleId") Long systemEnrollmentRuleId,
    		@Param("manualEnrollmentRuleId") Long manualEnrollmentRuleId,
    		@Param("hasViewHighStakesTestSessionsPermission") Boolean hasViewHighStakesTestSessionsPermission,
    		@Param("qcComplete")Boolean qcComplete,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentProgramAbbrName") String assessmentProgramAbbrName,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeCourseId") Long gradeCourseId,
			@Param("schoolOrgId") Long schoolOrgId,
			@Param("itiSourceCode") String itiSourceCode,
			@Param("showExpired") Boolean showExpired,
			@Param("hasQCCompletePermission") Boolean hasQCCompletePermission, 
			@Param("includeCompletedTestSession")Boolean includeCompletedTestSession,
			@Param("includeInProgressTestSession")Boolean includeInProgressTestSession);
    
    @MapKey("id") 
    Map<Long, Map<String,String>> findTestSessionDelFlags(@Param("testSessionIds") Set<Long> testSessionIds);    
     
    boolean findTestSessionDelFlag(@Param("testSessionId") Long testSessionId);
    
    /**
     * Returns the student, their enrolled school along with each roster they are part of.
     * 
     * i/p 1: selected organization (typically school), optional.Used as attendance school in search.
     * i/p 2: user organizations.Search for all students with in the users organization tree.  
     * i/p 3: educator id. Search for all rosters, for the given teacher.
     * i/p 4: hasViewAllRosterPermission. If true all rosters in the selected school(s) or users organization tree will be returned.
     * If false then 
     * @param limitCount 
     * @param enrollment
     * @return
     */
    int countTestSessionWithRoster(
    		@Param("userOrganizationId") Long userOrganizationId,
    		@Param("currentSchoolYear") Long currentSchoolYear,
    		@Param("educatorId") Long educatorId,
    		@Param("hasViewAllPermission") boolean hasViewAllPermission,
    		@Param("studentRosterCriteriaMap") Map<String,String> studentRosterCriteriaMap,
    		@Param("systemEnrollmentRuleId") Long systemEnrollmentRuleId,
    		@Param("manualEnrollmentRuleId") Long manualEnrollmentRuleId,
    		@Param("hasViewHighStakesTestSessionsPermission") Boolean hasViewHighStakesTestSessionsPermission,
    		@Param("qcComplete")Boolean qcComplete,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeCourseId") Long gradeCourseId,
			@Param("schoolOrgId") Long schoolOrgId,
			@Param("itiSourceCode") String itiSourceCode,
			@Param("showExpired") Boolean showExpired,
			@Param("hasQCCompletePermission") Boolean hasQCCompletePermission);

    /**
     * 
     * @param attendanceSchoolIds
     * @param userOrganizationIds
     * @param educatorId
     * @param hasViewAllPermission
     * @param orderByClause
     * @param offset
     * @param limitCount
     * @param studentRosterCriteriaMap
     * @param systemEnrollmentRuleId
     * @param manualEnrollmentRuleId
     * @param hasHighStakesPermission
     * @return
     */
    List<TestSessionRoster> getQCTestSessionWithRoster(
    		@Param("attendanceSchoolIds") List<Long> attendanceSchoolIds,
    		@Param("userOrganizationIds") List<Long> userOrganizationIds,
    		@Param("educatorId") Long educatorId,
    		@Param("hasViewAllPermission") boolean hasViewAllPermission,
    		@Param("orderByClause") String orderByClause,
    		@Param("offset") int offset,
    		@Param("limit") int limitCount,
    		@Param("studentRosterCriteriaMap") Map<String,String> studentRosterCriteriaMap,
    		@Param("systemEnrollmentRuleId") Long systemEnrollmentRuleId,
    		@Param("manualEnrollmentRuleId") Long manualEnrollmentRuleId,
    		@Param("hasHighStakesPermission")Boolean hasHighStakesPermission
    		 );

    /**
     * 
     * @param attendanceSchoolIds
     * @param userOrganizationIds
     * @param educatorId
     * @param hasViewAllPermission
     * @param studentRosterCriteriaMap
     * @param systemEnrollmentRuleId
     * @param manualEnrollmentRuleId
     * @param hasHighStakesPermission
     * @return
     */
    int countQCTestSessionWithRoster(
    		@Param("attendanceSchoolIds") List<Long> attendanceSchoolIds,
    		@Param("userOrganizationIds") List<Long> userOrganizationIds,
    		@Param("educatorId") Long educatorId,
    		@Param("hasViewAllPermission") boolean hasViewAllPermission,
    		@Param("studentRosterCriteriaMap") Map<String,String> studentRosterCriteriaMap,
    		@Param("systemEnrollmentRuleId") Long systemEnrollmentRuleId,
    		@Param("manualEnrollmentRuleId") Long manualEnrollmentRuleId,
    		@Param("hasHighStakesPermission")Boolean hasHighStakesPermission
    		 );
    
    /**
     * @param testSessionName
     * @param studentId
     * @return
     */
    List<Long> selectTestSessionByStudentId(
    		@Param("testSessionName")String testSessionName, 
    		@Param("studentId")Long studentId);

    /**
     * @param attendanceSchoolIds
     * @param userOrganizationIds
     * @param orderByClause
     * @param offset
     * @param limitCount
     * @param studentRosterCriteriaMap
     * @return
     */
    List<AutoRegisteredTestSessionDTO> getAutoRegisteredTestSessions(
    		@Param("userOrganizationId") Long userOrganizationId,
    		@Param("currentSchoolYear") Long currentSchoolYear,
    		@Param("sortByColumn") String sortByColumn,
    		@Param("sortType") String sortType,
    		@Param("offset") Integer offset,
    		@Param("limit") Integer limitCount,
    		@Param("testSessionCriteriaMap") Map<String,String> testSessionCriteriaMap,
    		@Param("assessmentProgramId") Long assessmentProgramId,
    		@Param("assessmentProgramAbbr") String assessmentProgramAbbr,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeCourseId") Long gradeCourseId,
			@Param("schoolOrgId") Long schoolOrgId,
			@Param("showExpired") Boolean showExpired);
    
    List<AutoRegisteredTestSessionDTO> getAutoRegisteredTestSession(
    		@Param("userOrganizationId") Long userOrganizationId,
    		@Param("currentSchoolYear") Long currentSchoolYear,
    		@Param("sortByColumn") String sortByColumn,
    		@Param("sortType") String sortType,
    		@Param("offset") Integer offset,
    		@Param("limit") Integer limitCount,
    		@Param("testSessionCriteriaMap") Map<String,String> testSessionCriteriaMap,
    		@Param("assessmentProgramId") Long assessmentProgramId,
    		@Param("assessmentProgramAbbr") String assessmentProgramAbbr,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeCourseId") Long gradeCourseId,
			@Param("schoolOrgId") Long schoolOrgId,
			@Param("showExpired") Boolean showExpired,
			@Param("includeCompletedTestSession")Boolean includeCompletedTestSession, 
			@Param("includeInProgressTestSession")Boolean includeInProgressTestSession);
   
    /**
     * @param userOrganizationId
     * @param orderByClause
     * @param offset
     * @param limitCount
     * @param studentRosterCriteriaMap
     * @param userId
     * @return 
     */
    List<AutoRegisteredTestSessionDTO> getAutoregisteredTestSessionForActiveRosters(
    		@Param("userOrganizationId") Long userOrganizationId,
    		@Param("sortByColumn") String sortByColumn,
    		@Param("sortType") String sortType,
    		@Param("offset") Integer offset,
    		@Param("limit") Integer limitCount,
    		@Param("testSessionCriteriaMap") Map<String,String> testSessionCriteriaMap,
    		@Param("teacherId") Long teacherId,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentProgramAbbr") String assessmentProgramAbbr,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeCourseId") Long gradeCourseId,
			@Param("schoolOrgId") Long schoolOrgId,
			@Param("showExpired") Boolean showExpired);
    
    /**
     * @param attendanceSchoolIds
     * @param userOrganizationIds
     * @param studentRosterCriteriaMap
     * @return
     */
    Integer countAutoRegisteredTestSessions(
    		@Param("userOrganizationId") Long userOrganizationId,
    		@Param("currentSchoolYear") Long currentSchoolYear,
    		@Param("testSessionCriteriaMap") Map<String,String> testSessionCriteriaMap,
    		@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeCourseId") Long gradeCourseId,
			@Param("schoolOrgId") Long schoolOrgId,
			@Param("showExpired") Boolean showExpired);
 
    /**
     * @param testSessionId
     * @return
     */
    List<TestSessionPdfDTO> findAutoRegisteredTestSessionTicketsById(
    		@Param("testSessionIds") List<Long> testSessionIds,
    		@Param("studentIds") List<Long> studentIds, @Param("organizationId") Long organizationId);
    
    /**
     * @param userOrganizationId
     * @param studentRosterCriteriaMap
     * @param userId
     * @return
     */
    Integer countAutoregisteredTestSessionForActiveRosters(
    		@Param("userOrganizationId") Long userOrganizationId,
    		@Param("testSessionCriteriaMap") Map<String,String> testSessionCriteriaMap,
    		@Param("teacherId") Long teacherId,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentProgramAbbr") String assessmentProgramAbbr,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeCourseId") Long gradeCourseId,
			@Param("schoolOrgId") Long schoolOrgId,
			@Param("showExpired") Boolean showExpired);
 
    /**
     * 
     * @param studentId
     * @param gradeCourseCode
     * @param contentAreaCode
     * @param name
     * @return
     */
    List<TestSession> selectForStudentGradeSubjectAndPartialName(
    		@Param("studentId") Long studentId,
    		@Param("gradeCourseCode") String gradeCourseCode,
    		@Param("contentAreaCode") String contentAreaCode,
    		@Param("name") String name,
    		@Param("limit") Integer limit);
    
    @MapKey("testsessionid") 
    Map<Long, Map<String,String>> findAutoPrintFiles(@Param("testSessionIds") List<Long> testSessionIds);
    
	void deactivateByPrimaryKey(@Param("testSessionId") long testSessionId, @Param("modifiedUser") Long modifiedUser,
			@Param("modifiedDate") Date modifiedDate);

    void deactivateByPrimaryKeyWithStatus(@Param("testSessionId")Long testSessionId, @Param("newStatusPrefix")String newStatusPrefix, @Param("modifiedUserId")Long modifiedUserId);
    void reactivateByPrimaryKeyForGradeChange(@Param("testSessionId")Long testSessionId, @Param("modifiedUserId")Long modifiedUserId);
    Integer countEnrolledStudentsOfDLMTeacher(@Param("educatorId") Long educatorId,
    		//@Param("userContractingOrganizationId") Long userOrganizationId, 
    		@Param("currentSchoolYear") int currentSchoolYear);
    
    /**
     * Biyatpragyan Mohanty : bmohanty_sta@ku.edu : US15738 : Test Coordination - enhance Test Information PDF functionality
     * Get media files associated to a test session.
     * @param testSessionIds
     * @return
     */
    @MapKey("testsessionid") 
    Map<Long, Map<String,String>> selectResourceByTestSessionId(@Param("testSessionIds") List<Long> testSessionIds);

    List<StudentTestSessionInfoDTO> getStudentsTestsInfo(@Param("organionId") Long organionId, @Param("currentSchoolYear") Long currentSchoolYear,
    		@Param("isTeacher") Boolean isTeacher, @Param("educatorId") Long educatorId, 
    		@Param("assessmentProgramCode") String assessmentProgramCode, @Param("offset") int offset, @Param("limit") int limit, @Param("assessmentPrograms") List<Long> assessmentPrograms);
    	    
    List<StudentTestSectionsDTO> getStudentTestSectionDetails(@Param("studenttestid") Long studenttestid);
    
    /**
     * @param source
     * @param studentId
     * @return
     */
    List<Long> selectTestSessionByStudentIdAndSource(
    		@Param("source")String source, 
    		@Param("studentId")Long studentId);

    
    List<Long> selectTestSessionByStudentIdAndSourceWithActiveOTW(
    		@Param("source")String source, 
    		@Param("studentId")Long studentId,
    		@Param("assessmentProgramId") Long assessmentProgramId);
    
    List<TestSession> selectAllTestSessionsByStudentIdSource(
    		@Param("source")String source, 
    		@Param("studentId")Long studentId, @Param("assessmentProgramCode") String assessmentProgramCode);
    
    /**
     * @param studentTestIds
     * @return
     */
    @MapKey("studentstestid")
	List<StudentTestDTO> getAllStudentsTestSectionDetails(
			@Param("studentTestIds") List<Long> studentTestIds);

    
    List<KSDEStudentTestDetailsDTO> getKSDEStudentTestDetails(@Param("organionId") Long organionId, 
    		@Param("currentSchoolYear") Long currentSchoolYear, @Param("subjectAreaCodes") List<String> subjectAreaCodes);

	List<TestFormMediaResourceDTO> getTestFormMediaResource(@Param("fromDate") String fromDate,
			@Param("toDate") String toDate,@Param("assessmentPrograms") List<Long> assessmentPrograms,@Param("qcStatus") String qcStatus,@Param("media") String media);
	
	List<AssignScorerTestSessionDTO> getTestSessionAndStudentCountForScorer(@Param("stateId") Long stateId, 
			@Param("districtId") Long districtId, @Param("schoolId") Long schoolId,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentProgramCode") String assessmentProgramCode,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeId") Long gradeId,
			@Param("sidx") String sortByColumn,
			@Param("sord") String sortType,
			@Param("offset") Integer i, 
			@Param("limit") Integer limitCount,
			@Param("testsessionRecordCriteriaMap") Map<String,String> testsessionRecordCriteriaMap);
	
	Integer getCountTestSessionAndStudentCountForScorer(@Param("stateId") Long stateId,
			@Param("districtId") Long districtId, @Param("schoolId") Long schoolId,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentProgramCode") String assessmentProgramCode,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeId") Long gradeId,
			@Param("sortByColumn") String sortByColumn,
			@Param("sortType") String sortType,
			@Param("testsessionRecordCriteriaMap") Map<String,String> testsessionRecordCriteriaMap);
	
	List<ScorerTestSessionStudentDTO> selectTestSectionStudents(@Param("testSessionId") Long testSessionId,@Param("subjectId")Long subjectId,@Param("schoolyear") Long schoolyear,@Param("gradeId") Long gradeId );
	
	Stage selectTestSessionStageByPrimaryKey(@Param("testSessionStageId")Long testSessionStageId);

	List<Stage> selectStageByContentAreaTestTypeAssessment(@Param("contentAreaId") Long contentAreaIds,
			@Param("testTypeId") Long testTypeId, @Param("assessmentId") Long assessmentId);


	List<TestSession> getTestSessionByTestId(Long testId);

	void updateTestsession(@Param("id")Long testSessionId, @Param("modifiedUser") Long modifiedUser, @Param("modifiedDate") Date modifiedDate);

	TestSession getTestSessionByTestSessionId(@Param("testSessionId")Long testSessionId);

	TestSession getTestSessionDetailsByTestSessionId(@Param("testSessionId")Long testSessionId);

 	List<TestSession> getTestSessionByStudentIdTestCollectionSource(@Param("studentId") Long studentId, @Param("source") String source, @Param("testCollectionId") Long testCollectionId);

	int insertInterim(TestSession ts);
	List<TestSessionPdfDTO> findTestSessionTicketDetailsByIdInterim(@Param("testSessionIds") List<Long> testSessionIds, 
    		@Param("educatorId") Long educatorId,
    		@Param("isTeacher") boolean isTeacher, @Param("organizationId") Long organizationId);
	
	List<TestSessionPdfDTO> findTestSessionTicketDetailsForPredictive(
			@Param("testSessionIds") List<Long> testSessionIds, @Param("teacherId") Long teacherId,
			@Param("isTeacher") boolean isTeacher, @Param("organizationId") Long organizationId);
	
    List<Long> findTestSessionsInactivatedBy(@Param("inactivationType")String inactivationType, @Param("studentId") Long studentId, 
    								@Param("currentSchoolYear") Integer schoolYear, @Param("attendanceSchoolId") Long attendanceSchoolId, @Param("gradeId") Long gradeId, @Param("isEnrolled") Boolean isEnrolled);

	int deleteForInterim(@Param("testSessionId") Long testSessionId, @Param("modifiedUser") Long modifiedUser,
			@Param("modifiedDate") Date modifiedDate);

	List<Long> findTestSessionsToDeactivateForGradeChange(@Param("studentId") Long studentId, 
							@Param("currentSchoolYear") Integer currentSchoolYear, @Param("attendanceSchoolId") Long attendanceSchoolId, @Param("oldGradeId") Long oldGradeId, @Param("newGradeId") Long newGradeId);
	
	boolean doesStudentHaveTestSessionsForCurrentGrade(@Param("studentId") Long studentId, 
			@Param("currentSchoolYear") Integer currentSchoolYear, @Param("attendanceSchoolId") Long attendanceSchoolId, @Param("gradeId") Long gradeId);
	
	List<AutoRegisteredTestSessionDTO> getKELPAAutoRegisteredTestSessionsByGradeCourseGradeBand(
    		@Param("userOrganizationId") Long userOrganizationId,
    		@Param("currentSchoolYear") Long currentSchoolYear,
    		@Param("sortByColumn") String sortByColumn,
    		@Param("sortType") String sortType,
    		@Param("offset") Integer offset,
    		@Param("limit") Integer limitCount,
    		@Param("testSessionCriteriaMap") Map<String,String> testSessionCriteriaMap,
    		@Param("assessmentProgramId") Long assessmentProgramId,
    		@Param("assessmentProgramAbbr") String assessmentProgramAbbr,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeCourseId") Long gradeCourseId,
			@Param("schoolOrgId") Long schoolOrgId,
			@Param("showExpired") Boolean showExpired,
			@Param("includeCompletedTestSession")Boolean includeCompletedTestSession, 
			@Param("includeInProgressTestSession")Boolean includeInProgressTestSession);
	
	List<AutoRegisteredTestSessionDTO> getKELPAAutoregisteredTestSessionForActiveRosters(
    		@Param("userOrganizationId") Long userOrganizationId,
    		@Param("sortByColumn") String sortByColumn,
    		@Param("sortType") String sortType,
    		@Param("offset") Integer offset,
    		@Param("limit") Integer limitCount,
    		@Param("testSessionCriteriaMap") Map<String,String> testSessionCriteriaMap,
    		@Param("teacherId") Long teacherId,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentProgramAbbr") String assessmentProgramAbbr,
			@Param("testingProgramId") Long testingProgramId,
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeCourseId") Long gradeCourseId,
			@Param("schoolOrgId") Long schoolOrgId,
			@Param("showExpired") Boolean showExpired);

	/* sudhansu.b
	 * Added for US19233 - KELPA2 Auto Assign Teachers Scoring Assignment 
	 */	
	 List<TestSession> getSessionsForAutoScoring(@Param("assessmentProgramId") Long assessmentProgramId);

	Boolean checkHavingActiveWindow(@Param("testsessionId") Long testsessionId);

	List<KSDEStudentTestDetailsDTO> getKSDEStudentTestDetailsForHGSS(@Param("organionId") Long organionId, 
    		@Param("currentSchoolYear") Long currentSchoolYear, @Param("subjectAreaCodes") List<String> subjectAreaCodes);

	List<KELPATestAdministrationDTO> getKELPATestAdministrationExtract(@Param("orgId")Long orgId, @Param("currentSchoolYear")Long currentSchoolYear,
			@Param("assessmentProgramId")List<Integer> assessmentProgramId);

	List<String> getTestingProgramNames(@Param("testSessionId")Long testSessionId);

	/**
	 * Bishnupriya Nayak :US19343 : Test Management TestSession Completion
	 * Status Display
	 */
		List<AutoRegisteredTestSessionDTO> getAutoRegisteredTestSessionsForExtendedStatus(
				@Param("userOrganizationId") Long currentOrganizationId, 
				@Param("currentSchoolYear")Long currentSchoolYear,
				@Param("sortByColumn") String sortByColumn,
				@Param("sortType") String sortType, 
				@Param("offset")Integer offset,
				@Param("limit") Integer limitCount,
				@Param("testSessionCriteriaMap")Map<String, String> testSessionCriteriaMap,
				@Param("assessmentProgramId")Long assessmentProgramId,
				@Param("assessmentProgramAbbr")String assessmentProgramAbbr,
				@Param("testingProgramId")Long testingProgramId, 
				@Param("contentAreaId")Long contentAreaId, 
				@Param("gradeCourseId")Long gradeCourseId,
				@Param("schoolOrgId")Long schoolOrgId,
				@Param("showExpired")Boolean showExpired,
				@Param("includeCompletedTestSession")Boolean includeCompletedTestSession, 
				@Param("includeInProgressTestSession")Boolean includeInProgressTestSession); 
		
		List<TestSessionRoster> getTestSessionsByStudentId(
	    		@Param("userOrganizationId") Long userOrganizationId,
	    		@Param("currentSchoolYear") Long currentSchoolYear,
	    		@Param("educatorId") Long educatorId,
	    		@Param("hasViewAllPermission") boolean hasViewAllPermission,
	    		@Param("sortByColumn") String sortByColumn,
	    		@Param("sortType") String sortType,
	    		@Param("offset") int offset,
	    		@Param("limit") int limitCount,
	    		@Param("studentRosterCriteriaMap") Map<String,String> studentRosterCriteriaMap,
	    		@Param("systemEnrollmentRuleId") Long systemEnrollmentRuleId,
	    		@Param("manualEnrollmentRuleId") Long manualEnrollmentRuleId,
	    		@Param("hasViewHighStakesTestSessionsPermission") Boolean hasViewHighStakesTestSessionsPermission,
	    		@Param("qcComplete")Boolean qcComplete,
				@Param("assessmentProgramId") Long assessmentProgramId,
				@Param("itiSourceCode") String itiSourceCode,
				@Param("showExpired") Boolean showExpired,
				@Param("hasQCCompletePermission") Boolean hasQCCompletePermission,
				@Param("includeCompletedTestSession")Boolean includeCompletedTestSession,
				@Param("includeInProgressTestSession")Boolean includeInProgressTestSession,
				@Param("studentId") Long studentId);
		
		List<TestSessionRoster> getTestSessionsByStudentIdForLCS(
	    		@Param("userOrganizationId") Long userOrganizationId,
	    		@Param("currentSchoolYear") Long currentSchoolYear,
	    		@Param("educatorId") Long educatorId,
	    		@Param("hasViewAllPermission") boolean hasViewAllPermission,
	    		@Param("sortByColumn") String sortByColumn,
	    		@Param("sortType") String sortType,
	    		@Param("offset") int offset,
	    		@Param("limit") int limitCount,
	    		@Param("studentRosterCriteriaMap") Map<String,String> studentRosterCriteriaMap,
	    		@Param("systemEnrollmentRuleId") Long systemEnrollmentRuleId,
	    		@Param("manualEnrollmentRuleId") Long manualEnrollmentRuleId,
	    		@Param("hasViewHighStakesTestSessionsPermission") Boolean hasViewHighStakesTestSessionsPermission,
	    		@Param("qcComplete")Boolean qcComplete,
				@Param("assessmentProgramId") Long assessmentProgramId,
				@Param("itiSourceCode") String itiSourceCode,
				@Param("showExpired") Boolean showExpired,
				@Param("hasQCCompletePermission") Boolean hasQCCompletePermission,
				@Param("includeCompletedTestSession")Boolean includeCompletedTestSession,
				@Param("includeInProgressTestSession")Boolean includeInProgressTestSession,
				@Param("studentId") Long studentId);
		
	void deactivateLcsStudentsTestsForStudentOnly(@Param("studentId") Long studentId,
			@Param("modifiedDate") Date modifiedDate, @Param("modifiedUser") Long modifiedUser);

	void deactivateLcsStudentsTestsForLcsOnly(@Param("lcsId") String lcsId, @Param("modifiedDate") Date modifiedDate,
			@Param("modifiedUser") Long modifiedUser);

	void deactivateLcsTests(@Param("studentId") Long studentId, @Param("testSessionId") Long testSessionId,
			@Param("modifiedDate") Date modifiedDate, @Param("modifiedUser") Long modifiedUser);

		void resetDLMTestlet(@Param("studentId") Long studentId ,@Param("testSessionId") Long testSessionId,@Param("contentAreaId") Long contentAreaId, @Param("userId")Long userId);

		List<Long> checkIsStudentPresent(@Param("stateStudentIdentifier") String stateStudentIdentifier,@Param("contractingOrgId")Long contractingOrgId);

		Long getContentAreaIdByTestSession(@Param("testSessionId") Long testSessionId, @Param("studentId") Long studentId);

		List<Stage> getUploadScoresStage(
			@Param("schoolIds") Long[] schoolId,
			@Param("subjectId") Long subjectId,
			@Param("gradeId") Long gradeId);

		List<TestSession> getUploadScoresTestSessions(
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentCode")String assessmentCode,
			@Param("subjectId") Long subjectId,
			@Param("gradeId") Long gradeId,
			@Param("stageId") Long stageId,
			@Param("schoolIds") Long[] schoolIds,
			@Param("scorerId") Long scorerId,
			@Param("isScoreAllTest") boolean isScoreAllTest,
			@Param("currentSchoolYear") Long currentSchoolYear);
		
		
		List<TestSession> getAssignScoresTestSessions(@Param("assessmentProgramId") Long assessmentProgramId,
				@Param("schoolId") Long schoolId,
				@Param("stageId") Long stageId,
				@Param("subjectId") Long subjectId,
				@Param("gradeId") Long gradeId,@Param("currentSchoolYear") int currentSchoolYear, @Param("assessmentProgramCode") String assessmentProgramCode);

		List<Long> getAllLcsIds();

	List<Long> getStudentsIdsByIncompleteTestSessionId(@Param("testSessionId") Long testSessionId,
			@Param("currentSchoolYear") Long currentSchoolYear);

	
	

	

	List<Stage> getStageByGradeIdForAssignScorers(@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("schoolId") Long schoolId,@Param("contentAreaId") Long contentAreaId,@Param("gradeId") Long gradeId,@Param("currentSchoolYear") int currentSchoolYear,
			@Param("assessmentProgramCode") String assessmentProgramCode);

	void deleteCurrentTest(@Param("testSessionId")Long testSessionId, @Param("studentId")Long studentId, @Param("userId")Long userId);

	TestSession findByPrimaryKeyStage(@Param("testSessionId")long testSessionId);

	Long findLCSIdCount(@Param("lcsId")String lcsId);
	
	List<TestSession> findTestSessionByGradeBandContentArea(@Param("contentAreaId") Long contentAreaId, 
			@Param("gradeBandId") Long gradeBandId,
    		@Param("attendanceSchoolId") Long attendanceSchoolId,
    		@Param("currentSchoolYear") Long currentSchoolYear, 
    		@Param("stageId") Long stageId, 
    		@Param("sourceType") String sourceType, 
    		@Param("operationalTestWindowId") Long operationalTestWindowId,
    		@Param("rosterId") Long rosterId,
    		@Param("testSessionName") String testSessionName);
	
	String findPredecessorStageStudentsTestStatus(@Param("contentAreaId") Long contentAreaId, 
			@Param("gradeBandId") Long gradeBandId,
    		@Param("currentSchoolYear") Long currentSchoolYear, 
    		@Param("stageId") Long stageId,
    		@Param("studentId") Long studentId, 
    		@Param("operationalTestWindowId") Long operationalTestWindowId);
	
		List<AutoRegisteredTestSessionDTO> getAutoregisteredTestSessionForActiveRostersPltw(@Param("userOrganizationId") Long userOrganizationId,
    		@Param("sortByColumn") String sortByColumn,
    		@Param("sortType") String sortType,
    		@Param("offset") Integer offset,
    		@Param("limit") Integer limitCount,
    		@Param("testSessionCriteriaMap") Map<String,String> testSessionCriteriaMap,
    		@Param("teacherId") Long teacherId,
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("assessmentProgramAbbr") String assessmentProgramAbbr,
			@Param("testingProgramId") Long testingProgramId,
			@Param("schoolOrgId") Long schoolOrgId,
			@Param("showExpired") Boolean showExpired,
			@Param("includeCompletedTestSession") Boolean includeCompletedTestSession);
}