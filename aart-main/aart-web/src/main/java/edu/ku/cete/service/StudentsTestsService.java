/**
 * 
 */
package edu.ku.cete.service;

import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.DailyAccessCode;
import edu.ku.cete.domain.RosterAutoScoringStudentsTestsMap;
import edu.ku.cete.domain.StudentsTestSections;
import edu.ku.cete.domain.StudentsTests;
import edu.ku.cete.domain.StudentsTestsExample;
import edu.ku.cete.domain.TestSession;
import edu.ku.cete.domain.api.scoring.ScoringAPIObject;
import edu.ku.cete.domain.content.Stage;
import edu.ku.cete.domain.content.Test;
import edu.ku.cete.domain.content.TestCollection;
import edu.ku.cete.domain.enrollment.Enrollment;
import edu.ku.cete.domain.enrollment.ViewMergeStudentDetailsDTO;
import edu.ku.cete.domain.studentsession.StudentSessionRule;
import edu.ku.cete.domain.user.User;
import edu.ku.cete.ksde.kids.result.KidRecord;
import edu.ku.cete.service.exception.DuplicateTestSessionNameException;
import edu.ku.cete.util.SourceTypeEnum;

/**
 * @author neil.howerton
 *
 */
public interface StudentsTestsService {
    /**
     * This method corresponds to the database table public.studentstests
     */
    int countByExample(StudentsTestsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Fri Jul 06 09:19:15 CDT 2012
     */
    int deleteByExample(StudentsTestsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Fri Jul 06 09:19:15 CDT 2012
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Fri Jul 06 09:19:15 CDT 2012
     */
    StudentsTests insert(StudentsTests record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Fri Jul 06 09:19:15 CDT 2012
     */
    StudentsTests insertSelective(StudentsTests record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Fri Jul 06 09:19:15 CDT 2012
     */
    List<StudentsTests> selectByExample(StudentsTestsExample example);

    /**
     *
     *@param assessmentProgramId long
     *@param rosterId long
     * @param teacherId 
     *@return List<StudentsTests>
     */
    List<StudentsTests> findByAssessmentProgramAndRoster(long assessmentProgramId, long rosterId);

    /**
     *
     *@param example {@link StudentsTestsExample}
     *@param assessmentId long
     *@return List<StudentsTests>
     */
    List<StudentsTests> selectByExampleAssessmentIdAndRoster(StudentsTestsExample example, long assessmentId, long rosterId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Fri Jul 06 09:19:15 CDT 2012
     */
    StudentsTests selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Fri Jul 06 09:19:15 CDT 2012
     */
    int updateByExampleSelective(@Param("record") StudentsTests record, @Param("example") StudentsTestsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Fri Jul 06 09:19:15 CDT 2012
     */
    int updateByExample(@Param("record") StudentsTests record, @Param("example") StudentsTestsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Fri Jul 06 09:19:15 CDT 2012
     */
    int updateByPrimaryKeySelective(StudentsTests record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Fri Jul 06 09:19:15 CDT 2012
     */
    int updateByPrimaryKey(StudentsTests record);

    /**
     * This method creates the test session for a given test collection for both system defined enrollment 
     * and manual enrollment type. 
     */
    /**
     * @param students
     *            List<Long>
     * @param testCollectionId
     *            long
     * @param testId
     *            		    	testSession = studentsTestsService.addNewTestSession(enrollment, testSession, testCollection, AARTCollectionUtil.getIds(tests), studentSessionRule); 
long                 
     * @param testSession
     *            {@link TestSession}
     * @param stateId 
     * @param testingProgramId
     *            {@link Long}
     * @return boolean whether the list of students and tests contained a
     *         duplicate key that already exists.
     * @throws DuplicateTestSessionNameException
     *             DuplicateTestSessionNameException
     */
    
    boolean createTestSessions(List<Long> students, Long testCollectionId, Long testId, TestSession testSession, List<Long> sensitivityTags, Long stateId)
    				throws DuplicateTestSessionNameException;
   
   /**
    *
    *@param testSessionId long
    *@return List<StudentsTests>
    */
   List<StudentsTests> findByTestSession(long testSessionId);

   List<StudentsTests> findByTestSessionAndStudent(long testSessionId, long studentId);
   
	/**
	 * @param studentIds {@link Set}
	 * @param studentTestSessionMap {@link Map}
	 * @param studentTestCollectionMap {@link Map}
	 * @param assessmentId {@link Long}
	 * @param rosterId {@link Long}
	 * @return {@link Boolean}
	 */
	boolean manageTestSessions(List<Long> studentIds,
			Map<Long, List<Long>> studentTestSessionMap,
			Map<Long, List<Long>> studentTestCollectionMap,
			long assessmentId, long rosterId);

	/**
	 * enrolls the given students to the given test session.
	 * Un enrolls the given students from the given test session.
	 * Synchronizes the enrollment/un enrollment with TDE.
	 * 
	 * @param toBeEnrolledStudentIds
	 * @param toBeUnEnrolledStudentIds
	 * @param testSessionId
	 * @param qcComplete
	 * @return
	 */
	boolean editTestSession(List<Long> toBeEnrolledStudentIds,
			List<Long> toBeUnEnrolledStudentIds,
			Long testSessionId, Boolean qcComplete);
	
	
	/**
    * 
    * @param assessmentId {@link Long}  
    * @param rosterId {@link Long} 
    * @return List<StudentsTests>
    */
   List<StudentsTests> findByAssessmentIdAndRoster(Long assessmentId, Long rosterId);
   
	/**
	 * @param studentIds
	 * @param testSessionId
	 * @param studentsTestsStatusId
	 */
	void updateStudentsTestsStatus(List<Long> studentIds,
			Long testSessionId, Long studentsTestsStatusId);
	
	void updateStudentsTestsSectionsStatus(List<Long> studentIds, Long testSessionId,
			Long studentsTestSectionsStatusId);

	/**
	 * @param studentIds
	 * @param testSessionId
	 */
	void closeStudentsTestsStatus(List<Long> studentIds, Long testSessionId);
	
	void closeStudentsTestAtEndTestSession(List<Long> studentIds, Long testSessionId);
	
	void updateInterimThetaForAdaptiveStudents(List<Long> studentIds, Long testSessionId, Long stageId);
	
	void closeStudentsTestSectionsStatus(List<Long> studentIds,Long testSessionId);

	boolean reactivateStudentsTestSectionsStatus(List<Long> studentTestSectionIds, Long testSessionId);
	
	/**
	 * @param studentNameKeyword
	 * @return
	 */
	List<Long> getByStudentName(String studentNameKeyword, String testNameKeyword, Long organizationId);

	/**
	 * 
	 * @param kidRecord
	 * @param enrollment
	 * @return
	 * @throws DuplicateTestSessionNameException
	 */
	Boolean createAutoRegistrationTestSessions(KidRecord kidRecord, Enrollment enrollment) throws DuplicateTestSessionNameException;
	
	/**
	 * @param stateStudentIdentifier
	 * @param testId
	 * @param attendanceSchoolId
	 * @return
	 */
	List<StudentsTests> getByStateStudentIdAndTest(String stateStudentIdentifier, Long testId, Long attendanceSchoolId);

	/**
	 * 
	 * @param enrollments
	 * @param subjectAreaId
	 * @param testTypeId
	 * @return
	 */
	Map<String, Object> batchCreateAutoRegistrationTestSessions(Enrollment enrollment, Long subjectAreaId, Long testTypeId, Long gradeCourseId, Long assessmentId);

	Map<String, String> getAutoSubjectAreaNameMap();

	void unEnrollStudent(Enrollment enrollment);
	
	void unEnrollStudentFromKidsProcess(Enrollment enrollment);
	
	boolean fcUnenrollStudentsTests(long testSessionId, User user);

	boolean fcMidUnenrollStudentsTests(long testSessionId, User user);

    Boolean removeTestSessionsOnClear(Enrollment enrollment, String testTypeCode, String subjectAreaCode);
    
    Boolean removeEndOfPathwaysTestSessionsOnClear(Enrollment enrollment, String subjectAreaCode);
    
    TestSession addNewTestSession(Enrollment enrollment,TestSession testSession, TestCollection testCollection, List<Long> tests, 
    		StudentSessionRule studentSessionRule, Long studentsTestsStatusId) throws DuplicateTestSessionNameException;
    
    TestSession addNewTestSession(Enrollment enrollment,TestSession testSession, TestCollection testCollection, List<Long> tests, 
    		StudentSessionRule studentSessionRule, Long studentsTestsStatusId, Long previousStudentsTestId) throws DuplicateTestSessionNameException;
    
    void addStudentExistingSession(Enrollment enrollment, TestSession testSession, Boolean accessibleForm);
    
    void addStudentExistingSession(Enrollment enrollment,TestSession testSession, TestCollection testCollection,List<Test> testsInCollection, Long studentTestStatusId);
    
    void addStudentExistingSession(Enrollment enrollment,TestSession testSession, TestCollection testCollection,List<Test> testsInCollection, Long studentTestStatusId, Long overrideUserId);
    
	void addStudentExistingSession(Enrollment enrollment,TestSession testSession, TestCollection testCollection,List<Test> testsInCollection, Long studentTestStatusId, Long overrideUserId, Long previousStudentsTestId);

	List<Test> dlmFilterTestsBasedOnPNP(long studentId, List<Test> tests);
	
	boolean pnpUnenrollStudentsTests(long testSessionId, long studentId, User user);

	void rosterUnEnrollStudent(Long enrollmentId, Long rosterId, Long userId);

	List<StudentsTests> getExistingMultiAssignSessions(Long studentId, Long contentAreaId, Long gradeCourseId, Long multiAssignTestWindowId);
	
	List<Long> findCompletedIdsByTestExternalIdWithTaskVariants(Long testExternalId, List<Long> taskVariantIds, Long limit);
	
	List<StudentsTestSections> findStudentsTestSectionsByStudentsTestsId(Long studentsTestsId);

	TestSession addNewTestSessionForAllTestsInCollection(Enrollment enrollment,
			TestSession testSession, TestCollection testCollection,
			List<Long> tests, StudentSessionRule studentSessionRule, Long studentsTestsStatusId)
			throws DuplicateTestSessionNameException;

	void addStudentExistingSessionAllTests(Enrollment enrollment,TestSession testSession, TestCollection testCollection,List<Test> testsInCollection,
			Long studentTestStatusId);
			

	boolean reactivateStudentsTestSections(List<Long> studentIds, Long testSessionId);

	List<Long> findInEligibleStudentsForReactivation(List<Long> studentIds, Long testSessionId);

	void saveDailyAccessCodes(List<DailyAccessCode> accessCodes);

	String getRandomWord();

	List<StudentsTests> findExistingFixedAssignTestSessions(Long studentId,Long enrollmentId, Long contentAreaId, String gradeCourseAbbrName,
			Long operationalTestWindowId);
	
	List<StudentsTests> getCompletedStudentsTests(Long assessmentId,Long testTypeId, Long contentAreaId, Long gradeCourseId,
			Long studentId, Long currentSchoolYear, Long stageId, SourceTypeEnum sourceType,Long operationalTestWindowId);

	List<DailyAccessCode> getAccessCodes(Long assessmentProgramId,
			Date effectiveDate, List<Map<Long, Long>> cgList, Long stateId,Boolean isPLTW);

	List<DailyAccessCode> getAccessCodes(Long assessmentProgramId,
			Date effectiveDate);

	Stage getNextStageByTestSession(Long testSessionId);

	List<Stage> getAllStagesByTestSession(Long testSessionId, Long studentId, Long operationalTestWindowId);
	String getStudentsTestStageStatus(Enrollment enrollment, Long testTypeId, Long subjectAreaId, Boolean isElpa);
	
	void removeKelpaTestSessionsOnClear(Enrollment enrollment, String testTypeCode, String subjectAreaCode);
	
	List<StudentsTests> getCompletedStudentsTestsForKELPAStudent(Long assessmentId,Long testTypeId, Long contentAreaId, Long gradeCourseId,
			Long studentId, Long currentSchoolYear, Long stageId, SourceTypeEnum sourceType,Long operationalTestWindowId);
	
	List<Long> findIdsByTestSession(List<Long> testSessionIds);
	List<Long> findStudentTestSectionsIdsByStudentsTests(List<Long> studentsTestsIds);

	List<Long> findIdsByTestSessionForDeactivation(List<Long> testSessionIdsForDeactivation);

	List<Long> findStudentTestSectionsIdsByStudentsTestsForDeactivation(List<Long> studentsTestIdsForDeactivation);

	void deactivateSectionsForGradeChange(List<Long> studentsTestSectionIdsForDeactivation, Long modifiedUserId);

	void deactivateForGradeChange(List<Long> studentsTestIdsForDeactivation, Long modifiedUserId);

	void deactivateWithStatus(List<Long> studentsTestIdsForDeactivation, String newStatusPrefix, Long modifiedUserId);

	void deactivateSectionsWithStatus(List<Long> studentsTestSectionsIds, String newStatusPrefix, Long modifiedUserId);

	void reactivateSectionsForGradeChange(List<Long> inactivatedStudentsTestSectionIds, Long modifiedUserId);

	void reactivateForGradeChange(List<Long> inactivatedStudentsTestIds, Long modifiedUserId);

	List<RosterAutoScoringStudentsTestsMap> getStudentsTestForAutoScoring(
			Long testSessionId, Integer schoolYear, Long subjectAreaId,
			Integer offset, Integer pageSize);

	String gets3Credentials(String filename);

	List<StudentsTests> getStudentsWithRostersWithEnrollmentAutoScoring(List<Long> testSessionIds);
	
	void updateTransferedTestSessionId(Long studentsTestsId, Long transferedTestsessionId, Long transferedEnrollmentId);
	
	List<StudentsTests> getCompletedTestsInOtherSchool(Long assessmentId,Long testTypeId, Long contentAreaId, Long gradeCourseId,
			Long studentId, Long currentSchoolYear, Long stageId, SourceTypeEnum sourceType,Long operationalTestWindowId, Long enrollmentId);
	
	void inactivateStudentsTestsTestBytestSessionId(Long testSessionId);
	
	void unEnrollStudentTestsOnGradeChange(Enrollment enrollment);
	
	String getRandomWordForStudentPassword(int passwordLength);
	
	List<StudentsTests> getPredictiveTestsByEnrollmentId(Long enrollmentId, Long currentSchoolYear, Long contentAreaId);
	
	void removeStudentPredictiveTests(Long enrollmentId, Long currentSchoolYear, Long contentAreaId);
	
	List<StudentsTests> findCompletedPredictiveTestsInOtherSchool(Long assessmentId,Long testTypeId, Long contentAreaId, Long gradeCourseId,
			Long studentId, Long currentSchoolYear, Long stageId, SourceTypeEnum sourceType,Long operationalTestWindowId, Long enrollmentId);
	
	List<StudentsTests> findCompletedPredictiveStudentsTests(Long assessmentId,Long testTypeId, Long contentAreaId, Long gradeCourseId,
			Long studentId, Long currentSchoolYear, Long stageId, SourceTypeEnum sourceType,Long operationalTestWindowId);

	List<StudentsTests> findKapSSByEnrollmentId(Long attendanceSchoolId, Integer currentSchoolYear,
			Long oldEnrollmentId);

	List<StudentsTests> selectKapSSByTestSessionIdAndStudentId(Long id, Long studentId);
	
	List<Test> getFilteredTestsBasedOnStudentPNPForISmartBatchAuto(long studentId, List<Test> tests);
	
	List<StudentsTests> findCompletedTestsInOtherSchoolByGradeBand(Long contentAreaId, Long gradeBandId,
			Long studentId, Long currentSchoolYear, Long stageId, SourceTypeEnum sourceType,Long operationalTestWindowId, Long enrollmentId);

	List<ViewMergeStudentDetailsDTO> getStudentTestsBasedOnStudentIds(Long[] studentIds);
	
	List<ScoringAPIObject> getPLTWScoringData(Long assessmentProgramId, Date lastRuntime, Integer pageSize, Integer offset, boolean isNightlyRun, boolean isReprocess);
}
