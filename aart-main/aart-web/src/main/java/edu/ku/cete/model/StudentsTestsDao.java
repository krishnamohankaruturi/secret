package edu.ku.cete.model;

import java.util.Date;
import java.util.List;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.dlm.iti.StudentTrackerTest;
import edu.ku.cete.domain.RosterAutoScoringStudentsTestsMap;
import edu.ku.cete.domain.StudentsTests;
import edu.ku.cete.domain.StudentsTestsExample;
import edu.ku.cete.domain.TestSession;
import edu.ku.cete.domain.api.scoring.ScoringAPIObject;
import edu.ku.cete.domain.content.Stage;
import edu.ku.cete.domain.enrollment.ViewMergeStudentDetailsDTO;
import edu.ku.cete.domain.student.Student;

public interface StudentsTestsDao {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    int countByExample(StudentsTestsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    int deleteByExample(StudentsTestsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    int insert(StudentsTests record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    int insertSelective(StudentsTests record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    List<StudentsTests> selectByExample(StudentsTestsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    StudentsTests selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    int updateByExampleSelective(@Param("record") StudentsTests record, @Param("example") StudentsTestsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    int updateByExample(@Param("record") StudentsTests record, @Param("example") StudentsTestsExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    int updateByPrimaryKeySelective(StudentsTests record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table public.studentstests
     *
     * @mbggenerated Mon Oct 08 10:20:17 CDT 2012
     */
    int updateByPrimaryKey(StudentsTests record);

    /**
    *
    *@param testSessionId long
    *@return List<StudentsTests>
    */
   List<StudentsTests> findByTestSession(@Param("testSessionId")long testSessionId);

   /**
    *
    *@param assessmentProgramId long
    *@param rosterId long
    * @param status status
    *@return List<StudentsTests>
    */
   List<StudentsTests> findByAssessmentProgramAndRoster(@Param("assessmentProgramId")long assessmentProgramId,
           @Param("rosterId")long rosterId, @Param("status")String status);

   /**
    *
    *@param example {@link StudentsTestsExample}
    *@param assessmentId long
    *@param rosterId long
    * @param long1 {@link String}
    *@return List<StudentsTests>
    */
   List<StudentsTests> selectByExampleAssessmentIdAndRoster(@Param("example") StudentsTestsExample example,
           @Param("assessmentId") long assessmentId, @Param("rosterId")long rosterId,
           @Param("statusId")Long statusId);
   
   /**
   * 
   * @param assessmentId {@link Long}  
   * @param rosterId {@link Long} 
   * @param statusId {@link Long} 
   * @return List<StudentsTests>
   */
  List<StudentsTests> findByAssessmentIdAndRoster(@Param("assessmentId") Long assessmentId, 
		  @Param("rosterId") Long rosterId, @Param("statusId") Long statusId);
  
 /**
 * @param studentIds
 * @param testSessionId
 */
  void updateStatusByExample(@Param("record") StudentsTests record, @Param("example") StudentsTestsExample example);

  /**
 * @param studentsTestsIds
 * @return
 */
  int deleteByStudentsTestsIds(@Param("studentsTestsIds") List<Long> studentsTestsIds,@Param("modifiedUser") Long modifiedUser);
  
  int unenrollByStudentsTestsId(@Param("studentsTestsId") Long studentsTestsId, @Param("statusCode") String statusCode,
		  @Param("userId") Long userId);
  
  /**
   * @param studentsTestsIds
   * @return
   */
  int reEnrollByStudentsIdAndSessionId(@Param("studentId") long studentId, @Param("testSessionId") long testSessionId);
    
  
  /**
   * @param studentNameKeyword
   * @return
  */
  List<Long> getByStudentName(@Param("studentNameKeyword") String studentNameKeyword, @Param("testNameKeyword") String testNameKeyword,
		  @Param("organizationId") Long organizationId);
  
  List<StudentsTests> findByTestSessionAndStudentId(@Param("testSessionId")long testSessionId, @Param("studentId")long studentId);
  
  List<StudentsTests> findByTestAndStudentId(@Param("testId")long testId, @Param("studentId")long studentId);
  
  List<Long> selectByEnrollmentId(@Param("enrollmentId") Long enrollmentId);
  
 /**
  * @param stateStudentIdentifier
  * @param testId
  * @param attendanceSchoolId
  * @return
  */
  List<StudentsTests> getByStateStudentIdAndTest(
		  @Param("stateStudentIdentifier") String stateStudentIdentifier, 
		  @Param("testId") Long testId, 
		  @Param("attendanceSchoolId") Long attendanceSchoolId);
  
  List<StudentsTests> findByEnrollmentId(@Param("enrollmentId")long enrollmentId);
    
  List<StudentsTests> findByEnrollmentIdWithActiveOTW(@Param("enrollmentId")long enrollmentId);  
  
  List<StudentsTests> getTestSessionsForDLDAutomationWithinActiveOTW(
		  @Param("enrollmentId")long enrollmentId, 
		  @Param("rosterId")long rosterId);
  
  List<StudentsTests> findByEnrollmentRosterWithActiveOTW(
		  @Param("enrollmentId")long enrollmentId, 
		  @Param("rosterId")long rosterId);
  
  List<StudentsTests> findByEnrollmentIdTestTypeCodeSubjectAreaCode(
		  @Param("enrollmentId") long enrollmentId,
		  @Param("testTypeCode") String testTypeCode,
		  @Param("subjectAreaCode") String subjectAreaCode,
		  @Param("currentSchoolYear") String currentSchoolYear);  

  List<StudentsTests> findByEnrollmentIdTestTypeCodeSubjectAreaCodeWithActiveOTW(
		  @Param("enrollmentId") long enrollmentId,
		  @Param("testTypeCode") String testTypeCode,
		  @Param("subjectAreaCode") String subjectAreaCode,
		  @Param("currentSchoolYear") Integer currentSchoolYear); 
  
  List<StudentsTests> findByEnrollmentIdTestTypeIdSubjectAreaIdWithActiveOTW(
		  @Param("enrollmentId") long enrollmentId,
		  @Param("testTypeId") long testTypeId,
		  @Param("subjectAreaId") long subjectAreaId,
		  @Param("currentSchoolYear") Integer currentSchoolYear); 
  
  List<StudentsTests> findEndOfPathwaysTestsByEnrollmentIdSubjectAreaCodeWithActiveOTW(
		  @Param("enrollmentId") long enrollmentId,
		  @Param("subjectAreaCode") String subjectAreaCode,
		  @Param("currentSchoolYear") String currentSchoolYear);
  
  List<StudentsTests> findEndOfPathwaysTestsByEnrollmentIdSubjectAreaCode(
		  @Param("enrollmentId") long enrollmentId,
		  @Param("subjectAreaCode") String subjectAreaCode,
		  @Param("currentSchoolYear") String currentSchoolYear);
  
  /**
   * @author bmohanty_sta
   * Biyatpragyan Mohanty : bmohanty_sta@ku.edu : US15536 : Student Tracker - Simple Version 1 (preliminary)
   * Get once student test for a given student, subject, test collection and not test id (not the same test).
   * @param studentId
   * @param contentAreaId
   * @param testCollectionId
   * @param testId
   * @return
   */
  StudentsTests findCompletedByStudentAndTestSession(@Param("studentId") long studentId, @Param("testSessionId") Long testSessionId);
  
  /**
   * @author Venkata Krishna Jagarlamudi
   * US15872: Test Coordination Monitor page - release dependant test sessions when test session is ended
   * @param studentIds
   */
  void releaseDependentTestSessions(@Param("studentIds")List<Long> studentIds, @Param("testSessionId")Long testSessionId,
		  @Param("modifiedUser") Long modifiedUser);
  
  List<Long> findCompletedIdsByTestExternalIdWithTaskVariants(@Param("testExternalId") Long testExternalId,
		  @Param("taskVariantIds") List<Long> taskVariantIds, @Param("limit") Long limit);
  
  List<StudentsTests> findExistingMultiAssignTestSessions(
		  @Param("studentId") Long studentId,
		  @Param("contentAreaId") Long contentAreaId,
		  @Param("gradeCourseId") Long gradeCourseId,
		  @Param("multiAssignTestWindowId") Long multiAssignTestWindowId);
  
	int updateStatusForByStudentTestSession(
			@Param("studentTest")StudentsTests studentTest,
			@Param("studentIds")List<Long> studentIds,
			@Param("testSessionId")Long testSessionId);

	List<StudentsTests> findStudentsTests(@Param("studentIds")List<Long> studentIds, @Param("testSessionId")Long testSessionId, @Param("statusList")List<String> statusList);
	
	Long getCompleteSuccessorStageCount(@Param("testSessionId")Long testSessionId, @Param("studentId")Long studentId);
	
	int resetSuccessorStudentTestOnReactivation(@Param("modifiedUser") Long modifiedUser, @Param("modifiedDate") Date modifiedDate,
			 @Param("testSessionId") Long testSessionId, @Param("studentIds")List<Long> studentIds);

	Boolean isSuccessorStageReactivated(@Param("testSessionId")Long testSessionId, @Param("studentId")Long studentId);
	
	
	List<StudentsTests> findCompletedStudentsTests(@Param("assessmentId") Long assessmentId, @Param("testTypeId")Long testTypeId,
    		@Param("contentAreaId")Long contentAreaId, @Param("gradeCourseId")Long gradeCourseId,
    		@Param("studentId")Long studentId,@Param("currentSchoolYear")Long currentSchoolYear, 
    		@Param("stageId") Long stageId, @Param("sourceType") String sourceType,@Param("operationalTestWindowId") Long operationalTestWindowId);

	List<StudentsTests> findExistingFixedAssignTestSessions(@Param("studentId")Long studentId,@Param("enrollmentId")Long enrollmentId, 
			@Param("contentAreaId")Long contentAreaId, @Param("gradeCourseAbbrName")String gradeCourseAbbrName,@Param("operationalTestWindowId")Long operationalTestWindowId);

	Stage getNextStageByTestSession(@Param("testSessionId")Long testSessionId);

	List<Stage> getAllStagesByTestSession(@Param("testSessionId")Long testSessionId, @Param("studentId") Long studentId,
		@Param("operationalTestWindowId") Long operationalTestWindowId);

	List<TestSession> getInterimTestSession(Long testTestId);

	List<Student> getStudentIdByTestSessionIdIncomplete(Long testSessionId);

	void updateActiveFlagBytestSessionIdInterim(@Param("testSessionId")Long testSessionId,@Param("studentIds") List<Long> studentIds, @Param("userId")Long userId);

	List<Student> getStudentIdByTestSessionIdAll(Long testSessionId);

	void insertInterim(StudentsTests sTests);

	List<Student> getStudentIdByTestSessionIdAllByTeacher(@Param("testSessionId") Long testSessionId,
			@Param("orgId") Long orgId, @Param("userId") Long userId,
			@Param("isTeacher")Boolean isTeacher,@Param("currentSchoolYear") Long currentSchoolYear);
	List<Long> findIdsByTestSession(@Param("testSessionIds") List<Long> testSessionIds);

	List<Long> findIdsByTestSessionForDeactivation(@Param("testSessionIds") List<Long> testSessionIds);

	void deactivateByPrimaryKeyWithStatus(@Param("studentsTestsId") Long studentsTestsId, @Param("newStatusPrefix") String newStatusPrefix, @Param("modifiedUserId") Long modifiedUserId);
    void reactivateByPrimaryKeyForGradeChange(@Param("studentsTestsId") Long studentsTestsId, @Param("modifiedUserId") Long modifiedUserId);
    void reactivateByPrimaryKeyForRosterChange(@Param("studentsTestsId") Long studentsTestsId, @Param("modifiedUserId") Long modifiedUserId, @Param("newEnrollmentId")Long newEnrollmentId);
	List<StudentsTests> findCompletedStudentsTestsForKELPAStudent(@Param("assessmentId") Long assessmentId, @Param("testTypeId")Long testTypeId,
    		@Param("contentAreaId")Long contentAreaId, @Param("gradeCourseId")Long gradeCourseId,
    		@Param("studentId")Long studentId,@Param("currentSchoolYear")Long currentSchoolYear, 
    		@Param("stageId") Long stageId, @Param("sourceType") String sourceType,@Param("operationalTestWindowId") Long operationalTestWindowId);

	/* sudhansu.b
	 * Added for US19233 - KELPA2 Auto Assign Teachers Scoring Assignment 
	 */	 
	List<RosterAutoScoringStudentsTestsMap> getStudentsTestForAutoScoring(
			@Param("testSessionId") Long testSessionId, 
			@Param("schoolYear") Integer schoolYear, 
			@Param("subjectAreaId") Long subjectAreaId,
			@Param("offset") Integer offset, 
			@Param("pageSize") Integer pageSize);

	void updateScoringAssignment(@Param("scoringAssignmentId") Long scoringAssignmentId, 
			                     @Param("studentsTestIds") List<Long> studentsTestIds,@Param("modifiedUser") Long modifiedUser);

 	List<StudentsTests> getAllStageStudentsTestForStudent(@Param("subjectAreaId") Long subjectAreaId,
 			@Param("gradeId") Long gradeId,
 			@Param("schoolYear") Long schoolYear,
 			@Param("attendanceSchoolId") Long attendanceSchoolId,
 			@Param("studentId") Long studentId);

	List<StudentsTests> findKELPAByEnrollmentId(@Param("enrollmentId") Long enrollmentId);

	void updateTransferedTestSessionId(@Param("studentsTestsId")Long studentsTestsId,
			@Param("transferedTestsessionId")Long transferedTestsessionId,
			@Param("transferedEnrollmentId")Long transferedEnrollmentId,@Param("modifiedUser") Long modifiedUser);

	List<StudentsTests> getStudentsWithRostersWithEnrollmentAutoScoring(@Param("testSessionIds") List<Long> testSessionIds);
	
	List<StudentsTests> findCompletedTestsInOtherSchool(@Param("assessmentId") Long assessmentId, @Param("testTypeId")Long testTypeId,
    		@Param("contentAreaId")Long contentAreaId, @Param("gradeCourseId")Long gradeCourseId,
    		@Param("studentId")Long studentId,@Param("currentSchoolYear")Long currentSchoolYear, 
    		@Param("stageId") Long stageId, @Param("sourceType") String sourceType,@Param("operationalTestWindowId") Long operationalTestWindowId, @Param("currentEnrollmentId")Long enrollmentId);
	
	int softDeleteByUserAndStudent( @Param("userIds") List<Long> userIds, @Param("studentId")Long studentId, @Param("enrollmentId")Long enrollmentId, @Param("organizationId")Long organizationId, @Param("modifiedUser")Long modifiedUser);
	void updateActiveFlagBytestSessionId(@Param("testSessionId")Long testSessionId,@Param("modifiedUser") Long modifiedUser);

	void softDeleteByStudentAndTestSession(@Param("studentId")Long studentId,@Param("enrollmentId") Long id, @Param("testSessionIds")List<Long> testSessionIds, @Param("modifiedUser")Long modifiedUser);

	List<StudentsTests> getPredictiveTestsByEnrollmentId(@Param("enrollmentId")long enrollmentId, @Param("currentSchoolYear") Long currentSchoolYear, @Param("contentAreaId") Long contentAreaId);
	
	List<StudentsTests> findCompletedPredictiveTestsInOtherSchool(@Param("assessmentId") Long assessmentId, 
																	@Param("testTypeId")Long testTypeId,
																	@Param("contentAreaId")Long contentAreaId, 
																	@Param("gradeCourseId")Long gradeCourseId,
																	@Param("studentId")Long studentId,
																	@Param("currentSchoolYear")Long currentSchoolYear, 
																	@Param("stageId") Long stageId, 
																	@Param("sourceType") String sourceType,
																	@Param("operationalTestWindowId") Long operationalTestWindowId, 
																	@Param("currentEnrollmentId")Long enrollmentId);
	
	List<StudentsTests> findCompletedPredictiveStudentsTests(@Param("assessmentId") Long assessmentId, @Param("testTypeId")Long testTypeId,
    		@Param("contentAreaId")Long contentAreaId, @Param("gradeCourseId")Long gradeCourseId,
    		@Param("studentId")Long studentId,@Param("currentSchoolYear")Long currentSchoolYear, 
    		@Param("stageId") Long stageId, @Param("sourceType") String sourceType,@Param("operationalTestWindowId") Long operationalTestWindowId);

	public List<StudentsTests> selectKapSSByEnrollmentId(@Param("enrollmentId") Long enrollmentId);

	StudentsTests findMostRecentCompletedNonWritingTestForMultiEE(@Param("studentId") Long studentId, @Param("writingTestSessionId") Long writingTestSessionId);

	StudentTrackerTest findMostRecentCompletedNonWritingTestForSingleEE(@Param("studentTrackerId") Long studentTrackerId);

	List<StudentsTests> selectKapSSByTestSessionIdAndStudentId(@Param("testSessionId")Long testSessionId, @Param("studentId")Long studentId, @Param("schoolYear") Long schoolYear);

	int completeStudentTestSession(
			@Param("studentTest")StudentsTests studentTest,
			@Param("studentIds")List<Long> studentIds,
			@Param("testSessionId")Long testSessionId);
	
	List<StudentsTests> findCompletedTestsInOtherSchoolByGradeBand(@Param("contentAreaId") Long contentAreaId, 
			@Param("gradeBandId") Long gradeBandId,
			@Param("studentId") Long studentId,
			@Param("currentSchoolYear") Long currentSchoolYear, 
			@Param("stageId") Long stageId, 
			@Param("sourceType") String sourceType,
			@Param("operationalTestWindowId") Long operationalTestWindowId, 
			@Param("currentEnrollmentId") Long enrollmentId);

	List<ViewMergeStudentDetailsDTO> getStudentTestsBasedOnStudentIds(
			@Param("studentIds") Long[] studentIds, 
			@Param("specialCaseInactiveStudentTestStatus") List<Long> specialCaseInactiveStudentTestStatus, 
			@Param("currentSchoolYear") Long currentSchoolYear);
	
	List<ScoringAPIObject> getPLTWScoringData(
		@Param("assessmentProgramId") Long assessmentProgramId,
		@Param("lastRuntime") Date lastRuntime,
		@Param("limit") Integer pageSize,
		@Param("offset") Integer offset,
		@Param("isNightlyRun") boolean isNightlyRun,
		@Param("isReprocess") boolean isReprocess
	);
}
	
