package edu.ku.cete.domain;

import java.util.ArrayList;
import java.util.List;

public class ComplexityBandRuleExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public ComplexityBandRuleExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return (Criteria) this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return (Criteria) this;
        }

        public Criteria andIdEqualTo(Long value) {
            addCriterion("id =", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotEqualTo(Long value) {
            addCriterion("id <>", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThan(Long value) {
            addCriterion("id >", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Long value) {
            addCriterion("id >=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThan(Long value) {
            addCriterion("id <", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdLessThanOrEqualTo(Long value) {
            addCriterion("id <=", value, "id");
            return (Criteria) this;
        }

        public Criteria andIdIn(List<Long> values) {
            addCriterion("id in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotIn(List<Long> values) {
            addCriterion("id not in", values, "id");
            return (Criteria) this;
        }

        public Criteria andIdBetween(Long value1, Long value2) {
            addCriterion("id between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andIdNotBetween(Long value1, Long value2) {
            addCriterion("id not between", value1, value2, "id");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdIsNull() {
            addCriterion("complexitybandid is null");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdIsNotNull() {
            addCriterion("complexitybandid is not null");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdEqualTo(Long value) {
            addCriterion("complexitybandid =", value, "complexityBandId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdNotEqualTo(Long value) {
            addCriterion("complexitybandid <>", value, "complexityBandId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdGreaterThan(Long value) {
            addCriterion("complexitybandid >", value, "complexityBandId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdGreaterThanOrEqualTo(Long value) {
            addCriterion("complexitybandid >=", value, "complexityBandId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdLessThan(Long value) {
            addCriterion("complexitybandid <", value, "complexityBandId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdLessThanOrEqualTo(Long value) {
            addCriterion("complexitybandid <=", value, "complexityBandId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdIn(List<Long> values) {
            addCriterion("complexitybandid in", values, "complexityBandId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdNotIn(List<Long> values) {
            addCriterion("complexitybandid not in", values, "complexityBandId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdBetween(Long value1, Long value2) {
            addCriterion("complexitybandid between", value1, value2, "complexityBandId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandIdNotBetween(Long value1, Long value2) {
            addCriterion("complexitybandid not between", value1, value2, "complexityBandId");
            return (Criteria) this;
        }

        public Criteria andRuleIsNull() {
            addCriterion("rule is null");
            return (Criteria) this;
        }

        public Criteria andRuleIsNotNull() {
            addCriterion("rule is not null");
            return (Criteria) this;
        }

        public Criteria andRuleEqualTo(String value) {
            addCriterion("rule =", value, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleNotEqualTo(String value) {
            addCriterion("rule <>", value, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleGreaterThan(String value) {
            addCriterion("rule >", value, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleGreaterThanOrEqualTo(String value) {
            addCriterion("rule >=", value, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleLessThan(String value) {
            addCriterion("rule <", value, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleLessThanOrEqualTo(String value) {
            addCriterion("rule <=", value, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleLike(String value) {
            addCriterion("rule like", value, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleNotLike(String value) {
            addCriterion("rule not like", value, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleIn(List<String> values) {
            addCriterion("rule in", values, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleNotIn(List<String> values) {
            addCriterion("rule not in", values, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleBetween(String value1, String value2) {
            addCriterion("rule between", value1, value2, "rule");
            return (Criteria) this;
        }

        public Criteria andRuleNotBetween(String value1, String value2) {
            addCriterion("rule not between", value1, value2, "rule");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdIsNull() {
            addCriterion("complexitybandtypeid is null");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdIsNotNull() {
            addCriterion("complexitybandtypeid is not null");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdEqualTo(Long value) {
            addCriterion("complexitybandtypeid =", value, "complexityBandTypeId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdNotEqualTo(Long value) {
            addCriterion("complexitybandtypeid <>", value, "complexityBandTypeId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdGreaterThan(Long value) {
            addCriterion("complexitybandtypeid >", value, "complexityBandTypeId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdGreaterThanOrEqualTo(Long value) {
            addCriterion("complexitybandtypeid >=", value, "complexityBandTypeId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdLessThan(Long value) {
            addCriterion("complexitybandtypeid <", value, "complexityBandTypeId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdLessThanOrEqualTo(Long value) {
            addCriterion("complexitybandtypeid <=", value, "complexityBandTypeId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdIn(List<Long> values) {
            addCriterion("complexitybandtypeid in", values, "complexityBandTypeId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdNotIn(List<Long> values) {
            addCriterion("complexitybandtypeid not in", values, "complexityBandTypeId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdBetween(Long value1, Long value2) {
            addCriterion("complexitybandtypeid between", value1, value2, "complexityBandTypeId");
            return (Criteria) this;
        }

        public Criteria andComplexityBandTypeIdNotBetween(Long value1, Long value2) {
            addCriterion("complexitybandtypeid not between", value1, value2, "complexityBandTypeId");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table complexitybandrules
     *
     * @mbggenerated do_not_delete_during_merge Tue Sep 10 16:06:40 CDT 2013
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table complexitybandrules
     *
     * @mbggenerated Tue Sep 10 16:06:40 CDT 2013
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}