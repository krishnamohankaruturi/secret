package edu.ku.cete.model;

import java.util.List;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.report.LevelDescription;

public interface LevelDescriptionMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table leveldescription
	 * @mbggenerated  Wed Jul 29 15:39:22 CDT 2015
	 */
	int insert(LevelDescription record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table leveldescription
	 * @mbggenerated  Wed Jul 29 15:39:22 CDT 2015
	 */
	int insertSelective(LevelDescription record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table leveldescription
	 * @mbggenerated  Wed Jul 29 15:39:22 CDT 2015
	 */
	LevelDescription selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table leveldescription
	 * @mbggenerated  Wed Jul 29 15:39:22 CDT 2015
	 */
	int updateByPrimaryKeySelective(LevelDescription record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table leveldescription
	 * @mbggenerated  Wed Jul 29 15:39:22 CDT 2015
	 */
	int updateByPrimaryKey(LevelDescription record);

	int deleteAll(@Param("schoolYear") Long schoolYear);
    
    int deleteLevelDescriptions(@Param("assessmentProgramId") Long assessmentProgramId, 
    		@Param("subjectId") Long subjectId, 
    		@Param("schoolYear") Long schoolYear, 
			@Param("testingProgramId") Long testingProgramId, 
			@Param("reportCycle") String reportCycle);
	
    LevelDescription checkDuplicateTestIdsWithLevel(@Param("testId1")Long testId1, @Param("testId2")Long testId2, @Param("level")Long level, 
    		@Param("assessmentProgramId") Long assessmentProgramId, @Param("subjectId") Long subjectId);
     
    List<LevelDescription> selectLevelsByAssessmentProgramSubjectGradeYearLevel(@Param("schoolYear") Long schoolYear, @Param("assessmentProgramId") Long assessmentProgramId, 
    		@Param("subjectId") Long subjectId, @Param("gradeId") Long gradeId, @Param("level") Long level, @Param("testingProgramId") Long testingProgramId);
    
    List<LevelDescription> selectLevelsAndTestCutMinMaxByTestId1TestId2(@Param("testIds") List<Long> testIds, @Param("assessmentProgramId") Long assessmentProgramId, 
    		@Param("subjectId") Long subjectId, @Param("gradeId") Long gradeId);
    
    List<LevelDescription> selectDistinctLevelsAndTestCutMinMax(@Param("assessmentProgramId") Long assessmentProgramId, 
    		@Param("subjectId") Long subjectId, @Param("gradeId") Long gradeId, @Param("schoolYear") Long schoolYear);

	List<LevelDescription> selectLevelDescriptionByLevelId(@Param("schoolYear")Long schoolYear,
			@Param("assessmentProgramId")Long assessmentProgramId,
			@Param("subjectId")Long subjectId,
			@Param("gradeId")Long gradeId,
			@Param("descriptionType")String descriptionType,
			@Param("testingProgramId") Long testingProgramId);

	List<LevelDescription> selectLevelDescriptionByLevelIdMdptIdCombinedId(
			@Param("levelId") Long levelId,
			@Param("mdptLevelId") Long mdptLevelId, 
			@Param("combinedLevelId") Long combinedLevelId);

	List<LevelDescription> selectLevelsByAssessmentProgramSubjectGradeYearLevelCycle(
			@Param("schoolYear") Long schoolYear, 
			@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("contentAreaId") Long contentAreaId,
			@Param("gradeId") Long gradeId, 
			@Param("testingProgramId") Long testingProgramId, 
			@Param("reportCycle") String reportCycle);

	List<LevelDescription> getLevelDescriptionByLevelIdAndTestType(
			@Param("schoolYear") Long schoolYear, 
			@Param("assessmentProgramId") Long assessmentProgramId,
			@Param("testTypeCode") String testTypeCode,
			@Param("levelNumber") Long levelNumber);
	

}