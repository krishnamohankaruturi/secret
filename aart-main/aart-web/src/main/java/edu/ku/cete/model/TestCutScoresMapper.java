package edu.ku.cete.model;

import java.util.List;

import org.apache.ibatis.annotations.Param;

import edu.ku.cete.domain.report.TestCutScores;

public interface TestCutScoresMapper {
    /**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table testcutscores
	 * @mbggenerated  Fri Jun 19 07:53:23 CDT 2015
	 */
	int insert(TestCutScores record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table testcutscores
	 * @mbggenerated  Fri Jun 19 07:53:23 CDT 2015
	 */
	int insertSelective(TestCutScores record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table testcutscores
	 * @mbggenerated  Fri Jun 19 07:53:23 CDT 2015
	 */
	TestCutScores selectByPrimaryKey(Long id);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table testcutscores
	 * @mbggenerated  Fri Jun 19 07:53:23 CDT 2015
	 */
	int updateByPrimaryKeySelective(TestCutScores record);

	/**
	 * This method was generated by MyBatis Generator. This method corresponds to the database table testcutscores
	 * @mbggenerated  Fri Jun 19 07:53:23 CDT 2015
	 */
	int updateByPrimaryKey(TestCutScores record);

	int deleteAll(@Param("schoolYear") Long schoolYear);
	
	int deleteTestCutScores(@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("subjectId") Long subjectId, 
			@Param("schoolYear") Long schoolYear, 
			@Param("testingProgramId") Long testingProgramId, 
			@Param("reportCycle") String reportCycle);
	
	TestCutScores checkDuplicateTestIdsWithLevel(@Param("level")Long level, 
			@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("subjectId") Long subjectId, 
			@Param("schoolYear") Long schoolYear,
			@Param("domain") String domain, 
			@Param("testingProgramId") Long testingProgramId, 
			@Param("reportCycle") String reportCycle);
	
	List<TestCutScores> getCutScoresBasedOnAssessmentProgramSubjectYear(@Param("assessmentProgramId") Long assessmentProgramId, 
			@Param("subjectId") Long subjectId, 
			@Param("schoolYear") Long schoolYear, 
			@Param("gradeCourseId") Long gradeCourseId,
			@Param("testingProgramId") Long testingProgramId);

	List<TestCutScores> getInterimCutScoresBasedOnAssessmentProgramSubjectYear(
			@Param("assessmentProgramId")  Long assessmentProgramId, 
			@Param("contentAreaId")  Long contentAreaId, 
			@Param("schoolYear") Long schoolYear,
			@Param("gradeId") Long gradeId, 
			@Param("reportCycle") String reportCycle, 
			@Param("testingProgramId") Long testingProgramId);
	
	List<TestCutScores> getExternalStudentReportTestCutScores(
			@Param("assessmentProgramId")  Long assessmentProgramId, 
			@Param("contentAreaId")  Long contentAreaId, 
			@Param("schoolYear") Long schoolYear,
			@Param("gradeId") Long gradeId, 
			@Param("reportCycle") String reportCycle, 
			@Param("testingProgramId") Long testingProgramId,
			@Param("assessmentCode") String assessmentCode);
	
}