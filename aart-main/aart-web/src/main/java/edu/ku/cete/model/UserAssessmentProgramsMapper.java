package edu.ku.cete.model;
import java.util.List;

import org.apache.ibatis.annotations.Param;

/**
 * Added for US16239 (add assessment program to user)
 * 
 */
import edu.ku.cete.domain.UserAssessmentPrograms;

public interface UserAssessmentProgramsMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table userassessmentprograms
     *
     * @mbggenerated Fri Jul 03 12:41:12 IST 2015
     */
    int insert(UserAssessmentPrograms record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table userassessmentprograms
     *
     * @mbggenerated Fri Jul 03 12:41:12 IST 2015
     */
    int insertSelective(UserAssessmentPrograms record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table userassessmentprograms
     *
     * @mbggenerated Fri Jul 03 12:41:12 IST 2015
     */
    UserAssessmentPrograms selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table userassessmentprograms
     *
     * @mbggenerated Fri Jul 03 12:41:12 IST 2015
     */
    int updateByPrimaryKeySelective(UserAssessmentPrograms record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table userassessmentprograms
     *
     * @mbggenerated Fri Jul 03 12:41:12 IST 2015
     */
    int updateByPrimaryKey(UserAssessmentPrograms record);
    
    /*
     * Added during US16351-To insert multiple Assessment programs to userassessmentprogram table based on user id
     */
    void insertMultiple(@Param("assessmentProgramsIds")Long[] assessmentProgramsIds,@Param("userId")Long UserId
    	, @Param("defaultAssessmentProgramId")Long defaultAssessmentProgramId,@Param("userOrganizationGroupId")Long userOrganizationGroupId);
    /*
     * Added during US16351-To delete multiple Assessment programs to userassessmentprogram table based on user id at the time of edit user
     */
	void deleteAssessmentPrograms(@Param("userId") Long id);
	/**
	 * US16533 : to check assessment program exist for the user
	 */
	List<UserAssessmentPrograms> selectByUserId(Long userId);
	
	boolean isUserInAssessmentProgram(@Param("userId")Long userId, @Param("assessmentProgramId")Long assessmentProgramId, @Param("userOrgGroupId")Long userOrgGroupId);

	int updateUserAssessmentProgram(UserAssessmentPrograms userAssessmentPrograms);
	
	UserAssessmentPrograms selectByUserIdAssessmentProrgramId(@Param("userId")Long userId, 
		@Param("assessmentProgramId") Long assessmentProgramId, @Param("organizationId") Long organizationId,
		@Param("groupId") Long groupId);

	void updateDefaultByPrimaryKeySelective(UserAssessmentPrograms userAssesssmentPrograms);
	
	UserAssessmentPrograms getUserDefaultAssessmentProgram(@Param("userId")Long userId);
	
	List<UserAssessmentPrograms> getUserRoles(@Param("userId")Long userId,@Param("organizationStateCode") String organizationStateCode,@Param("organizationDistrictCode") String organizationDistrictCode,@Param("organizationSchoolCode") String organizationSchoolCode);

	void deactivateAssessmentPrograms(UserAssessmentPrograms userAssessmentProgram);

	List<Long> getAllUserAssessmentProgramIds(@Param("userId") Long userId);

	void addUserAssessmentProgram(UserAssessmentPrograms userAssessmentProgram);

	void updateDefaultUserAssessmentProgram(UserAssessmentPrograms defaultUserAssessmentProgram);

	List<UserAssessmentPrograms> getByUserGroupIdOrgId(@Param("userId") Long userId, @Param("groupId")Long currentGroupsId, 
		@Param("organizationId") Long currentOrganizationId);

	List<UserAssessmentPrograms> getByUserGroupIdOrgIds(@Param("userId") Long userId, @Param("groupId")Long currentGroupsId, 
			@Param("organizationId") Long currentOrganizationId);
	
}