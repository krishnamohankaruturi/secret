<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.ku.cete.model.ReportSubscoresMapper">
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.report.ReportSubscores">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Jul 15 13:44:25 CDT 2015.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="studentid" jdbcType="BIGINT" property="studentId" />
    <result column="subscoredefinitionname" jdbcType="VARCHAR" property="subscoreDefinitionName" />
    <result column="subscorerawscore" jdbcType="NUMERIC" property="subscoreRawScore" />
    <result column="rating" jdbcType="INTEGER" property="rating" />
    <result column="subscorescalescore" jdbcType="BIGINT" property="subscoreScaleScore" />
    <result column="subscorestandarderror" jdbcType="NUMERIC" property="subscoreStandardError" />
    <result column="studentreportid" jdbcType="BIGINT" property="studentReportId" />
    <result column="createddate" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="sectionlinebelowflag" jdbcType="BOOLEAN" property="sectionLineBelow" />
   	<result column="indentneededflag" jdbcType="BOOLEAN" property="childsubscore" />
	<result column="name" jdbcType="VARCHAR" property="gradeName" />
	<result column="subscorereportdisplayname" jdbcType="VARCHAR" property="subScoreReportDisplayName" />
	<result column="subscorereportdescription" jdbcType="VARCHAR" property="subScoreReportDescription" />
	<result column="organizationid" jdbcType="BIGINT" property="organizationId" />
	<result column="report" jdbcType="VARCHAR" property="report" />
	<result column="subscoredisplaysequence" jdbcType="INTEGER" property="subScoreDisplaySequence" />
	<collection property="gradeRatings" ofType="edu.ku.cete.domain.report.Rating">
			<id column="gradeID" property="gradeID" jdbcType="BIGINT" />
			<id column="rating" property="rating" jdbcType="INTEGER" />      
			<id column="rmsid" property="ratingid" jdbcType="INTEGER" />	
	</collection> 
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Jul 15 13:44:25 CDT 2015.
    -->
    id, studentid, subscoredefinitionname, subscorerawscore, rating, studentreportid, createddate
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Jul 15 13:44:25 CDT 2015.
    -->
    select 
    <include refid="Base_Column_List" />
    from reportsubscores
    where id = #{id,jdbcType=BIGINT}
  </select>
  <insert id="insert" parameterType="edu.ku.cete.domain.report.ReportSubscores">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Jul 15 13:44:25 CDT 2015.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT nextval('reportsubscores_id_seq')
    </selectKey>
    insert into reportsubscores (id, studentid, subscoredefinitionname, 
      subscorerawscore, rating, 
      studentreportid, createddate)
    values (#{id,jdbcType=BIGINT}, #{studentId,jdbcType=BIGINT}, #{subscoreDefinitionName,jdbcType=VARCHAR}, 
      #{subscoreRawScore,jdbcType=NUMERIC}, #{rating,jdbcType=INTEGER}, 
      #{studentReportId,jdbcType=BIGINT}, #{createdDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="edu.ku.cete.domain.report.ReportSubscores">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Jul 15 13:44:25 CDT 2015.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT nextval('reportsubscores_id_seq')
    </selectKey>
    insert into reportsubscores
    <trim prefix="(" suffix=")" suffixOverrides=",">
      id,
      <if test="studentId != null">
        studentid,
      </if>
      <if test="subscoreDefinitionName != null">
        subscoredefinitionname,
      </if>
      <if test="subscoreRawScore != null">
        subscorerawscore,
      </if>
      <if test="rating != null">
        rating,
      </if>
      <if test="studentReportId != null">
        studentreportid,
      </if>
      <if test="createdDate != null">
        createddate,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=BIGINT},
      <if test="studentId != null">
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="subscoreDefinitionName != null">
        #{subscoreDefinitionName,jdbcType=VARCHAR},
      </if>
      <if test="subscoreRawScore != null">
        #{subscoreRawScore,jdbcType=NUMERIC},
      </if>      
      <if test="rating != null">
        #{rating,jdbcType=INTEGER},
      </if>
      <if test="studentReportId != null">
        #{studentReportId,jdbcType=BIGINT},
      </if>
      <if test="createdDate != null">
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.report.ReportSubscores">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Jul 15 13:44:25 CDT 2015.
    -->
    update reportsubscores
    <set>
      <if test="studentId != null">
        studentid = #{studentId,jdbcType=BIGINT},
      </if>
      <if test="subscoreDefinitionName != null">
        subscoredefinitionname = #{subscoreDefinitionName,jdbcType=VARCHAR},
      </if>
      <if test="subscoreRawScore != null">
        subscorerawscore = #{subscoreRawScore,jdbcType=NUMERIC},
      </if>      
      <if test="rating != null">
        rating = #{rating,jdbcType=INTEGER},
      </if>
      <if test="studentReportId != null">
        studentreportid = #{studentReportId,jdbcType=BIGINT},
      </if>
      <if test="createdDate != null">
        createddate = #{createdDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.report.ReportSubscores">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Jul 15 13:44:25 CDT 2015.
    -->
    update reportsubscores
    set studentid = #{studentId,jdbcType=BIGINT},
      subscoredefinitionname = #{subscoreDefinitionName,jdbcType=VARCHAR},
      subscorerawscore = #{subscoreRawScore,jdbcType=NUMERIC},
      rating = #{rating,jdbcType=INTEGER},
      studentreportid = #{studentReportId,jdbcType=BIGINT},
      createddate = #{createdDate,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <delete id="deleteReportSubscores">
    delete from reportsubscores where studentreportid in(
    	select id from studentreport where assessmentprogramid =  #{assessmentProgramId,jdbcType=BIGINT}
     	<if test="contentAreaId != null">
        	and contentareaid = #{contentAreaId,jdbcType=BIGINT}
      	</if>
     	<if test="gradeId != null">
       	  and gradeid = #{gradeId,jdbcType=BIGINT}
     	 </if>
     	 <if test="schoolYear != null">
       	  and schoolyear = #{schoolYear,jdbcType=BIGINT}
     	 </if>
      	)
   </delete>
   
    <delete id="deleteReportSubscoresByStudentId">
    delete from reportsubscores where studentreportid in (
    	select id from studentreport where assessmentprogramid =  #{assessmentProgramId,jdbcType=BIGINT}
     	<if test="contentAreaId != null">
        	and contentareaid = #{contentAreaId,jdbcType=BIGINT}
      	</if>
     	<if test="gradeId != null">
       	  and gradeid = #{gradeId,jdbcType=BIGINT}
     	 </if>
     	 <if test="schoolYear != null">
       	  and schoolyear = #{schoolYear,jdbcType=BIGINT}
     	 </if>
      	) and  studentid = #{studentId,jdbcType=BIGINT}
   </delete>
  
  
  <resultMap id="subScoreMedianScoreResponseMap" type="edu.ku.cete.report.SubScoreMedianScore">
  	<result column="organizationId" property="organizationId" />  	
  	<collection javaType="ArrayList" ofType="edu.ku.cete.report.ScaleScoresBySubScoreDef" property="scaleScoresBySubScoreDef">
  		<result column="subscoredefinitionname" property="subScoreDefinitionName" />
  		<collection javaType="ArrayList" ofType="edu.ku.cete.report.SubScaleScoresByStudent" property="subScaleScoresByStudent">
  			<result column="subscorescalescore" property="subscorescalescore" />
  			<result column="studentid" property="studentId" />
  			<result column="rating" property="rating" />
  		</collection>   		
  	</collection>
  </resultMap>
  
 <select id="selectAllStudentsBySchoolAssmntSubjectGradeSubScoreDef" resultMap="subScoreMedianScoreResponseMap">
	select stuReport.attendanceschoolid as organizationId,
	   		reportsubscores.subscoredefinitionname,reportsubscores.subscorescalescore, reportsubscores.studentid, reportsubscores.rating
			from reportsubscores reportsubscores
			join subscoresdescription sd on reportsubscores.subscoredefinitionname = sd.subscoredefinitionname
			join studentreport stuReport on stuReport.id = reportsubscores.studentreportid
			inner join enrollment en ON en.id = stuReport.enrollmentid
			inner join gradecourse testGradeCourse ON testGradeCourse.id = stuReport.gradeid
			inner join gradecourse enGradeCourse ON enGradeCourse.id = en.currentgradelevel and enGradeCourse.abbreviatedname =  testGradeCourse.abbreviatedname 
		 	where stuReport.attendanceschoolid = #{schoolId,jdbcType=BIGINT} 
			 and stuReport.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			 and stuReport.gradeid = #{gradeId,jdbcType=BIGINT}
			 and stuReport.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			 and stuReport.schoolyear = #{schoolYear,jdbcType=BIGINT}
			 and stuReport.aggregatetoschool is true  
			 and sd.report = 'School'
			 and sd.schoolyear = #{schoolYear,jdbcType=BIGINT}
 </select>
  
  <select id="selectAllStudentsByDistrictAssmntSubjectGradeSubScoreDef" resultMap="subScoreMedianScoreResponseMap">
	  select stuReport.districtid as organizationId,
	  	reportsubscores.subscoredefinitionname,reportsubscores.subscorescalescore, reportsubscores.studentid, reportsubscores.rating
		from reportsubscores reportsubscores
		join subscoresdescription sd on reportsubscores.subscoredefinitionname = sd.subscoredefinitionname
		join studentreport stuReport on stuReport.id = reportsubscores.studentreportid
		inner join enrollment en ON en.id = stuReport.enrollmentid
		inner join gradecourse testGradeCourse ON testGradeCourse.id = stuReport.gradeid
		inner join gradecourse enGradeCourse ON enGradeCourse.id = en.currentgradelevel and enGradeCourse.abbreviatedname =  testGradeCourse.abbreviatedname 
		where stuReport.districtid = #{districtId,jdbcType=BIGINT}
		 and stuReport.contentareaid = #{contentAreaId,jdbcType=BIGINT}
		 and stuReport.gradeid = #{gradeId,jdbcType=BIGINT}
		 and stuReport.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
		 and stuReport.schoolyear = #{schoolYear,jdbcType=BIGINT}
		 and stuReport.aggregatetodistrict = true 
		 and sd.report = 'District'
		 and sd.schoolyear = #{schoolYear,jdbcType=BIGINT}
  </select>
  
  <select id="selectAllStudentsByStateAssmntSubjectGradeSubScoreDef" resultMap="subScoreMedianScoreResponseMap">
  select stuReport.stateid as organizationId,
  	reportsubscores.subscoredefinitionname,reportsubscores.subscorescalescore, reportsubscores.studentid <!-- , reportsubscores.rating-->
from reportsubscores reportsubscores
<!-- join subscoresdescription sd on reportsubscores.subscoredefinitionname = sd.subscoredefinitionname-->
join studentreport stuReport on stuReport.id = reportsubscores.studentreportid
inner join enrollment en ON en.id = stuReport.enrollmentid
inner join gradecourse testGradeCourse ON testGradeCourse.id = stuReport.gradeid
inner join gradecourse enGradeCourse ON enGradeCourse.id = en.currentgradelevel and enGradeCourse.abbreviatedname =  testGradeCourse.abbreviatedname 
 where stuReport.stateid = #{stateId,jdbcType=BIGINT}
 and stuReport.contentareaid = #{contentAreaId,jdbcType=BIGINT}
  and stuReport.gradeid = #{gradeId,jdbcType=BIGINT}
 and stuReport.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
 and stuReport.schoolyear = #{schoolYear,jdbcType=BIGINT}
 and stuReport.aggregatetodistrict = true 
 <!-- and sd.report = 'State'
 and sd.schoolyear = #{schoolYear,jdbcType=BIGINT} -->
  </select>
  
  
  <resultMap extends="BaseResultMap" id="subScoreDetailsMap" type="edu.ku.cete.domain.report.ReportSubscores">
     <result column="report" jdbcType="VARCHAR" property="report" />
     <result column="subscorereportdisplayname" jdbcType="VARCHAR" property="subScoreReportDisplayName" />
     <result column="subscorereportdescription" jdbcType="VARCHAR" property="subScoreReportDescription" />
     <result column="subscoredisplaysequence" jdbcType="BIGINT" property="subScoreDisplaySequence" />
     <result column="organizationid" jdbcType="BIGINT" property="organizationId" />
   </resultMap>
   
   
  <select id="selectSubscoresDetailsByStudentReportIdAndReportType" resultMap="subScoreDetailsMap">
   select rss.*,scd.report, scd.subscorereportdisplayname, scd.subscorereportdescription, scd.subscoredisplaysequence,scd.sectionlinebelowflag
	from reportsubscores rss
	join studentreport sr on sr.id = rss.studentreportid and sr.attendanceschoolid= #{attendanceSchoolid,jdbcType=BIGINT}
	join subscoresdescription scd on scd.schoolyear = sr.schoolyear and scd.assessmentprogramid = sr.assessmentprogramid 
	and scd.subjectid = sr.contentareaid and scd.subscoredefinitionname = rss.subscoredefinitionname
	where rss.studentreportid = #{studentId,jdbcType=BIGINT}
	and scd.report = #{reportType,jdbcType=VARCHAR}
	and scd.subjectid = #{contentareaId,jdbcType=BIGINT}
	
  </select>
  
   <select id="selectSubscoresMediansByOrganizationIdAndReportType" resultMap="subScoreDetailsMap">
     select rms.id, rms.subscoredefinitionname,rms.organizationid, rms.score as subscorescalescore, rms.standarderror as subscorestandarderror, scd.report, scd.subscorereportdisplayname, scd.subscorereportdescription, scd.subscoredisplaysequence
		from reportsmedianscore rms
		join subscoresdescription scd on scd.schoolyear = rms.schoolyear and scd.assessmentprogramid = rms.assessmentprogramid 
		and scd.subjectid = rms.contentareaid 
		<!-- and scd.subscoredefinitionname = rms.subscoredefinitionname -->
   		where 
 		rms.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
		and rms.contentareaid =  #{contentAreaId,jdbcType=BIGINT} 
	 	and rms.gradeid = #{gradeId,jdbcType=BIGINT}
		and rms.schoolyear = #{schoolYear,jdbcType=BIGINT}
		and rms.organizationid = #{orgId,jdbcType=BIGINT}
        and scd.report =#{reportType,jdbcType=VARCHAR}
 	   <!--  and rms.subscoredefinitionname is not null -->
  </select>
  
  <resultMap extends="BaseResultMap" id="subScoreTestItemCountMap" type="edu.ku.cete.domain.report.ReportSubscores">
  		<result column="testid" property="testId" />
     	<result column="totalitemcount" property="totalItems" />
   </resultMap>
   
  <select id="getItemCountBySubscoreDefinitionNameByTestId" resultMap="subScoreTestItemCountMap">
    select subscores.subscoredefinitionname, count(distinct contents.id) as totalitemcount, contents.testid as testid
	from (
		select tv.id, parentcfd.contentcode as grandparentcode, parentcfd.contentcode, fwl.level, tsec.testid, cfd.contentcode as itemcode
			from taskvariantcontentframeworkdetail tvcfd 
			join contentframeworkdetail cfd ON tvcfd.contentframeworkdetailid = cfd.id
			join contentframework cfw on cfw.id = cfd.contentframeworkid
			join frameworklevel fwl on fwl.id = cfd.frameworklevelid
			join contentframeworkdetail parentcfd ON parentcfd.id = cfd.parentcontentframeworkdetailid 
			join taskvariant tv on tv.id = tvcfd.taskvariantid
			and tv.externalid not in(select taskvariantid from excludeditems where assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
	    		<if test="subjectId != null">
	    			and subjectid = #{subjectId,jdbcType=BIGINT}
	    		</if>
	    		<if test="gradeId != null"> 
	    			and gradeid = #{gradeId,jdbcType=BIGINT}
	    		</if> 
	    		<if test="schoolYear != null">
	    			and schoolyear = #{schoolYear,jdbcType=BIGINT}
	    		</if>
    			)
			join testsectionstaskvariants tstv on tstv.taskvariantid = tv.id
			join testsection tsec on tstv.testsectionid=tsec.id	
			where tsec.testid = #{testId,jdbcType=BIGINT}
		union
		select tv.id, grandparentcfd.contentcode as grandparentcode, parentcfd.contentcode, fwl.level, tsec.testid, parentcfd.contentcode as itemcode
			from taskvariantcontentframeworkdetail tvcfd 
			join contentframeworkdetail cfd ON tvcfd.contentframeworkdetailid = cfd.id
			join contentframeworkdetail parentcfd ON cfd.parentcontentframeworkdetailid = parentcfd.id
			join contentframework cfw on cfw.id = parentcfd.contentframeworkid
			join contentframeworkdetail grandparentcfd ON grandparentcfd.id = parentcfd.parentcontentframeworkdetailid
			join frameworklevel fwl on fwl.id = parentcfd.frameworklevelid 
			join taskvariant tv on tv.id = tvcfd.taskvariantid
			and tv.externalid not in(select taskvariantid from excludeditems where assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
	    		<if test="subjectId != null">
	    			and subjectid = #{subjectId,jdbcType=BIGINT}
	    		</if> 
	    		<if test="gradeId != null"> 
	    			and gradeid = #{gradeId,jdbcType=BIGINT}
	    		</if>
	    		
	    		<if test="schoolYear != null">
		    			and schoolyear = #{schoolYear,jdbcType=BIGINT}
		    	</if>
	    		)
			join testsectionstaskvariants tstv on tstv.taskvariantid = tv.id
			join testsection tsec on tstv.testsectionid=tsec.id	
			where tsec.testid = #{testId,jdbcType=BIGINT} ) contents 
			inner join subscoreframework subscores
				ON CASE    WHEN contents.level = 1 THEN (contents.contentcode = subscores.frameworklevel1 AND subscores.frameworklevel2='All')
                           WHEN contents.level = 2 THEN ((((contents.contentcode = subscores.frameworklevel1 AND subscores.frameworklevel2='All') OR contents.itemcode = subscores.frameworklevel2))
                           		OR  (contents.grandparentcode = subscores.frameworklevel1 AND subscores.frameworklevel2='All'))
                           WHEN contents.level = 3 THEN ((((contents.contentcode = subscores.frameworklevel2 AND subscores.frameworklevel3='All') OR contents.itemcode = subscores.frameworklevel3))
                           		OR  (contents.grandparentcode = subscores.frameworklevel1 AND subscores.frameworklevel3='All'))

                  END
			WHERE subscores.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			<if test="subjectId != null">
				and subscores.subjectid = #{subjectId,jdbcType=BIGINT}
			</if>
			<if test="gradeId != null">
				and subscores.gradeid = #{gradeId,jdbcType=BIGINT}
			</if>
			<if test="schoolYear != null">
		    	and subscores.schoolyear = #{schoolYear,jdbcType=BIGINT}
		    </if>	
		    	group by subscoredefinitionname, testid
  </select>
  
  
  <select id="selectSubscoresDetailsForOrganization" resultMap="BaseResultMap">
    
  	select sd.id,rms.id as rmsid,rms.subscoredefinitionname, sd.report, sd.subscorereportdisplayname, sd.indentneededflag, rms.gradeid as 
		gradeID, rms.rating as rating, rms.organizationid, sd.sectionlinebelowflag, 
		sd.subscorereportdescription,sd.subscoredisplaysequence,gc.name
		from reportsmedianscore  rms 
		left join gradecourse gc on rms.gradeID=gc.id and activeflag=true
	 	left join subscoresdescription sd on sd.subscoredefinitionname=rms.subscoredefinitionname and rms.contentareaid = sd.subjectid and sd.schoolyear = rms.schoolyear
	 	and report=(select typename from organizationtype where typecode=#{reportType,jdbcType=VARCHAR})	
   	where    		
		rms.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
		and sd.id is not null
	and rms.contentareaid =  #{contentAreaId,jdbcType=BIGINT} 
	 <if test="orgGradeIds != null">
         and rms.gradeid  = ANY(Array
     <foreach close="]" collection="orgGradeIds" item="gradeId" open="[" separator=",">
			#{gradeId}
	 </foreach>
	 )
     </if>
	 and rms.schoolyear = #{schoolYear,jdbcType=BIGINT}
	 and rms.subscoredefinitionname is not null 
	 and rms.organizationid =#{orgId,jdbcType=BIGINT}
	 group by rms.id,sd.id,rms.subscoredefinitionname,rms.gradeid,rms.rating,rms.organizationid,gc.name
	 order by sd.subscoredisplaysequence,rms.gradeid
   </select>
  
  
</mapper>