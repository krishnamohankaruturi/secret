<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.ku.cete.model.StudentReportMapper">
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.report.StudentReport">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jul 07 15:11:12 CDT 2015.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="studentid" jdbcType="BIGINT" property="studentId" />
    <result column="enrollmentid" jdbcType="BIGINT" property="enrollmentId" />
    <result column="gradeid" jdbcType="BIGINT" property="gradeId" />
    <result column="contentareaid" jdbcType="BIGINT" property="contentAreaId" />
    <result column="attendanceschoolid" jdbcType="BIGINT" property="attendanceSchoolId" />
    <result column="districtid" jdbcType="BIGINT" property="districtId" />
    <result column="stateid" jdbcType="BIGINT" property="stateId" />
    <result column="studenttest1id" jdbcType="BIGINT" property="studentTest1Id" />
    <result column="studenttest2id" jdbcType="BIGINT" property="studentTest2Id" />
    <result column="externaltest1id" jdbcType="BIGINT" property="externalTest1Id" />
    <result column="externaltest2id" jdbcType="BIGINT" property="externalTest2Id" />
    <result column="levelid" jdbcType="BIGINT" property="levelId" />
    <result column="rawscore" jdbcType="NUMERIC" property="rawScore" />
    <result column="subscore" jdbcType="NUMERIC" property="subScore" />
    <result column="batchreportprocessid" jdbcType="BIGINT" property="batchReportProcessId" />
    <result column="assessmentprogramid" jdbcType="BIGINT" property="assessmentProgramId" />
    <result column="standarderror" jdbcType="NUMERIC" property="standardError" />
    <result column="scalescore" jdbcType="BIGINT" property="scaleScore" />
    <result column="schoolyear" jdbcType="BIGINT" property="schoolYear" />
    <result column="filepath" jdbcType="VARCHAR" property="filePath" />
    <result column="aggregates" jdbcType="BIT" property="aggregates" />
    <result column="exitstatus" jdbcType="BIT" property="exitStatus" />
    <result column="incompletestatus" jdbcType="BIT" property="incompleteStatus" />
    <result column="status" jdbcType="BIT" property="status" />
    <result column="level" jdbcType="BIGINT" property="level" />
    <result column="previousyearlevelid" jdbcType="BIGINT" property="previousYearLevelId" />
    <result column="studenttest3id" jdbcType="BIGINT" property="studentTest3Id" />
    <result column="studenttest4id" jdbcType="BIGINT" property="studentTest4Id" />
    <result column="externaltest3id" jdbcType="BIGINT" property="externalTest3Id" />
    <result column="externaltest4id" jdbcType="BIGINT" property="externalTest4Id" />
    <result column="studentperformancetestid" jdbcType="BIGINT" property="studentPerformanceTestId" />
    <result column="performancetestexternalid" jdbcType="BIGINT" property="performanceTestExternalId" />
    <result column="mdptscore" jdbcType="NUMERIC" property="mdptScore" />
    <result column="mdptscorableflag" jdbcType="BIT" property="mdptScorableFlag" />
    <result column="combinedlevel" jdbcType="NUMERIC" property="combinedLevel" />
    <result column="mdptLevelId" jdbcType="BIGINT" property="mdptLevelId" />
    <result column="combinedlevelid" jdbcType="BIGINT" property="combinedLevelId" />
    <result column="transferred" jdbcType="BIT" property="transferred" />
    <result column="aggregatetoschool" jdbcType="BIT" property="aggregateToSchool" />
    <result column="aggregatetodistrict" jdbcType="BIT" property="aggregateToDistrict" />
    <result column="suppressmdptscore" jdbcType="BIT" property="suppressMdptScore" />
    <result column="suppressmainscalescoreprfrmlevel" jdbcType="BIT" property="suppressMainScalescorePrfrmLevel" />
    <result column="suppresscombinedscore" jdbcType="BIT" property="suppressCombinedScore" />
    <result column="aggregatemdptscore" jdbcType="BIT" property="aggregateMdptScore" />
    <result column="aggregatemainscalescoreprfrmlevel" jdbcType="BIT" property="aggregateMainScalescorePrfrmLevel" />
    <result column="aggregatecombinedlevel" jdbcType="BIT" property="aggregateCombinedLevel" />
    <result column="aggregatesubscore" jdbcType="BIT" property="aggregateSubscore" />
    <result column="contentareaname" jdbcType="VARCHAR" property="contentAreaName" />
    
    <result column="reading_rawscore" jdbcType="NUMERIC" property="readingRawScore" />
    <result column="listening_rawscore" jdbcType="NUMERIC" property="listeningRawScore" />
    <result column="speaking_rawscore" jdbcType="NUMERIC" property="speakingRawScore" />
    <result column="writing_rawscore" jdbcType="NUMERIC" property="writingRawScore" />
    <result column="comprehension_rawscore" jdbcType="NUMERIC" property="comprehensionRawScore" />
    
    <result column="reading_scalescore" jdbcType="BIGINT" property="readingScaleScore" />
    <result column="listening_scalescore" jdbcType="BIGINT" property="listeningScaleScore" />
    <result column="speaking_scalescore" jdbcType="BIGINT" property="speakingScaleScore" />
    <result column="writing_scalescore" jdbcType="BIGINT" property="writingScaleScore" />
    <result column="comprehension_scalescore" jdbcType="BIGINT" property="comprehensionScaleScore" />
    
    <result column="reading_standarderror" jdbcType="NUMERIC" property="readingStandardError" />
    <result column="listening_standarderror" jdbcType="NUMERIC" property="listeningStandardError" />
    <result column="speaking_standarderror" jdbcType="NUMERIC" property="speakingStandardError" />
    <result column="writing_standarderror" jdbcType="NUMERIC" property="writingStandardError" />
    <result column="comprehension_standarderror" jdbcType="NUMERIC" property="comprehensionStandardError" />
    
    <result column="reading_level" jdbcType="BIGINT" property="readingLevel"/>
    <result column="listening_level" jdbcType="BIGINT" property="listeningLevel"/>
    <result column="speaking_level" jdbcType="BIGINT" property="speakingLevel"/>
    <result column="writing_level" jdbcType="BIGINT" property="writingLevel"/>
    <result column="overall_level" jdbcType="BIGINT" property="level"/>
    
    <result column="reading_sccode" jdbcType="BIT" property="readingHasSCCode" />
    <result column="listening_sccode" jdbcType="BIT" property="listeningHasSCCode" />
    <result column="speaking_sccode" jdbcType="BIT" property="speakingHasSCCode" />
    <result column="writing_sccode" jdbcType="BIT" property="writingHasSCCode" />
    
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jul 07 15:11:12 CDT 2015.
    -->
    id, studentid, enrollmentid, gradeid, contentareaid, attendanceschoolid, districtid, 
    stateid, studenttest1id, studenttest2id, externaltest1id, externaltest2id, levelid, 
    rawscore, subscore, batchreportprocessid, assessmentprogramid, standarderror, scalescore, 
    schoolyear, filepath, aggregates, exitstatus, incompletestatus, status, previousyearlevelid,
    studenttest3id, studenttest4id, studentperformancetestid, externaltest3id, externaltest4id,
    performancetestexternalid, mdptscore, mdptscorableflag, combinedlevel, mdptlevelid, combinedlevelid, 
    transferred, aggregatetoschool, aggregatetodistrict, suppressmdptscore, suppressmainscalescoreprfrmlevel, suppresscombinedscore, aggregatemdptscore,
    aggregatemainscalescoreprfrmlevel, aggregatecombinedlevel, aggregatesubscore,
    reading_rawscore, listening_rawscore, speaking_rawscore, writing_rawscore, comprehension_rawscore,
	reading_scalescore, listening_scalescore, speaking_scalescore, writing_scalescore, comprehension_scalescore,
	reading_standarderror, listening_standarderror, speaking_standarderror, writing_standarderror, comprehension_standarderror,
	reading_level, listening_level, speaking_level, writing_level, overall_level,
	reading_sccode, listening_sccode, speaking_sccode, writing_sccode
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu May 05 14:41:13 CDT 2016.
    -->
    select 
    <include refid="Base_Column_List" />
    from studentreport
    where id = #{id,jdbcType=BIGINT}
  </select>
  <insert id="insert" parameterType="edu.ku.cete.domain.report.StudentReport">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jul 07 15:11:12 CDT 2015.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT nextval('studentreport_id_seq')
    </selectKey>
    insert into studentreport (id, studentid, enrollmentid, 
      gradeid, contentareaid, attendanceschoolid, 
      districtid, stateid, studenttest1id, 
      studenttest2id, externaltest1id, externaltest2id, 
      levelid, rawscore, subscore, 
      batchreportprocessid, assessmentprogramid, 
      standarderror, scalescore, schoolyear, 
      filepath, aggregates, exitstatus, 
      incompletestatus, status, previousyearlevelid, studenttest3id, studenttest4id, studentperformancetestid,
      externaltest3id, externaltest4id, performancetestexternalid, mdptscore, mdptscorableflag, combinedlevel,mdptlevelid, combinedlevelid,
      transferred, aggregatetoschool, aggregatetodistrict,
      suppressmdptScore, suppressmainscalescoreprfrmlevel, suppresscombinedscore, aggregatemdptscore, aggregatemainscalescoreprfrmlevel, aggregatecombinedlevel, aggregatesubscore,
      reading_rawscore, listening_rawscore, speaking_rawscore, writing_rawscore, comprehension_rawscore,
	  reading_scalescore, listening_scalescore, speaking_scalescore, writing_scalescore, comprehension_scalescore,
	  reading_standarderror, listening_standarderror, speaking_standarderror, writing_standarderror, comprehension_standarderror,
	  reading_level, listening_level, speaking_level, writing_level, overall_level
	  reading_sccode, listening_sccode, speaking_sccode, writing_sccode)
    values (#{id,jdbcType=BIGINT}, #{studentId,jdbcType=BIGINT}, #{enrollmentId,jdbcType=BIGINT}, 
      #{gradeId,jdbcType=BIGINT}, #{contentAreaId,jdbcType=BIGINT}, #{attendanceSchoolId,jdbcType=BIGINT}, 
      #{districtId,jdbcType=BIGINT}, #{stateId,jdbcType=BIGINT}, #{studentTest1Id,jdbcType=BIGINT}, 
      #{studentTest2Id,jdbcType=BIGINT}, #{externalTest1Id,jdbcType=BIGINT}, #{externalTest2Id,jdbcType=BIGINT}, 
      #{levelId,jdbcType=BIGINT}, #{rawScore,jdbcType=NUMERIC}, #{subScore,jdbcType=NUMERIC}, 
      #{batchReportProcessId,jdbcType=BIGINT}, #{assessmentProgramId,jdbcType=BIGINT}, 
      #{standardError,jdbcType=NUMERIC}, #{scaleScore,jdbcType=BIGINT}, #{schoolYear,jdbcType=BIGINT}, 
      #{filePath,jdbcType=VARCHAR}, #{aggregates,jdbcType=BIT}, #{exitStatus,jdbcType=BIT}, 
      #{incompleteStatus,jdbcType=BIT}, #{status,jdbcType=BIT},#{previousYearLevelId,jdbcType=BIGINT}, #{studentTest3Id,jdbcType=BIGINT},
      #{studentTest4Id,jdbcType=BIGINT}, #{studentPerformanceTestId,jdbcType=BIGINT},#{externalTest3Id,jdbcType=BIGINT},
      #{externalTest4Id,jdbcType=BIGINT},#{performanceTestExternalId,jdbcType=BIGINT},#{mdptScore,jdbcType=NUMERIC},#{mdptScorableFlag,jdbcType=BIT}, 
      #{combinedLevel,jdbcType=NUMERIC},#{mdptLevelId,jdbcType=BIGINT}, #{combinedLevelId,jdbcType=BIGINT},
      #{transferred,jdbcType=BIT}, #{aggregatetoschool,jdbcType=BIT}, #{aggregatetodistrict,jdbcType=BIT},
      #{suppressMdptScore,jdbcType=BIT}, #{suppressMainScalescorePrfrmLevel,jdbcType=BIT}, #{suppressCombinedScore,jdbcType=BIT}, #{aggregateMdptScore,jdbcType=BIT},
      #{aggregateMainScalescorePrfrmLevel,jdbcType=BIT}, #{aggregateCombinedLevel,jdbcType=BIT}, #{aggregateSubscore,jdbcType=BIT},
      #{readingRawScore,jdbcType=NUMERIC}, #{listeningRawScore,jdbcType=NUMERIC}, #{speakingRawScore,jdbcType=NUMERIC}, #{writingRawScore,jdbcType=NUMERIC}, #{comprehensionRawScore,jdbcType=NUMERIC},
	  #{readingScaleScore,jdbcType=BIGINT}, #{listeningScaleScore,jdbcType=BIGINT}, #{speakingScaleScore,jdbcType=BIGINT}, #{writingScaleScore,jdbcType=BIGINT}, #{comprehensionScaleScore,jdbcType=BIGINT},
	  #{readingStandardError,jdbcType=NUMERIC}, #{listeningStandardError,jdbcType=NUMERIC}, #{speakingStandardError,jdbcType=NUMERIC}, #{writingStandardError,jdbcType=NUMERIC}, #{comprehensionStandardError,jdbcType=NUMERIC},
	  #{readingLevel,jdbcType=BIGINT}, #{listeningLevel,jdbcType=BIGINT}, #{speakingLevel,jdbcType=BIGINT}, #{writingLevel,jdbcType=BIGINT}, #{level,jdbcType=BIGINT}
	  #{readingHasSCCode,jdbcType=BIT},#{listeningHasSCCode,jdbcType=BIT},#{speakingHasSCCode,jdbcType=BIT},#{writingHasSCCode,jdbcType=BIT},
    )
  </insert>
  <insert id="insertSelective" parameterType="edu.ku.cete.domain.report.StudentReport">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jul 07 15:11:12 CDT 2015.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT nextval('studentreport_id_seq')
    </selectKey>
    insert into studentreport
    <trim prefix="(" suffix=")" suffixOverrides=",">
      id,
	     <if test="studentId != null">
	       studentid,
	     </if>
	     <if test="enrollmentId != null">
	       enrollmentid,
	     </if>
	     <if test="gradeId != null">
	       gradeid,
	     </if>
	     <if test="contentAreaId != null">
	       contentareaid,
	     </if>
	     <if test="attendanceSchoolId != null">
	       attendanceschoolid,
	     </if>
	     <if test="districtId != null">
	       districtid,
	     </if>
	     <if test="stateId != null">
	       stateid,
	     </if>
	     <if test="studentTest1Id != null">
	       studenttest1id,
	     </if>
	     <if test="studentTest2Id != null">
	       studenttest2id,
	     </if>
	     <if test="externalTest1Id != null">
	       externaltest1id,
	     </if>
	     <if test="externalTest2Id != null">
	       externaltest2id,
	     </if>
	     <if test="levelId != null">
	       levelid,
	     </if>
	     <if test="rawScore != null">
	       rawscore,
	     </if>
	     <if test="subScore != null">
	       subscore,
	     </if>
	     <if test="batchReportProcessId != null">
	       batchreportprocessid,
	     </if>
	     <if test="assessmentProgramId != null">
	       assessmentprogramid,
	     </if>
	     <if test="standardError != null">
	       standarderror,
	     </if>
	     <if test="scaleScore != null">
	       scalescore,
	     </if>
	     <if test="schoolYear != null">
	       schoolyear,
	     </if>
	     <if test="filePath != null">
	       filepath,
	     </if>
	     <if test="aggregates != null">
	       aggregates,
	     </if>
	     <if test="exitStatus != null">
	       exitstatus,
	     </if>
	     <if test="incompleteStatus != null">
	       incompletestatus,
	     </if>
	     <if test="status != null">
	       status,
	     </if>
	     <if test="previousYearLevelId != null">
	       previousyearlevelid,
	     </if>
	     <if test="studentTest3Id != null">
	       studenttest3id,
	     </if>
	     <if test="studentTest4Id != null">
	       studenttest4id,
	     </if>
	     <if test="studentPerformanceTestId != null">
	       studentperformancetestid,
	     </if>
	     <if test="externalTest3Id != null">
	       externaltest3id,
	     </if>
	     <if test="externalTest4Id != null">
	       externaltest4id,
	     </if>
	     <if test="performanceTestExternalId != null">
	       performancetestexternalid,
	     </if>
	     <if test="mdptScore != null">
	       mdptscore,
	     </if>
	     <if test="mdptScorableFlag != null">
	       mdptscorableflag,
	     </if>
	     <if test="combinedLevel != null">
	       combinedlevel,
	     </if>
	      <if test="mdptLevelId != null">
	       mdptlevelid,
	     </if>
	     <if test="combinedLevelId != null">
	       combinedlevelid, 
	     </if>
	     <if test="suppressMdptScore != null">
	       suppressmdptScore,
		 </if>
		<if test="suppressMainScalescorePrfrmLevel != null">
	        suppressmainscalescoreprfrmlevel,
		</if>
		<if test="suppressCombinedScore != null">
		        suppresscombinedscore,
		</if>
		<if test="aggregateMdptScore != null">
		        aggregatemdptscore,
		</if>
		<if test="aggregateMainScalescorePrfrmLevel != null">
		        aggregatemainscalescoreprfrmlevel,
		</if>
		<if test="aggregateCombinedLevel != null">
		        aggregatecombinedlevel,
		</if>
		<if test="aggregateSubscore != null">
		        aggregatesubscore,
		</if>
      
      <if test="transferred != null">
        transferred,
      </if>
      <if test="aggregateToSchool != null">
        aggregatetoschool,
      </if>
      <if test="aggregateToDistrict != null">
        aggregatetodistrict,
      </if>
      <if test="stage1HasSCCode != null">
        stage1hassccode,
      </if>
      <if test="stage2HasSCCode != null">
        stage2hassccode,
      </if>
      
      <if test="readingRawScore != null">
        reading_rawscore,
      </if>
      <if test="listeningRawScore != null">
        listening_rawscore,
      </if>
      <if test="speakingRawScore != null">
        speaking_rawscore,
      </if>
      <if test="writingRawScore != null">
        writing_rawscore,
      </if>
      <if test="comprehensionRawScore != null">
        comprehension_rawscore,
      </if>
      
      
      <if test="readingScaleScore != null">
        reading_scalescore,
      </if>
      <if test="listeningScaleScore != null">
        listening_scalescore,
      </if>
      <if test="speakingScaleScore != null">
        speaking_scalescore,
      </if>
      <if test="writingScaleScore != null">
        writing_scalescore,
      </if>
      <if test="comprehensionScaleScore != null">
        comprehension_scalescore,
      </if>
      
      <if test="readingStandardError != null">
        reading_standarderror,
      </if>
      <if test="listeningStandardError != null">
        listening_standarderror,
      </if>
      <if test="speakingStandardError != null">
        speaking_standarderror,
      </if>
      <if test="writingStandardError != null">
        writing_standarderror,
      </if>
      <if test="comprehensionStandardError != null">
        comprehension_standarderror,
      </if>
      
      <if test="readingLevel != null">
        reading_level,
      </if>
      <if test="listeningLevel != null">
        listening_level,
      </if>
      <if test="speakingLevel != null">
        speaking_level,
      </if>
      <if test="writingLevel != null">
        writing_level,
      </if>
      <if test="level != null">
        overall_level,
      </if>
      
      <if test="readingHasSCCode != null">
        reading_sccode,
      </if>
      <if test="listeningHasSCCode != null">
        listening_sccode,
      </if>
      <if test="speakingHasSCCode != null">
        speaking_sccode,
      </if>
      <if test="writingHasSCCode != null">
        writing_sccode,
      </if>
      <if test="createdUserId != null">
      	createduser,
      </if>
      <if test="modifiedUserId != null">
      	modifieduser,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=BIGINT},
      <if test="studentId != null">
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="enrollmentId != null">
        #{enrollmentId,jdbcType=BIGINT},
      </if>
      <if test="gradeId != null">
        #{gradeId,jdbcType=BIGINT},
      </if>
      <if test="contentAreaId != null">
        #{contentAreaId,jdbcType=BIGINT},
      </if>
      <if test="attendanceSchoolId != null">
        #{attendanceSchoolId,jdbcType=BIGINT},
      </if>
      <if test="districtId != null">
        #{districtId,jdbcType=BIGINT},
      </if>
      <if test="stateId != null">
        #{stateId,jdbcType=BIGINT},
      </if>
      <if test="studentTest1Id != null">
        #{studentTest1Id,jdbcType=BIGINT},
      </if>
      <if test="studentTest2Id != null">
        #{studentTest2Id,jdbcType=BIGINT},
      </if>
      <if test="externalTest1Id != null">
        #{externalTest1Id,jdbcType=BIGINT},
      </if>
      <if test="externalTest2Id != null">
        #{externalTest2Id,jdbcType=BIGINT},
      </if>
      <if test="levelId != null">
        #{levelId,jdbcType=BIGINT},
      </if>
      <if test="rawScore != null">
        #{rawScore,jdbcType=NUMERIC},
      </if>
      <if test="subScore != null">
        #{subScore,jdbcType=NUMERIC},
      </if>
      <if test="batchReportProcessId != null">
        #{batchReportProcessId,jdbcType=BIGINT},
      </if>
      <if test="assessmentProgramId != null">
        #{assessmentProgramId,jdbcType=BIGINT},
      </if>
      <if test="standardError != null">
        #{standardError,jdbcType=NUMERIC},
      </if>
      <if test="scaleScore != null">
        #{scaleScore,jdbcType=BIGINT},
      </if>
      <if test="schoolYear != null">
        #{schoolYear,jdbcType=BIGINT},
      </if>
      <if test="filePath != null">
        #{filePath,jdbcType=VARCHAR},
      </if>
      <if test="aggregates != null">
        #{aggregates,jdbcType=BIT},
      </if>
      <if test="exitStatus != null">
        #{exitStatus,jdbcType=BIT},
      </if>
      <if test="incompleteStatus != null">
        #{incompleteStatus,jdbcType=BIT},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIT},
      </if>
      <if test="previousYearLevelId != null">
        #{previousYearLevelId,jdbcType=BIGINT},
      </if>
      <if test="studentTest3Id != null">
        #{studentTest3Id,jdbcType=BIGINT},
      </if>
      <if test="studentTest4Id != null">
        #{studentTest4Id,jdbcType=BIGINT},
      </if>
      <if test="studentPerformanceTestId != null">
        #{studentPerformanceTestId,jdbcType=BIGINT},
      </if>
      <if test="externalTest3Id != null">
        #{externalTest3Id,jdbcType=BIGINT},
      </if>
      <if test="externalTest4Id != null">
        #{externalTest4Id,jdbcType=BIGINT},
      </if>
      <if test="performanceTestExternalId != null">
        #{performanceTestExternalId,jdbcType=BIGINT},
      </if>
      <if test="mdptScore != null">
        #{mdptScore,jdbcType=NUMERIC},
      </if>
      <if test="mdptScorableFlag != null">
        #{mdptScorableFlag,jdbcType=BIT},
      </if>
      <if test="combinedLevel != null">
        #{combinedLevel,jdbcType=NUMERIC},
      </if>
      <if test="mdptLevelId != null">
        #{mdptLevelId,jdbcType=BIGINT},
      </if>
      <if test="combinedLevelId != null">
        #{combinedLevelId,jdbcType=BIGINT}, 
      </if>      
      <if test="suppressMdptScore != null">
        #{suppressMdptScore,jdbcType=BIT},
	  </if>	  
		<if test="suppressMainScalescorePrfrmLevel != null">
		        #{suppressMainScalescorePrfrmLevel,jdbcType=BIT},
		</if>
		<if test="suppressCombinedScore != null">
		        #{suppressCombinedScore,jdbcType=BIT},
		</if>
		<if test="aggregateMdptScore != null">
		        #{aggregateMdptScore,jdbcType=BIT},
		</if>
		<if test="aggregateMainScalescorePrfrmLevel != null">
		        #{aggregateMainScalescorePrfrmLevel,jdbcType=BIT},
		</if>
		<if test="aggregateCombinedLevel != null">
		        #{aggregateCombinedLevel,jdbcType=BIT},
		</if>
		<if test="aggregateSubscore != null">
		        #{aggregateSubscore,jdbcType=BIT},
		</if>
		<if test="transferred != null">
        	#{transferred,jdbcType=BIT},
      	</if>
      	<if test="aggregateToSchool != null">
       	 	#{aggregateToSchool,jdbcType=BIT},
      	</if>
      	<if test="aggregateToDistrict != null">
        	#{aggregateToDistrict,jdbcType=BIT},
      	</if>
      	<if test="stage1HasSCCode != null">
        	#{stage1HasSCCode,jdbcType=BIT},
	    </if>
	    <if test="stage2HasSCCode != null">
	        #{stage2HasSCCode,jdbcType=BIT},
	    </if>  
	    
	  <if test="readingRawScore != null">
        #{readingRawScore,jdbcType=NUMERIC},
      </if>
      <if test="listeningRawScore != null">
        #{listeningRawScore,jdbcType=NUMERIC},
      </if>
      <if test="speakingRawScore != null">
        #{speakingRawScore,jdbcType=NUMERIC},
      </if>
      <if test="writingRawScore != null">
        #{writingRawScore,jdbcType=NUMERIC},
      </if>
      <if test="comprehensionRawScore != null">
        #{comprehensionRawScore,jdbcType=NUMERIC},
      </if>
      
      
      <if test="readingScaleScore != null">
        #{readingScaleScore,jdbcType=BIGINT},
      </if>
      <if test="listeningScaleScore != null">
        #{listeningScaleScore,jdbcType=BIGINT},
      </if>
      <if test="speakingScaleScore != null">
        #{speakingScaleScore,jdbcType=BIGINT},
      </if>
      <if test="writingScaleScore != null">
        #{writingScaleScore,jdbcType=BIGINT},
      </if>
      <if test="comprehensionScaleScore != null">
        #{comprehensionScaleScore,jdbcType=BIGINT},
      </if>
      
      <if test="readingStandardError != null">
        #{readingStandardError,jdbcType=NUMERIC},
      </if>
      <if test="listeningStandardError != null">
        #{listeningStandardError,jdbcType=NUMERIC},
      </if>
      <if test="speakingStandardError != null">
        #{speakingStandardError,jdbcType=NUMERIC},
      </if>
      <if test="writingStandardError != null">
        #{writingStandardError,jdbcType=NUMERIC},
      </if>
      <if test="comprehensionStandardError != null">
        #{comprehensionStandardError,jdbcType=NUMERIC},
      </if>
      
      <if test="readingLevel != null">
        #{readingLevel,jdbcType=BIGINT},
      </if>
      <if test="listeningLevel != null">
        #{listeningLevel,jdbcType=BIGINT},
      </if>
      <if test="speakingLevel != null">
        #{speakingLevel,jdbcType=BIGINT},
      </if>
      <if test="writingLevel != null">
        #{writingLevel,jdbcType=BIGINT},
      </if>
      <if test="level != null">
        #{level,jdbcType=BIGINT},
      </if>
      
      <if test="readingHasSCCode != null">
       	#{readingHasSCCode,jdbcType=BIT},
   	  </if>
      <if test="listeningHasSCCode != null">
        #{listeningHasSCCode,jdbcType=BIT},
      </if>
      <if test="speakingHasSCCode != null">
       	#{speakingHasSCCode,jdbcType=BIT},
   	  </if>
      <if test="writingHasSCCode != null">
        #{writingHasSCCode,jdbcType=BIT},
      </if> 
	  <if test="createdUserId != null">
      	#{createdUserId,jdbcType=BIGINT},
      </if>
      <if test="modifiedUserId != null">
      	#{modifiedUserId,jdbcType=BIGINT},
      </if>   
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.report.StudentReport">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jul 07 15:11:12 CDT 2015.
    -->
    update studentreport
    <set>
      <if test="studentId != null">
        studentid = #{studentId,jdbcType=BIGINT},
      </if>
      <if test="enrollmentId != null">
        enrollmentid = #{enrollmentId,jdbcType=BIGINT},
      </if>
      <if test="gradeId != null">
        gradeid = #{gradeId,jdbcType=BIGINT},
      </if>
      <if test="contentAreaId != null">
        contentareaid = #{contentAreaId,jdbcType=BIGINT},
      </if>
      <if test="attendanceSchoolId != null">
        attendanceschoolid = #{attendanceSchoolId,jdbcType=BIGINT},
      </if>
      <if test="districtId != null">
        districtid = #{districtId,jdbcType=BIGINT},
      </if>
      <if test="stateId != null">
        stateid = #{stateId,jdbcType=BIGINT},
      </if>
      <if test="studentTest1Id != null">
        studenttest1id = #{studentTest1Id,jdbcType=BIGINT},
      </if>
      <if test="studentTest2Id != null">
        studenttest2id = #{studentTest2Id,jdbcType=BIGINT},
      </if>
      <if test="externalTest1Id != null">
        externaltest1id = #{externalTest1Id,jdbcType=BIGINT},
      </if>
      <if test="externalTest2Id != null">
        externaltest2id = #{externalTest2Id,jdbcType=BIGINT},
      </if>
      <if test="levelId != null">
        levelid = #{levelId,jdbcType=BIGINT},
      </if>
      <if test="rawScore != null">
        rawscore = #{rawScore,jdbcType=NUMERIC},
      </if>
      <if test="subScore != null">
        subscore = #{subScore,jdbcType=NUMERIC},
      </if>
      <if test="batchReportProcessId != null">
        batchreportprocessid = #{batchReportProcessId,jdbcType=BIGINT},
      </if>
      <if test="assessmentProgramId != null">
        assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT},
      </if>
      <if test="standardError != null">
        standarderror = #{standardError,jdbcType=NUMERIC},
      </if>
      <if test="scaleScore != null">
        scalescore = #{scaleScore,jdbcType=BIGINT},
      </if>
      <if test="schoolYear != null">
        schoolyear = #{schoolYear,jdbcType=BIGINT},
      </if>
      <if test="filePath != null">
        filepath = #{filePath,jdbcType=VARCHAR},
      </if>
      <if test="aggregates != null">
        aggregates = #{aggregates,jdbcType=BIT},
      </if>
      <if test="exitStatus != null">
        exitstatus = #{exitStatus,jdbcType=BIT},
      </if>
      <if test="incompleteStatus != null">
        incompletestatus = #{incompleteStatus,jdbcType=BIT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIT},
      </if>
      <if test="previousYearLevelId != null">
        previousyearlevelid = #{previousYearLevelId,jdbcType=BIGINT},
      </if>
      <if test="studentTest3Id != null">
        studenttest3id = #{studentTest3Id,jdbcType=BIGINT},
      </if>
      <if test="studentTest4Id != null">
        studenttest4id = #{studentTest4Id,jdbcType=BIGINT},
      </if>
      <if test="studentPerformanceTestId != null">
        studentperformancetestid = #{studentPerformanceTestId,jdbcType=BIGINT},
      </if>
      <if test="externalTest3Id != null">
        externaltest3id = #{externalTest3Id,jdbcType=BIGINT},
      </if>
      <if test="externalTest4Id != null">
        externaltest4id = #{externalTest4Id,jdbcType=BIGINT},
      </if>
      <if test="performanceTestExternalId != null">
        performancetestexternalid = #{performanceTestExternalId,jdbcType=BIGINT},
      </if>
      <if test="mdptScore != null">
        mdptscore = #{mdptScore,jdbcType=NUMERIC},
      </if>
      <if test="mdptScorableFlag != null">
        mdptscorableflag = #{mdptScorableFlag,jdbcType=BIT},
      </if>
      <if test="combinedLevel != null">
        combinedlevel = #{combinedLevel,jdbcType=NUMERIC},
      </if>
      <if test="mdptLevelId != null">
        mdptlevelid = #{mdptLevelId,jdbcType=BIGINT},
      </if>
      <if test="combinedLevelId != null">
       combinedlevelid = #{combinedLevelId,jdbcType=BIGINT}
      </if>
      <if test="transferred != null">
        transferred = #{transferred,jdbcType=BIT}
      </if>
      <if test="aggregateToSchool != null">
        aggregatetoschool = #{aggregateToSchool,jdbcType=BIT}
      </if>
      <if test="aggregateToDistrict != null">
        aggregatetodistrict = #{aggregateToDistrict,jdbcType=BIT}
      </if>
      	<if test="suppressMdptScore != null">
        		suppressmdptScore = #{suppressMdptScore,jdbcType=BIT},
	  	</if>
		<if test="suppressMainScalescorePrfrmLevel != null">
		   		suppressmainscalescoreprfrmlevel= #{suppressMainScalescorePrfrmLevel,jdbcType=BIT},
		</if>
		<if test="suppressCombinedScore != null">
		      	suppresscombinedscore= #{suppressCombinedScore,jdbcType=BIT},
		</if>
		<if test="aggregateMdptScore != null">
		     	aggregatemdptscore = #{aggregateMdptScore,jdbcType=BIT},
		</if>
		<if test="aggregateMainScalescorePrfrmLevel != null">
		      	aggregatemainscalescoreprfrmlevel = #{aggregateMainScalescorePrfrmLevel,jdbcType=BIT},
		</if>
		<if test="aggregateCombinedLevel != null">
		       	aggregatecombinedlevel = #{aggregateCombinedLevel,jdbcType=BIT},
		</if>
		<if test="aggregateSubscore != null">
		       	aggregatesubscore = #{aggregateSubscore,jdbcType=BIT},
		</if>
		
		
	  <if test="readingRawScore != null">
        reading_rawscore = #{readingRawScore,jdbcType=NUMERIC},
      </if>
      <if test="listeningRawScore != null">
        listening_rawscore = #{listeningRawScore,jdbcType=NUMERIC},
      </if>
      <if test="speakingRawScore != null">
        speaking_rawscore = #{speakingRawScore,jdbcType=NUMERIC},
      </if>
      <if test="writingRawScore != null">
        writing_rawscore = #{writingRawScore,jdbcType=NUMERIC},
      </if>
      <if test="comprehensionRawScore != null">
        comprehension_rawscore = #{comprehensionRawScore,jdbcType=NUMERIC},
      </if>
      
      <if test="readingScaleScore != null">
        reading_scalescore = #{readingScaleScore,jdbcType=BIGINT},
      </if>
      <if test="listeningScaleScore != null">
        listening_scalescore = #{listeningScaleScore,jdbcType=BIGINT},
      </if>
      <if test="speakingScaleScore != null">
        speaking_scalescore = #{speakingScaleScore,jdbcType=BIGINT},
      </if>
      <if test="writingScaleScore != null">
        writing_scalescore = #{writingScaleScore,jdbcType=BIGINT},
      </if>
      <if test="comprehensionScaleScore != null">
        comprehension_scalescore = #{comprehensionScaleScore,jdbcType=BIGINT},
      </if>
      
      <if test="readingStandardError != null">
        reading_standarderror = #{readingStandardError,jdbcType=NUMERIC},
      </if>
      <if test="listeningStandardError != null">
        listening_standarderror = #{listeningStandardError,jdbcType=NUMERIC},
      </if>
      <if test="speakingStandardError != null">
        speaking_standarderror = #{speakingStandardError,jdbcType=NUMERIC},
      </if>
      <if test="writingStandardError != null">
        writing_standarderror = #{writingStandardError,jdbcType=NUMERIC},
      </if>
      <if test="comprehensionStandardError != null">
        comprehension_standarderror = #{comprehensionStandardError,jdbcType=NUMERIC},
      </if>
      
      <if test="readingLevel != null">
        reading_level = #{readingLevel,jdbcType=BIGINT},
      </if>
      <if test="listeningLevel != null">
        listening_level=#{listeningLevel,jdbcType=BIGINT},
      </if>
      <if test="speakingLevel != null">
        speaking_level=#{speakingLevel,jdbcType=BIGINT},
      </if>
      <if test="writingLevel != null">
        writing_level=#{writingLevel,jdbcType=BIGINT},
      </if>
      <if test="level != null">
        overall_level = #{level,jdbcType=BIGINT},
      </if>
      
      <if test="readingHasSCCode != null">
       	reading_sccode = #{readingHasSCCode,jdbcType=BIT},
   	  </if>
      <if test="stage2HasSCCode != null">
        listening_sccode = #{listeningHasSCCode,jdbcType=BIT},
      </if>
      <if test="speakingHasSCCode != null">
       	speaking_sccode = #{speakingHasSCCode,jdbcType=BIT},
   	  </if>
      <if test="writingHasSCCode != null">
        writing_sccode = #{writingHasSCCode,jdbcType=BIT},
      </if> 
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.report.StudentReport">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Jul 07 15:11:12 CDT 2015.
    -->
    update studentreport
    set studentid = #{studentId,jdbcType=BIGINT},
      enrollmentid = #{enrollmentId,jdbcType=BIGINT},
      gradeid = #{gradeId,jdbcType=BIGINT},
      contentareaid = #{contentAreaId,jdbcType=BIGINT},
      attendanceschoolid = #{attendanceSchoolId,jdbcType=BIGINT},
      districtid = #{districtId,jdbcType=BIGINT},
      stateid = #{stateId,jdbcType=BIGINT},
      studenttest1id = #{studentTest1Id,jdbcType=BIGINT},
      studenttest2id = #{studentTest2Id,jdbcType=BIGINT},
      externaltest1id = #{externalTest1Id,jdbcType=BIGINT},
      externaltest2id = #{externalTest2Id,jdbcType=BIGINT},
      levelid = #{levelId,jdbcType=BIGINT},
      rawscore = #{rawScore,jdbcType=NUMERIC},
      subscore = #{subScore,jdbcType=NUMERIC},
      batchreportprocessid = #{batchReportProcessId,jdbcType=BIGINT},
      assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT},
      standarderror = #{standardError,jdbcType=NUMERIC},
      scalescore = #{scaleScore,jdbcType=BIGINT},
      schoolyear = #{schoolYear,jdbcType=BIGINT},
      filepath = #{filePath,jdbcType=VARCHAR},
      aggregates = #{aggregates,jdbcType=BIT},
      exitstatus = #{exitStatus,jdbcType=BIT},
      incompletestatus = #{incompleteStatus,jdbcType=BIT},
      status = #{status,jdbcType=BIT},
      previousyearlevelid = #{previousYearLevelId,jdbcType=BIGINT},
      studenttest3id = #{studentTest3Id,jdbcType=BIGINT},
      studenttest4id = #{studentTest4Id,jdbcType=BIGINT},
      studentperformancetestid = #{studentPerformanceTestId,jdbcType=BIGINT},
      externaltest3id = #{externalTest3Id,jdbcType=BIGINT},
      externaltest4id = #{externalTest4Id,jdbcType=BIGINT},
      performancetestexternalid = #{performanceTestExternalId,jdbcType=BIGINT},
      mdptscore = #{mdptScore,jdbcType=NUMERIC},
      mdptscorableflag = #{mdptScorableFlag,jdbcType=BIT},
      combinedlevel = #{combinedLevel,jdbcType=NUMERIC}, 
      mdptlevelid = #{mdptLevelId,jdbcType=BIGINT},
      combinedlevelid = #{combinedLevelId,jdbcType=BIGINT},
      transferred = #{transferred,jdbcType=BIT},
      aggregatetoschool = #{aggregateToSchool,jdbcType=BIT},
      aggregatetodistrict = #{aggregateToDistrict,jdbcType=BIT},
      suppressmdptScore = #{suppressMdptScore,jdbcType=BIT},
      suppressmainscalescoreprfrmlevel= #{suppressMainScalescorePrfrmLevel,jdbcType=BIT},
      suppresscombinedscore= #{suppressCombinedScore,jdbcType=BIT},
      aggregatemdptscore = #{aggregateMdptScore,jdbcType=BIT},
      aggregatemainscalescoreprfrmlevel = #{aggregateMainScalescorePrfrmLevel,jdbcType=BIT},
      aggregatecombinedlevel = #{aggregateCombinedLevel,jdbcType=BIT},
      aggregatesubscore = #{aggregateSubscore,jdbcType=BIT}
      <if test="readingRawScore != null">
        ,reading_rawscore = #{readingRawScore,jdbcType=NUMERIC}
      </if>
      <if test="listeningRawScore != null">
        ,listening_rawscore = #{listeningRawScore,jdbcType=NUMERIC}
      </if>
      <if test="speakingRawScore != null">
        ,speaking_rawscore = #{speakingRawScore,jdbcType=NUMERIC}
      </if>
      <if test="writingRawScore != null">
        ,writing_rawscore = #{writingRawScore,jdbcType=NUMERIC}
      </if>
      <if test="comprehensionRawScore != null">
        ,comprehension_rawscore = #{comprehensionRawScore,jdbcType=NUMERIC}
      </if>
      
      <if test="readingScaleScore != null">
        ,reading_scalescore = #{readingScaleScore,jdbcType=BIGINT}
      </if>
      <if test="listeningScaleScore != null">
        ,listening_scalescore = #{listeningScaleScore,jdbcType=BIGINT}
      </if>
      <if test="speakingScaleScore != null">
        ,speaking_scalescore = #{speakingScaleScore,jdbcType=BIGINT}
      </if>
      <if test="writingScaleScore != null">
        ,writing_scalescore = #{writingScaleScore,jdbcType=BIGINT}
      </if>
      <if test="comprehensionScaleScore != null">
        ,comprehension_scalescore = #{comprehensionScaleScore,jdbcType=BIGINT}
      </if>
      
      <if test="readingStandardError != null">
        ,reading_standarderror = #{readingStandardError,jdbcType=NUMERIC}
      </if>
      <if test="listeningStandardError != null">
        ,listening_standarderror = #{listeningStandardError,jdbcType=NUMERIC}
      </if>
      <if test="speakingStandardError != null">
        ,speaking_standarderror = #{speakingStandardError,jdbcType=NUMERIC}
      </if>
      <if test="writingStandardError != null">
        ,writing_standarderror = #{writingStandardError,jdbcType=NUMERIC}
      </if>
      <if test="comprehensionStandardError != null">
        ,comprehension_standarderror = #{comprehensionStandardError,jdbcType=NUMERIC}
      </if>
      
      <if test="readingLevel != null">
        ,reading_level = #{readingLevel,jdbcType=BIGINT}
      </if>
      <if test="listeningLevel != null">
        ,listening_level=#{listeningLevel,jdbcType=BIGINT}
      </if>
      <if test="speakingLevel != null">
        ,speaking_level=#{speakingLevel,jdbcType=BIGINT}
      </if>
      <if test="writingLevel != null">
        ,writing_level=#{writingLevel,jdbcType=BIGINT}
      </if>
      <if test="level != null">
        ,overall_level = #{level,jdbcType=BIGINT}
      </if>
      
      <if test="readingHasSCCode != null">
        ,reading_sccode = #{readingHasSCCode,jdbcType=BIGINT}
      </if>
      <if test="listeningHasSCCode != null">
        ,listening_sccode=#{listeningHasSCCode,jdbcType=BIGINT}
      </if>
      <if test="speakingHasSCCode != null">
        ,speaking_sccode=#{speakingHasSCCode,jdbcType=BIGINT}
      </if>
      <if test="writingHasSCCode != null">
        ,writing_sccode=#{writingHasSCCode,jdbcType=BIGINT}
      </if>
      
      
    where id = #{id,jdbcType=BIGINT}
  </update>
  
   <delete id="deleteSpecificStudents">
    delete from studentreport where assessmentprogramid =  #{assessmentProgramId,jdbcType=BIGINT}
     <if test="contentAreaId != null">
        and contentareaid = #{contentAreaId,jdbcType=BIGINT}
      </if>
     <if test="gradeId != null">
         and gradeid = #{gradeId,jdbcType=BIGINT}
      </if>
        <if test="studentId != null">
      	and studentid = #{studentId,jdbcType=BIGINT}
      </if>
      <if test="schoolYear != null">
      	and schoolyear = #{schoolYear,jdbcType=BIGINT}
      </if>
   </delete>
   
   <resultMap id="reportsMedianScoreMap" type="edu.ku.cete.domain.report.ReportsMedianScore">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="assessmentprogramid" jdbcType="BIGINT" property="assessmentProgramId" />
    <result column="contentareaid" jdbcType="BIGINT" property="contentAreaId" />
    <result column="gradeid" jdbcType="BIGINT" property="gradeId" />
    <result column="organizationid" jdbcType="BIGINT" property="organizationId" />
    <result column="organizationtypeid" jdbcType="BIGINT" property="organizationTypeId" />
    <result column="score" jdbcType="BIGINT" property="score" />
    <result column="schoolyear" jdbcType="INTEGER" property="schoolYear" />
    <result column="createddate" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="typecode" jdbcType="VARCHAR" property="orgTypeCode" />
  </resultMap>

   <resultMap id="reportsSubscoreRawScoreMap" type="edu.ku.cete.domain.report.ReportSubscores">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="subscoredefinitionname" jdbcType="VARCHAR" property="subscoreDefinitionName" />
    <result column="subscorerawscore" jdbcType="NUMERIC" property="subscoreRawScore" />
    <result column="subscorescalescore" jdbcType="NUMERIC" property="subscoreScaleScore" />
    <result column="subscorestandarderror" jdbcType="NUMERIC" property="subscoreStandardError" />
    <result column="createddate" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="studentreportid" jdbcType="BIGINT" property="studentReportId" />
  </resultMap>
  
   <select id="selectAllOrgsFromStudentReport" resultMap="reportsMedianScoreMap">
	select distinct  organizationid, assessmentprogramid, gradeid, contentareaid, schoolyear,organizationtypeid, typecode from (
		select distinct attendanceschoolid as organizationid, assessmentprogramid, gradeid, contentareaid, schoolyear,
	     (select organizationtypeid from organization where id = attendanceschoolid),
	     (select typecode  from organizationtype where id = (select organizationtypeid as organizationtypeid from organization where id = attendanceschoolid))
	     from studentreport
	 	 where assessmentprogramid =  #{assessmentProgramId,jdbcType=BIGINT}
	 	 and schoolyear = (select reportyear from organization where id = stateid)
		  <if test="gradeId != null">
		  	and gradeid = #{gradeId,jdbcType=BIGINT}
		  </if>
		   <if test="contentAreaId != null">
		   and contentareaid =  #{contentAreaId,jdbcType=BIGINT}
		   </if>
	   	 union
	   	 select distinct stateid as organizationid, assessmentprogramid, gradeid, contentareaid, schoolyear,
			(select organizationtypeid from organization where id = stateid),
			(select typecode  from organizationtype where id = (select organizationtypeid as organizationtypeid from organization where id = stateid))
			from studentreport
			where assessmentprogramid =  #{assessmentProgramId,jdbcType=BIGINT}
			and schoolyear = (select reportyear from organization where id = stateid)
			  <if test="gradeId != null">
			  	and gradeid = #{gradeId,jdbcType=BIGINT}
			  </if>
			   <if test="contentAreaId != null">
			   and contentareaid =  #{contentAreaId,jdbcType=BIGINT}
			   </if>
		 union
			select distinct districtid as organizationid, assessmentprogramid, gradeid, contentareaid, schoolyear,
			(select organizationtypeid from organization where id = districtid),
			(select typecode  from organizationtype where id = (select organizationtypeid as organizationtypeid from organization where id = districtid))
			 from studentreport
			where assessmentprogramid =  #{assessmentProgramId,jdbcType=BIGINT}
			and schoolyear = (select reportyear from organization where id = stateid)
			  <if test="gradeId != null">
			  	and gradeid = #{gradeId,jdbcType=BIGINT}
			  </if>
			   <if test="contentAreaId != null">
			   and contentareaid =  #{contentAreaId,jdbcType=BIGINT}
			   </if>
	   ) as org
	   order by organizationid, contentareaid, gradeid
	 <if test="pageSize != null and offset != null">
      LIMIT #{pageSize,jdbcType=INTEGER} OFFSET #{offset,jdbcType=INTEGER}
    </if>
  </select>
   
   <select id="selectDistinctSchoolIdsFromStudentReport" resultMap="reportsMedianScoreMap">
	select distinct attendanceschoolid as organizationid, assessmentprogramid, gradeid, contentareaid, schoolyear,
     (select organizationtypeid from organization where id = attendanceschoolid),
     (select typecode  from organizationtype where id = (select organizationtypeid as organizationtypeid from organization where id = attendanceschoolid))
     from studentreport
 	 where assessmentprogramid =  #{assessmentProgramId,jdbcType=BIGINT}
 	 and schoolyear = (select reportyear from organization where id = stateid)
	  <if test="gradeId != null">
	  	and gradeid = #{gradeId,jdbcType=BIGINT}
	  </if>
	   <if test="contentAreaId != null">
	   and contentareaid =  #{contentAreaId,jdbcType=BIGINT}
	   </if>
	   order by organizationid, contentareaid, gradeid
	 <if test="pageSize != null and offset != null">
      LIMIT #{pageSize,jdbcType=INTEGER} OFFSET #{offset,jdbcType=INTEGER}
    </if>
  </select>
  
   <select id="selectDistinctStateIdsFromStudentReport" resultMap="reportsMedianScoreMap">
	select distinct stateid as organizationid, assessmentprogramid, gradeid, contentareaid, schoolyear,
	(select organizationtypeid from organization where id = stateid),
	(select typecode  from organizationtype where id = (select organizationtypeid as organizationtypeid from organization where id = stateid))
	from studentreport
	where assessmentprogramid =  #{assessmentProgramId,jdbcType=BIGINT}
	and schoolyear = (select reportyear from organization where id = stateid)
	  <if test="gradeId != null">
	  	and gradeid = #{gradeId,jdbcType=BIGINT}
	  </if>
	   <if test="contentAreaId != null">
	   and contentareaid =  #{contentAreaId,jdbcType=BIGINT}
	   </if>
	   order by attendanceschoolid, contentareaid, gradeid
	 <if test="pageSize != null and offset != null">
      LIMIT #{pageSize,jdbcType=INTEGER} OFFSET #{offset,jdbcType=INTEGER}
    </if>
  </select>
  
   <select id="selectDistinctDistrictIdsFromStudentReport" resultMap="reportsMedianScoreMap">
	select distinct districtid as organizationid, assessmentprogramid, gradeid, contentareaid, schoolyear,
	(select organizationtypeid from organization where id = districtid),
	(select typecode  from organizationtype where id = (select organizationtypeid as organizationtypeid from organization where id = districtid))
	 from studentreport
	where assessmentprogramid =  #{assessmentProgramId,jdbcType=BIGINT}
	and schoolyear = (select reportyear from organization where id = stateid)
	  <if test="gradeId != null">
	  	and gradeid = #{gradeId,jdbcType=BIGINT}
	  </if>
	   <if test="contentAreaId != null">
	   and contentareaid =  #{contentAreaId,jdbcType=BIGINT}
	   </if>
	   order by attendanceschoolid, contentareaid, gradeid
	 <if test="pageSize != null and offset != null">
      LIMIT #{pageSize,jdbcType=INTEGER} OFFSET #{offset,jdbcType=INTEGER}
    </if>
  </select>
  

  <select id="selectAllStudentsBySchoolAssessmentSubjectGrade" resultMap="BaseResultMap">
	select sr.*,ld.level from studentreport sr
		join leveldescription ld on ld.id = sr.levelid
			 where sr.attendanceschoolid = #{schoolId,jdbcType=BIGINT} 
			 and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			 and sr.gradeid = #{gradeId,jdbcType=BIGINT}
			 and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			 and sr.schoolyear = #{schoolYear,jdbcType=BIGINT}
			 and sr.aggregatetoschool is true
			 <!-- and sr.aggregatemainscalescoreprfrmlevel is true -->
  </select>

  <select id="selectAllStudentsBySchoolAssmntSubjectGradeForMdptLevel" resultMap="BaseResultMap">
	select sr.*,ld.level from studentreport sr
		join leveldescription ld on ld.id = sr.mdptlevelid
			 where sr.attendanceschoolid = #{schoolId,jdbcType=BIGINT} 
			 and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			 and sr.gradeid = #{gradeId,jdbcType=BIGINT}
			 and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			 and sr.schoolyear = #{schoolYear,jdbcType=BIGINT}
			 and sr.aggregatetoschool is true
			 and sr.mdptscore is not null
			 and sr.aggregatemdptscore is true
  </select>
  <select id="selectAllStudentsBySchoolAssmntSubjectGradeForCombinedLevel" resultMap="BaseResultMap">
	select sr.*,ld.level from studentreport sr
		join leveldescription ld on ld.id = sr.combinedlevelid
			 where sr.attendanceschoolid = #{schoolId,jdbcType=BIGINT} 
			 and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			 and sr.gradeid = #{gradeId,jdbcType=BIGINT}
			 and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			 and sr.schoolyear = #{schoolYear,jdbcType=BIGINT}
			 and sr.aggregatetoschool is true
			 and sr.combinedlevel is not null
			 and sr.aggregatecombinedlevel is true
  </select>
  
  
  <select id="selectAllStudentsByStateAssessmentSubjectGrade" resultMap="BaseResultMap">
	 select sr.*, ld.level from studentreport sr
		 join leveldescription ld on ld.id = sr.levelid
			 where sr.stateid = #{stateId,jdbcType=BIGINT}  
			 and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			 and sr.gradeid = #{gradeId,jdbcType=BIGINT}
			 and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			 and sr.schoolyear = #{schoolYear,jdbcType=BIGINT}
			 and sr.aggregatetodistrict is true
			 <!-- and sr.aggregatemainscalescoreprfrmlevel is true -->
  </select>
  <select id="selectAllStudentsByStateAssmntSubjectGradeForMdptLevel" resultMap="BaseResultMap">
	select sr.*,ld.level from studentreport sr
		join leveldescription ld on ld.id = sr.mdptlevelid
			 where sr.stateid = #{stateId,jdbcType=BIGINT}
			 and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			 and sr.gradeid = #{gradeId,jdbcType=BIGINT}
			 and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			 and sr.schoolyear = #{schoolYear,jdbcType=BIGINT}
			 and sr.aggregatetodistrict is true
			 and sr.mdptscore is not null
			 and sr.aggregatemdptscore is true
  </select>  
  <select id="selectAllStudentsByStateAssmntSubjectGradeForCombinedLevel" resultMap="BaseResultMap">
	select sr.*,ld.level from studentreport sr
		join leveldescription ld on ld.id = sr.combinedlevelid
			 where sr.stateid = #{stateId,jdbcType=BIGINT}
			 and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			 and sr.gradeid = #{gradeId,jdbcType=BIGINT}
			 and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			 and sr.schoolyear = #{schoolYear,jdbcType=BIGINT}
			 and sr.aggregatetodistrict is true
			 and sr.combinedlevel is not null
			 and sr.aggregatecombinedlevel is true
  </select>
  
  <select id="selectAllStudentsByDistrictAssessmentSubjectGrade" resultMap="BaseResultMap">
 	select sr.*, ld.level from studentreport sr
		 join leveldescription ld on ld.id = sr.levelid
			 where sr.districtid = #{districtId,jdbcType=BIGINT}  
			 and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			 and sr.gradeid = #{gradeId,jdbcType=BIGINT}
			 and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			 and sr.schoolyear = #{schoolYear,jdbcType=BIGINT}
			 and sr.aggregatetodistrict is true
			 <!-- and sr.aggregatemainscalescoreprfrmlevel is true -->
  </select>
  <select id="selectAllStudentsByDistrictAssmntSubjectGradeForMdptLevel" resultMap="BaseResultMap">
	select sr.*,ld.level from studentreport sr
		join leveldescription ld on ld.id = sr.mdptlevelid
			 where sr.districtid = #{districtId,jdbcType=BIGINT}
			 and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			 and sr.gradeid = #{gradeId,jdbcType=BIGINT}
			 and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			 and sr.schoolyear = #{schoolYear,jdbcType=BIGINT}
			 and sr.aggregatetodistrict is true
			 and sr.mdptscore is not null
			 and sr.aggregatemdptscore is true
  </select>  
  <select id="selectAllStudentsByDistrictAssmntSubjectGradeForCombinedLevel" resultMap="BaseResultMap">
	select sr.*,ld.level from studentreport sr
		join leveldescription ld on ld.id = sr.combinedlevelid
			 where sr.districtid = #{districtId,jdbcType=BIGINT}
			 and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			 and sr.gradeid = #{gradeId,jdbcType=BIGINT}
			 and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			 and sr.schoolyear = #{schoolYear,jdbcType=BIGINT}
			 and sr.aggregatetodistrict is true
			 and sr.combinedlevel is not null
			 and sr.aggregatecombinedlevel is true
  </select> 
  
  <select id="getScaleScoreAndPerformanceLevel" resultMap="BaseResultMap">
    select st.id, st.studentid, st.enrollmentid, st.scalescore, ld.level as levelid, st.studenttest1id, st.studenttest2id
          from studentreport st inner join leveldescription ld on st.levelid=ld.id
          where st.studentid = #{studentId, jdbcType=BIGINT}
          and st.enrollmentid = #{enrollmentId, jdbcType=BIGINT}
          and st.gradeid = ANY(ARRAY(select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id= #{gradeId, jdbcType=BIGINT})))
          and st.contentareaid = #{contentAreaId, jdbcType=BIGINT}
          <if test="#stage1TestId != null">
             and st.studenttest1id = #{stage1TestId, jdbcType=BIGINT}
          </if>
          <if test="#stage2TestId != null">          
             and st.studenttest2id = #{stage2TestId, jdbcType=BIGINT}
          </if>
          union
     select st.id, st.studentid, st.enrollmentid, st.scalescore, ld.level as levelid, st.studenttest1id, st.studenttest2id
          from studentreport st inner join leveldescription ld on st.levelid=ld.id
          where st.studentid = #{studentId, jdbcType=BIGINT}
          and st.enrollmentid = #{enrollmentId, jdbcType=BIGINT}
          and st.gradeid = ANY(ARRAY(select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id= #{gradeId, jdbcType=BIGINT})))
          and st.contentareaid = #{contentAreaId, jdbcType=BIGINT}
          <if test="#stage1TestId != null">
             and st.studenttest2id = #{stage1TestId, jdbcType=BIGINT}
          </if>
          <if test="#stage2TestId != null">          
             and st.studenttest1id = #{stage2TestId, jdbcType=BIGINT}
          </if>
   </select>
   
   <select id="countByCriteria" parameterType="map" resultType="java.lang.Long">
     SELECT COUNT(id)
     FROM studentreport sr
     <!-- INNER JOIN (select org.reportyear from organization_parent(#{schoolId,jdbcType=BIGINT}) orgParent 
     	INNER JOIN organization org ON org.id=orgParent.id where orgParent.contractingorganization is true) as org ON sr.schoolyear = org.reportyear -->
     WHERE sr.schoolyear=#{reportYear} and sr.filepath IS NOT NULL AND sr.generated is true
     AND sr.attendanceschoolid = #{schoolId,jdbcType=BIGINT}
     <!-- AND sr.districtid = #{districtId,jdbcType=BIGINT} -->
     <if test="contentAreaId != null">     
     	AND sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
     </if>
     AND sr.gradeid = #{gradeId,jdbcType=BIGINT}
     AND sr.assessmentprogramid IN
     <foreach close=")" collection="assessmentProgramIds" item="apId" open="(" separator=",">
       #{apId,jdbcType=BIGINT}
     </foreach>
   </select>
   <resultMap extends="BaseResultMap" id="StudentReportDTOMap" type="edu.ku.cete.web.StudentReportDTO">
     <result column="legalfirstname" jdbcType="VARCHAR" property="legalFirstName" />
     <result column="legalmiddlename" jdbcType="VARCHAR" property="legalMiddleName" />
     <result column="legallastname" jdbcType="VARCHAR" property="legalLastName" />
     <result column="statestudentidentifier" jdbcType="VARCHAR" property="stateStudentIdentifier" />
     <result column="schoolname" jdbcType="VARCHAR" property="schoolName" />
     <result column="schoolidentifier" jdbcType="VARCHAR" property="schoolIdentifier" />
     <result column="districtname" jdbcType="VARCHAR" property="districtName" />
     <result column="statename" jdbcType="VARCHAR" property="stateName" />
     <result column="gradename" jdbcType="VARCHAR" property="gradeName" />
     <result column="mdptresponse" jdbcType="VARCHAR" property="mdptResponse" />
   </resultMap>
   
   <select id="selectByCriteria" parameterType="map" resultMap="StudentReportDTOMap">
     SELECT sr.*, s.legalfirstname, s.legalmiddlename, s.legallastname, s.statestudentidentifier
     FROM studentreport sr
     INNER JOIN student s ON sr.studentid = s.id
   <!--   INNER JOIN (select org.reportyear from organization_parent(#{schoolId,jdbcType=BIGINT}) orgParent 
     	INNER JOIN organization org ON org.id=orgParent.id where orgParent.contractingorganization is true) as org ON sr.schoolyear = org.reportyear -->
     <if test="onlyRostered">
       INNER JOIN enrollment e ON sr.enrollmentid = e.id
       INNER JOIN enrollmentsrosters er ON e.id = er.enrollmentid
       INNER JOIN roster r ON er.rosterid = r.id AND r.teacherid = #{userId,jdbcType=BIGINT}
     </if>
     WHERE
       sr.schoolyear=#{reportYear} and sr.filepath IS NOT NULL AND sr.generated is true 
       AND sr.attendanceschoolid = #{schoolId,jdbcType=BIGINT}
       <!-- AND sr.districtid = #{districtId,jdbcType=BIGINT} -->
       <if test="contentAreaId != null">    
       	AND sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
       </if>
       AND sr.gradeid = #{gradeId,jdbcType=BIGINT}
       AND sr.assessmentprogramid IN
     <foreach close=")" collection="assessmentProgramIds" item="apId" open="(" separator=",">
       #{apId,jdbcType=BIGINT}
     </foreach>
     ORDER BY s.legallastname, s.legalfirstname, s.legalmiddlename
     LIMIT #{limit,jdbcType=BIGINT}
     OFFSET #{offset,jdbcType=BIGINT}
   </select>
   
    <update id="updateStudentReportFilePath">
    update studentreport
    set filepath = #{filePath,jdbcType=VARCHAR},generated = #{generated,jdbcType=BIT}, batchreportprocessid =  #{batchReportProcessId,jdbcType=BIGINT},
    schoolname = #{attendanceSchoolName,jdbcType=VARCHAR},districtname = #{districtName,jdbcType=VARCHAR},progressiontext = #{progressionText,jdbcType=VARCHAR},
    modifieddate = now()
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <select id="selectByPrimaryKeyAndUserOrg" parameterType="map" resultMap="BaseResultMap">
    SELECT sr.*
    FROM studentreport sr
    INNER JOIN (SELECT id FROM organization_children_active_or_inactive(#{userOrgId,jdbcType=BIGINT}) UNION (SELECT #{userOrgId,jdbcType=BIGINT})) orgids ON sr.attendanceschoolid = orgids.id
    WHERE sr.id = #{id,jdbcType=BIGINT}
  </select>  
  
  <select id="getSchoolIdsFromStudentReportByStateIdAssmntProgIdAndSchoolYear" resultType="Long">  
   select distinct attendanceschoolid 
   from studentreport
   join gradecourse gc on gc.id = gradeid
   where stateid = #{stateId}
   and assessmentprogramid = #{assessmentProgramId}
   and schoolyear = #{currentSchoolYear}
   <if test="gradeCourseAbbrName != null">
    and gc.abbreviatedname = #{gradeCourseAbbrName}
   </if>
   order by attendanceschoolid
   <if test="pageSize != null">
   LIMIT #{pageSize} 
   </if>
   <if test="offset != null">
   OFFSET #{offset}
   </if>
  </select>
  
  <select id="getDistrictIdsFromStudentReportByStateIdAssmntProgIdAndSchoolYear" resultType="Long">  
   select distinct districtid 
   from studentreport
   join gradecourse gc on gc.id = gradeid
   where stateid = #{stateId}
   and assessmentprogramid = #{assessmentProgramId}
   and schoolyear = #{currentSchoolYear}
   order by districtid
   <if test="pageSize != null">
   LIMIT #{pageSize} 
   </if>
   <if test="offset != null">
   OFFSET #{offset}
   </if>
  </select>
  
   <select id="getSchoolIdsFromExternalStudentReportByStateIdAssmntProgIdAndSchoolYear" resultType="Long">  
   select distinct schoolid 
   from externalstudentreports str
   join gradecourse gc on gc.id = gradeid
   where str.stateid = #{stateId}
   and str.assessmentprogramid = #{assessmentProgramId}
   and str.schoolyear = #{currentSchoolYear}
   <if test="gradeCourseAbbrName != null">
    and gc.abbreviatedname = #{gradeCourseAbbrName}
   </if>
   <if test="reportType != null">
       and str.reporttype = #{reportType, jdbcType=VARCHAR}
   </if> 
   and str.activeflag is true
   order by schoolid
    <if test="pageSize != null">
   LIMIT #{pageSize} 
   </if>
   <if test="offset != null">
   OFFSET #{offset}
   </if>
  </select>
  
  <select id="getDistrictIdsFromExternalStudentReportByStateIdAssmntProgIdAndSchoolYear" resultType="Long">  
   select distinct districtid 
   from externalstudentreports str
   join gradecourse gc on gc.id = gradeid
   where str.stateid = #{stateId}
   and str.assessmentprogramid = #{assessmentProgramId}
   and str.schoolyear = #{currentSchoolYear}
   and str.activeflag is true
   <if test="reportType != null">
       and str.reporttype = #{reportType, jdbcType=VARCHAR}
   </if> 
   order by districtid
   <if test="pageSize != null">
   LIMIT #{pageSize} 
   </if>
   <if test="offset != null">
   OFFSET #{offset}
   </if>
  </select>
  
  <select id="geGradeCoursesAbbrNamesByAssmntPrgmAndSchoolYear" resultType="String">
  select distinct gc.abbreviatedname
       from studentreport str
       join gradecourse gc on gc.id = str.gradeid 
       where str.stateid = #{stateId}
       and str.assessmentprogramid = #{assessmentProgramId}
       and str.schoolyear = #{currentSchoolYear}
  </select>
  
   <select id="geGradeCoursesAbbrNamesByAssmntPrgmAndSchoolYearForExternalReport" resultType="String">
  select distinct gc.abbreviatedname
       from externalstudentreports str
       join gradecourse gc on gc.id = str.gradeid 
       where str.stateid = #{stateId}
       and str.assessmentprogramid = #{assessmentProgramId}
       and str.schoolyear = #{currentSchoolYear}
       and str.activeflag is true
       <if test="reportType != null">
       	and str.reporttype = #{reportType, jdbcType=VARCHAR}
  	   </if> 
  </select>
  <resultMap type="edu.ku.cete.domain.report.StudentReport" id="studentReportPdfPathsMap">
  	<result column="filepath" property="filePath"/>
  	<result column="stateid" property="stateId"/>
  	<result column="districtid" property="districtId"/>
  	<result column="attendanceschoolName" property="attendanceSchoolName"/>
  	<result column="displayidentifier" property="attSchDisplayIdentifier"/>
  	<result column="contentareacode" property="contentAreaCode"/>
  	<result column="districtdisplayidentifier" property="districtDisplayIdentifier"/>
  	<result column="districtname" property="districtName"/>
  	<result column="abbreviatedname" property="gradeCode"/>
  	<result column="grouping1" property="grouping1"/>
  	<result column="grouping2" property="grouping2"/>
  </resultMap>
  <select id="getStudentReportsForSchoolReportPdf" resultMap="studentReportPdfPathsMap">
  select stu.legallastname, stu.legalfirstname, stu.statestudentidentifier,
       ca.name, gc.abbreviatedname, str.filepath, str.districtid, str.stateid, org.organizationname as attendanceschoolName, org.displayidentifier
       from student stu
       join studentreport str on str.studentid = stu.id
       join gradecourse gc on gc.id = str.gradeid
       join contentarea ca on ca.id = str.contentareaid
       join organization org on org.id = str.attendanceschoolid
       where str.attendanceschoolid = #{attendanceSchoolId}
       and str.assessmentprogramid = #{assessmentProgramId}
       and str.schoolyear = #{schoolYear}
       and gc.abbreviatedname = #{gradeCourseAbbrName}       
       <!-- and str.status is true  --> 
       and (str.filepath is not null AND str.filepath != '')
       order by stu.legallastname, stu.legalfirstname, stu.statestudentidentifier, ca.name
  </select>
  
  <select id="getExternalStudentReportsForSchoolReportPdf" resultMap="studentReportPdfPathsMap">
    select * from (select distinct on (stu.id,gc.abbreviatedname,trim(str.filepath))  
       stu.legallastname, stu.legalfirstname, stu.statestudentidentifier,
       ca.name, ca.abbreviatedname as contentareacode, gc.abbreviatedname, str.filepath, str.districtid, str.stateid, org.organizationname as attendanceschoolName, org.displayidentifier
       ,str.level1_text, str.level2_text  from student stu
       join externalstudentreports str on str.studentid = stu.id
       join gradecourse gc on gc.id = str.gradeid
       join contentarea ca on ca.id = str.subjectid
       join organization org on org.id = str.schoolid
       where str.schoolid = #{attendanceSchoolId}
       and str.assessmentprogramid = #{assessmentProgramId}
       and str.schoolyear = #{schoolYear}
       and gc.abbreviatedname = #{gradeCourseAbbrName}  
       <if test="reportType != null">
       	and str.reporttype = #{reportType, jdbcType=VARCHAR}
   	   </if>      
       and str.activeflag is true and (str.filepath is not null AND str.filepath != '')       
        ) studentreports order by legallastname, legalfirstname, statestudentidentifier, name,
       level1_text, level2_text         
  </select>
  
  <select id="getStudentReportsForDistrictReportPdf" resultMap="studentReportPdfPathsMap">
  select stu.legallastname, stu.legalfirstname, stu.statestudentidentifier,
       ca.name, gc.abbreviatedname, str.filepath, str.districtid, str.stateid, org.organizationname as districtname, org.displayidentifier
        as districtdisplayidentifier 
       from student stu
       join studentreport str on str.studentid = stu.id
       join gradecourse gc on gc.id = str.gradeid
       join contentarea ca on ca.id = str.contentareaid
       join organization org on org.id = str.districtid
       where str.districtid = #{districtId}
       and str.assessmentprogramid = #{assessmentProgramId}
       and str.schoolyear = #{schoolYear}
       <!-- and str.status is true -->
        and (str.filepath is not null AND str.filepath != '')
       order by stu.legallastname, stu.legalfirstname, stu.statestudentidentifier, ca.name, gc.abbreviatedname  
  </select>
   
  
   <select id="getExternalStudentReportsForDistrictReportPdf" resultMap="studentReportPdfPathsMap">
   select * from (select distinct on (stu.id,gc.abbreviatedname,trim(str.filepath))  
       stu.legallastname, stu.legalfirstname, stu.statestudentidentifier,
       ca.name, ca.abbreviatedname as contentareacode, gc.abbreviatedname, str.filepath, str.districtid, str.stateid, org.displayidentifier
       as districtdisplayidentifier, org.organizationname as districtname, orgSchool.organizationname as schoolname, level1_text, level2_text
       from student stu
       join externalstudentreports str on str.studentid = stu.id
       join gradecourse gc on gc.id = str.gradeid
       join contentarea ca on ca.id = str.subjectid
       join organization org on org.id = str.districtid
       join organization orgSchool on orgSchool.id = str.schoolid  
       where str.districtid = #{districtId}
       and str.assessmentprogramid = #{assessmentProgramId}
       and str.schoolyear = #{schoolYear}  
       <if test="reportType != null">
       	and str.reporttype = #{reportType, jdbcType=VARCHAR}
   	   </if>     
       and str.activeflag is true and (str.filepath is not null AND str.filepath != '')
             ) studentreport order by schoolname,    
             <if test="assessmentProgramCode == 'DLM'"> 
	           <!-- (abbreviatedname)::int, -->
	           (substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$'),
	           
	         </if>
	         <if test="assessmentProgramCode == 'CPASS'">
	            <!-- abbreviatedname, -->
	            (substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$'),
	         </if> 
	         
	         legallastname, legalfirstname, statestudentidentifier, name, level1_text, level2_text
                 
  </select>
  
   <select id="selectAllByAssessmentProgramIdContentAreaIdGradeIdStudentId" resultMap="BaseResultMap">
    select * from studentreport
    where assessmentprogramid = #{assessmentProgramId}
 	<if test="gradeId != null">
             and gradeid = #{gradeId, jdbcType=BIGINT}
    </if>  
    <if test="contentAreaId != null">
          and contentareaid = #{contentAreaId, jdbcType=BIGINT}
    </if>  
     <if test="studentId != null">
          and studentid = #{studentId, jdbcType=BIGINT}
    </if>  
    <if test="schoolYear != null">
          and schoolyear = #{schoolYear, jdbcType=BIGINT}
    </if>  
  </select>
  
  <select id="getPreviousYearReport" parameterType="edu.ku.cete.domain.report.StudentReport" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from studentreport sr
    where status = true
    and sr.stateid = #{stateId,jdbcType=BIGINT}
    and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
    and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
    and sr.schoolYear = (#{schoolYear,jdbcType=BIGINT} - 1)
    and sr.studentid = #{studentId,jdbcType=BIGINT}
    and sr.exitstatus is false 
    and sr.incompletestatus is false
    order by sr.rawscore desc
	limit 1 
  </select>
  
   <select id="getNonScorableMDPTForSCCodes" parameterType="map" resultType="java.lang.Long">
    select count(sc.*) from studentstests sts 
	inner join studentspecialcircumstance sc on sc.studenttestid = sts.id
	inner join category cat on cat.id = sts.status
	inner join category catg on catg.id = sc.status
	where sc.activeflag is true 
	and sts.activeflag is true
	and cat.activeflag is true and (catg.categorycode in ('SAVED','APPROVED') OR cat.categorycode in ('unused','pending')) 
	and sts.studentid = #{studentId,jdbcType=BIGINT} and sts.testid = #{studentPerformanceTestId,jdbcType=BIGINT};
  </select>
  
  <select id="getStudentReportSchoolYearsBySubject" resultType="java.lang.Long">
    select distinct sr.schoolyear from studentreport sr
    JOIN assessmentprogram ap ON ap.id = sr.assessmentprogramid AND ap.abbreviatedname='KAP'
    where sr.contentareaid = ANY(ARRAY
      <foreach collection="contentAreaId" item="id" open="[" close="]" separator=",">
        #{id,jdbcType=BIGINT}
      </foreach>
    ) 
    order by schoolyear
  </select>
  
  <resultMap type="edu.ku.cete.web.KAPStudentScoreDTO" id="kapStudentScoreMap">
  	<result column="studentid" property="studentId"/>
  	<result column="statestudentidentifier" property="stateStudentIdentifier"/>
  	<result column="legallastname" property="studentLegalLastName"/>
  	<result column="legalfirstname" property="studentLegalFirstName"/>
  	<result column="legalmiddleName" property="studentLegalMiddleName"/>
  	<result column="subjectcode" property="subjectCode"/>
  	<result column="reportsubject" property="subject"/>
  	<result column="districtdisplayidentifier" property="currentEnrolledDistrictIdentifier"/>
  	<result column="districtname" property="currentEnrolledDistrictName"/>
  	<result column="aypSchoolIdentifier" property="currentEnrolledAypSchoolIdentifier"/>
  	<result column="aypschoolname" property="currentEnrolledAypSchoolName"/>
  	<result column="attendanceschoolidentifier" property="currentEnrolledATTSchoolIdentifier"/>
  	<result column="attendanceschoolname" property="currentEnrolledATTSchoolName"/>
  	<result column="currentenrolledgrade" property="currentEnrolledGradeLevel"/>
  	
  	<association property="studentScores" javaType="edu.ku.cete.web.StudentScoreDTO">
  		<result column="studentid" property="studentId"/>
  		<result column="studentreportid" property="studentReportId"/>
  		<result column="subjectcode" property="subjectCode"/>
  		<result column="reportsubject" property="subject"/>
  		<result column="reportschoolyear" property="reportYear"/>
  		<result column="reportschoolidentifier" property="reportSchoolIdentifier"/>
  		<result column="reportschoolname" property="reportSchoolName"/>
  		<result column="reportdistrictidentifier" property="reportDistrictIdentifier"/>
  		<result column="reportdistrictname" property="reportDistrictName"/>
  		<result column="reportgrade" property="gradeLevel"/>
  		<result column="scalescore" property="scaleScore"/>
  		<result column="exitstatus" property="exitStatus"/>
  		<result column="incompletestatus" property="incompleteStatus"/>
  		<result column="transferred" property="transferred"/>
  		<result column="performancelevel" property="performanceLevel"/>
  		<result column="performancelevelname" property="performanceLevelName"/>
  		<association property="subscores" javaType="edu.ku.cete.domain.report.ReportSubscores">
  			<result column="studentreportid" property="studentReportId"/>
  			<result column="rating" jdbcType="INTEGER" property="rating" />
  			<result column="subscorereportdisplayname" jdbcType="VARCHAR" property="subScoreReportDisplayName" />
     		<result column="subscorereportdescription" jdbcType="VARCHAR" property="subScoreReportDescription" />
     		<result column="subscoredisplaysequence" jdbcType="BIGINT" property="subScoreDisplaySequence" />
  		</association>
  	</association> 	
  </resultMap>
  
  <select id="generateKAPStudentScoreExtract" resultMap="kapStudentScoreMap">    
		select distinct st.id as studentid, st.statestudentidentifier, st.legallastname, st.legalfirstname, st.legalmiddlename, 
			sr.id as studentreportid,
			sr.schoolyear as reportschoolyear,
			sr.scalescore,
			sr.exitstatus,
			sr.incompletestatus,
			sr.transferred,
			ld.level as performancelevel,
			ld.levelname as performancelevelname,
			ca.abbreviatedname as subjectcode,
			ca.name as reportsubject,
			orgdetayp.districtdisplayidentifier, 
			orgdetayp.districtname, 
			orgdetayp.schooldisplayidentifier as aypschoolidentifier, 
			orgdetayp.schoolname as aypschoolname,
			orgdetatt.schooldisplayidentifier as attendanceschoolidentifier, 
			orgdetatt.schoolname as attendanceschoolname,
			gc.abbreviatedname as reportgrade,
			currgrade.abbreviatedname as currentenrolledgrade,
			rptorgdet.districtdisplayidentifier as reportdistrictidentifier,
			rptorgdet.districtname as reportdistrictname,
			rptorgdet.schooldisplayidentifier as reportschoolidentifier,
			rptorgdet.schoolname as reportschoolname,
			scd.subscorereportdisplayname,
			rss.rating as rating
			
			from student st left join studentreport sr on st.id = sr.studentid
			left join enrollment en on en.studentid = st.id and en.activeflag is true
			join assessmentprogram ap ON ap.id = sr.assessmentprogramid and ap.abbreviatedname='KAP' 
			left join contentarea ca on ca.id = sr.contentareaid
			left join gradecourse gc on sr.gradeid = gc.id
			left join gradecourse currgrade on en.currentgradelevel = currgrade.id
			left join organizationtreedetail orgdetayp on en.aypschoolid = orgdetayp.schoolid and orgdetayp.statedisplayidentifier = 'KS'
			left join organizationtreedetail orgdetatt on en.attendanceschoolid = orgdetatt.schoolid and orgdetatt.statedisplayidentifier = 'KS'
			left join organizationtreedetail rptorgdet on sr.attendanceschoolid = rptorgdet.schoolid
			left join leveldescription ld on sr.levelid = ld.id
			left join reportsubscores rss on sr.id = rss.studentreportid
			left join subscoresdescription scd on scd.schoolyear = sr.schoolyear and scd.assessmentprogramid = sr.assessmentprogramid 
					and scd.subjectid = sr.contentareaid and scd.subscoredefinitionname = rss.subscoredefinitionname and scd.report='Student'
			where 
			 1=1
			  <if test="contentAreaId != null and contentAreaId.size > 0">
				and sr.contentareaid = ANY(ARRAY
			      <foreach collection="contentAreaId" item="id" open="[" close="]" separator=",">
			        #{id,jdbcType=BIGINT}
			      </foreach>
			      )
		      </if>
		      <if test="orgType != null and orgType == 'DT'">
		      	and (en.aypschoolid in(select id from organization_children(#{organizationId})) OR en.attendanceschoolid in(select id from organization_children(#{organizationId})) )
		      </if>
		      
		      <if test="orgType != null and orgType == 'SCH'">
		      	and (en.aypschoolid = #{organizationId} or en.attendanceschoolid = #{organizationid})
		      </if>
		      
	         <if test="stateStudentIdentifier != null">
	            and st.statestudentidentifier = #{stateStudentIdentifier}
	         </if>
			<if test="gradeIds != null and gradeIds.size > 0">
				and en.currentschoolyear = #{currentSchoolYear}
			 </if>
			 <if test="schoolYears != null and schoolYears.size > 0">
	     		and sr.schoolyear = ANY(ARRAY
		      <foreach collection="schoolYears" item="id" open="[" close="]" separator=",">
		        #{id,jdbcType=BIGINT}
		      </foreach>
		       )
	     	 </if>			
			 <if test="gradeIds != null and gradeIds.size > 0">			    
	     		and currgrade.abbreviatedname = ANY(ARRAY
		      <foreach collection="gradeIds" item="id" open="[" close="]" separator=",">
		        #{id,jdbcType=VARCHAR}
		      </foreach>
		       )
	     	 </if>
			order by statestudentidentifier, reportsubject	
			 
			
  </select>
  
  <select id="selectStudentReportsByStudentIdSubjSchYrGrade" resultMap="BaseResultMap">
	SELECT DISTINCT sr.* from studentreport sr
		JOIN student st ON st.id = sr.studentid
		JOIN organization org ON st.stateid = org.id AND org.displayidentifier = 'KS'
		JOIN contentarea ca ON ca.id = sr.contentareaid
		JOIN assessmentprogram ap ON ap.id = sr.assessmentprogramid AND ap.abbreviatedname='KAP'
		WHERE st.statestudentidentifier = #{stateStudentIdentifier}
		 <if test="contentAreaId != null and contentAreaId.size > 0">
			AND sr.contentareaid = ANY(ARRAY
		      <foreach collection="contentAreaId" item="id" open="[" close="]" separator=",">
		        #{id,jdbcType=BIGINT}
		      </foreach>
		      )
	      </if>
	     <if test="schoolYears != null and schoolYears.size > 0">
	     	AND sr.schoolyear = ANY(ARRAY
	      <foreach collection="schoolYears" item="id" open="[" close="]" separator=",">
	        #{id,jdbcType=BIGINT}
	      </foreach>
	      )
	     </if>
	      
  </select>
  
  <select id="generateKAPStudentScoreExtractForDistrictUser" resultMap="kapStudentScoreMap">    
		
		WITH enrollmentsdetails AS(select en.id as enrollmentid, en.studentid, en.currentschoolyear,
                             	st.statestudentidentifier, st.legallastname, st.legalfirstname, st.legalmiddlename, 
                             	en.currentgradelevel,
                             	orgdetayp.districtdisplayidentifier, 
								orgdetayp.districtname, 
								orgdetayp.schooldisplayidentifier as aypschoolidentifier, 
								orgdetayp.schoolname as aypschoolname,
								orgdetatt.schooldisplayidentifier as attendanceschoolidentifier, 
								orgdetatt.schoolname as attendanceschoolname,
								en.aypschoolid, en.attendanceschoolid
                             from student st
                             join enrollment en on en.studentid = st.id
                             join organizationtreedetail orgdetayp on en.aypschoolid = orgdetayp.schoolid and orgdetayp.statedisplayidentifier = 'KS'
							 join organizationtreedetail orgdetatt on en.attendanceschoolid = orgdetatt.schoolid and orgdetatt.statedisplayidentifier = 'KS'
							 join gradecourse gc on en.currentgradelevel = gc.id                             
                             where 1=1                             	
 								<if test="orgType != null and orgType == 'DT'">
 									and (en.attendanceschoolid in(select schoolid from organizationtreedetail where districtid = #{organizationId} and statedisplayidentifier = 'KS') 
		                             OR en.aypschoolid in(select schoolid from organizationtreedetail where districtid = #{organizationId} and statedisplayidentifier = 'KS'))
		                             
 								</if>
                             
                                <if test="orgType != null and orgType == 'SCH'">
							      	and (en.aypschoolid = #{organizationId} or en.attendanceschoolid = #{organizationId})
							    </if>
							    <if test="stateStudentIdentifier != null">
						            and st.statestudentidentifier = #{stateStudentIdentifier}
						         </if>
						         <if test="gradeIds != null and gradeIds.size > 0">
						         	and en.currentschoolyear = #{currentSchoolYear}
						         </if>
						         <if test="gradeIds != null and gradeIds.size > 0">
						         	
						     		and gc.abbreviatedname = ANY(ARRAY
							      <foreach collection="gradeIds" item="id" open="[" close="]" separator=",">
							        #{id,jdbcType=VARCHAR}
							      </foreach>
							       )
						     	 </if>
        						)
		
		select distinct en.studentid, en.statestudentidentifier, en.legallastname, en.legalfirstname, en.legalmiddlename, 
			sr.id as studentreportid,
			sr.schoolyear as reportschoolyear,
			sr.scalescore,
			sr.exitstatus,
			sr.incompletestatus,
			sr.transferred,
			ld.level as performancelevel,
			ld.levelname as performancelevelname,
			ca.abbreviatedname as subjectcode,
			ca.name as reportsubject,			
			gc.abbreviatedname as reportgrade,
			currgrade.abbreviatedname as currentenrolledgrade,
			en.districtdisplayidentifier, 
			en.districtname, 
			en.aypschoolidentifier, 
			en.aypschoolname,
			en.attendanceschoolidentifier, 
			en.attendanceschoolname,
			rptorgdet.districtdisplayidentifier as reportdistrictidentifier,
			rptorgdet.districtname as reportdistrictname,
			rptorgdet.schooldisplayidentifier as reportschoolidentifier,
			rptorgdet.schoolname as reportschoolname,
			scd.subscorereportdisplayname,
			rss.rating as rating
			
			from enrollmentsdetails en
			join studentreport sr on sr.studentid = en.studentid and en.currentschoolyear = #{currentSchoolYear}
			join assessmentprogram ap ON ap.id = sr.assessmentprogramid and ap.abbreviatedname='KAP'
			left join contentarea ca on ca.id = sr.contentareaid
			left join gradecourse gc on sr.gradeid = gc.id
			left join gradecourse currgrade on en.currentgradelevel = currgrade.id
			left join organizationtreedetail rptorgdet on sr.attendanceschoolid = rptorgdet.schoolid
			left join leveldescription ld on sr.levelid = ld.id
			left join reportsubscores rss on sr.id = rss.studentreportid
			left join subscoresdescription scd on scd.schoolyear = sr.schoolyear and scd.assessmentprogramid = sr.assessmentprogramid 
					and scd.subjectid = sr.contentareaid and scd.subscoredefinitionname = rss.subscoredefinitionname and scd.report='Student'
			where 
			1=1
			 <if test="contentAreaId != null and contentAreaId.size > 0">
				and sr.contentareaid = ANY(ARRAY
			      <foreach collection="contentAreaId" item="id" open="[" close="]" separator=",">
			        #{id,jdbcType=BIGINT}
			      </foreach>
		      	)	
		     </if> 
			 <if test="schoolYears != null and schoolYears.size > 0">
	     		and sr.schoolyear = ANY(ARRAY
		      <foreach collection="schoolYears" item="id" open="[" close="]" separator=",">
		        #{id,jdbcType=BIGINT}
		      </foreach>
		       )
	     	 </if>			
			
			UNION
			
			select distinct en.studentid, en.statestudentidentifier, en.legallastname, en.legalfirstname, en.legalmiddlename, 
			sr.id as studentreportid,
			sr.schoolyear as reportschoolyear,
			sr.scalescore,
			sr.exitstatus,
			sr.incompletestatus,
			sr.transferred,
			ld.level as performancelevel,
			ld.levelname as performancelevelname,
			ca.abbreviatedname as subjectcode,
			ca.name as reportsubject,			
			gc.abbreviatedname as reportgrade,
			currgrade.abbreviatedname as currentenrolledgrade,
			en.districtdisplayidentifier, 
			en.districtname, 
			en.aypschoolidentifier, 
			en.aypschoolname,
			en.attendanceschoolidentifier, 
			en.attendanceschoolname,
			rptorgdet.districtdisplayidentifier as reportdistrictidentifier,
			rptorgdet.districtname as reportdistrictname,
			rptorgdet.schooldisplayidentifier as reportschoolidentifier,
			rptorgdet.schoolname as reportschoolname,
			scd.subscorereportdisplayname,
			rss.rating as rating
			
			from enrollmentsdetails en
			join studentreport sr on sr.studentid = en.studentid and sr.schoolyear = en.currentschoolyear
			join assessmentprogram ap ON ap.id = sr.assessmentprogramid and ap.abbreviatedname='KAP' 
			left join contentarea ca on ca.id = sr.contentareaid
			left join gradecourse gc on sr.gradeid = gc.id
			left join gradecourse currgrade on en.currentgradelevel = currgrade.id
			left join organizationtreedetail rptorgdet on sr.attendanceschoolid = rptorgdet.schoolid
			left join leveldescription ld on sr.levelid = ld.id
			left join reportsubscores rss on sr.id = rss.studentreportid
			left join subscoresdescription scd on scd.schoolyear = sr.schoolyear and scd.assessmentprogramid = sr.assessmentprogramid 
					and scd.subjectid = sr.contentareaid and scd.subscoredefinitionname = rss.subscoredefinitionname and scd.report='Student'
			where 
			en.currentschoolyear != #{currentSchoolYear}
			<if test="contentAreaId != null and contentAreaId.size > 0">
			 and sr.contentareaid = ANY(ARRAY
		      <foreach collection="contentAreaId" item="id" open="[" close="]" separator=",">
		        #{id,jdbcType=BIGINT}
		      </foreach>
		      )	
		     </if> 
		     and (sr.attendanceschoolid = en.aypschoolid or sr.attendanceschoolid = en.attendanceschoolid) 
		     <if test="orgType != null and orgType == 'DT'">
				and (sr.attendanceschoolid in(select schoolid from organizationtreedetail where districtid = #{organizationId} and statedisplayidentifier = 'KS'))                         
			</if>
			 <if test="schoolYears != null and schoolYears.size > 0">
	     		and sr.schoolyear = ANY(ARRAY
		      <foreach collection="schoolYears" item="id" open="[" close="]" separator=",">
		        #{id,jdbcType=BIGINT}
		      </foreach>
		       )
	     	 </if>
			order by statestudentidentifier, reportsubject
			 
			
  </select>
 
  <select id="getStudentReportCountByStudentIdSubject" resultType="java.lang.Integer">
	SELECT count(*) from studentreport sr
		JOIN student st ON st.id = sr.studentid
		<!-- JOIN enrollment en ON en.studentid = st.id -->
		JOIN organization org ON st.stateid = org.id AND org.displayidentifier = 'KS'
		JOIN contentarea ca ON ca.id = sr.contentareaid
		JOIN assessmentprogram ap ON ap.id = sr.assessmentprogramid AND ap.abbreviatedname='KAP'
		WHERE st.statestudentidentifier = #{stateStudentIdentifier}
		 <if test="contentAreaId != null and contentAreaId.size > 0">
			AND sr.contentareaid = ANY(ARRAY
		      <foreach collection="contentAreaId" item="id" open="[" close="]" separator=",">
		        #{id,jdbcType=BIGINT}
		      </foreach>
		      )
	     </if> 
  </select>
  
  <select id="getStudentReportCountByStudentIdSubjectUserOrg" resultType="java.lang.Integer">
	SELECT count(*) from studentreport sr
		JOIN student st ON st.id = sr.studentid
		JOIN enrollment en ON en.studentid = st.id
		JOIN organization org ON st.stateid = org.id AND org.displayidentifier = 'KS'
		JOIN contentarea ca ON ca.id = sr.contentareaid
		JOIN assessmentprogram ap ON ap.id = sr.assessmentprogramid AND ap.abbreviatedname='KAP'
		WHERE st.statestudentidentifier = #{stateStudentIdentifier}
		 <if test="contentAreaId != null and contentAreaId.size > 0">
			AND sr.contentareaid = ANY(ARRAY
		      <foreach collection="contentAreaId" item="id" open="[" close="]" separator=",">
		        #{id,jdbcType=BIGINT}
		      </foreach>
		      )
	     </if> 
	      
	    <if test="orgType != null and orgType == 'DT'">
		      	AND sr.attendanceschoolid in(select schoolid from organizationtreedetail where districtid = #{organizationId} and statedisplayidentifier = 'KS') 		      	
        </if>
      
        <if test="orgType != null and orgType == 'SCH'">
      	  	AND sr.attendanceschoolid = #{organizationid}
        </if>
  </select>
  
  <sql id="getExternalStudentReports">
	select * from (select distinct on (stu.id,gc.abbreviatedname,trim(str.filepath))  
       stu.legallastname, stu.legalfirstname, stu.statestudentidentifier,
       ca.name as subject, ca.abbreviatedname as contentareacode, gc.abbreviatedname, str.filepath, str.districtid, str.stateid, 
       otd.districtdisplayidentifier as districtdisplayidentifier, otd.districtname as districtname, otd.schoolname as attendanceschoolName, otd.schooldisplayidentifier as displayidentifier, otd.schoolname as school, level1_text, level2_text
       from student stu
       join externalstudentreports str on str.studentid = stu.id
       join gradecourse gc on gc.id = str.gradeid
       join contentarea ca on ca.id = str.subjectid
       join organizationtreedetail otd on otd.schoolid = str.schoolid  
       where str.assessmentprogramid = #{assessmentProgramId}
       and str.schoolyear = #{schoolYear}
       and str.activeflag is true 
       <if test="reportType != null">
       	and str.reporttype = #{reportType, jdbcType=VARCHAR}
  	   </if>
       and (str.filepath is not null AND str.filepath != '')
         <if test="schoolIds != null">
		           and (otd.schoolid in  
		          <foreach collection= "schoolIds" item="schoolId" open="(" close=")" separator=",">
			         #{schoolId}
		         </foreach>
		         OR
		         otd.districtid in  
		          <foreach collection= "schoolIds" item="schoolId" open="(" close=")" separator=",">
			         #{schoolId}
		         </foreach>)
		         
	     </if>
	     <if test="subjectIds != null">
		           and str.subjectid in  
		          <foreach collection= "subjectIds" item="subjectId" open="(" close=")" separator=",">
			         #{subjectId}
		         </foreach>
	     </if>   
	     <if test="gradeIds != null"> <!-- gradeid is different for each subject so taking by grade abbreviatedname -->
		         and gc.abbreviatedname in  
		         (select abbreviatedname from gradecourse where id in  
		          <foreach collection= "gradeIds" item="gradeId" open="(" close=")" separator=",">
			         #{gradeId}
		         </foreach>) 
	     </if>
             ) studentreport
             <if test="sort1 != null or sort2 != null or sort3 != null">                        
             	 order by 
             </if>
             <if test="sort1 != null">
                 <if test="sort1 == 'legallastname'">
                  ${sort1},subject
                 </if>
                 <if test="sort1 != 'grade' and sort1 != 'legallastname'">
                  ${sort1}
                 </if>
	             <if test="assessmentProgramCode == 'DLM' and sort1 == 'grade'"> 
		           <!-- (abbreviatedname)::int -->
		           (substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>
		         <if test="assessmentProgramCode == 'CPASS' and sort1 == 'grade'">
		            <!-- abbreviatedname -->
		            (substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>             	
             </if>
             
             <if test="sort2 != null">
                <if test="sort2 == 'legallastname'">
                  , ${sort2}, subject
                 </if>
                  <if test="sort2 != 'grade' and sort2 != 'legallastname'">
                   ,${sort2}
                 </if>
	             <if test="assessmentProgramCode == 'DLM' and sort2 == 'grade'"> 
		           <!-- ,(abbreviatedname)::int -->
		           ,(substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>
		         <if test="assessmentProgramCode == 'CPASS' and sort2 == 'grade'">
		           <!--  ,abbreviatedname -->
		            ,(substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>             	
             </if>
             
             <if test="sort3 != null">
                 <if test="sort3 != 'grade'">
                   ,${sort3}
                 </if>
	             <if test="assessmentProgramCode == 'DLM' and sort3 == 'grade'"> 
		           <!-- ,(abbreviatedname)::int -->
		           ,(substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>
		         <if test="assessmentProgramCode == 'CPASS' and sort3 == 'grade'">
		           <!--  ,abbreviatedname -->
		            ,(substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>
            </if>
            
             <if test="sort1 != null or sort2 != null or sort3 != null">
	             <if test="sort1 != 'legallastname' and sort2 != 'legallastname' and sort3 != 'legallastname'"> 
	               ,legallastname
	             </if> 
             </if> 
       </sql>
  
  <sql id="getStudentReports">
  	 select * from (
  	 <if test="assessmentProgramCode == 'KAP'"> 
  	  WITH MAIN as (select distinct subjectareaid,contentareaid 
  	                   from contentareatesttypesubjectarea cttsa
                       inner join testtypesubjectarea ttsa on (ttsa.testtypeid = 2 and cttsa.testtypesubjectareaid = ttsa.id and ttsa.activeflag is true)
					   where cttsa.activeflag is true)
  	 </if>
  	 select distinct stu.legallastname, stu.legalfirstname, stu.statestudentidentifier, ca.id subjectid,
       ca.name as subject, ca.abbreviatedname as contentareacode, gc.abbreviatedname, str.filepath, str.districtid, str.stateid, otd.districtname as districtname, otd.districtdisplayidentifier
        as districtdisplayidentifier, otd.schoolname as attendanceschoolName, otd.schooldisplayidentifier as displayidentifier,otd.schoolname as school
        <if test="assessmentProgramCode == 'KAP'"> 
          ,etsa.groupingindicator1 grouping1, etsa.groupingindicator2 grouping2
        </if>  
       from student stu
       join studentreport str on str.studentid = stu.id      
       join gradecourse gc on gc.id = str.gradeid
       join contentarea ca on ca.id = str.contentareaid
       join organizationtreedetail otd on otd.schoolid = str.attendanceschoolid
       <if test="assessmentProgramCode == 'KAP'">  
	       join main m on m.contentareaid = ca.id  
	       left join enrollmenttesttypesubjectarea etsa on etsa.enrollmentid = str.enrollmentid and etsa.testtypeid = 2 and etsa.activeflag is true and etsa.subjectareaid =  m.subjectareaid
       </if>
       where str.assessmentprogramid = #{assessmentProgramId}
       and str.schoolyear = #{schoolYear}
       <!-- and str.status is true --> <!-- now for status flag false also report is getting generated.  -->
       and (str.filepath is not null AND str.filepath != '')
         <if test="schoolIds != null">
		         and (otd.schoolid in  
		      <foreach collection= "schoolIds" item="schoolId" open="(" close=")" separator=",">
			      #{schoolId}
		      </foreach>
		         OR
		         otd.districtid in  
		      <foreach collection= "schoolIds" item="schoolId" open="(" close=")" separator=",">
			      #{schoolId}
		      </foreach>)
	     </if>
	     <if test="subjectIds != null">
		           and str.contentareaid in  
		          <foreach collection= "subjectIds" item="subjectId" open="(" close=")" separator=",">
			         #{subjectId}
		         </foreach>
	     </if>   
	     <if test="gradeIds != null">	<!-- gradeid is different for each subject so taking by grade abbreviatedname -->	         
		          and gc.abbreviatedname in  
		         (select abbreviatedname from gradecourse where id in  
		          <foreach collection= "gradeIds" item="gradeId" open="(" close=")" separator=",">
			         #{gradeId}
		         </foreach>) 
	     </if>
             ) studentreport
             <if test="sort1 != null or sort2 != null or sort3 != null">   
             	 order by 
             </if>
             <if test="sort1 != null">
                <if test="sort1 == 'legallastname'">
                  ${sort1},subject
                 </if>
                 <if test="sort1 != 'grade' and sort1 != 'legallastname'">
                   ${sort1} NULLS LAST
                 </if>
	           	 <if test="sort1 == 'grade'"> 
		         <!--   (abbreviatedname)::int -->
		           (substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>     	
             </if>
             
             <if test="sort2 != null">
                 <if test="sort2 == 'legallastname'">
                  , ${sort2}, subject
                 </if>
                 <if test="sort2 != 'grade' and sort2 != 'legallastname'">
                   ,${sort2} NULLS LAST	
                 </if>
	             <if test="sort2 == 'grade'"> 
		           <!-- ,(abbreviatedname)::int -->
		           ,(substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>       	
             </if>
             
             <if test="sort3 != null">
                 <if test="sort3 != 'grade'">
                   ,${sort3} NULLS LAST
                 </if>
	             <if test="sort3 == 'grade'"> 
		           <!-- ,(abbreviatedname)::int -->
		           ,(substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>
             </if>
              <if test="sort1 != null or sort2 != null or sort3 != null">
	             <if test="sort1 != 'legallastname' and sort2 != 'legallastname' and sort3 != 'legallastname'"> 
	               ,legallastname
	             </if> 
             </if>         
  </sql>			
  			
 <select id="getExternalStudentReportsForDynamicBundleReport" resultMap="studentReportPdfPathsMap">
 	select * from (<include refid="getExternalStudentReports" />) studentExternalreports
 </select>
  
  <select id="getStudentReportsForDynamicBundleReport" resultMap="studentReportPdfPathsMap">
    select * from (<include refid="getStudentReports" />) studentreports
  </select>
  
  <select id="getCountOfExternalStudentReports" resultType="Integer">
 	select count(*) from (<include refid="getExternalStudentReports" />) studentExternalreports
 </select>
  
  <select id="getCountOfStudentReports" resultType="Integer">
    select count(*) from (<include refid="getStudentReports" />) studentreports
  </select>
  
  <select id="getStudentsForReportProcessByStudentId" resultType="Long"> 
  
  	SELECT distinct studentid from studentreportreprocess
  	where calculationscomplete is false
  	<if test="assessmentProgramId != null">
          and assessmentprogramid = #{assessmentProgramId, jdbcType=BIGINT}
    </if>
    <if test="contentAreaId != null">
          and contentareaid = #{contentAreaId, jdbcType=BIGINT}
    </if>
	<if test="gradeId != null">
          and gradeid = #{gradeId, jdbcType=BIGINT}
    </if> 
    <if test="schoolYear != null">
          and schoolyear = #{schoolYear, jdbcType=BIGINT}
    </if>
    <if test="testingProgramId != null">
    	  and testingprogramid = #{testingProgramId,jdbcType=BIGINT}
    </if> 
  </select>
  
  <update id="updateStudentReportReprocessByStudentId" parameterType="edu.ku.cete.domain.report.StudentReport">
  	UPDATE studentreportreprocess
  		<set>	
  		  <if test="isProcessBySpecificStudentId != null">
  		  	calculationscomplete = true,
  		  </if>	
  		 <if test="attendanceSchoolId != null">
        	schoolid = #{attendanceSchoolId,jdbcType=BIGINT},
      	 </if>
      	 <if test="districtId != null">
        	districtid = #{districtId,jdbcType=BIGINT},
      	  </if>
      	  <if test="batchReportProcessId != null">
	       batchreportprocessid = #{batchReportProcessId,jdbcType=BIGINT},
	     </if>
		  modifieddate = now(),		     
  		  processeddate = now()  
  		</set> 		  
  		WHERE studentid = #{studentId,jdbcType=BIGINT}
  		  <if test="assessmentProgramId != null">
        	AND assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
      	  </if> 
      	  <if test="testingProgramId != null">
      	  	AND testingprogramid = #{testingProgramId,jdbcType=BIGINT}
      	  </if>  	 
	      <if test="gradeId != null">
	        AND gradeid = #{gradeId,jdbcType=BIGINT}
	      </if>
	      <if test="contentAreaId != null">
	        AND contentareaid = #{contentAreaId,jdbcType=BIGINT}
	      </if>
	       <if test="schoolYear != null">
        	AND schoolyear = #{schoolYear,jdbcType=BIGINT}
     	 </if> 
     	 AND calculationscomplete is false    	
  </update>
  
  <update id="updateStudentReportReprocessByStudentIdByIsrOption" parameterType="map">
  	update studentreportreprocess
  		<set>	
  		  <if test="isrByStudentIdOption != null and isrByStudentIdOption == 'ISR'">
  		  	generatespecificstudentreport = true,
  		  	generatereportsindistrict = false,
  		  </if>
  		  <if test="isrByStudentIdOption != null and isrByStudentIdOption == 'ALL'">
  		  	generatereportsindistrict = true,
  		  	generatespecificstudentreport = false,
  		  </if>
  		  processeddate = now()
  		</set> 		  
  		where isrcomplete = false 
  		  <if test="assessmentProgramId != null">
        	AND assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
      	  </if>
      	  <if test="testingProgramId != null">
      	  	AND testingprogramid = #{testingProgramId,jdbcType=BIGINT}
      	  </if>  	 
	      <if test="gradeId != null">
	        AND gradeid = #{gradeId,jdbcType=BIGINT}
	      </if>
	      <if test="contentAreaId != null">
	        AND contentareaid = #{contentAreaId,jdbcType=BIGINT}
	      </if>
	       <if test="schoolYear != null">
        	AND schoolyear = #{schoolYear,jdbcType=BIGINT}
     	 </if>     	
  </update>  
  <update id="updateStudentReportReprocessByStudentByIsrOption" parameterType="map">
  	update studentreportreprocess
  		set
  		  isrcomplete = true, 
  		  modifieddate = now(),
     	  processeddate = now()
  		 		  
  		where isrcomplete = false 
  		  <if test="assessmentProgramId != null">
        	AND assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
      	  </if>
      	  <if test="testingProgramId != null">
      	  	AND testingprogramid = #{testingProgramId,jdbcType=BIGINT}
      	  </if>  	 
	      <if test="gradeId != null">
	        AND gradeid = #{gradeId,jdbcType=BIGINT}
	      </if>
	      <if test="contentAreaId != null">
	        AND contentareaid = #{contentAreaId,jdbcType=BIGINT}
	      </if>
	       <if test="schoolYear != null">
        	AND schoolyear = #{schoolYear,jdbcType=BIGINT}
     	 </if>
     	 <if test="studentId != null">
        	AND studentid = #{studentId,jdbcType=BIGINT}
     	 </if>     	
  </update>
  
  <update id="UpdateStudentReportReprocessStatus">
    update studentreportreprocess
    set isrcomplete = true,
    	modifieddate = now(),
     	processeddate = now()
    where id = #{studentReportReprocessId,jdbcType=BIGINT}
  </update>
  
  <select id="getSchoolIdsForStudentSummaryBundledReports" resultType="Long">  
	   SELECT DISTINCT schoolid 
	   		FROM externalstudentreports str
	   		JOIN gradecourse gc ON gc.id = gradeid
			   WHERE str.stateid = #{stateId}
			   AND str.assessmentprogramid = #{assessmentProgramId}
			   AND str.schoolyear = #{currentSchoolYear}
			   <if test="gradeCourseAbbrName != null">
			    	AND gc.abbreviatedname = #{gradeCourseAbbrName}
			   </if>
			   <if test="reportType != null">
			   		AND str.reporttype = #{reportType}
			   </if>
			   AND str.activeflag is true
			   ORDER BY schoolid
			    <if test="pageSize != null">
			   LIMIT #{pageSize} 
			   </if>
			   <if test="offset != null">
			   OFFSET #{offset}
			   </if>
  </select>
  
  <select id="geGradeCoursesAbbrNamesForStudentSummaryBundledReports" resultType="String">
	  SELECT DISTINCT gc.abbreviatedname
	       FROM externalstudentreports str
	       JOIN gradecourse gc ON gc.id = str.gradeid 
	       WHERE str.stateid = #{stateId}
	       AND str.assessmentprogramid = #{assessmentProgramId}
	       AND str.schoolyear = #{currentSchoolYear}
	       <if test="reportType != null">
			   AND str.reporttype = #{reportType}
		   </if>
	       AND str.activeflag is true
  </select>
  
  <select id="getDistrictIdsForStudentSummaryBundledReports" resultType="Long">  
	   SELECT DISTINCT districtid 
		   FROM externalstudentreports str
		   JOIN gradecourse gc ON gc.id = gradeid
		   WHERE str.stateid = #{stateId}
		   AND str.assessmentprogramid = #{assessmentProgramId}
		   AND str.schoolyear = #{currentSchoolYear}
		   <if test="reportType != null">
			   AND str.reporttype = #{reportType}
		   </if>
		   AND str.activeflag is true
		   ORDER BY districtid
		   <if test="pageSize != null">
		   LIMIT #{pageSize} 
		   </if>
		   <if test="offset != null">
		   OFFSET #{offset}
		   </if>
  </select>
  
  <select id="getExternalStudentReportsForStudentSummaryBundledReport" resultMap="studentReportPdfPathsMap">
    SELECT * from (SELECT DISTINCT ON (stu.id,gc.abbreviatedname,trim(str.filepath))  
       stu.legallastname, stu.legalfirstname, stu.statestudentidentifier,
       ca.name, ca.abbreviatedname as contentareacode, gc.abbreviatedname, str.filepath, str.districtid, str.stateid, org.organizationname as attendanceschoolName, org.displayidentifier
       ,str.level1_text, str.level2_text  
       FROM student stu
       JOIN externalstudentreports str ON str.studentid = stu.id
       JOIN gradecourse gc ON gc.id = str.gradeid
       LEFT JOIN contentarea ca ON ca.id = str.subjectid
       JOIN organization org ON org.id = str.schoolid
       WHERE str.schoolid = #{attendanceSchoolId}
       AND str.assessmentprogramid = #{assessmentProgramId}
       AND str.schoolyear = #{schoolYear}
       <if test="reportType != null">
		   	AND str.reporttype = #{reportType}
	   </if>
       AND gc.abbreviatedname = #{gradeCourseAbbrName}       
       AND str.activeflag is true AND (str.filepath is not null AND str.filepath != '')       
        ) studentreports ORDER BY legallastname, legalfirstname, statestudentidentifier, name,
       level1_text, level2_text         
  </select>
  
  <select id="getExternalStudentReportsForStudentSummaryDistrictBundledReport" resultMap="studentReportPdfPathsMap">
	   SELECT * FROM (SELECT DISTINCT ON (stu.id,gc.abbreviatedname,trim(str.filepath))  
	       stu.legallastname, stu.legalfirstname, stu.statestudentidentifier,
	       ca.name, ca.abbreviatedname as contentareacode, gc.abbreviatedname, str.filepath, str.districtid, str.stateid, org.displayidentifier
	       as districtdisplayidentifier, org.organizationname as districtname, orgSchool.organizationname as schoolname, level1_text, level2_text
	       FROM student stu
	       JOIN externalstudentreports str ON str.studentid = stu.id
	       JOIN gradecourse gc ON gc.id = str.gradeid
	       LEFT JOIN contentarea ca ON ca.id = str.subjectid
	       JOIN organization org ON org.id = str.districtid
	       JOIN organization orgSchool ON orgSchool.id = str.schoolid  
	       WHERE str.districtid = #{districtId}
	       AND str.assessmentprogramid = #{assessmentProgramId}
	       AND str.schoolyear = #{schoolYear}  
	       <if test="reportType != null">
		   		AND str.reporttype = #{reportType}
	   		</if>    
	       AND str.activeflag is true AND (str.filepath is not null AND str.filepath != '')
	             ) studentreport ORDER BY schoolname,    
	             <if test="assessmentProgramCode == 'DLM'"> 
		           <!-- (abbreviatedname)::int, -->
		           (substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$'),
		         </if>
		         <if test="assessmentProgramCode == 'CPASS'">
		         <!--    abbreviatedname, -->
		          (substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$'),
		         </if>
		         legallastname, legalfirstname, statestudentidentifier, name, level1_text, level2_text
	                 
  </select>
  
  <select id="getDistrictIdsForSchoolSummaryBundledReports" resultType="Long">  
	   SELECT DISTINCT districtid 
		   FROM externalstudentreports str
		   WHERE str.stateid = #{stateId}
		   AND str.assessmentprogramid = #{assessmentProgramId}
		   AND str.schoolyear = #{currentSchoolYear}
		   <if test="reportType != null">
			   AND str.reporttype = #{reportType}
		   </if>
		   AND str.activeflag is true
		   AND str.gradeid is null
		   AND str.subjectid is null
		   ORDER BY districtid
		   <if test="pageSize != null">
		   LIMIT #{pageSize} 
		   </if>
		   <if test="offset != null">
		   OFFSET #{offset}
		   </if>
  </select>
  
  <select id="getExternalStudentReportsForSchoolSummaryDistrictBundledReport" resultMap="studentReportPdfPathsMap">
	   SELECT * FROM (SELECT DISTINCT ON (str.schoolid, trim(str.filepath))  
		       str.filepath, str.districtid, str.stateid, org.displayidentifier
		       as districtdisplayidentifier, org.organizationname as districtname, orgSchool.organizationname as schoolname, level1_text, level2_text
		       FROM externalstudentreports str	       
		       JOIN organization org ON org.id = str.districtid
		       JOIN organization orgSchool ON orgSchool.id = str.schoolid  
		       WHERE str.districtid = #{districtId}
		       AND str.assessmentprogramid = #{assessmentProgramId}
		       AND str.schoolyear = #{schoolYear}  
		       <if test="reportType != null">
			   		AND str.reporttype = #{reportType}
		   		</if>    
		       AND str.activeflag is true AND (str.filepath is not null AND str.filepath != '')
	       ) studentreport ORDER BY schoolname
	                 
  </select>
  
  <sql id="getExternalStudentSummaryReports">
	select * from (select distinct on (stu.id,gc.abbreviatedname,trim(str.filepath))  
       stu.legallastname, stu.legalfirstname, stu.statestudentidentifier, gc.abbreviatedname, str.filepath, str.districtid, str.stateid, 
       otd.districtdisplayidentifier as districtdisplayidentifier, otd.districtname as districtname, otd.schoolname as attendanceschoolName, otd.schooldisplayidentifier as displayidentifier, otd.schoolname as school, level1_text, level2_text
       from student stu
       join externalstudentreports str on str.studentid = stu.id
       join gradecourse gc on gc.id = str.gradeid
       join organizationtreedetail otd on otd.schoolid = str.schoolid  
       where str.assessmentprogramid = #{assessmentProgramId}
       and str.schoolyear = #{schoolYear}
       and str.activeflag is true
       and str.reporttype = #{reportType,jdbcType=VARCHAR} 
       and (str.filepath is not null AND str.filepath != '')
         <if test="schoolIds != null">
		           and (otd.schoolid in  
		          <foreach collection= "schoolIds" item="schoolId" open="(" close=")" separator=",">
			         #{schoolId}
		         </foreach>
		         OR
		         otd.districtid in  
		          <foreach collection= "schoolIds" item="schoolId" open="(" close=")" separator=",">
			         #{schoolId}
		         </foreach>)		         
	     </if>	       
	     <if test="gradeIds != null">
		         and gc.abbreviatedname in  
		         (select abbreviatedname from gradecourse where id in  
		          <foreach collection= "gradeIds" item="gradeId" open="(" close=")" separator=",">
			         #{gradeId}
		         </foreach>) 
	     </if>
             ) studentreport
             <if test="sort1 != null or sort2 != null or sort3 != null">                        
             	 order by 
             </if>
             <if test="sort1 != null">
                 <if test="sort1 == 'legallastname'">
                  ${sort1}
                 </if>
                 <if test="sort1 != 'grade' and sort1 != 'legallastname'">
                  ${sort1}
                 </if>
	             <if test="assessmentProgramCode == 'DLM' and sort1 == 'grade'"> 
		           <!-- (abbreviatedname)::int -->
		           (substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>
		         <if test="assessmentProgramCode == 'CPASS' and sort1 == 'grade'">
		            <!-- abbreviatedname -->
		            (substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>             	
             </if>
             
             <if test="sort2 != null">
                <if test="sort2 == 'legallastname'">
                  , ${sort2}
                 </if>
                  <if test="sort2 != 'grade' and sort2 != 'legallastname'">
                   ,${sort2}
                 </if>
	             <if test="assessmentProgramCode == 'DLM' and sort2 == 'grade'"> 
		           <!-- ,(abbreviatedname)::int -->
		           ,(substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>
		         <if test="assessmentProgramCode == 'CPASS' and sort2 == 'grade'">
		            <!-- ,abbreviatedname -->
		            ,(substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>             	
             </if>
             
             <if test="sort3 != null">
                 <if test="sort3 != 'grade'">
                   ,${sort3}
                 </if>
	             <if test="assessmentProgramCode == 'DLM' and sort3 == 'grade'"> 
		           <!-- ,(abbreviatedname)::int -->
		           ,(substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>
		         <if test="assessmentProgramCode == 'CPASS' and sort3 == 'grade'">
		            <!-- ,abbreviatedname -->
		            ,(substring(abbreviatedname, '^[0-9]+'))::int,substring(abbreviatedname, '[^0-9_].*$')
		         </if>
            </if>
            
             <if test="sort1 != null or sort2 != null or sort3 != null">
	             <if test="sort1 != 'legallastname' and sort2 != 'legallastname' and sort3 != 'legallastname'"> 
	               ,legallastname
	             </if> 
             </if> 
  </sql>
       
  <select id="getExternalStudentSummaryReportsForDynamicBundleReport" resultMap="studentReportPdfPathsMap">
 	select * from (<include refid="getExternalStudentSummaryReports" />) studentExternalreports
  </select>
 
  <select id="getCountOfExternalStudentSummaryReports" resultType="Integer">
 	select count(*) from (<include refid="getExternalStudentSummaryReports" />) studentExternalreports
  </select>
 
 <update id="updatePredictiveStudentReportByStudentId" parameterType="edu.ku.cete.domain.report.InterimStudentReport">
  	UPDATE studentreportreprocess
  		<set>	
  		  <if test="isProcessBySpecificStudentId != null">
  		  	calculationscomplete = true,
  		  </if>	
  		 <if test="attendanceSchoolId != null">
        	schoolid = #{attendanceSchoolId,jdbcType=BIGINT},
      	 </if>
      	 <if test="districtId != null">
        	districtid = #{districtId,jdbcType=BIGINT},
      	  </if>
      	  <if test="batchReportProcessId != null">
	       batchreportprocessid = #{batchReportProcessId,jdbcType=BIGINT},
	     </if>
		  modifieddate = now(),		     
  		  processeddate = now()  
  		</set> 		  
  		WHERE studentid = #{studentId,jdbcType=BIGINT}
  		  <if test="assessmentProgramId != null">
        	AND assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
      	  </if> 
      	  <if test="testingProgramId != null">
      	  	AND testingprogramid = #{testingProgramId,jdbcType=BIGINT}
      	  </if> 	 
	      <if test="gradeId != null">
	        AND gradeid = #{gradeId,jdbcType=BIGINT}
	      </if>
	      <if test="contentAreaId != null">
	        AND contentareaid = #{contentAreaId,jdbcType=BIGINT}
	      </if>
	       <if test="schoolYear != null">
        	AND schoolyear = #{schoolYear,jdbcType=BIGINT}
     	 </if> 
     	 AND calculationscomplete is false    	
  </update>
  
     <select id="getStudentIdsFromStudentReport" resultType="java.lang.Long">       
		 select distinct esr.studentid 
		 from studentreport esr		 
     	 <if test="processByStudentId == 'TRUE' and reprocessEntireDistrict=='FALSE'">		
			inner join studentreportreprocess rp on rp.studentId=esr.studentid 
			and rp.assessmentprogramid = esr.assessmentprogramid 
			and rp.schoolyear = esr.schoolyear
			and rp.isrcomplete is false  
			and rp.generatespecificstudentreport is true 
		 </if> 
		 <if test="processByStudentId == 'TRUE' and reprocessEntireDistrict=='TRUE'">
			inner join studentreportreprocess rp on rp.districtid=esr.districtid 
			and rp.assessmentprogramid = esr.assessmentprogramid  
			and rp.schoolyear = esr.schoolyear
			and isrcomplete is false  
			and rp.generatereportsindistrict is true
		 </if>
		 where esr.schoolyear = #{schoolYear,jdbcType=BIGINT} 
		 and esr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT} 
		 and esr.stateid = #{stateId,jdbcType=BIGINT}
		 <if test="contentAreaId != null">
			and esr.contentareaid =#{contentAreaId,jdbcType=BIGINT}
		 </if>
		 <if test="gradeCourseId != null">
			and esr.gradeid =#{gradeCourseId,jdbcType=BIGINT} 
		 </if> 
		 <if test="processByStudentId == null or (processByStudentId != null and processByStudentId == 'FALSE')">
        	 and esr.generated is false
     	 </if>		 
		 order by esr.studentid
		 LIMIT #{pageSize}
    	 OFFSET #{offset}
   </select>
   
   <select id="getStudentForKELPAReport" resultType="edu.ku.cete.domain.report.StudentReport">
      select distinct
		  esr.id, 
		  esr.studentid,
		  st.statestudentidentifier,
		  st.legallastname as studentlastname,
		  st.legalfirstname as studentfirstname, 
		  esr.contentareaid,
		  otd.stateid,
		  esr.schoolyear,
		  otd.districtid,
		  otd.districtdisplayidentifier,
		  otd.schoolid as attendanceSchoolId,
		  case when shortdtname.shortorgname is null then otd.districtname ELSE  shortdtname.shortorgname end as districtname,
		  case when shortschname.shortorgname is null then otd.schoolname ELSE  shortschname.shortorgname end as attendanceschoolname,
		  ca.abbreviatedname as contentareacode,
		  esr.gradeid as gradeId, 
		  gc.abbreviatedname as gradecode,
		  esr.overall_level as level,
		  esr.reading_level as readingLevel,
		  esr.listening_level as listeningLevel,
		  esr.speaking_level as speakingLevel,
		  esr.writing_level as writingLevel,
		  (select status from studentstests where studentid = esr.studentid and testid = esr.studenttest1id and activeflag is true order by id desc limit 1) as readingTestStatus,
		  (select status from studentstests where studentid = esr.studentid and testid = esr.studenttest2id and activeflag is true order by id desc limit 1) as listeningTestStatus,  
		  (select status from studentstests where studentid = esr.studentid and testid = esr.studenttest3id and activeflag is true order by id desc limit 1) as speakingTestStatus,  
		  (select status from studentstests where studentid = esr.studentid and testid = esr.studenttest4id and activeflag is true order by id desc limit 1) as writingTestStatus,
		  (select distinct kelpascoringstatus from scoringassignmentstudent sts
                                             inner join studentstests st on sts.studentstestsid = st.id 
                                             and st.studentid = esr.studentid 
                                             and st.testid = esr.studenttest3id 
                                             and st.activeflag is true
                                   where sts.activeflag is true limit 1) as speakingScoringStatus,
          (select distinct kelpascoringstatus from scoringassignmentstudent sts
                                             inner join studentstests st on sts.studentstestsid = st.id 
                                             and st.studentid = esr.studentid 
                                             and st.testid = esr.studenttest4id 
                                             and st.activeflag is true 
                                   where sts.activeflag is true limit 1) as writingScoringStatus
          <if test="processByStudentId == 'TRUE' ">
		   ,rp.id as studentreportreprocessid
		   </if>                                    
		  from studentreport esr
		  inner join student st on st.id = esr.studentid and st.activeflag is true
		  inner join contentarea ca on ca.id = esr.contentareaid and ca.activeflag is true 
		  inner join gradecourse gc on gc.id = esr.gradeid and gc.activeflag is true 
		  inner join organizationtreedetail otd on otd.schoolid = esr.attendanceschoolid
		  <if test="processByStudentId == 'TRUE' and reprocessEntireDistrict=='FALSE'">		
			inner join studentreportreprocess rp on rp.studentId=esr.studentid  and rp.isrcomplete is false and rp.generatespecificstudentreport is true
		  </if> 
		  <if test="processByStudentId == 'TRUE' and reprocessEntireDistrict=='TRUE'">
			inner join studentreportreprocess rp on rp.districtid=esr.districtid  and rp.isrcomplete  is false and rp.generatereportsindistrict is true
		  </if>
		  left join reportorganizationshortname as shortdtname ON shortdtname.organizationid = otd.districtid and shortdtname.activeflag is true
		  left join reportorganizationshortname as shortschname ON shortschname.organizationid = otd.schoolid and shortschname.activeflag is true
		  where (esr.schoolyear = #{schoolYear,jdbcType=BIGINT} OR esr.schoolyear = #{schoolYear,jdbcType=BIGINT}-1)
		  and esr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
		  and esr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
		  <!-- and esr.gradeid = #{gradeCourseId,jdbcType=BIGINT} -->
		  and esr.stateid = #{stateId,jdbcType=BIGINT}
		  and esr.studentid = #{studentId,jdbcType=BIGINT}
		   <if test="processByStudentId == 'TRUE'">
   			 and rp.contentareaid=esr.contentareaid
   			 and rp.assessmentprogramid=esr.assessmentprogramid
   			 and rp.gradeid=esr.gradeid
   			 and rp.schoolyear = esr.schoolyear
   			</if>
		  order by esr.id 
		  limit 2
   </select>
</mapper>