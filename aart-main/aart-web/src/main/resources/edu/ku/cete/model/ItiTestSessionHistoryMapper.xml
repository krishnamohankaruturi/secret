<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.ku.cete.model.ItiTestSessionHistoryMapper">
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.ItiTestSessionHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="studentid" jdbcType="BIGINT" property="studentId" />
    <result column="rosterid" jdbcType="BIGINT" property="rosterId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="status" jdbcType="BIGINT" property="status" />
    <result column="testid" jdbcType="BIGINT" property="testId" />
    <result column="testcollectionid" jdbcType="BIGINT" property="testCollectionId" />
    <result column="testcollectionname" jdbcType="VARCHAR" property="testCollectionName" />
    <result column="saveddate" jdbcType="TIMESTAMP" property="savedDate" />
    <result column="confirmdate" jdbcType="TIMESTAMP" property="confirmDate" />
    <result column="essentialelement" jdbcType="VARCHAR" property="essentialElement" />
    <result column="linkagelevel" jdbcType="VARCHAR" property="linkageLevel" />
    <result column="leveldescription" jdbcType="VARCHAR" property="levelDescription" />
    <result column="createddate" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="modifieddate" jdbcType="TIMESTAMP" property="modifiedDate" />
    <result column="createduser" jdbcType="BIGINT" property="createdUser" />
    <result column="modifieduser" jdbcType="BIGINT" property="modifiedUser" />
    <result column="testsessionid" jdbcType="BIGINT" property="testSessionId" />
    <result column="studentenrlrosterid" jdbcType="BIGINT" property="studentEnrlRosterId" />
    <result column="claim" jdbcType="VARCHAR" property="claim" />
    <result column="conceptualarea" jdbcType="VARCHAR" property="conceptualArea" />
    <result column="essentialelementid" jdbcType="BIGINT" property="essentialElementId" />
    <result column="activeflag" jdbcType="BIT" property="activeFlag" />
   <result column="studentsteststatusid" jdbcType="BIGINT" property="studentsTestStatusId"/>
   <result column="studentstestsid" jdbcType="BIGINT" property="studentsTestsId"/>
   <result column="operationaltestwindowid" jdbcType="BIGINT" property="operationalTestWindowId" />
   <result column="studentstestsstatus" jdbcType="VARCHAR" property="studentsTestsStatus" />
   <result column="statuscode" jdbcType="VARCHAR" property="statusCode" />
   <result column="studentstestsstarttime" jdbcType="TIMESTAMP" property="studentsTestsStartTime" />
   <result column="studentstestsendtime" jdbcType="TIMESTAMP" property="studentsTestsEndTime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    id, studentid, rosterid, name, status, testid, testcollectionid, 
    testcollectionname, saveddate, confirmdate, essentialelement, linkagelevel, leveldescription, 
    createddate, modifieddate, createduser, modifieduser, testsessionid, studentenrlrosterid, 
    claim, conceptualarea, essentialelementid, activeflag
  </sql>
  <select id="selectByExample" parameterType="edu.ku.cete.domain.ItiTestSessionHistoryExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from ititestsessionhistory
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    select 
    <include refid="Base_Column_List" />
    from ititestsessionhistory
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    delete from ititestsessionhistory
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="edu.ku.cete.domain.ItiTestSessionHistoryExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    delete from ititestsessionhistory
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="edu.ku.cete.domain.ItiTestSessionHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT nextval('ititestsessionhistory_id_seq')
    </selectKey>
    insert into ititestsessionhistory (id, studentid, 
      rosterid, name, status, 
      testid, testcollectionid, testcollectionname, 
      saveddate, confirmdate, essentialelement, 
      linkagelevel, leveldescription, createddate, 
      modifieddate, createduser, modifieduser, 
      testsessionid, studentenrlrosterid, claim, 
      conceptualarea, essentialelementid, activeflag
      )
    values (#{id,jdbcType=BIGINT}, #{studentId,jdbcType=BIGINT},  
      #{rosterId,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{status,jdbcType=BIGINT}, 
      #{testId,jdbcType=BIGINT}, #{testCollectionId,jdbcType=BIGINT}, #{testCollectionName,jdbcType=VARCHAR}, 
      #{savedDate,jdbcType=TIMESTAMP}, #{confirmDate,jdbcType=TIMESTAMP}, #{essentialElement,jdbcType=VARCHAR}, 
      #{linkageLevel,jdbcType=VARCHAR}, #{levelDescription,jdbcType=VARCHAR}, #{createdDate,jdbcType=TIMESTAMP}, 
      #{modifiedDate,jdbcType=TIMESTAMP}, #{createdUser,jdbcType=BIGINT}, #{modifiedUser,jdbcType=BIGINT}, 
      #{testSessionId,jdbcType=BIGINT}, #{studentEnrlRosterId,jdbcType=BIGINT}, #{claim,jdbcType=VARCHAR}, 
      #{conceptualArea,jdbcType=VARCHAR}, #{essentialElementId,jdbcType=BIGINT}, #{activeFlag,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="edu.ku.cete.domain.ItiTestSessionHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT nextval('ititestsessionhistory_id_seq')
    </selectKey>
    insert into ititestsessionhistory
    <trim prefix="(" suffix=")" suffixOverrides=",">
      id,
      <if test="studentId != null">
        studentid,
      </if>
      <if test="rosterId != null">
        rosterid,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="testId != null">
        testid,
      </if>
      <if test="testCollectionId != null">
        testcollectionid,
      </if>
      <if test="testCollectionName != null">
        testcollectionname,
      </if>
      <if test="savedDate != null">
        saveddate,
      </if>
      <if test="confirmDate != null">
        confirmdate,
      </if>
      <if test="essentialElement != null">
        essentialelement,
      </if>
      <if test="linkageLevel != null">
        linkagelevel,
      </if>
      <if test="levelDescription != null">
        leveldescription,
      </if>
      <if test="createdDate != null">
        createddate,
      </if>
      <if test="modifiedDate != null">
        modifieddate,
      </if>
      <if test="createdUser != null">
        createduser,
      </if>
      <if test="modifiedUser != null">
        modifieduser,
      </if>
      <if test="testSessionId != null">
        testsessionid,
      </if>
      <if test="studentEnrlRosterId != null">
        studentenrlrosterid,
      </if>
      <if test="claim != null">
        claim,
      </if>
      <if test="conceptualArea != null">
        conceptualarea,
      </if>
      <if test="essentialElementId != null">
        essentialelementid,
      </if>
      <if test="activeFlag != null">
        activeflag,
      </if>
      <if test="operationalTestWindowId != null">
        operationaltestwindowid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=BIGINT},
      <if test="studentId != null">
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="rosterId != null">
        #{rosterId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=BIGINT},
      </if>
      <if test="testId != null">
        #{testId,jdbcType=BIGINT},
      </if>
      <if test="testCollectionId != null">
        #{testCollectionId,jdbcType=BIGINT},
      </if>
      <if test="testCollectionName != null">
        #{testCollectionName,jdbcType=VARCHAR},
      </if>
      <if test="savedDate != null">
        #{savedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="confirmDate != null">
        #{confirmDate,jdbcType=TIMESTAMP},
      </if>
      <if test="essentialElement != null">
        #{essentialElement,jdbcType=VARCHAR},
      </if>
      <if test="linkageLevel != null">
        #{linkageLevel,jdbcType=VARCHAR},
      </if>
      <if test="levelDescription != null">
        #{levelDescription,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null">
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedDate != null">
        #{modifiedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdUser != null">
        #{createdUser,jdbcType=BIGINT},
      </if>
      <if test="modifiedUser != null">
        #{modifiedUser,jdbcType=BIGINT},
      </if>
      <if test="testSessionId != null">
        #{testSessionId,jdbcType=BIGINT},
      </if>
      <if test="studentEnrlRosterId != null">
        #{studentEnrlRosterId,jdbcType=BIGINT},
      </if>
      <if test="claim != null">
        #{claim,jdbcType=VARCHAR},
      </if>
      <if test="conceptualArea != null">
        #{conceptualArea,jdbcType=VARCHAR},
      </if>
      <if test="essentialElementId != null">
        #{essentialElementId,jdbcType=BIGINT},
      </if>
      <if test="activeFlag != null">
        #{activeFlag,jdbcType=BIT},
      </if>
      <if test="operationalTestWindowId != null">
        #{operationalTestWindowId,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.ku.cete.domain.ItiTestSessionHistoryExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    select count(*) from ititestsessionhistory
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    update ititestsessionhistory
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.studentId != null">
        studentid = #{record.studentId,jdbcType=BIGINT},
      </if>
      <if test="record.rosterId != null">
        rosterid = #{record.rosterId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=BIGINT},
      </if>
      <if test="record.testId != null">
        testid = #{record.testId,jdbcType=BIGINT},
      </if>
      <if test="record.testCollectionId != null">
        testcollectionid = #{record.testCollectionId,jdbcType=BIGINT},
      </if>
      <if test="record.testCollectionName != null">
        testcollectionname = #{record.testCollectionName,jdbcType=VARCHAR},
      </if>
      <if test="record.savedDate != null">
        saveddate = #{record.savedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.confirmDate != null">
        confirmdate = #{record.confirmDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.essentialElement != null">
        essentialelement = #{record.essentialElement,jdbcType=VARCHAR},
      </if>
      <if test="record.linkageLevel != null">
        linkagelevel = #{record.linkageLevel,jdbcType=VARCHAR},
      </if>
      <if test="record.levelDescription != null">
        leveldescription = #{record.levelDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.createdDate != null">
        createddate = #{record.createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifiedDate != null">
        modifieddate = #{record.modifiedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createdUser != null">
        createduser = #{record.createdUser,jdbcType=BIGINT},
      </if>
      <if test="record.modifiedUser != null">
        modifieduser = #{record.modifiedUser,jdbcType=BIGINT},
      </if>
      <if test="record.testSessionId != null">
        testsessionid = #{record.testSessionId,jdbcType=BIGINT},
      </if>
      <if test="record.studentEnrlRosterId != null">
        studentenrlrosterid = #{record.studentEnrlRosterId,jdbcType=BIGINT},
      </if>
      <if test="record.claim != null">
        claim = #{record.claim,jdbcType=VARCHAR},
      </if>
      <if test="record.conceptualArea != null">
        conceptualarea = #{record.conceptualArea,jdbcType=VARCHAR},
      </if>
      <if test="record.essentialElementId != null">
        essentialelementid = #{record.essentialElementId,jdbcType=BIGINT},
      </if>
      <if test="record.activeFlag != null">
        activeflag = #{record.activeFlag,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    update ititestsessionhistory
    set id = #{record.id,jdbcType=BIGINT},
      studentid = #{record.studentId,jdbcType=BIGINT},
      rosterid = #{record.rosterId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=BIGINT},
      testid = #{record.testId,jdbcType=BIGINT},
      testcollectionid = #{record.testCollectionId,jdbcType=BIGINT},
      testcollectionname = #{record.testCollectionName,jdbcType=VARCHAR},
      saveddate = #{record.savedDate,jdbcType=TIMESTAMP},
      confirmdate = #{record.confirmDate,jdbcType=TIMESTAMP},
      essentialelement = #{record.essentialElement,jdbcType=VARCHAR},
      linkagelevel = #{record.linkageLevel,jdbcType=VARCHAR},
      leveldescription = #{record.levelDescription,jdbcType=VARCHAR},
      createddate = #{record.createdDate,jdbcType=TIMESTAMP},
      modifieddate = #{record.modifiedDate,jdbcType=TIMESTAMP},
      createduser = #{record.createdUser,jdbcType=BIGINT},
      modifieduser = #{record.modifiedUser,jdbcType=BIGINT},
      testsessionid = #{record.testSessionId,jdbcType=BIGINT},
      studentenrlrosterid = #{record.studentEnrlRosterId,jdbcType=BIGINT},
      claim = #{record.claim,jdbcType=VARCHAR},
      conceptualarea = #{record.conceptualArea,jdbcType=VARCHAR},
      essentialelementid = #{record.essentialElementId,jdbcType=BIGINT},
      activeflag = #{record.activeFlag,jdbcType=BIT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.ItiTestSessionHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    update ititestsessionhistory
    <set>
      <if test="studentId != null">
        studentid = #{studentId,jdbcType=BIGINT},
      </if>
      <if test="rosterId != null">
        rosterid = #{rosterId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=BIGINT},
      </if>
      <if test="testId != null">
        testid = #{testId,jdbcType=BIGINT},
      </if>
      <if test="testCollectionId != null">
        testcollectionid = #{testCollectionId,jdbcType=BIGINT},
      </if>
      <if test="testCollectionName != null">
        testcollectionname = #{testCollectionName,jdbcType=VARCHAR},
      </if>
      <if test="savedDate != null">
        saveddate = #{savedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="confirmDate != null">
        confirmdate = #{confirmDate,jdbcType=TIMESTAMP},
      </if>
      <if test="essentialElement != null">
        essentialelement = #{essentialElement,jdbcType=VARCHAR},
      </if>
      <if test="linkageLevel != null">
        linkagelevel = #{linkageLevel,jdbcType=VARCHAR},
      </if>
      <if test="levelDescription != null">
        leveldescription = #{levelDescription,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null">
        createddate = #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedDate != null">
        modifieddate = #{modifiedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdUser != null">
        createduser = #{createdUser,jdbcType=BIGINT},
      </if>
      <if test="modifiedUser != null">
        modifieduser = #{modifiedUser,jdbcType=BIGINT},
      </if>
      <if test="testSessionId != null">
        testsessionid = #{testSessionId,jdbcType=BIGINT},
      </if>
      <if test="studentEnrlRosterId != null">
        studentenrlrosterid = #{studentEnrlRosterId,jdbcType=BIGINT},
      </if>
      <if test="claim != null">
        claim = #{claim,jdbcType=VARCHAR},
      </if>
      <if test="conceptualArea != null">
        conceptualarea = #{conceptualArea,jdbcType=VARCHAR},
      </if>
      <if test="essentialElementId != null">
        essentialelementid = #{essentialElementId,jdbcType=BIGINT},
      </if>
      <if test="activeFlag != null">
        activeflag = #{activeFlag,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.ItiTestSessionHistory">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Tue Oct 14 02:01:12 CDT 2014.
    -->
    update ititestsessionhistory
    set studentid = #{studentId,jdbcType=BIGINT},
      rosterid = #{rosterId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      status = #{status,jdbcType=BIGINT},
      testid = #{testId,jdbcType=BIGINT},
      testcollectionid = #{testCollectionId,jdbcType=BIGINT},
      testcollectionname = #{testCollectionName,jdbcType=VARCHAR},
      saveddate = #{savedDate,jdbcType=TIMESTAMP},
      confirmdate = #{confirmDate,jdbcType=TIMESTAMP},
      essentialelement = #{essentialElement,jdbcType=VARCHAR},
      linkagelevel = #{linkageLevel,jdbcType=VARCHAR},
      leveldescription = #{levelDescription,jdbcType=VARCHAR},
      createddate = #{createdDate,jdbcType=TIMESTAMP},
      modifieddate = #{modifiedDate,jdbcType=TIMESTAMP},
      createduser = #{createdUser,jdbcType=BIGINT},
      modifieduser = #{modifiedUser,jdbcType=BIGINT},
      testsessionid = #{testSessionId,jdbcType=BIGINT},
      studentenrlrosterid = #{studentEnrlRosterId,jdbcType=BIGINT},
      claim = #{claim,jdbcType=VARCHAR},
      conceptualarea = #{conceptualArea,jdbcType=VARCHAR},
      essentialelementid = #{essentialElementId,jdbcType=BIGINT},
      activeflag = #{activeFlag,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <resultMap id="ExtendedResultMap" type="edu.ku.cete.domain.ItiTestSessionHistory">
    <result column="id" jdbcType="BIGINT" property="id" />
    <result column="studentid" jdbcType="BIGINT" property="studentId" />
    <result column="studentenrlrosterid" jdbcType="VARCHAR" property="studentEnrlRosterId" />
    <result column="rosterid" jdbcType="BIGINT" property="rosterId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="status" jdbcType="BIGINT" property="status" />
    <result column="testid" jdbcType="BIGINT" property="testId" />
    <result column="testcollectionid" jdbcType="BIGINT" property="testCollectionId" />
    <result column="testcollectionname" jdbcType="VARCHAR" property="testCollectionName" />
    <result column="saveddate" jdbcType="TIMESTAMP" property="savedDate" />
    <result column="confirmdate" jdbcType="TIMESTAMP" property="confirmDate" />
    <result column="essentialelement" jdbcType="VARCHAR" property="essentialElement" />
    <result column="linkagelevel" jdbcType="VARCHAR" property="linkageLevel" />
    <result column="leveldescription" jdbcType="VARCHAR" property="levelDescription" />
    <result column="createddate" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="modifieddate" jdbcType="TIMESTAMP" property="modifiedDate" />
    <result column="createduser" jdbcType="BIGINT" property="createdUser" />
    <result column="modifieduser" jdbcType="BIGINT" property="modifiedUser" />
    <result column="administereddate" jdbcType="BIGINT" property="administeredDate" />
    <result column="sensitivitytags" jdbcType="VARCHAR" property="sensitivityTags" />
    <result column="testletid" jdbcType="VARCHAR" property="testletId" />
    <result column="essentialelementid" jdbcType="TIMESTAMP" property="essentialElementId" />
    <result column="claim" jdbcType="VARCHAR" property="claim" />
    <result column="testsessionid" jdbcType="BIGINT" property="testSessionId"/>
    <result column="conceptualarea" jdbcType="VARCHAR" property="conceptualArea" />
    <result column="testStatus" jdbcType="VARCHAR" property="testStatus"/>
    <result column="enddatetime" jdbcType="TIMESTAMP" property="endDateTime"/>
    <association javaType="edu.ku.cete.domain.common.Category" property="statusCategory">
	        <id column="statusId" jdbcType="BIGINT" property="id" />
	        <result column="statusName" jdbcType="VARCHAR" property="categoryName" />
			<result column="statusCode" jdbcType="VARCHAR" property="categoryCode" />
    </association>
  </resultMap>
  <select id="selectByStudentIdRosterIdWithStatus" resultMap="ExtendedResultMap">
    select c.categoryname as statusName, c.categorycode as statusCode,itihistory.id, itihistory.studentenrlrosterid, itihistory.studentid, itihistory.rosterid, itihistory.name, itihistory.status, itihistory.testid, itihistory.testcollectionid, itihistory.saveddate,
 		itihistory.confirmdate, itihistory.essentialelement, itihistory.linkagelevel, itihistory.leveldescription, itihistory.createddate, 
 		itihistory.modifieddate, itihistory.createduser, itihistory.modifieduser, itihistory.testcollectionid, itihistory.testcollectionname, itihistory.testsessionid, st.enddatetime as administereddate
   		,array_to_string(ARRAY(select sensitivitytag from ititestsessionsensitivitytags ititsst where ititsst.ititestsessionhistoryid = itihistory.id ),',') as sensitivitytags
   		,(select categorycode as testStatus from category where  id = st.status) 
    from ititestsessionhistory itihistory
    join category c on status = c.id
    left join studentstests st on st.testsessionid = itihistory.testsessionid and st.activeflag is true
    WHERE (itihistory.studentid = #{studentId} and itihistory.rosterid = #{rosterId} and itihistory.activeflag = true) 
	order by statusname
  </select>
  
  <resultMap id="ResourceMap" type="edu.ku.cete.domain.ItiTestSessionResourceInfo">
    <result column="testid" jdbcType="BIGINT" property="testId" />
    <result column="testsectionid" jdbcType="BIGINT" property="testSectionId" />
    <result column="filelocation" jdbcType="VARCHAR" property="fileLocation" />
    <result column="filetype" jdbcType="BIGINT" property="fileType" />
    <result column="filename" jdbcType="BIGINT" property="fileName" />
  </resultMap>
  
  <select id="selectResourceByTestSessionId" resultMap="ResourceMap">
	select st.testid as testid, ts.id as testsectionid,tsr.id as stimulusvariantid,
	 sva.filelocation as filelocation, sva.filetype as filetype, sva.filename as filename
	from studentstests st 
	join testsection ts on ts.testid = st.testid
	join testsectionresource tsr on tsr.testsectionid = ts.id
	JOIN stimulusvariantattachment sva on sva.stimulusvariantid = tsr.stimulusvariantid
	where st.testsessionid = #{testSessionId};
  </select>
  
  <select id="selectHistoryTagsByItiSessionHistoryId" resultMap="ExtendedResultMap">
    select c.categoryname as statusName, c.categorycode as statusCode,itihistory.id, itihistory.studentenrlrosterid, itihistory.studentid, itihistory.rosterid, itihistory.name, itihistory.status, itihistory.testid, itihistory.testcollectionid, itihistory.saveddate,
 		itihistory.confirmdate, itihistory.essentialelement, itihistory.linkagelevel, itihistory.leveldescription, itihistory.createddate, 
 		itihistory.modifieddate, itihistory.createduser, itihistory.modifieduser, itihistory.testcollectionid, itihistory.testcollectionname, itihistory.testsessionid, itihistory.claim, itihistory.conceptualarea, itihistory.essentialelementid, st.enddatetime as administereddate
   		,array_to_string(ARRAY(select sensitivitytag from ititestsessionsensitivitytags ititsst where ititsst.ititestsessionhistoryid = itihistory.id ),',') as sensitivitytags
    from ititestsessionhistory itihistory
    join category c on status = c.id
    left join studentstests st on st.testsessionid = itihistory.testsessionid
    WHERE itihistory.id = #{itiTestSessionHistoryId}
   </select>
   
   <select id="selectTestidSensitivityTag" resultMap="ExtendedResultMap">
     select distinct ts.testid as testid, tstv.testletid as testletid 
	 ,array_to_string(ARRAY(select sensitivitytagid from testletsensitivitytag tlst where tlst.testletid = tstv.testletid ),',') as sensitivitytags
	 from testsection ts
	 join testsectionstaskvariants tstv on tstv.testsectionid = ts.id
	 where ts.testid in 
	 <foreach close=")" collection="testIds" item="testId" open="(" separator=",">
       #{testId}
    </foreach>
   </select>
   
   
<resultMap id="StudentMonteCarloRecord" type="edu.ku.cete.domain.StudentItemInfoForMC">
    <result column="studentid" jdbcType="BIGINT" property="studentId" />
    <result column="testid" jdbcType="BIGINT" property="testId" />
     <result column="testletid" jdbcType="BIGINT" property="testletId" />
    <result column="linkagelevel" jdbcType="VARCHAR" property="linkageLevel" />
    <result column="taskvariantid" jdbcType="BIGINT" property="taskVariantId" />
    <result column="response" jdbcType="VARCHAR" property="response" />
    <result column="score" jdbcType="FLOAT" property="score" />
    <result column="taskname" jdbcType="VARCHAR" property="taskName" />
    <result column="maxscore" jdbcType="BIGINT" property="maxScore" />
    <result column="tasktypecode" jdbcType="VARCHAR" property="taskTypeCode" />
    <result column="gradecoursename" jdbcType="VARCHAR" property="gradeCourseName" />
    <result column="nodecode" jdbcType="VARCHAR" property="nodeCode" />
    <result column="correctresponse" jdbcType="VARCHAR" property="correctResponse" />
    <result column="tasksubtype" jdbcType="VARCHAR" property="taskSubType" />
    <result column="responsedatetime" jdbcType="TIMESTAMP" property="responseDateTime" />

  </resultMap>
  
  <select id="selectStudentItemInfoForMC" resultMap="StudentMonteCarloRecord">
			SELECT DISTINCT sr.studentid,
		                sr.externalid AS testid,
		                sr.stestid,
		                sr.testcollectionid,
		                tslt.externalid AS testletid,
		                sr.enddatetime as responsedatetime,
		
		  (SELECT cat.categorycode
		   FROM category cat
		   WHERE cat.id = tv.essentialelementlinkageid) AS linkagelevel,
		                tv.externalid AS taskvariantid,
		                sr.response,
		                sr.score,
		                tv.taskname,
		                tv.maxscore,
		                tt.code AS tasktypecode,
		                gc.name AS gradecoursename,
		                tvlm.nodecode AS nodecode,
		                tt.id AS tasktypeid,
		
		  (SELECT tst.code
		   FROM tasksubtype tst
		   WHERE id = tv.tasksubtypeid) AS tasksubtype,
		                ( CASE
		                      WHEN tt.code='T-F' THEN
		                             (SELECT cast(tvf.foilid AS TEXT)
		                              FROM taskvariantsfoils tvf
		                              WHERE tvf.taskvariantid = tv.id
		                                AND tvf.correctresponse = TRUE)
		                      ELSE tv.scoringdata
		                  END ) AS correctresponse
		FROM
		  (SELECT srs.*,
		          tst.externalid,
		          tst.id AS stestid,
		          tc.id AS testcollectionid,
		          st.enddatetime
		   FROM studentsresponses srs
		   JOIN test tst ON tst.id = srs.testid
		   JOIN testcollectionstests tct ON tct.testid = tst.id
		   JOIN testcollection tc ON tc.id=tct.testcollectionid
		   LEFT JOIN studentstests st ON st.studentid = srs.studentid
		   AND st.testid = tst.id ) sr
		JOIN taskvariant AS tv ON tv.id = sr.taskvariantid
		JOIN testsectionstaskvariants tstv ON tstv.taskvariantid = sr.taskvariantid
		LEFT JOIN testlet tslt ON tslt.id = tstv.testletid
		JOIN gradecourse gc ON tv.gradecourseid = gc.id
		LEFT JOIN taskvariantlearningmapnode tvlm ON tvlm.taskvariantid = tv.id
		JOIN tasktype tt ON tt.id = tv.tasktypeid
		WHERE sr.modifieddate &gt;= #{fromDate}
		  AND sr.modifieddate &lt;= #{toDate}
		  AND sr.testcollectionid IN
		    (SELECT testcollectionid
		     FROM assessmentstestcollections
		     WHERE assessmentid IN
		         (SELECT id
		          FROM assessment
		          WHERE testingprogramid IN
		              (SELECT id
		               FROM testingprogram
		               WHERE programname='Summative'
		                 AND assessmentprogramid =
		                   (SELECT id
		                    FROM assessmentprogram
		                    WHERE programname='Dynamic Learning Maps'))))
		ORDER BY studentid;
   </select>
   
   <select id="selectTestidOnPNP" resultType="java.lang.Long">
	   select testid from testaccessibilityflag where accessibilityflagcode = #{pnpAttribute} and testid in 
		<foreach close=")" collection="testIds" item="testId" open="(" separator=",">
		       #{testId}
		</foreach>
   </select>
   <resultMap id="ItiStudentReport" type="edu.ku.cete.domain.ItiStudentReport">
    	<result column="claimconceptualarea" jdbcType="VARCHAR" property="claimConceptualArea" />
    	<result column="claim" jdbcType="VARCHAR" property="claim" />
    	<result column="conceptualarea" jdbcType="VARCHAR" property="conceptualArea" />
    	
    	<result column="stateid" jdbcType="BIGINT" property="stateID" />
    	<result column="organizationname" jdbcType="VARCHAR" property="stateName" />
    	<result column="pooltype" jdbcType="VARCHAR" property="poolType" />
    	<collection column="claimconceptualarea" javaType="ArrayList" ofType="edu.ku.cete.domain.ItiStudentReportEE" property="itiStudentReportEE">
			<result column="essentialelement" jdbcType="VARCHAR" property="essentialElement" />
			<result column="essentialelementid" jdbcType="TIMESTAMP" property="essentialElementId" />
			<collection column="essentialelement" javaType="ArrayList" ofType="edu.ku.cete.domain.ItiTestSessionHistory" property="itiTestSessionHistory">
				 	<result column="studentid" jdbcType="BIGINT" property="studentId" />
				    <result column="studentenrlrosterid" jdbcType="VARCHAR" property="studentEnrlRosterId" />
				    <result column="rosterid" jdbcType="BIGINT" property="rosterId" />
				    <result column="name" jdbcType="VARCHAR" property="name" />
				    <result column="status" jdbcType="BIGINT" property="status" />
				    <result column="testid" jdbcType="BIGINT" property="testId" />
				    <result column="testcollectionid" jdbcType="BIGINT" property="testCollectionId" />
				    <result column="testcollectionname" jdbcType="VARCHAR" property="testCollectionName" />
				    <result column="essentialelement" jdbcType="VARCHAR" property="essentialElement" />
				    <result column="linkagelevel" jdbcType="VARCHAR" property="linkageLevel" />
				    <result column="leveldescription" jdbcType="VARCHAR" property="levelDescription" />
				    <result column="studentteststatus" property="studentTestStatus" jdbcType="VARCHAR"/>
				    <result column="studtestid" jdbcType="BIGINT" property="studTestID" />
				    <result column="administereddate" jdbcType="BIGINT" property="administeredDate" />
				    <result column="essentialelementid" jdbcType="TIMESTAMP" property="essentialElementId" />
	    	</collection>	
	    </collection>	
   </resultMap>
   <select id="selectByStudentIdAndUnUsedStatus" resultMap="ItiStudentReport">
   		select itih.claim || '|' || itih.conceptualarea as claimconceptualarea, itih.*, st.enddatetime as administereddate 
   		from ititestsessionhistory itih 
		left join studentstests st on st.testsessionid = itih.testsessionid
		where itih.studentid = #{studentId} and itih.status not in (select id from category where categoryname in('Pending', 'ITI Cancel'))
		order by essentialelement asc
   </select>
   
   <select id="selectByStudentIdAndUnUsedStatusAndSubject" resultMap="ItiStudentReport">
   		SELECT s.stateid, org.organizationname, org.pooltype, itih.claim || '|' || itih.conceptualarea as claimconceptualarea, itih.*, st.testid as studTestID, st.enddatetime as administereddate,
   			case when st.status is null then
				(select categoryname from category where id = itih.status) 
			else
   				(select categoryname from category where id = st.status)
   			end  as studentteststatus
   		FROM ititestsessionhistory itih 
   			INNER JOIN blueprintessentialelements bpee on bpee.essentialelementid = itih.essentialelementid
   			INNER JOIN blueprint bp on bp.id = bpee.blueprintid
			LEFT JOIN studentstests st on st.testsessionid = itih.testsessionid AND st.activeflag=true 
			LEFT JOIN enrollment enrl ON enrl.id = st.enrollmentid and enrl.activeflag is true and enrl.currentschoolyear =  #{currentSchoolYear, jdbcType=INTEGER}
			INNER JOIN roster r ON r.id = itih.rosterid and r.activeflag is true and r.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
			INNER JOIN student s ON s.id = itih.studentid AND s.activeflag=true
			INNER JOIN organization org ON org.id = s.stateid AND org.activeflag is true
		WHERE itih.status not in (
			select c.id
			from category c
			join categorytype ct on c.categorytypeid = ct.id
			where ct.typecode = 'IAP_STATUS'
			and c.categorycode in ('CANCELED', 'COMPLETED_WITH_NO_TESTLET')
		)
		and itih.activeflag is true
		AND s.id = #{studentId, jdbcType=BIGINT} 
		AND bp.contentareaid = #{subjectId, jdbcType=BIGINT}
		<if test="testCycleID != null">
	  		and itih.operationaltestwindowid in (
			  select tcy.operationaltestwindowid from testingcycle tcy
			  where tcy.activeflag=true and tcy.id =#{testCycleID,jdbcType=BIGINT})
	  </if>
		order by itih.essentialelement, itih.linkagelevel, st.enddatetime asc
   </select>
   
   
   <!--
   Biyatpragyan Mohanty : bmohanty_sta@ku.edu : US15500 : DLM Class Roster Report - online report
   Get data to build the Roster report for DLM organization by passing school id, roster id and
   list of student ids. 
    -->
   <resultMap id="ItiRosterReportEE" type="edu.ku.cete.domain.report.roster.ItiRosterReportEE">
   		<result column="rosterid" jdbcType="BIGINT" property="rosterId" />
   		<result column="studentid" jdbcType="BIGINT" property="studentId" />
   		<result column="essentialElement" jdbcType="VARCHAR" property="essentialElement" />
   		<result column="essentialElementDesc" jdbcType="VARCHAR" property="essentialElementDesc" />
   		<result column="raLinkageLevel" jdbcType="VARCHAR" property="raLinkageLevel" />
		<result column="raLinkageLevelShortDesc" jdbcType="VARCHAR" property="raLinkageLevelShortDesc" />
		<result column="cigLinkageLevel" jdbcType="VARCHAR" property="cigLinkageLevel" />
		<result column="cigLinkageLevelShortDesc" jdbcType="VARCHAR" property="cigLinkageLevelShortDesc" />
		<result column="studentFirstName" jdbcType="VARCHAR" property="studentFirstName" />   
		<result column="studentMiddleName" jdbcType="VARCHAR" property="studentMiddleName" />
		<result column="studentLastName" jdbcType="VARCHAR" property="studentLastName" />
		<result column="endDateTime" jdbcType="TIMESTAMP" property="endDateTime" />
   </resultMap>
   
   <select id="selectITIDLMEEDetailsByRosterIdAndStudents" resultMap="ItiRosterReportEE">
   		select a.rosterid, a.studentid, split_part(a.essentialelement, ' - ', 1) as essentialElement, substring(a.essentialelement, position(' - ' in a.essentialelement)+3) as essentialElementDesc, 
		b.linkagelevel as raLinkageLevel, b.leveldescription as raLinkageLevelShortDesc, c.linkagelevel as cigLinkageLevel, c.leveldescription as cigLinkageLevelShortDesc,
		d.legalfirstname as studentFirstName, d.legalmiddlename as studentMiddleName, d.legallastname as studentLastName, d.gradeName, b.enddatetime as endDateTime
		from 
		(select distinct ith.rosterid, ith.studentid, ith.essentialelement 
		from ititestsessionhistory ith 
		inner join contentframeworkdetail cfd on ith.essentialelementid = cfd.id
		inner join contentframework cf on cfd.contentframeworkid = cf.id 
		where cf.contentareaid=#{contentAreaId, jdbcType=BIGINT} and 
		ith.studentid in 
		<foreach close=")" collection="studentIds" item="studentId" open="(" separator=",">
		       #{studentId}
		</foreach>
		and ith.activeflag is true
		and ith.status not in (
			select c.id
			from category c
			join categorytype ct on c.categorytypeid = ct.id
			where ct.typecode = 'IAP_STATUS'
			and c.categorycode in ('CANCELED', 'COMPLETED_WITH_NO_TESTLET')
		)
		and ith.rosterid || '-' || ith.studentid in (
								select distinct r.id || '-' || e.studentid as studentId
								from roster r inner join enrollmentsrosters er on r.id = er.rosterid 
								inner join enrollment e on er.enrollmentid = e.id 
								where r.id=#{rosterId,jdbcType=BIGINT}
								AND e.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} 
								and e.attendanceschoolid  = ANY(ARRAY(select id from Organization where id=#{userSelectedOrganizationId, jdbcType=BIGINT} and organizationtypeid=(select id from organizationtype where typecode='SCH')))
								)
		) a 
		
		left join 
		
		(
		
		select ith.rosterid, ith.studentid, ith.essentialelement, ith.linkagelevel, ith.leveldescription, stests.enddatetime as enddatetime
		from ititestsessionhistory ith 
		inner join studentstests stests on ith.studentid = stests.studentid and ith.testcollectionid = stests.testcollectionid and ith.testsessionid = stests.testsessionid 
		where ith.testsessionid is not null and ith.studentid in 
		<foreach close=")" collection="studentIds" item="studentId" open="(" separator=",">
		       #{studentId}
		</foreach> 
		and ith.activeflag is true
		and ith.status not in (
			select c.id
			from category c
			join categorytype ct on c.categorytypeid = ct.id
			where ct.typecode = 'IAP_STATUS'
			and c.categorycode in ('CANCELED', 'COMPLETED_WITH_NO_TESTLET')
		)
		and ith.rosterid=#{rosterId,jdbcType=BIGINT} and ith.studentid || '-' || ith.rosterid || '-' || ith.essentialelement || '-' || stests.enddatetime in 
						(select ith.studentid || '-' || ith.rosterid || '-' || ith.essentialelement || '-' || max(stests.enddatetime) 
							from ititestsessionhistory ith 
							inner join studentstests stests on ith.studentid = stests.studentid 
							and ith.testcollectionid = stests.testcollectionid and ith.testsessionid = stests.testsessionid 
							where ith.studentid in 
							<foreach close=")" collection="studentIds" item="studentId" open="(" separator=",">
		       					#{studentId}
							</foreach>
							 and ith.rosterid=#{rosterId,jdbcType=BIGINT} and stests.enddatetime is not null group by ith.studentid, ith.rosterid, ith.essentialelement 
							)
							
		) b on a.rosterid = b.rosterid and a.studentid = b.studentid and a.essentialelement = b.essentialelement 
		
		
		left join 
		
		(
		select distinct on (ith.studentid,ith.rosterid, ith.essentialelement) ith.rosterid, ith.studentid, ith.essentialelement, ith.linkagelevel, ith.leveldescription
							from ititestsessionhistory ith 
							inner join studentstests stests on ith.studentid = stests.studentid 
							and ith.testcollectionid = stests.testcollectionid and ith.testsessionid = stests.testsessionid 
							where ith.rosterid || '-' || ith.studentid in (
								select distinct r.id || '-' || e.studentid as studentId
								from roster r inner join enrollmentsrosters er on r.id = er.rosterid 
								inner join enrollment e on er.enrollmentid = e.id 
								where r.id=#{rosterId,jdbcType=BIGINT}
								AND e.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} 
								and e.attendanceschoolid  = ANY(ARRAY(select id from Organization where id=#{userSelectedOrganizationId, jdbcType=BIGINT} and organizationtypeid=(select id from organizationtype where typecode='SCH')))
								)
							and ith.activeflag is true
							and ith.status not in (
								select c.id
								from category c
								join categorytype ct on c.categorytypeid = ct.id
								where ct.typecode = 'IAP_STATUS'
								and c.categorycode in ('CANCELED', 'COMPLETED_WITH_NO_TESTLET')
							)
							and stests.enddatetime is null
							order by ith.studentid,ith.rosterid, ith.essentialelement, ith.modifieddate desc
		) c on a.rosterid = c.rosterid and a.studentid = c.studentid and a.essentialelement = c.essentialelement
		
		inner join 

		(select distinct st.id as studentid, st.legalfirstname, st.legalmiddlename, st.legallastname, gc.gradelevel as gradelevel, gc.name as gradeName
			from 
			student st 
			inner join enrollment enrl on st.id = enrl.studentid 
			inner join gradecourse gc on enrl.currentgradelevel = gc.id 
			where enrl.studentid in 
				<foreach close=")" collection="studentIds" item="studentId" open="(" separator=",">
				       #{studentId}
				</foreach>
			AND enrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}  
			and enrl.attendanceschoolid  = ANY(ARRAY(select id from Organization where id=#{userSelectedOrganizationId, jdbcType=BIGINT} 
								and organizationtypeid=(select id from organizationtype where typecode='SCH')))	
		) d on a.studentid = d.studentid
		
		order by d.gradelevel, essentialElement


   </select>
   
   <select id="selectITITestSessionForALevelOtherThanComplete" resultType="java.lang.String">
   	select itsh.name from ititestsessionhistory itsh
	join testsession ts on ts.id = itsh.testsessionid 
	join studentstests st on ts.id = st.testsessionid 
	where itsh.studentId = #{studentId} and itsh.activeflag = true and itsh.essentialelementid = #{essentialElementId}  and itsh.rosterid = #{rosterId} and itsh.linkagelevel = #{level}  and ts.source = #{sourceCode} 
	and st.activeflag = true and st.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid where categorycode in ('unused', 'inprogress') and ct.typecode = 'STUDENT_TEST_STATUS')
    limit 1
   </select>
   
   <update id="unEnrollITIPlansByStudentAndTestsessionId" parameterType="map">
   update ititestsessionhistory set activeflag = false, modifieddate = now(), modifieduser = #{modifiedUserId}, status = #{unEnrollStatusId}
   where studentid = #{studentId} and testsessionid = #{testsessionId}
   </update>
   
   <update id = "unEnrollPendingITIsByEnrollmentId" parameterType="map">
   update ititestsessionhistory set activeflag = false, modifieddate = now(), modifieduser = #{modifiedUserId}, status = #{unEnrollStatusId}
   where studentenrlrosterid in (select id from enrollmentsrosters where enrollmentid = #{enrollmentId})
   and status = (select cat.id from category cat, categorytype ct where ct.id = cat.categorytypeid and cat.categorycode='STARTED' and ct.typecode = 'IAP_STATUS')
   and activeflag is true
   </update>
   
   <update id="unEnrollPendingITIsByEnrlAndRosterId" parameterType="map">
   update ititestsessionhistory set activeflag = false, modifieddate = now(), modifieduser = #{modifiedUserId}, status = #{rosterUnEnrollStatusId}
   where studentenrlrosterid in (select id from enrollmentsrosters where enrollmentid = #{enrollmentId} and rosterid = #{rosterId})
   and status = (select cat.id from category cat, categorytype ct where ct.id = cat.categorytypeid and cat.categorycode='STARTED' and ct.typecode = 'IAP_STATUS')
   and activeflag is true
   </update>   
   
   <update id="transferITIsToNewRosterByEnrlAndOldRosterId" parameterType="map">
	   update ititestsessionhistory 
	   set status = CASE 	WHEN status in (select id from category where categorycode in (
	                          'exitclearunenrolled-STARTED',
   		                      'exitclearunenrolled-COMPLETED_WITH_NO_TESTLET',
   		                      'exitclearunenrolled-COMPLETED_WITH_TESTLET',
   		                      'exitclearunenrolled-CANCELED',
   		                      'rosterunenrolled-STARTED',
   		                      'rosterunenrolled-COMPLETED_WITH_NO_TESTLET',
   		                      'rosterunenrolled-COMPLETED_WITH_TESTLET',
   		                      'rosterunenrolled-CANCELED'
	                        ) and categorytypeid = (select id from categorytype where typecode = 'IAP_STATUS'))
	   						THEN (
	   						  select id
	   						  from category
	   						  where categorycode = (
	   						    select split_part(categorycode, '-', 2)
	   						    from category
	   						    where id = (
	   						      select status
	   						      from ititestsessionhistory
	   						      where id = #{itiTestSessionHistoryId,jdbcType=BIGINT}
	   						    )
	   						    and categorytypeid = (
	   						      select id
	   						      from categorytype
	   						      where typecode = 'IAP_STATUS'
	   						    )
	   						  )
	   						  and categorytypeid = (
	   						    select id
	   						    from categorytype
	   						    where typecode = 'IAP_STATUS'
	   						  )
	   						)
	   						ELSE status 
	   						END,
	   		activeflag = CASE  	WHEN status in (
	   		                      select id
	   		                      from category
	   		                      where categorycode in (
	   		                        'exitclearunenrolled-STARTED',
	   		                        'exitclearunenrolled-COMPLETED_WITH_NO_TESTLET',
	   		                        'exitclearunenrolled-COMPLETED_WITH_TESTLET',
	   		                        'exitclearunenrolled-CANCELED',
	   		                        'rosterunenrolled-STARTED',
	   		                        'rosterunenrolled-COMPLETED_WITH_NO_TESTLET',
	   		                        'rosterunenrolled-COMPLETED_WITH_TESTLET',
	   		                        'rosterunenrolled-CANCELED'
	   		                      )
	   		                      and categorytypeid = (select id from categorytype where typecode = 'IAP_STATUS')
	   		                    )
	   							THEN true
	   							ELSE activeflag
	   							END, 
	   		modifieddate = now(), modifieduser = #{modifiedUserId,jdbcType=BIGINT}, rosterid = #{newRosterId,jdbcType=BIGINT}, 
	   		studentenrlrosterid = (select id from enrollmentsrosters where enrollmentid = #{enrollmentId,jdbcType=BIGINT} and rosterid = #{newRosterId,jdbcType=BIGINT} and activeflag is true)
	   where id = #{itiTestSessionHistoryId,jdbcType=BIGINT}
   </update> 
   
   <select id="getUnenrolledITIsByEnrlAndRosterId" resultMap="BaseResultMap">
	    SELECT itih.* 
		FROM ititestsessionhistory itih
		JOIN enrollmentsrosters er ON itih.studentenrlrosterid = er.id
		WHERE itih.rosterid = #{rosterId}
		AND er.enrollmentid = #{enrollmentId} and er.rosterid = #{rosterId}
		AND itih.status in (select cat.id from category cat, categorytype ct where ct.id = cat.categorytypeid 
							and cat.categorycode in (
								'exitclearunenrolled-STARTED',
								'exitclearunenrolled-COMPLETED_WITH_NO_TESTLET',
								'exitclearunenrolled-COMPLETED_WITH_TESTLET',
								'exitclearunenrolled-CANCELED',
								'rosterunenrolled-STARTED',
								'rosterunenrolled-COMPLETED_WITH_NO_TESTLET',
								'rosterunenrolled-COMPLETED_WITH_TESTLET',
								'rosterunenrolled-CANCELED'
							)
							and ct.typecode = 'IAP_STATUS')
		AND itih.activeflag is false
   </select> 
   
   <select id="getPendingITIsByEnrlAndRosterId" resultMap="BaseResultMap">
	    SELECT itih.* 
		FROM ititestsessionhistory itih
		<!-- commented the activeflag condition because the main use of this is to find plans for a roster that the student isn't on anymore -->
		JOIN enrollmentsrosters er ON itih.studentenrlrosterid = er.id <!--and er.activeflag is true--> 
		WHERE itih.rosterid = #{rosterId}
		AND er.enrollmentid = #{enrollmentId} and er.rosterid = #{rosterId}
		AND itih.status = (select cat.id from category cat, categorytype ct where ct.id = cat.categorytypeid and cat.categorycode='STARTED' and ct.typecode = 'IAP_STATUS')
		AND itih.activeflag is true
   </select> 
   
  <select id="getITIPlansExceptPendingUsingEnrlAndRosterId" resultMap="BaseResultMap">
		SELECT itih.*, stests.status as studentsteststatusid
		FROM ititestsessionhistory itih
		JOIN studentstests stests ON stests.testsessionid = itih.testsessionid AND stests.activeflag is true
		JOIN testsession ts ON ts.id = stests.testsessionid AND ts.activeflag is true
		JOIN enrollmentsrosters er ON itih.studentenrlrosterid = er.id and er.activeflag is true 
		WHERE itih.rosterid = #{rosterId}
		AND er.enrollmentid = #{enrollmentId} and er.rosterid = #{rosterId}
		AND stests.status in (
			select cat.id
			from category cat
			join categorytype ct on ct.id = cat.categorytypeid
			where ct.typecode = 'STUDENT_TEST_STATUS'
			and cat.categorycode in (
				'pending',
				'unused',
				'inprogress',
				'complete',
				'inprogresstimedout'
			)
		)
		AND itih.status in (
			select cat.id
			from category cat, categorytype ct
			where ct.id = cat.categorytypeid
			and ct.typecode = 'IAP_STATUS'
			and cat.categorycode in (
				'STARTED',
				'COMPLETED_WITH_NO_TESTLET',
				'COMPLETED_WITH_TESTLET',
				'CANCELED'
			)
		)
		AND itih.activeflag is true
    	AND ts.source = 'ITI'
   </select> 
   
   <select id="findInactivatedITIPlansByStudentAndTestSession" resultType="Long">
	   	select id from ititestsessionhistory
		where studentid=#{studentId}  
		and status in (
			select id
			from category
			where categorytypeid = (select id from categorytype where typecode = 'IAP_STATUS')
			and categorycode in (
				#{inactivationType} || '-STARTED',
				#{inactivationType} || '-COMPLETED_WITH_NO_TESTLET',
				#{inactivationType} || '-COMPLETED_WITH_TESTLET',
				#{inactivationType} || '-CANCELED'
			)
		) 
		and activeflag = false
		and testsessionid in 
		<foreach close=")" collection="testSessionIds" item="testSessionId" open="(" separator=",">
			#{testSessionId}
		</foreach>		
   </select>
   
   <select id="findInactivatedPendingITIPlansByStudent" resultType="Long">
        <if test="gradeCourseId != null">
	   	   	with grades as (
               	select gc.id
   	            from gradecourse gc
       	        join gradecourse gc_ on gc.abbreviatedname = gc_.abbreviatedname
           	    where gc_.id = #{gradeCourseId,jdbcType=BIGINT}
     	      ),
           	gradebands as (
               	select gb.id
   	            from gradeband gb
       	        join gradebandgradecourse gbgc on gb.id = gbgc.gradebandid
           	    join grades g on gbgc.gradecourseid = g.id
           	)
        </if>
        select distinct iti.id
        from ititestsessionhistory iti
        <if test="gradeCourseId != null">
            join contentframeworkdetail cfd on iti.essentialelementid = cfd.id
            join contentframework cf on cfd.contentframeworkid = cf.id
            left join grades g on cf.gradecourseid = g.id
            left join gradebands gb on cf.gradebandid = gb.id
        </if>
		where iti.studentid = #{studentId}
		and iti.status in (
			select c.id
			from category c
			join categorytype ct on ct.id = c.categorytypeid
			where categorycode = #{inactivationType} || '-STARTED'
			and ct.typecode = 'IAP_STATUS'
		)
		<if test="gradeCourseId != null">
		    and (g.id is not null or gb.id is not null)
		</if> 
		and iti.activeflag = false			
   </select>   
   
   <select id="findITIPlansByStudentAndTestSessionForDeactivation" resultType="Long">
	   	select id from ititestsessionhistory
		where studentid=#{studentId}  
		and status in (
			select c.id
			from category c
			join categorytype ct on ct.id = c.categorytypeid
			where ct.typecode = 'IAP_STATUS'
			and categorycode in ('STARTED', 'COMPLETED_WITH_NO_TESTLET', 'COMPLETED_WITH_TESTLET', 'CANCELED')
		)
		and activeflag = true
		and testsessionid in 
		<foreach close=")" collection="testSessionIds" item="testSessionId" open="(" separator=",">
			#{testSessionId}
		</foreach>   		
   </select>
   
   <select id="findPendingITIPlansByStudentForDeactivation" resultType="Long">
        <if test="gradeCourseId != null">
            with grades as (
                select gc.id
                from gradecourse gc
                join gradecourse gc_ on gc.abbreviatedname = gc_.abbreviatedname
                where gc_.id = #{gradeCourseId,jdbcType=BIGINT}
            ),
            gradebands as (
                select gb.id
                from gradeband gb
                join gradebandgradecourse gbgc on gb.id = gbgc.gradebandid
                join grades g on gbgc.gradecourseid = g.id
            )
        </if>
	   	select distinct iti.id
	   	from ititestsessionhistory iti
	   	<if test="gradeCourseId != null">
	   	    join contentframeworkdetail cfd on iti.essentialelementid = cfd.id
	       	join contentframework cf on cfd.contentframeworkid = cf.id
    	   	left join grades g on cf.gradecourseid = g.id
	   	    left join gradebands gb on cf.gradebandid = gb.id
	   	</if>
		where iti.studentid = #{studentId}  
		and iti.status in (
			select c.id
			from category c
			join categorytype ct on ct.id = c.categorytypeid
			where categorycode = 'STARTED'
			and ct.typecode = 'IAP_STATUS'
		)
		<if test="gradeCourseId != null">
		    and (g.id is not null or gb.id is not null) <!-- must be one -->
		</if>
		and iti.activeflag = true
   </select>
   
  <update id="deactivateByPrimaryKeyWithStatus" parameterType="java.util.Map">	
		update ititestsessionhistory 
		set modifieduser = #{modifiedUserId},
		modifieddate = now(),
		activeflag = false, 
		status=(select id from category 
				where categorycode = #{newStatusPrefix} || 
				(select categorycode from category 
					where id = (select status from ititestsessionhistory where id = #{itiPlanId})  
					and categorytypeid = (select id from categorytype where typecode = 'IAP_STATUS'))
					and categorytypeid = (select id from categorytype where typecode = 'IAP_STATUS'))
		where id = #{itiPlanId}
  </update>   
  <update id="reactivateByPrimaryKeyForGradeChange" parameterType="java.util.Map">	
		update ititestsessionhistory 
		set modifieduser = #{modifiedUserId},
		modifieddate = now(),
		activeflag = true, 
		status=(select id from category 
				where categorycode =  
				(select split_part(categorycode, '-', 2) from category 
					where id = (select status from ititestsessionhistory where id = #{itiPlanId})
					and categorytypeid = (select id from categorytype where typecode = 'IAP_STATUS'))
					and categorytypeid = (select id from categorytype where typecode = 'IAP_STATUS'))
		where id = #{itiPlanId}
  </update>  
   <select id="selectITISessionHistoryByStudentIdAndTestSessionId" resultMap="BaseResultMap">
   	   	select * 
   	   	from ititestsessionhistory 
		where studentid=#{studentId}  
		<!--
		and status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid where categorycode in ('inprogresstimedout', 'inprogress', 'unused') and ct.typecode = 'STUDENT_TEST_STATUS')
		-->
		and activeflag = true
		and testsessionid = #{testSessionId}
   </select>
   
   <select id="getAllStudentITIPlansForEEUnderTeachers" resultMap="ExtendedResultMap">
	  select iti.saveddate, iti.confirmdate, c.categorycode as teststatus, st.enddatetime
	  from ititestsessionhistory iti
	  join category itistatus on iti.status = itistatus.id
	  join roster r on iti.rosterid = r.id
	  join blueprintessentialelements bpee on bpee.essentialelementid = iti.essentialelementid
	  join contentframeworkdetail ee on bpee.essentialelementid = ee.id
	  join blueprint bp on bp.id = bpee.blueprintid
	  left join testsession ts on ts.id = iti.testsessionid and ts.rosterid = iti.rosterid and ts.activeflag = true 
	  left join studentstests st on st.testsessionid = ts.id and st.studentid = iti.studentid and st.activeflag = true
	  left join category c on st.status = c.id
	  where iti.activeflag = true
	  <if test="testCycleID != null">
	  		and iti.operationaltestwindowid in (
			  select tcy.operationaltestwindowid from testingcycle tcy 
			  where tcy.activeflag=true and tcy.id =#{testCycleID,jdbcType=BIGINT})
	  </if>
	  and r.activeflag = true
	  and bp.activeflag = true
	  and r.teacherid = any(values
	  <foreach collection="teacherIds" item="teacherId" open="" separator="," close="">
	    (#{teacherId,jdbcType=BIGINT})
	  </foreach>)
	  and ee.id = #{eeId,jdbcType=BIGINT}
	  and r.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
	  and r.attendanceschoolid = #{schoolId,jdbcType=BIGINT}
	  and bp.contentareaid = #{contentAreaId,jdbcType=BIGINT}
	  and bp.gradecourseid in (select id from gradecourse where abbreviatedname = #{gradeCourseAbbrName,jdbcType=VARCHAR})
	  and bp.criteria = #{criteria,jdbcType=BIGINT}
	  and iti.studentid = #{studentId,jdbcType=BIGINT}
	  and itistatus.categorycode not in (
	    'CANCELED', 'COMPLETED_WITH_NO_TESTLET'
	  )
	  order by c.categorycode, st.enddatetime nulls last, iti.confirmdate nulls last, iti.saveddate nulls last
	</select>
	
	<select id="getMostRecentlyCompletedNonWringITITestSession" resultMap="BaseResultMap">
		WITH studentstestsdetails AS(SELECT st.id as studentstestsid, st.testsessionid, st.enddatetime  from studentstests st 
 				join testsession ts on ts.id = st.testsessionid
 				join enrollment en on en.id = st.enrollmentid and en.activeflag is true
				where st.studentid = #{studentId} and ts.source = 'ITI'
					and ts.schoolyear = #{currentSchoolYear} 
					and st.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid where categorycode='complete' and ct.typecode = 'STUDENT_TEST_STATUS') 
						and st.activeflag is true and ts.activeflag is true)
		select 
			itsh.id, itsh.studentid, itsh.rosterid, itsh.name, itsh.status, itsh.testid, itsh.testcollectionid, 
    		itsh.testcollectionname, itsh.saveddate, itsh.confirmdate,bpee.essentialelement as essentialelement, itsh.linkagelevel, 
    		itsh.leveldescription, itsh.createddate, itsh.modifieddate, itsh.createduser, itsh.modifieduser, itsh.testsessionid, 
    		itsh.studentenrlrosterid, itsh.claim, itsh.conceptualarea, itsh.essentialelementid, itsh.activeflag, 
    		st.studentstestsid as studentstestsid
		from ititestsessionhistory itsh	
		inner join studentstestsdetails st on st.testsessionid = itsh.testsessionid	
		inner join blueprintessentialelements bpee on bpee.essentialelementid = itsh.essentialelementid
		inner join blueprint bp on bp.id = bpee.blueprintid
		where itsh.studentId = #{studentId} and itsh.activeflag = true
			and bp.contentareaid = #{contentAreaId} and bp.writingtestlet is false
			and bp.gradecourseid in (select id from gradecourse where abbreviatedname = #{gradeCourseAbbrName})	
		order by st.enddatetime desc limit 1
   </select>
   
	<select id="getForIAP" parameterType="map" resultMap="BaseResultMap">
		SELECT DISTINCT <!--ON (iti.essentialelementid, iti.linkagelevel)-->
			iti.id, iti.studentid, iti.rosterid, iti.name, iti.status,
			iti.testid, iti.testcollectionid, iti.testcollectionname,
			iti.createddate, iti.saveddate, iti.confirmdate, iti.modifieddate,
			iti.essentialelementid, cfd.contentcode as essentialelement,
			iti.linkagelevel, iti.leveldescription,
			iti.testsessionid,
			iti.claim, iti.conceptualarea,
			iti.activeflag,
			iti.operationaltestwindowid,
			st.id AS studentstestsid, c.categorycode AS studentstestsstatus,
			st.startdatetime as studentstestsstarttime, st.enddatetime as studentstestsendtime,
			itic.categorycode AS statuscode,
			(
			    coalesce(sum(sr.score) OVER (PARTITION BY iti.id, st.id), 0.0)  /  sum(tv.maxscore) OVER (PARTITION BY iti.id, st.id)
			) > 0.8 AS mastered
		FROM ititestsessionhistory iti
		JOIN category itic ON iti.status = itic.id
		JOIN contentframeworkdetail cfd ON iti.essentialelementid = cfd.id
		LEFT JOIN testsession ts ON iti.testsessionid = ts.id AND ts.activeflag IS TRUE
		LEFT JOIN studentstests st ON ts.id = st.testsessionid AND iti.studentid = st.studentid AND st.activeflag IS TRUE
		LEFT JOIN category c ON st.status = c.id
		LEFT JOIN test t ON st.testid = t.id
		LEFT JOIN testsection tsec ON t.id = tsec.testid
		LEFT JOIN testsectionstaskvariants tstv ON tsec.id = tstv.testsectionid
		LEFT JOIN taskvariant tv ON tstv.taskvariantid = tv.id
		LEFT JOIN studentstestsections sts ON st.id = sts.studentstestid AND sts.activeflag IS TRUE
		LEFT JOIN studentsresponses sr
		    ON sts.id = sr.studentstestsectionsid
		    AND tv.id = sr.taskvariantid
		    AND sr.activeflag IS TRUE
		WHERE iti.activeflag IS TRUE
		AND iti.studentid = #{studentId,jdbcType=BIGINT}
		AND iti.rosterid = #{rosterId,jdbcType=BIGINT}
		AND iti.studentenrlrosterid = #{enrollmentsRostersId,jdbcType=BIGINT}
		AND iti.operationaltestwindowid = #{operationalTestWindowId,jdbcType=BIGINT}
		ORDER BY iti.essentialelementid, iti.linkagelevel, iti.id <!--DESC-->
	</select>
	
	<select id="getForIAPByContentFrameworkDetailIdAndLinkageLevel" parameterType="map" resultMap="BaseResultMap">
		SELECT DISTINCT
			iti.id, iti.studentid, iti.rosterid, iti.name, iti.status,
			iti.testid, iti.testcollectionid, iti.testcollectionname,
			iti.createddate, iti.saveddate, iti.confirmdate, iti.modifieddate,
			iti.essentialelementid, cfd.contentcode as essentialelement,
			iti.linkagelevel, iti.leveldescription,
			iti.testsessionid,
			iti.claim, iti.conceptualarea,
			iti.activeflag,
			iti.operationaltestwindowid,
			st.id AS studentstestsid, c.categorycode AS studentstestsstatus,
			st.startdatetime as studentstestsstarttime, st.enddatetime as studentstestsendtime,
			itic.categorycode AS statuscode,
			(
			    coalesce(sum(sr.score) OVER (PARTITION BY iti.id, st.id), 0.0)  /  sum(tv.maxscore) OVER (PARTITION BY iti.id, st.id)
			) > 0.8 AS mastered
		FROM ititestsessionhistory iti
		JOIN category itic ON iti.status = itic.id
		JOIN contentframeworkdetail cfd ON iti.essentialelementid = cfd.id
		LEFT JOIN testsession ts ON iti.testsessionid = ts.id AND ts.activeflag IS TRUE
		LEFT JOIN studentstests st ON ts.id = st.testsessionid AND iti.studentid = st.studentid AND st.activeflag IS TRUE
		LEFT JOIN category c ON st.status = c.id
		LEFT JOIN test t ON st.testid = t.id
		LEFT JOIN testsection tsec ON t.id = tsec.testid
		LEFT JOIN testsectionstaskvariants tstv ON tsec.id = tstv.testsectionid
		LEFT JOIN taskvariant tv ON tstv.taskvariantid = tv.id
		LEFT JOIN studentstestsections sts ON st.id = sts.studentstestid AND sts.activeflag IS TRUE
		LEFT JOIN studentsresponses sr
		    ON sts.id = sr.studentstestsectionsid
		    AND tv.id = sr.taskvariantid
		    AND sr.activeflag IS TRUE
		WHERE iti.activeflag IS TRUE
		AND iti.studentid = #{studentId,jdbcType=BIGINT}
		AND iti.rosterid = #{rosterId,jdbcType=BIGINT}
		AND iti.studentenrlrosterid = #{enrollmentsRostersId,jdbcType=BIGINT}
		AND iti.operationaltestwindowid = #{operationalTestWindowId,jdbcType=BIGINT}
		AND cfd.id = #{contentFrameworkDetailId,jdbcType=BIGINT}
		AND iti.linkagelevel = #{linkageLevel,jdbcType=VARCHAR}
		ORDER BY iti.id
	</select>
	
	<update id="deactivateStudentsTestsByITIId" parameterType="map">
		UPDATE studentstests
		SET modifieddate = now(),
		modifieduser = #{userId,jdbcType=BIGINT},
		activeflag = FALSE
		WHERE activeflag IS TRUE
		AND id IN (
			SELECT st.id
			FROM ititestsessionhistory iti
			JOIN testsession ts ON iti.testsessionid = ts.id AND ts.activeflag IS TRUE
			JOIN studentstests st ON ts.id = st.testsessionid AND st.activeflag IS TRUE
			WHERE iti.id = #{itiId,jdbcType=BIGINT}
		)
	</update>
	
		<select id="selectResourceByTestSessionHistoryId" resultMap="ResourceMap">
	select distinct st.testid as testid, tsc.id as testsectionid,tsr.id as stimulusvariantid,
	 sva.filelocation as filelocation, sva.filetype as filetype, sva.filename as filename
	FROM ititestsessionhistory iti
		INNER JOIN testsession ts ON iti.testsessionid = ts.id AND ts.activeflag IS TRUE
		INNER JOIN studentstests st ON ts.id = st.testsessionid AND iti.studentid = st.studentid AND st.activeflag IS true
		INNER JOIN testsection tsc on tsc.testid = st.testid
		INNER JOIN testsectionresource tsr on tsr.testsectionid = tsc.id
		INNER JOIN stimulusvariantattachment sva on sva.stimulusvariantid = tsr.stimulusvariantid	
	WHERE iti.activeflag IS TRUE
	AND iti.id = #{itiId,jdbcType=BIGINT}
  </select>

  <resultMap id="BrailleResourceMap" type="edu.ku.cete.domain.StudentTestResourceInfo">
		<result column="studentstestsid" jdbcType="BIGINT" property="studentsTestsId" />
		<result column="studentid" jdbcType="BIGINT" property="studentId" />
	    <result column="testid" jdbcType="BIGINT" property="testId" />
		<result column="testsessionid" jdbcType="BIGINT" property="testSessionId" />
	    <result column="filelocation" jdbcType="VARCHAR" property="fileLocation" />
	    <result column="filetype" jdbcType="BIGINT" property="fileType" />
	    <result column="filename" jdbcType="BIGINT" property="fileName" />
	</resultMap>

	<select id="getBrailleResourceByTestSessionHistoryId" resultMap="BrailleResourceMap">
	select distinct st.id, st.studentid, st.testid as testid, ts.id as testSessionId,
	 	cg.id, bac.id,	acf.filelocation as filelocation,  bac.brailleabbreviation as filetype, acf.filename as filename
	FROM ititestsessionhistory iti
		INNER JOIN testsession ts ON iti.testsessionid = ts.id AND ts.activeflag IS TRUE
		INNER JOIN studentstests st ON ts.id = st.testsessionid AND iti.studentid = st.studentid AND st.activeflag IS true
	 	INNER JOIN contentgroup cg on cg.testid = st.testid
		INNER JOIN brailleaccommodation bac on bac.contentgroupid = cg.id 
		INNER JOIN accessibilityfile acf on acf.id = bac.accessibilityfileid
		INNER JOIN studentprofileitemattributevalue spiav on spiav.studentid = st.studentid and spiav.activeflag = true
		INNER JOIN profileItemAttributenameAttributeContainer pianc ON pianc.id = spiav.profileitemattributenameattributecontainerid and pianc.activeflag is true
		INNER JOIN profileitemattributecontainer piac ON pianc.attributecontainerid = piac.id and piac.activeflag is true and piac.attributecontainer = 'Braille'
		INNER JOIN profileitemattribute pia on pia.id = pianc.attributenameid and pia.activeflag is true and pia.attributename in ('ebaeFileType', 'uebFileType') 
		and spiav.selectedvalue = 'true' and lower(bac.brailleabbreviation) = left(pia.attributename, -8)
	 where st.activeflag is true AND st.enddatetime is null AND	
	iti.activeflag IS TRUE
	AND iti.id = #{itiId,jdbcType=BIGINT}
  </select>
  
</mapper>
