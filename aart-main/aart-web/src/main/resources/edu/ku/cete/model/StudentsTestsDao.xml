<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.ku.cete.model.StudentsTestsDao" >
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.StudentsTests" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="studentid" property="studentId" jdbcType="BIGINT" />
    <result column="testid" property="testId" jdbcType="BIGINT" />
    <result column="testcollectionid" property="testCollectionId" jdbcType="BIGINT" />
    <result column="testsessionid" property="testSessionId" jdbcType="BIGINT"/>
    <result column="status" property="status" jdbcType="BIGINT"/>
    <result column="enrollmentid" property="enrollmentId" jdbcType="BIGINT"/>
    <result column="previousstudentstestid" property="predecessorStudentsTestId" jdbcType="BIGINT" />
    <result column="scoringassignmentid" property="scoringAssignmentId" jdbcType="BIGINT" />
    <result column="currenttestnumber" property="currentTestNumber"/>
    <result column="numberoftestsrequired" property="numberOfTestsRequired"/>
  </resultMap>
  <sql id="Example_Where_Clause" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    id, studentid, testid, testcollectionid, testsessionid, status, enrollmentid,scoringassignmentid, currenttestnumber, numberoftestsrequired
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="edu.ku.cete.domain.StudentsTestsExample" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.studentstests
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    select 
    <include refid="Base_Column_List" />
    from public.studentstests
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    delete from public.studentstests
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="edu.ku.cete.domain.StudentsTestsExample" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    delete from public.studentstests
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  
  <update id="deleteByStudentsTestsIds" parameterType="java.lang.Long" >   
    UPDATE public.studentstests  
    set activeflag = false, 
    	status=(select c.id from category c inner join categorytype ct on c.categorytypeid=ct.id where ct.typecode='STUDENT_TEST_STATUS' and categorycode='complete'),
    	modifieddate = now(),
		modifieduser = #{modifiedUser}
    where id in    
	<foreach collection="studentsTestsIds" item="studentsTestsId" open="(" close=")" separator="," >
		#{studentsTestsId}
	</foreach>
  </update>
  
  <update id="unenrollByStudentsTestsId">   
    UPDATE public.studentstests  set activeflag=false,modifieddate=now(),
    <if test="userId != null">
    	modifieduser=#{userId,jdbcType=BIGINT},
    </if> 
    status=(select c.id from category c inner join categorytype ct on c.categorytypeid=ct.id 
    where ct.typecode='STUDENT_TEST_STATUS' and categorycode=#{statusCode, jdbcType=VARCHAR})
    where id = #{studentsTestsId, jdbcType=BIGINT}
  </update>  
  
  <update id="reEnrollByStudentsIdAndSessionId" parameterType="java.lang.Long" >   
    UPDATE public.studentstests  
    set activeflag = true, 
	    status=(select c.id from category c inner join categorytype ct on c.categorytypeid=ct.id where ct.typecode='STUDENT_TEST_STATUS' and categorycode='unused'),
	    modifieddate = now(),
		modifieduser = (select id from aartuser where username = 'cetesysadmin')
    where studentid =  #{studentId,jdbcType=BIGINT}  and testsessionid = #{testSessionId, jdbcType=BIGINT} 
  </update>
  
  
  <insert id="insert" parameterType="edu.ku.cete.domain.StudentsTests" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    insert into public.studentstests (studentid, testid, 
      testcollectionid, testsessionid, status, ticketno, createddate, createduser, activeflag, modifieddate, modifieduser, enrollmentid, finalbandid, previousstudentstestid,
      currenttestnumber, numberoftestsrequired)
    values (#{studentId,jdbcType=BIGINT}, #{testId,jdbcType=BIGINT}, 
      #{testCollectionId,jdbcType=BIGINT}, #{testSessionId, jdbcType=BIGINT}, #{status, jdbcType=BIGINT}, #{ticketNo}, #{createdDate}, #{createdUser}, 
      #{activeFlag}, now(),#{modifiedUser}, #{enrollmentId}, #{finalBandId} , #{previousStudentsTestId, jdbcType=BIGINT},
      #{currentTestNumber}, #{numberOfTestsRequired})
  </insert>
  <insert id="insertInterim" parameterType="edu.ku.cete.domain.StudentsTests" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
	insert into public.studentstests (studentid, testid,
	testcollectionid, testsessionid, status, ticketno, createddate, createduser, activeflag,
	modifieddate, modifieduser, enrollmentid, finalbandid,
	previousstudentstestid)
	values (#{studentId,jdbcType=BIGINT}, #{testId,jdbcType=BIGINT},
	#{testCollectionId,jdbcType=BIGINT}, #{testSessionId, jdbcType=BIGINT},
	#{status, jdbcType=BIGINT}, #{ticketNo}, #{createdDate},
	#{createdUser},
	#{activeFlag}, now(),#{modifiedUser}, (select id from enrollment where
	studentid=#{studentId,jdbcType=BIGINT} and currentschoolyear=#{currentSchoolYear, jdbcType=BIGINT} order by modifieddate desc limit 1),
	#{finalBandId} , #{previousStudentsTestId, jdbcType=BIGINT});
  </insert>
  <insert id="insertSelective" parameterType="edu.ku.cete.domain.StudentsTests" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    insert into public.studentstests
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        studentid,
      </if>
      <if test="testId != null" >
        testid,
      </if>
      <if test="testCollectionId != null" >
        testcollectionid,
      </if>
      <if test="testSessionId != null">
        testSessionId,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="enrollmentId != null">
        enrollmentid,
      </if>
      <if test="currentTestNumber != null">
      	currenttestnumber,
      </if>
      <if test="numberOfTestsRequired != null">
      	numberoftestsrequired,
      </if>
      createddate, 
	  createduser, 
	  activeflag,
	  modifieddate, 
	  modifieduser,
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="testId != null" >
        #{testId,jdbcType=BIGINT},
      </if>
      <if test="testCollectionId != null" >
        #{testCollectionId,jdbcType=BIGINT},
      </if>
      <if test="testSessionId != null">
        #{testSessionId, jdbcType=BIGINT},
      </if>
      <if test="status != null">
        #{status, jdbcType=BIGINT},
      </if>
      <if test="enrollmentId != null">
        #{enrollmentId, jdbcType=BIGINT},
      </if>
       <if test="currentTestNumber != null">
      	#{currentTestNumber}
      </if>
      <if test="numberOfTestsRequired != null">
      	#{numberOfTestsRequired}
      </if>
      #{createdDate},
	  #{createdUser},
	  #{activeFlag},
	  now(),
	  #{modifiedUser},
      
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.ku.cete.domain.StudentsTestsExample" resultType="java.lang.Integer" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    select count(*) from public.studentstests
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    update public.studentstests
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.studentId != null" >
        studentid = #{record.studentId,jdbcType=BIGINT},
      </if>
      <if test="record.testId != null" >
        testid = #{record.testId,jdbcType=BIGINT},
      </if>
      <if test="record.testCollectionId != null" >
        testcollectionid = #{record.testCollectionId,jdbcType=BIGINT},
      </if>
      <if test="record.testSessionId != null">
        testsessionid = #{record.testSessionId, jdbcType=BIGINT},
      </if>
      <if test="record.status != null">
        status = #{record.status, jdbcType=BIGINT},
      </if>
      <if test="record.enrollmentId != null">
        enrollmentid = #{record.enrollmentId, jdbcType=BIGINT},
      </if>
      modifieddate = now(),
	  modifieduser = #{record.modifiedUser},
	  activeflag = #{record.activeFlag},
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    update public.studentstests
    set id = #{record.id,jdbcType=BIGINT},
      studentid = #{record.studentId,jdbcType=BIGINT},
      testid = #{record.testId,jdbcType=BIGINT},
      testcollectionid = #{record.testCollectionId,jdbcType=BIGINT},
      testsessionid = #{record.testSessionId, jdbcType=BIGINT},
      status = #{record.status, jdbcType=BIGINT},
      modifieddate = now(),
      modifieduser = #{record.modifiedUser},
      activeflag = #{record.activeFlag},
      enrollmentid = #{record.enrollmentId, jdbcType=BIGINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateStatusByExample" parameterType="map" >
    update public.studentstests
    set 
      status = #{record.status, jdbcType=BIGINT},
      modifieddate = now(),
      modifieduser = #{record.modifiedUser},
      activeflag = #{record.activeFlag}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>

  <update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.StudentsTests" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    update public.studentstests
    <set >
      <if test="studentId != null" >
        studentid = #{studentId,jdbcType=BIGINT},
      </if>
      <if test="testId != null" >
        testid = #{testId,jdbcType=BIGINT},
      </if>
      <if test="testCollectionId != null" >
        testcollectionid = #{testCollectionId,jdbcType=BIGINT},
      </if>
      <if test="testSessionId != null">
        testsessionid = #{testSessionId, jdbcType=BIGINT},
      </if>
      <if test="status != null">
        status = #{status, jdbcType=BIGINT},
      </if>
      <if test="enrollmentId != null">
        enrollmentid = #{enrollmentId, jdbcType=BIGINT},
      </if>
      <if test="previousStudentsTestId != null">
      	previousstudentstestid = #{previousStudentsTestId, jdbcType=BIGINT},
      </if>
      
      modifieddate = now(),
	  modifieduser = #{modifiedUser},
	  activeflag = #{activeFlag}
   </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.StudentsTests" >
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Wed Sep 12 16:15:10 CDT 2012. -->
    update public.studentstests
    set studentid = #{studentId,jdbcType=BIGINT},
      testid = #{testId,jdbcType=BIGINT},
      testcollectionid = #{testCollectionId,jdbcType=BIGINT},
      testsessionid = #{testSessionId, jdbcType=BIGINT},
      status = #{status, jdbcType=BIGINT},
      modifieddate = now(),
	  modifieduser = #{modifiedUser},
	  activeflag = #{activeFlag},
	  enrollmentid = #{enrollmentId, jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <resultMap id="ExpandedResultMap" type="edu.ku.cete.domain.StudentsTests">
    <id column="studentstests.id" property="id" jdbcType="BIGINT" />
    <result column="studentstests.studentid" property="studentId" jdbcType="BIGINT" />
    <result column="studentstests.testid" property="testId" jdbcType="BIGINT" />
    <result column="studentstests.testcollectionid" property="testCollectionId" jdbcType="BIGINT"/>
    <result column="studentstests.testsessionid" property="testSessionId" jdbcType="BIGINT"/>
    <result column="studentstests.status" property="status" jdbcType="BIGINT"/>
    <result column="studentstests.enrollmentid" property="enrollmentId" jdbcType="BIGINT"/>
  </resultMap>
  <sql id="Expanded_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Expanded_Column_List">
    studentstests.id, studentstests.studentid, studentstests.testid, studentstests.testcollectionid, studentstests.testsessionid, studentstests.status,studentstests.enrollmentid
  </sql>

  <resultMap type="edu.ku.cete.domain.StudentsTests" id="manageTestSessionMap">
    <id column="id" property="id"/>
    <result column="studentid" property="studentId"/>
    <result column="testid" property="testId"/>
    <result column="testsession" property="testSessionId"/>
    <result column="testcollectionid" property="testCollectionId"/>
    <result column="status" property="status"/>
    <result column="enrollmentid" property="enrollmentId"/>
    <result column="testSession.id" property="testSessionId"/>
    <association property="testSession" javaType="edu.ku.cete.domain.TestSession">
        <id column="testSession.id" property="id"/>
        <result column="testSession.rosterId" property="rosterId"/>
        <result column="testSession.name" property="name"/>
        <result column="testSession.status" property="status"/>
        <result column="testSession.stageid" property="stageId"/>
        <result column="testSession.stagecode" property="stageCode"/>
    </association>    
  </resultMap>
  <select id="findByAssessmentProgramAndRoster" resultMap="manageTestSessionMap" parameterType="map">
    select st.id, st.studentid, st.testid, st.testsessionid, st.testcollectionid, st.status,st.enrollmentid,
        ts.id as "testSession.id", ts.rosterid as "testSession.rosterId", ts.name as "testSession.name", ts.status as "testSession.status"
    from testingprogram tp join assessment a on a.testingprogramid = tp.id 
        join assessmentstestcollections atc on a.id = atc.assessmentid
        join testcollection tc on tc.id = atc.testcollectionid
        join studentstests st on atc.testcollectionid = st.testcollectionid
        join testsession ts on st.testsessionid = ts.id
        left join category ca on ts.status = ca.id
    where (ca.id != (select id from category where categorycode = #{status})
       or ts.status is null)
       and ts.rosterid = #{rosterId} and st.activeflag=true
       and tp.assessmentprogramid = #{assessmentProgramId};
  </select>

  <select id="selectByExampleAssessmentIdAndRoster" resultMap="BaseResultMap" parameterType="map">
		<!-- TODO remove the distinct re-write the query. -->
    select 
    distinct
    <include refid="Expanded_Column_List" />
    from studentstests join assessmentstestcollections atc on studentstests.testcollectionid = atc.testcollectionid  and studentstests.activeflag=true
    join assessment a on atc.assessmentid = a.id join testingprogram tp on a.testingprogramid = tp.id
    join testsession ts on studentstests.testsessionid = ts.id
    <if test="_parameter != null" >
      <include refid="Expanded_Example_Where_Clause" />
      AND a.id = #{assessmentId}
      AND ts.rosterId = #{rosterId}
      AND (ts.status != #{statusId} or ts.status is null)
    </if>
    <if test="_parameter == null">
      WHERE a.id = #{assessmentId}
      AND ts.rosterId = #{rosterId}
      AND (ts.status != (select id from category where categorycode = #{status}) or ts.status is null)
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>

  <select id="findByTestSession" resultType="StudentsTests" parameterType="long">
		SELECT
		<include refid="Expanded_Column_List" />
		, stu.id as "student.id",
     stu.legalfirstname as "student.legalFirstName", stu.legallastname as "student.legalLastName",
    stu.statestudentidentifier as "student.stateStudentIdentifier",
     stu.username as "student.username", stu.password as "student.password",
      t.id as "test.id", t.testname as "test.testname"
    FROM studentstests left join test t on t.id = studentstests.testid, student stu
    WHERE studentstests.studentid = stu.id and studentstests.activeflag=true
        and studentstests.testsessionid = #{testSessionId}
  </select>
  
	<!-- TODO 1.Remove the is null check on status when retrieving TestSession 2. Remove the join with category table as id is already in hand. -->
  <select id="findByAssessmentIdAndRoster" resultMap="manageTestSessionMap" parameterType="map">
	    SELECT    st.id                            ,
	          st.studentid                         ,
	          st.testid                            ,
	          st.testsessionid                     ,
	          st.testcollectionid                  ,
	          st.status                            ,
	          st.enrollmentid					   ,
	          ts.id       AS "testSession.id"      ,
	          ts.rosterid AS "testSession.rosterId",
	          ts.name     AS "testSession.name"    ,
	          ts.status   AS "testSession.status"
		FROM      testingprogram tp
		          JOIN assessment a
		          ON        a.testingprogramid = tp.id
		          JOIN assessmentstestcollections atc
		          ON        a.id = atc.assessmentid
		          JOIN testcollection tc 
		          ON tc.id = atc.testcollectionid
		          JOIN studentstests st
		          ON        atc.testcollectionid = st.testcollectionid
		          JOIN testsession ts
		          ON        st.testsessionid = ts.id
		          LEFT JOIN category ca
		          ON        ts.status = ca.id
		WHERE     (
		                    ca.id != #{statusId}
		          OR        ts.status IS NULL
		          )
		AND       ts.rosterid            = #{rosterId} and st.activeflag=true
		AND       a.id                   = #{assessmentId};
  </select>
  
  <select id="getByStudentName" resultType="java.lang.Long">
	  	SELECT testsessionid
		FROM studentstests st JOIN student s ON st.studentid = s.id
			JOIN test t ON st.testid = t.id
			JOIN testcollection tc ON st.testcollectionid = tc.id
 		WHERE  st.activeflag=true AND ( 
 				(s.statestudentidentifier||'') ilike #{studentNameKeyword}
	  			OR s.legalfirstname ilike #{studentNameKeyword}
	  			OR s.legalmiddlename ilike #{studentNameKeyword}
	  			OR s.legallastname ilike #{studentNameKeyword}
	  		) AND (
	  			t.testname ilike #{testNameKeyword}
	  			OR tc.name ilike #{testNameKeyword}
	  		)	AND (
		  		s.id =ANY(ARRAY 
				(select studentid from enrollment where attendanceschoolid =ANY(ARRAY 
					(select id from organization_Children(#{organizationId})))
				))
	  		)	
  </select>
  
  <select id="findByTestSessionAndStudentId" resultType="StudentsTests" parameterType="long">
		SELECT
		<include refid="Expanded_Column_List" />
		, stu.id as "student.id",
     stu.legalfirstname as "student.legalFirstName", stu.legallastname as "student.legalLastName",
    stu.statestudentidentifier as "student.stateStudentIdentifier",
     stu.username as "student.username", stu.password as "student.password",
      t.id as "test.id", t.testname as "test.testname",studentstests.enddatetime
    FROM studentstests 
    join testsession ts on studentstests.testsessionid = ts.id
    left join test t on t.id = studentstests.testid, student stu
    WHERE studentstests.studentid = stu.id and studentstests.activeflag=true
        and studentstests.testsessionid = #{testSessionId}
        and studentstests.studentid = #{studentId}
  </select>
  
  <select id="findByTestAndStudentId" resultType="StudentsTests" parameterType="long">
		SELECT
		<include refid="Expanded_Column_List" />
		, stu.id as "student.id",
     stu.legalfirstname as "student.legalFirstName", stu.legallastname as "student.legalLastName",
    stu.statestudentidentifier as "student.stateStudentIdentifier",
     stu.username as "student.username", stu.password as "student.password",
      t.id as "test.id", t.testname as "test.testname"
    FROM studentstests left join test t on t.id = studentstests.testid, student stu
    WHERE studentstests.studentid = stu.id and studentstests.activeflag=true
        and studentstests.testid = #{testId}
        and studentstests.studentid = #{studentId}
  </select>
  
  <select id="getByStateStudentIdAndTest" resultType="StudentsTests" parameterType="long">
    SELECT st.id, st.studentid, st.testid, 
    	st.testcollectionid, st.testsessionid, st.status, st.enrollmentid,
    	stu.id as "student.id",
    	stu.legalfirstname as "student.legalFirstName", stu.legallastname as "student.legalLastName",
     	stu.statestudentidentifier as "student.stateStudentIdentifier",
     	stu.username as "student.username", stu.password as "student.password",
     	t.id as "test.id", t.testname as "test.testname"
    FROM studentstests st 
    	JOIN student stu ON st.studentid = stu.id
		JOIN test t ON st.testid = t.id
		JOIN enrollment enrl ON stu.id = enrl.studentid
    WHERE t.id = #{testId} and st.activeflag=true
        and stu.statestudentidentifier = #{stateStudentIdentifier}
        and enrl.attendanceschoolid = #{attendanceSchoolId}
  </select>
  
  <select id="selectByEnrollmentId" resultType="java.lang.Long">
		 	SELECT st.id
			FROM studentstests st
			WHERE st.enrollmentid = #{enrollmentId} and activeflag=true
			ORDER BY st.id desc
  </select>
   
  <select id="findByEnrollmentId" resultType="StudentsTests" parameterType="long">
		SELECT
		<include refid="Expanded_Column_List" />
    FROM studentstests 
    WHERE activeflag=true and enrollmentid = #{enrollmentId}
  </select>
  
 <select id="findByEnrollmentIdWithActiveOTW" resultType="StudentsTests">
    SELECT distinct  st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid, 
    ts.id as "testSession.id", ts.rosterid as "testSession.rosterId", ts.name as "testSession.name", 
    ts.status as "testSession.status",ts.stageid as "testSession.stageid", (select code from stage where id = ts.stageid) as "testSession.stagecode"
    FROM studentstests st
    join testsession ts on st.testsessionid = ts.id
    join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
    WHERE st.activeflag=true and st.enrollmentid = #{enrollmentId}
    and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
  </select>
  
  <select id="getTestSessionsForDLDAutomationWithinActiveOTW" resultType="StudentsTests">
		(SELECT
		<include refid="Expanded_Column_List" />,
		studentstests.currenttestnumber, ts.source as "testSession.source"
    FROM studentstests
    JOIN testsession ts on studentstests.testsessionid = ts.id and ts.activeflag is true
	JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag is true
    WHERE studentstests.activeflag=true and ts.rosterid = #{rosterId}
    and studentstests.enrollmentid = #{enrollmentId}
    and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
    AND studentstests.status in (select cat.id from category cat join categorytype ct on ct.id = cat.categorytypeid where cat.categorycode in ('pending', 'unused', 'inprogress', 'complete', 'inprogresstimedout') and ct.typecode = 'STUDENT_TEST_STATUS')
	and ts.source in ('MASTBATCH', 'BATCHAUTO', 'MABATCH', 'MANUAL', 'FIXBATCH', 'ITI')
	order by studentstests.id)
	union
		(SELECT
		<include refid="Expanded_Column_List" />,
		studentstests.currenttestnumber, ts.source as "testSession.source"
    FROM studentstests
    JOIN testsession ts on studentstests.testsessionid = ts.id and ts.activeflag is false
	JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag is true
    WHERE studentstests.activeflag=false and ts.rosterid = #{rosterId}
    and studentstests.enrollmentid = #{enrollmentId}
    and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
    AND studentstests.status in (select cat.id from category cat join categorytype ct on ct.id = cat.categorytypeid where cat.categorycode in ('exitclearunenrolled-complete','exitclearunenrolled-inprogresstimedout', 'exitclearunenrolled-inprogress', 'exitclearunenrolled-pending','exitclearunenrolled-unused','rosterunenrolled-inprogresstimedout','rosterunenrolled-inprogress','rosterunenrolled-unused','rosterunenrolled-pending','rosterunenrolled-complete') and ct.typecode = 'STUDENT_TEST_STATUS')
	and ts.source in ('MASTBATCH', 'BATCHAUTO', 'MABATCH', 'MANUAL', 'FIXBATCH', 'ITI')
	order by studentstests.id)
	union
		(SELECT
		<include refid="Expanded_Column_List" />,
		studentstests.currenttestnumber, ts.source as "testSession.source"
    FROM studentstests
    JOIN testsession ts on studentstests.testsessionid = ts.id and ts.activeflag is true
	JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag is true
    WHERE studentstests.activeflag=true and ts.rosterid = #{rosterId}
    and studentstests.enrollmentid = #{enrollmentId}
    and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
    AND studentstests.status in (select cat.id from category cat join categorytype ct on ct.id = cat.categorytypeid where cat.categorycode in ('unused') and ct.typecode = 'STUDENT_TEST_STATUS')
	and ts.source in ('RESEARCHSURVEY')
	order by studentstests.id)
	union
		(SELECT
		<include refid="Expanded_Column_List" />,
		studentstests.currenttestnumber, ts.source as "testSession.source"
    FROM studentstests
    JOIN testsession ts on studentstests.testsessionid = ts.id and ts.activeflag is false
	JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag is true
    WHERE studentstests.activeflag=false and ts.rosterid = #{rosterId}
    and studentstests.enrollmentid = #{enrollmentId}
    and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
    AND studentstests.status in (select cat.id from category cat join categorytype ct on ct.id = cat.categorytypeid where cat.categorycode in ('exitclearunenrolled-unused','rosterunenrolled-unused') and ct.typecode = 'STUDENT_TEST_STATUS')
	and ts.source in ('RESEARCHSURVEY')
	order by studentstests.id)
  </select>    
  
  <select id="findByEnrollmentRosterWithActiveOTW" resultType="StudentsTests">
		SELECT
		<include refid="Expanded_Column_List" />,
		studentstests.currenttestnumber, ts.source as "testSession.source"
    FROM studentstests 
    join testsession ts on studentstests.testsessionid = ts.id
    join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
    WHERE studentstests.activeflag=true and ts.rosterid = #{rosterId}
    and studentstests.enrollmentid = #{enrollmentId}
    and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
  </select>    
  
  <select id="findByEnrollmentIdTestTypeCodeSubjectAreaCode" resultType="StudentsTests">
		SELECT distinct
		<include refid="Expanded_Column_List" />
		from studentstests 
		join testcollection tc on studentstests.testcollectionid = tc.id
		join testsession ts on ts.id = studentstests.testsessionid
		join enrollment en on en.id = studentstests.enrollmentid
		join contentarea ca on ca.id = tc.contentareaid
		inner join enrollmenttesttypesubjectarea ettsa 
		on ettsa.enrollmentid = en.id
		inner join testtypesubjectarea ttsa
		ON ttsa.subjectareaid=ettsa.subjectareaid and ts.testtypeid = ttsa.testtypeid
		inner join subjectarea sa on ttsa.subjectareaid = sa.id
		WHERE  studentstests.activeflag is true 
		and ca.activeflag is true 
		and en.activeflag is true 
		and ts.source='BATCHAUTO'
		and studentstests.enrollmentid = #{enrollmentId}
		and upper(sa.subjectareacode)= upper(#{subjectAreaCode})		
  </select>  
  
  <select id="findByEnrollmentIdTestTypeCodeSubjectAreaCodeWithActiveOTW" resultType="StudentsTests">
   SELECT distinct  st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid, 
    ts.id as "testSession.id", ts.rosterid as "testSession.rosterId", ts.name as "testSession.name", 
    ts.status as "testSession.status",ts.stageid as "testSession.stageid", (select code from stage where id = ts.stageid) as "testSession.stagecode"
		from studentstests st
		join enrollment en on en.id = st.enrollmentid
		join testsession ts on ts.id = st.testsessionid
		join subjectarea sa on ts.subjectareaid = sa.id
		join testtype tt on ts.testtypeid = tt.id
		join operationaltestwindow otw on ts.operationaltestwindowid = otw.id
		WHERE st.activeflag is true
		and en.activeflag is true
		and ts.source='BATCHAUTO'
		and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
		and en.id = #{enrollmentId}
		and en.currentschoolyear = #{currentSchoolYear}
		and upper(sa.subjectareacode)= upper(#{subjectAreaCode})
		and upper(tt.testtypecode) = upper(#{testTypeCode})
  </select>   
  
   <select id="findByEnrollmentIdTestTypeIdSubjectAreaIdWithActiveOTW" resultMap="manageTestSessionMap" parameterType="map">
    SELECT distinct  st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid, 
    ts.id as "testSession.id", ts.rosterid as "testSession.rosterId", ts.name as "testSession.name", 
    ts.status as "testSession.status",ts.stageid as "testSession.stageid", (select code from stage where id = ts.stageid) as "testSession.stagecode"
		from studentstests st
		join enrollment en on en.id = st.enrollmentid
		join testsession ts on ts.id = st.testsessionid
		join subjectarea sa on ts.subjectareaid = sa.id
		join testtype tt on ts.testtypeid = tt.id
		join operationaltestwindow otw on ts.operationaltestwindowid = otw.id
		WHERE st.activeflag is true
		and ts.source='BATCHAUTO'
		and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
		and en.id = #{enrollmentId}
		and en.currentschoolyear = #{currentSchoolYear}
		and sa.id= #{subjectAreaId}
		and tt.id =#{testTypeId}
		and st.status in (select category.id from public.category JOIN public.categorytype 
									ON category.categorytypeid = categorytype.id 
									where categorytype.typecode = 'STUDENT_TEST_STATUS' and category.categorycode in ('unused','inprogress','complete','pending','PROCESS_LCS_RESPONSES', 'inprogresstimedout'))
  </select>
  
  <select id="findEndOfPathwaysTestsByEnrollmentIdSubjectAreaCode" resultType="StudentsTests">
		SELECT
		<include refid="Expanded_Column_List" />
		from studentstests 
		join testcollection tc on studentstests.testcollectionid = tc.id
		join testsession ts on ts.id = studentstests.testsessionid
		join enrollment en on en.id = studentstests.enrollmentid
		join contentarea ca on ca.id = tc.contentareaid
		where studentstests.activeflag is true and ca.activeflag is true and en.activeflag is true 
		and studentstests.enrollmentid = #{enrollmentId} 
		and ts.source='BATCHAUTO' and ts.name like #{currentSchoolYear} || '_%'
		and upper(ca.abbreviatedname) IN ( 
			select distinct  upper(ca.abbreviatedname) from enrollmenttesttypesubjectarea ettsa 
			join testtypesubjectarea ttsa on ttsa.subjectareaid=ettsa.subjectareaid 
			join contentareatesttypesubjectarea cattsa ON cattsa.testtypesubjectareaid = ttsa.id
			join subjectarea sa on ttsa.subjectareaid = sa.id
			join contentarea ca on ca.id = cattsa.contentareaid
			where sa.activeflag is true and cattsa.activeflag is true and ca.activeflag is true	
			and ettsa.enrollmentid = #{enrollmentId} 
			and upper(sa.subjectareacode)= upper(#{subjectAreaCode})
		)
  </select>
  
  <select id="findEndOfPathwaysTestsByEnrollmentIdSubjectAreaCodeWithActiveOTW" resultType="StudentsTests">
		SELECT
		<include refid="Expanded_Column_List" />
		from studentstests 
		join testcollection tc on studentstests.testcollectionid = tc.id
		join testsession ts on ts.id = studentstests.testsessionid
		join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		join enrollment en on en.id = studentstests.enrollmentid
		join contentarea ca on ca.id = tc.contentareaid
		where studentstests.activeflag is true and ca.activeflag is true and en.activeflag is true 
		and studentstests.enrollmentid = #{enrollmentId} 
		and ts.source='BATCHAUTO' 
		and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate) 
		and ts.name like #{currentSchoolYear} || '_%'
		and upper(ca.abbreviatedname) IN ( 
			select distinct  upper(ca.abbreviatedname) from enrollmenttesttypesubjectarea ettsa 
			join testtypesubjectarea ttsa on ttsa.subjectareaid=ettsa.subjectareaid 
			join contentareatesttypesubjectarea cattsa ON cattsa.testtypesubjectareaid = ttsa.id
			join subjectarea sa on ttsa.subjectareaid = sa.id
			join contentarea ca on ca.id = cattsa.contentareaid
			where sa.activeflag is true and cattsa.activeflag is true and ca.activeflag is true	
			and ettsa.enrollmentid = #{enrollmentId} 
			and upper(sa.subjectareacode)= upper(#{subjectAreaCode})
		)
  </select>  
  
  <select id="findCompletedByStudentAndTestSession" resultMap="BaseResultMap">
	select distinct stests.id, stests.studentid, stests.testid, stests.testcollectionid, stests.testsessionid, stests.status, stests.enrollmentid
		from studentstests stests 
		inner join category c on stests.status = c.id and c.categorycode='complete'
		where stests.studentid=#{studentId, jdbcType=BIGINT} and stests.activeflag is true 
			and stests.testsessionid=#{testSessionId,jdbcType=BIGINT}
  </select>
  
  <select id="findMostRecentCompletedNonWritingTestForMultiEE" resultMap="BaseResultMap">
	select distinct stests.id, stests.studentid, stests.testid, stests.testcollectionid, stests.testsessionid, stests.status, stests.enrollmentid, stb.id as studenttrackerbandid
		from studentstests stests 
		inner join studenttrackerband stb on stb.testsessionid = stests.testsessionid
		inner join category c on stests.status = c.id and c.categorycode='complete'
		where stests.studentid=#{studentId, jdbcType=BIGINT} and stb.activeflag is true
			and stb.testsessionid != #{testSessionId,jdbcType=BIGINT}
		order by stb.id desc limit 1
  </select>
  
  <resultMap type="edu.ku.cete.dlm.iti.StudentTrackerTest" id="studentTrackerTestsResultMap" extends="BaseResultMap">
  	<result column="complexitybandid" property="complexityBandId"/>
  </resultMap>
  
  <select id="findMostRecentCompletedNonWritingTestForSingleEE" resultMap="studentTrackerTestsResultMap">
  	WITH blueprintdata AS(SELECT bpee.essentialelementid  
		FROM blueprintessentialelements bpee 
		JOIN blueprint bp ON bp.id = bpee.blueprintid
		WHERE bp.activeflag is true and bp.writingtestlet is true)
	select stests.id, stests.studentid, stests.testid, stests.testcollectionid, stests.testsessionid, stests.status, stests.enrollmentid,
		stb.id as studenttrackerbandid, stb.complexitybandid
		from studentstests stests
	inner join studenttrackerband stb on stb.testsessionid = stests.testsessionid
	inner join category c on stests.status = c.id
	where stb.studenttrackerid=#{studentTrackerId} and stb.activeflag is true and c.categorycode='complete'
		and stb.essentialelementid NOT IN (SELECT essentialelementid from blueprintdata)
		order by stb.id desc limit 1
  </select>
  
  <select id="findCompletedIdsByTestExternalIdWithTaskVariants" parameterType="map" resultType="Long">
    SELECT DISTINCT st.id
    FROM studentstests st
    	INNER JOIN test ON st.testid = test.id
    	INNER JOIN category c ON st.status = c.id AND (c.categorycode = 'complete' OR c.categorycode = 'inprogress')
    	INNER JOIN studentsresponses sr ON st.id = sr.studentstestsid
    		AND sr.taskvariantid = ANY(ARRAY
    			<foreach collection="taskVariantIds" item="taskVariantId" open="[" close="]" separator=",">
	        		#{taskVariantId,jdbcType=BIGINT}
		</foreach>
		::BIGINT[]
	        )
	        AND sr.activeflag = TRUE
	        AND sr.questarrequestid IS NULL
    WHERE test.externalid = #{testExternalId,jdbcType=BIGINT}
    <if test="limit != null">
      LIMIT #{limit,jdbcType=BIGINT}
    </if>
  </select>

  <update id="releaseDependentTestSessions" parameterType="map" >
  	update studentstests set status=(select category.id from public.category JOIN public.categorytype 
									ON category.categorytypeid = categorytype.id 
									where categorytype.typecode = 'STUDENT_TEST_STATUS' and category.categorycode = 'unused'),
							modifieddate = now(),
		modifieduser = #{modifiedUser}
			where id in (select distinct nextst.id from studentstests st
			inner join testsession ts on st.testsessionid=ts.id
			inner join testcollection tc on tc.id=ts.testcollectionid
			inner join stage s on s.predecessorid=tc.stageid
			inner join testcollection nexttc on nexttc.stageid=s.id and tc.contentareaid=nexttc.contentareaid
			inner join testsession nextts on nexttc.id=nextts.testcollectionid
			inner join studentstests nextst on nextst.testsessionid=nextts.id
			and st.studentid=nextst.studentid
			inner join category nextstatus on nextst.status = nextstatus.id
			where nextstatus.categorycode = 'pending' and ts.source='BATCHAUTO' 
			and nextts.source='BATCHAUTO'
			and st.testsessionid = #{testSessionId, jdbcType=BIGINT} 
			and st.studentid = ANY(ARRAY
		<foreach collection="studentIds" item="studentId" open="[" close="]" separator=",">
				#{studentId, jdbcType=BIGINT}
		</foreach>
		))
  </update>
  
   <select id="findExistingMultiAssignTestSessions" resultType="StudentsTests">
	select st.studentid, st.testid, st.testsessionid as testsession, 
	       st.testcollectionid, st.status, st.enrollmentid
		from studentstests st
		join testsession ts on st.testsessionid = ts.id
		join testcollection tc on tc.id=st.testcollectionid
	 where st.studentid = #{studentId}
		and ts.gradecourseid = #{gradeCourseId}
		and ts.operationaltestwindowid = #{multiAssignTestWindowId}
		and tc.contentareaid = #{contentAreaId}
		and ts.activeflag = true
		and st.activeflag = true
  </select>  
  
  <update id="updateStatusForByStudentTestSession">
    update public.studentstests
    set
      status = #{studentTest.status,jdbcType=BIGINT},
      modifieduser = #{studentTest.modifiedUser,jdbcType=INTEGER},
      modifieddate = now()
	where testsessionId = #{testSessionId,jdbcType=BIGINT}
	and activeflag is true and status in (
		select c.id
		from category c
		inner join categorytype ct on c.categorytypeid = ct.id
		where ct.typecode = 'STUDENT_TEST_STATUS'
		and c.categorycode in ('unused', 'inprogress', 'inprogresstimedout', 'complete')
	) and studentid in 
		<foreach collection="studentIds" item="studentId" open="(" close=")" separator=",">
	   			#{studentId,jdbcType=BIGINT}
		</foreach>
  </update>
  
  <update id="completeStudentTestSession">
    update public.studentstests
    set
      status = (
		select c.id
		from category c
		inner join categorytype ct on c.categorytypeid = ct.id
		where ct.typecode = 'STUDENT_TEST_STATUS'
		and c.categorycode in ('complete')
	),
      modifieduser = #{studentTest.modifiedUser,jdbcType=INTEGER},
      modifieddate = now(),
      enddatetime = now()
	where testsessionId = #{testSessionId,jdbcType=BIGINT}
	and activeflag is true and studentid in 
		<foreach collection="studentIds" item="studentId" open="(" close=")" separator=",">
	   			#{studentId,jdbcType=BIGINT}
		</foreach>
  </update>

  <select id="findStudentsTests" resultMap="BaseResultMap">
	select distinct stests.id, stests.studentid, stests.testid, stests.testcollectionid, 
	stests.testsessionid, stests.status, stests.enrollmentid, stests.previousstudentstestid
  		from studentstests stests
			where id in (select distinct st.id from studentstests st
			inner join testsession ts on st.testsessionid=ts.id
			inner join testcollection tc on tc.id=ts.testcollectionid
			inner join category status on st.status = status.id
			and st.status in (
			select c.id from category c 
			inner join categorytype ct on c.categorytypeid=ct.id where ct.typecode='STUDENT_TEST_STATUS' and categorycode in 
			<foreach collection="statusList" item="status" open="(" close=")" separator="," >
	   			#{status,jdbcType=VARCHAR}
			</foreach>	
			) and st.activeflag is true 
			and st.testsessionid = #{testSessionId, jdbcType=BIGINT} 
			and st.studentid = ANY(ARRAY
		<foreach collection="studentIds" item="studentId" open="[" close="]" separator=",">
				#{studentId, jdbcType=BIGINT}
		</foreach>
		))
  </select>

  <select id="getCompleteSuccessorStageCount" resultType="java.lang.Long">
	select count(distinct nextst.id) from studentstests st
			inner join testsession ts on st.testsessionid=ts.id
			inner join testcollection tc on tc.id=ts.testcollectionid
			inner join stage s on s.predecessorid=tc.stageid
			inner join testcollection nexttc on nexttc.stageid=s.id and tc.contentareaid=nexttc.contentareaid
			inner join testsession nextts on nexttc.id=nextts.testcollectionid
			inner join studentstests nextst on nextst.testsessionid=nextts.id and st.studentid=nextst.studentid
			inner join category nextstatus on nextst.status = nextstatus.id
			where nextts.activeflag is true
				and nextst.activeflag is true
				and nextts.schoolyear = ts.schoolyear
				and nextts.gradecourseid = ts.gradecourseid
				and nextts.operationaltestwindowid = ts.operationaltestwindowid
				and nextstatus.categorycode = 'complete' 
				and ts.source='BATCHAUTO' 
				and nextts.source='BATCHAUTO'
				and st.testsessionid = #{testSessionId, jdbcType=BIGINT}
				and st.studentid = #{studentId, jdbcType=BIGINT}
  </select>

  <select id="isSuccessorStageReactivated" resultType="Boolean" >
  	select case when exists (
		select sth.id from studentstestshistory sth where sth.studentstestsid in (
		select nextst.id from studentstests st
		inner join testsession ts on st.testsessionid=ts.id
		inner join testcollection tc on tc.id=ts.testcollectionid
		inner join stage s on s.predecessorid=tc.stageid
		inner join testcollection nexttc on nexttc.stageid=s.id and tc.contentareaid=nexttc.contentareaid
		inner join testsession nextts on nexttc.id=nextts.testcollectionid
		inner join studentstests nextst on nextst.testsessionid=nextts.id and st.studentid=nextst.studentid
		inner join category nextstatus on nextst.status = nextstatus.id
		where nextstatus.activeflag is true
			and nextts.activeflag is true
			and nextst.activeflag is true
			and nextts.schoolyear = ts.schoolyear
			and nextts.gradecourseid = ts.gradecourseid
			and nextts.operationaltestwindowid = ts.operationaltestwindowid
			and ts.source='BATCHAUTO' 
			and nextts.source='BATCHAUTO'
			and st.testsessionid = #{testSessionId, jdbcType=BIGINT}
			and st.studentid = #{studentId, jdbcType=BIGINT}
			) and sth.action='REACTIVATION'
	) then true else false end;
  </select>
  
   <update id="resetSuccessorStudentTestOnReactivation">
   <!-- Deactivate next stage student test sections -->
   update public.studentstestsections set
      modifieduser = #{studentTestSection.modifiedUser,jdbcType=INTEGER},
      modifieddate = now(),
      activeflag = false
	where studentstestid in (
		select distinct nextst.id from studentstests st
			inner join testsession ts on st.testsessionid=ts.id
			inner join testcollection tc on tc.id=ts.testcollectionid
			inner join stage s on s.predecessorid=tc.stageid
			inner join testcollection nexttc on nexttc.stageid=s.id and tc.contentareaid=nexttc.contentareaid
			inner join testsession nextts on nexttc.id=nextts.testcollectionid
			inner join studentstests nextst on nextst.testsessionid=nextts.id
			and st.studentid=nextst.studentid
			inner join category nextstatus on nextst.status = nextstatus.id
			where  st.status = (select c.id from category c 
				inner join categorytype ct on c.categorytypeid=ct.id where 
				ct.typecode='STUDENT_TEST_STATUS' and categorycode in ('inprogress'))
			and ts.source='BATCHAUTO' 
			and nextts.source='BATCHAUTO'
			and st.testsessionid = #{testSessionId, jdbcType=BIGINT}
		);
   <!-- Deactivate next stage student tests -->
    update public.studentstests
    set modifieduser = #{modifiedUser,jdbcType=INTEGER},
      modifieddate = now(),
      activeflag = false
	where activeflag is true
	and id in (
		select distinct nextst.id from studentstests st
			inner join testsession ts on st.testsessionid=ts.id
			inner join testcollection tc on tc.id=ts.testcollectionid
			inner join stage s on s.predecessorid=tc.stageid
			inner join testcollection nexttc on nexttc.stageid=s.id and tc.contentareaid=nexttc.contentareaid
			inner join testsession nextts on nexttc.id=nextts.testcollectionid
			inner join studentstests nextst on nextst.testsessionid=nextts.id
			and st.studentid=nextst.studentid
			inner join category nextstatus on nextst.status = nextstatus.id
			where  st.status = (select c.id from category c 
				inner join categorytype ct on c.categorytypeid=ct.id where 
				ct.typecode='STUDENT_TEST_STATUS' and categorycode in ('inprogress'))
			and ts.source='BATCHAUTO' 
			and nextts.source='BATCHAUTO'
			and st.testsessionid = #{testSessionId, jdbcType=BIGINT}
		) and studentid in 
		<foreach collection="studentIds" item="studentId" open="(" close=")" separator=",">
	   			#{studentId, jdbcType=BIGINT}
		</foreach>
		;
		<!-- Clear off any responses -->
		update studentsresponses set activeflag = false, modifieddate = now(),
		modifieduser=#{modifiedUser}
		where studentstestsid in (
		select distinct nextst.id from studentstests st
		inner join testsession ts on st.testsessionid=ts.id
		inner join testcollection tc on tc.id=ts.testcollectionid
		inner join stage s on s.predecessorid=tc.stageid
		inner join testcollection nexttc on nexttc.stageid=s.id and tc.contentareaid=nexttc.contentareaid
		inner join testsession nextts on nexttc.id=nextts.testcollectionid
		inner join studentstests nextst on nextst.testsessionid=nextts.id
		and st.studentid=nextst.studentid
		inner join category nextstatus on nextst.status = nextstatus.id
		where st.status = (select c.id from category c 
			inner join categorytype ct on c.categorytypeid=ct.id where 
			ct.typecode='STUDENT_TEST_STATUS' and categorycode in ('inprogress'))
		and ts.source='BATCHAUTO' 
		and nextts.source='BATCHAUTO'
		and st.testsessionid = #{testSessionId, jdbcType=BIGINT}) 
		and studentid in 
		<foreach collection="studentIds" item="studentId" open="(" close=")" separator=",">
	   			#{studentId, jdbcType=BIGINT}
		</foreach>
  </update>
  
  <select id="findExistingFixedAssignTestSessions" resultType="StudentsTests">
	select st.id, st.studentid, st.testid, st.testsessionid as testsession, 
	       st.testcollectionid, st.status, st.enrollmentid
		from studentstests st
		join testsession ts on st.testsessionid = ts.id
		join testcollection tc on tc.id=st.testcollectionid
		join gradecourse gc on gc.id = tc.gradecourseid
	 where st.studentid = #{studentId}
	    and st.enrollmentid = #{enrollmentId}
		and gc.abbreviatedname = #{gradeCourseAbbrName}
		and ts.operationaltestwindowid = #{operationalTestWindowId}
		and tc.contentareaid = #{contentAreaId}
		and ts.activeflag = true
		and st.activeflag = true
		and st.status in (SELECT c.id FROM category c, categorytype ct WHERE c.categorytypeid = ct.id AND ct.typecode='STUDENT_TEST_STATUS'
									AND c.categorycode in ('unused','inprogress', 'complete')) 
	UNION
	select st.id, st.studentid, st.testid, st.testsessionid as testsession, 
	       st.testcollectionid, st.status, st.enrollmentid
		from studentstests st
		join testsession ts on st.testsessionid = ts.id
		join testcollection tc on tc.id=st.testcollectionid
		join gradeband gb on gb.id = tc.gradebandid
		join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
		join gradecourse gc on gc.id = gbgc.gradecourseid
	 where st.studentid = #{studentId}
	    and st.enrollmentid = #{enrollmentId}
		and gc.abbreviatedname = #{gradeCourseAbbrName}
		and ts.operationaltestwindowid = #{operationalTestWindowId}
		and tc.contentareaid = #{contentAreaId}
		and ts.activeflag = true
		and st.activeflag = true
		and st.status in (SELECT c.id FROM category c, categorytype ct WHERE c.categorytypeid = ct.id AND ct.typecode='STUDENT_TEST_STATUS'
									AND c.categorycode in ('unused','inprogress', 'complete'))
  </select> 
  
  <select id="findCompletedStudentsTests" resultType="StudentsTests">
  SELECT   
		 distinct st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
  	FROM testsession ts 
		JOIN testcollection tc ON ts.testcollectionid = tc.id 
		JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
		JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
		JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
		JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid and otw.id= #{operationalTestWindowId}
		JOIN studentstests st on st.testsessionid = ts.id and st.activeflag= true
		JOIN enrollment en on en.id = st.enrollmentid and ts.attendanceschoolid= en.attendanceschoolid and en.studentid = #{studentId}
	WHERE ts.activeflag is true 
		and tc.contentareaid = #{contentAreaId} 
		and ts.gradecourseid = #{gradeCourseId}
		and ts.testtypeid = #{testTypeId} 
		and atc.assessmentid= #{assessmentId}
		and ts.name like #{currentSchoolYear} || '_%'
		and ts.schoolyear = #{currentSchoolYear}
		<if test="stageId != null">
			and ts.stageid = #{stageId}
		</if>		
		and ts.source = #{sourceType}
		and st.status in (select c.id from category c 
				inner join categorytype ct on c.categorytypeid=ct.id where 
				ct.typecode='STUDENT_TEST_STATUS' and categorycode in ('complete'))
    
  </select>
  
  <select id="findCompletedStudentsTestsForKELPAStudent" resultType="StudentsTests">
  SELECT   
		 distinct st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid, st.transferedtestsessionId, st.transferedenrollmentid, st.previousstudentstestid
  	FROM testsession ts 
		JOIN testcollection tc ON ts.testcollectionid = tc.id 
		JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
		JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
		JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
		JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid and otw.id= #{operationalTestWindowId}
		JOIN studentstests st on st.testsessionid = ts.id and st.activeflag= true
		JOIN enrollment en on en.id = st.enrollmentid and ts.attendanceschoolid= en.attendanceschoolid and en.studentid = #{studentId}
	WHERE ts.activeflag is true 
		and tc.contentareaid = #{contentAreaId} 
		and ts.gradecourseid = #{gradeCourseId}
		and ts.testtypeid = #{testTypeId} 
		and atc.assessmentid= #{assessmentId}
		and ts.name like #{currentSchoolYear} || '_%'
		and ts.schoolyear = #{currentSchoolYear}
		and ts.stageid = #{stageId} 
		and ts.source = #{sourceType}
		and st.status in (select c.id from category c 
				inner join categorytype ct on c.categorytypeid=ct.id where 
				ct.typecode='STUDENT_TEST_STATUS' and categorycode in ('complete'))
    
  </select>
  
  <select id="getNextStageByTestSession" resultType="edu.ku.cete.domain.content.Stage" parameterType="java.lang.Long" >
  		select distinct s.id as id, s.name as name, s.code as code, s.predecessorid as predecessorId,
  		s.sortorder as sortOrder, s.createddate as createdDate, s.modifieddate as modifiedDate,
  		s.activeflag as activeFlag
  		from studentstests st
		inner join testsession ts on st.testsessionid=ts.id
		inner join testcollection tc on tc.id=ts.testcollectionid
		inner join stage s on s.predecessorid=tc.stageid
		inner join testcollection nexttc on nexttc.stageid=s.id and tc.contentareaid=nexttc.contentareaid
		inner join testsession nextts on nexttc.id=nextts.testcollectionid
		inner join studentstests nextst on nextst.testsessionid=nextts.id and st.studentid=nextst.studentid
		inner join category nextstatus on nextst.status = nextstatus.id
		where nextstatus.activeflag is true
			and nextts.activeflag is true
			and ts.source='BATCHAUTO' 
			and nextts.source='BATCHAUTO'
			and st.testsessionid = #{testSessionId, jdbcType=BIGINT}
			limit 1
  </select>

  <select id="getAllStagesByTestSession" resultType="edu.ku.cete.domain.content.Stage" parameterType="java.lang.Long" >
	select distinct s.id as selfid, s.name as selfname, s.code as selfcode, s.predecessorid as selfpredecessorId,
		s.sortorder as selfsortOrder, s.createddate as selfcreatedDate, s.modifieddate as selfmodifiedDate,
		s.activeflag as selfactiveFlag, nextts.id as sessionId
	from studentstests st
	inner join testsession ts on st.testsessionid=ts.id
	inner join testcollection tc on tc.id=ts.testcollectionid
	inner join testcollection nexttc on tc.contentareaid=nexttc.contentareaid
	inner join stage s on s.id=nexttc.stageid
	inner join testsession nextts on nexttc.id=nextts.testcollectionid
	inner join studentstests nextst on nextst.testsessionid=nextts.id and st.studentid=nextst.studentid
	inner join category nextstatus on nextst.status = nextstatus.id
	inner join operationaltestwindow otw on otw.id = nextts.operationaltestwindowid 
	where nextstatus.activeflag is true
		and nextts.activeflag is true
		and ts.source='BATCHAUTO' 
		and nextts.source='BATCHAUTO'
		and otw.activeflag is true 
		and st.testsessionid = #{testSessionId, jdbcType=BIGINT}
		and st.studentid = #{studentId, jdbcType=BIGINT}
		and otw.id = #{operationalTestWindowId, jdbcType=BIGINT}
  </select> 
  
  <select id="getInterimTestSession" parameterType="java.lang.Long" resultType="edu.ku.cete.domain.TestSession"> 
  select * from testsession  where testid=#{testTestId}
  </select>
  
  <select id="getStudentIdByTestSessionIdComplete" resultType="edu.ku.cete.domain.student.Student"> 
  select * from student s
    join studentstests st on s.id=st.studentid
    where st.testsessionid = #{testSessionId,jdbcType=BIGINT}
    and (st.startdatetime IS NOT NULL and st.enddatetime IS NOT NULL)
  </select>
  
  <select id="getStudentIdByTestSessionIdAll" resultType="edu.ku.cete.domain.student.Student"> 
  select * from student s
    join studentstests st on s.id=st.studentid
    where st.testsessionid = #{testSessionId,jdbcType=BIGINT}
    and st.activeflag is true
    ORDER BY legallastname asc,
	legalfirstname asc
  </select>

	<select id="getStudentIdByTestSessionIdAllByTeacher" resultType="edu.ku.cete.domain.student.Student">
	select distinct s.id,s.*
	from enrollment enrl
	JOIN student s ON enrl.studentid = s.id and s.activeflag is true and enrl.activeflag is true
	join studentstests st on s.id=st.studentid
	JOIN enrollmentsrosters er ON enrl.id =er.enrollmentid and er.activeflag is true
	JOIN roster ro ON ro.id = er.rosterid 
	join organizationtreedetail orgtree on orgtree.schoolid = enrl.attendanceschoolid
	AND (orgtree.schoolid = #{orgId}
	OR orgtree.districtid = #{orgId}
	OR orgtree.stateid = #{orgId})
	JOIN test t on t.id=st.testid and ro.statesubjectareaid=t.contentareaid
	JOIN interimtest it on it.testtestid=t.id
	join contentarea catest on t.contentareaid=catest.id
	join contentarea castudent on castudent.id=ro.statesubjectareaid 
	where enrl.activeflag = true
	AND st.testsessionid= #{testSessionId,jdbcType=BIGINT}
	AND st.activeflag = true
	AND enrl.currentschoolyear = #{currentSchoolYear}
	<if test="isTeacher == true">
     	AND ro.teacherid=#{userId,jdbcType=BIGINT}
     	AND (it.createduser=#{userId,jdbcType=BIGINT} or catest.name=castudent.name)
   </if>
	ORDER BY legallastname asc,
	legalfirstname asc
	</select>
  
  	<update id="updateActiveFlagBytestSessionId">
  		update studentstestsections
  		set activeflag = FALSE,
  			modifieddate = now(),
		modifieduser= #{modifiedUser}
  		where studentstestid in ( select id from studentstests where testsessionid =  #{testSessionId, jdbcType=BIGINT});
   		update studentstests 
   		set activeflag = FALSE, 
   			modifieddate = now(),
		modifieduser = #{modifiedUser}
   		where testsessionid = #{testSessionId, jdbcType=BIGINT}
	</update>
	  	<update id="updateActiveFlagBytestSessionIdInterim">
  		update studentstestsections
  		set activeflag = FALSE,
  			modifieddate = now(),
  			modifieduser= #{userId,jdbcType=BIGINT}
  		where studentstestid in ( select id from studentstests where testsessionid =  #{testSessionId, jdbcType=BIGINT}
  		and studentid not in
		<foreach collection="studentIds" item="studentId" open="(" close=")" separator="," >
			#{studentId,jdbcType=BIGINT}
		</foreach>
		);
   		update studentstests 
   		set activeflag = FALSE, 
   			modifieddate = now(),
			modifieduser = #{userId,jdbcType=BIGINT} 
   		where testsessionid = #{testSessionId, jdbcType=BIGINT} and studentid not in 
		<foreach collection="studentIds" item="studentId" open="(" close=")" separator="," >
			#{studentId,jdbcType=BIGINT}
		</foreach>
		;
	</update>
	
 	
 	 <select id="findIdsByTestSession" resultType="Long" >
	    SELECT st.id
	    FROM studentstests st
	    WHERE st.testsessionid in
		<foreach collection="testSessionIds" item="testSessionId" open="(" close=")" separator="," >
			#{testSessionId}
		</foreach>
  	 </select>
	 <select id="findIdsByTestSessionForDeactivation" parameterType="Long" resultType="Long">
	 	SELECT st.id
	    FROM studentstests st
	    WHERE st.activeflag=true 
	    and st.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid where categorycode in ('complete', 'inprogress', 'inprogresstimedout', 'pending', 'unused') and ct.typecode = 'STUDENT_TEST_STATUS')
	    and st.testsessionid in
		<foreach collection="testSessionIds" item="testSessionId" open="(" close=")" separator="," >
			#{testSessionId}
		</foreach>
	 </select>
	 
	  <update id="deactivateByPrimaryKeyWithStatus" parameterType="java.util.Map">	
			update studentstests 
			set modifieduser = #{modifiedUserId},
			modifieddate = now(),
			activeflag = false, 
			status=(select id from category 
					where categorycode = #{newStatusPrefix} || 
					(select categorycode from category 
						where id = (select status from studentstests where id = #{studentsTestsId})  
						and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS'))
						and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')) 
			where id = #{studentsTestsId}
	  </update>
	  <update id="reactivateByPrimaryKeyForGradeChange" parameterType="java.util.Map">	
			update studentstests 
			set modifieduser = #{modifiedUserId},
			modifieddate = now(),
			activeflag = true, 
			status=(select id from category 
					where categorycode =  
					(select split_part(categorycode, '-', 2) from category 
						where id = (select status from studentstests where id = #{studentsTestsId})  
						and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS'))
						and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')) 
			where id = #{studentsTestsId}
	  </update>
	  
	  <update id="reactivateByPrimaryKeyForRosterChange" parameterType="java.util.Map">	
			update studentstests 
			set modifieduser = #{modifiedUserId},
			modifieddate = now(),
			activeflag = true, 
			status=(select id from category 
					where categorycode = ( 
							select (
							CASE WHEN (select categorycode from category 
									where id = (select status from studentstests where id = #{studentsTestsId})  
									and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')) = 'complete'
								THEN (select categorycode from category 
									where id = (select status from studentstests where id = #{studentsTestsId})  
									and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS'))
								ELSE (select split_part(categorycode, '-', 2) from category 
									where id = (select status from studentstests where id = #{studentsTestsId})  
									and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS'))
							END))
						and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS'))
			<if test="newEnrollmentId != null">
				, enrollmentid = #{newEnrollmentId}
			</if>
			where id = #{studentsTestsId}
	  </update>	  

  <resultMap type="edu.ku.cete.domain.RosterAutoScoringStudentsTestsMap" id="autoScoringMap"> 
    <result column="rosterid" property="rosterId" jdbcType="BIGINT"/>  
    <collection property="autoScoringStudentstests" ofType="edu.ku.cete.model.AutoScoringStudentstest" javaType="list">
        <result column="studentid" property="studentId"/>
        <result column="id" property="rosterId"/>
        <result column="teacherid" property="scorerId"/>
        <result column="studentstestid" property="StudentstestId"/>
        <result column="testid" property="testId"/>
        <result column="coursesectionname" property="rosterName"/>
        <result column="educatoridentifier" property="educatorIdentifier"/>
        <result column="testsessionid" property="testSessionId"/>
        <result column="testsessionname" property="testSessionName"/>
        <result column="aypschoolidentifier" property="aypSchoolIdentifier"/>
        <result column="enrollmentid" property="enrollmentId"/>
    </collection>
  </resultMap>  
  
  
  <select id="getStudentsTestForAutoScoring" resultMap="autoScoringMap"> 
	select distinct enr.rosterid,rs.id,st.studentid,rs.teacherid,st.id studentstestid,st.testid,rs.coursesectionname,
	au.uniquecommonidentifier as educatoridentifier, org.displayidentifier as aypschoolidentifier,
	tss.id as testsessionid, tss.name as testsessionname, st.enrollmentid 
	from enrollmentsrosters enr
		inner join studentstests st on enr.enrollmentid =  st.enrollmentid and st.activeflag is true
		inner join testsession tss ON st.testsessionid = tss.id and tss.activeflag is true 
		inner join roster rs on enr.rosterid = rs.id and rs.activeflag is true
		inner join aartuser au on au.id = rs.teacherid and au.activeflag is true
		inner join testsection ts on st.testid = ts.testid 
		inner join testsectionstaskvariants tstv on tstv.testsectionid = ts.id 
		inner join taskvariant tv on tv.id = tstv.taskvariantid 
		inner join tasktype tt on tt.id = tv.tasktypeid
		left join organization org ON org.id = rs.aypschoolid and org.activeflag is true  
		where (tt.code = 'ER' OR tt.code = 'UDI')
		and st.testsessionid = #{testSessionId, jdbcType=BIGINT} 
		and enr.activeflag is true 
		and rs.currentschoolyear = #{schoolYear, jdbcType=BIGINT}
		and rs.statesubjectareaid = #{subjectAreaId, jdbcType=BIGINT}
		and st.scoringassignmentid is null
		<!-- <if test="pageSize != null and offset != null"> LIMIT #{pageSize,jdbcType=INTEGER} OFFSET #{offset,jdbcType=INTEGER} </if> -->
  </select>
  
    <update id="updateScoringAssignment">   
	    UPDATE public.studentstests  set scoringassignmentid = #{scoringAssignmentId, jdbcType=BIGINT}, 
	    modifieddate = now(),
		modifieduser = #{modifiedUser}
	    where id in    
		<foreach collection="studentsTestIds" item="studentsTestsId" open="(" close=")" separator="," >
			#{studentsTestsId}
		</foreach>
   </update>
  
  
  <select id="getAllStageStudentsTestForStudent" resultType="StudentsTests" >
	select st.* from testsession ts
	inner join studentstests st on st.testsessionid = ts.id
	where st.studentid = #{studentId,jdbcType=BIGINT}
	and ts.attendanceschoolid = #{attendanceSchoolId,jdbcType=BIGINT} 
	and ts.schoolyear =  #{schoolYear,jdbcType=BIGINT}
	and gradecourseid = #{gradeId,jdbcType=BIGINT}
	and subjectareaid = #{subjectAreaId,jdbcType=BIGINT}
	and st.activeflag is true
  </select>
  
   <select id="findKELPAByEnrollmentId" resultType="StudentsTests" parameterType="long">
     SELECT st.id, st.studentid, 
	 st.testid, st.testcollectionid, 
	 st.testsessionid, 
	 st.status,st.enrollmentid,st.scoringassignmentid
	 FROM studentstests st
		inner join testsession ts on ts.id = st.testsessionid and ts.activeflag is true and ts.source = 'BATCHAUTO'
		inner join assessmentstestcollections atc ON atc.testcollectionid = st.testcollectionid and atc.activeflag is true
		inner join assessment ass ON ass.id = atc.assessmentid and ass.activeflag is true 
		inner join testingprogram tp ON tp.id = ass.testingprogramid and tp.activeflag is true
		inner join assessmentprogram ap ON ap.id = tp.assessmentprogramid and ap.activeflag is true 
	   WHERE st.activeflag=true and st.enrollmentid = #{enrollmentId} and ap.abbreviatedname = 'KELPA2' 
  </select>
  
	<select id="selectKapSSByEnrollmentId" parameterType="Long" resultType="StudentsTests">
		select distinct st.*
		FROM testsession ts
		inner join studentstests st on ts.id = st.testsessionid and ts.activeflag is true and ts.source = 'BATCHAUTO' and st.enrollmentid=#{enrollmentId}
		inner join assessmentstestcollections atc ON atc.testcollectionid = st.testcollectionid and atc.activeflag is true
		inner join assessment ass ON ass.id = atc.assessmentid and ass.activeflag is true 
		inner join testingprogram tp ON tp.id = ass.testingprogramid and tp.activeflag is true
		inner join assessmentprogram ap ON ap.id = tp.assessmentprogramid and ap.activeflag is true
		inner join subjectarea sa on sa.id=ts.subjectareaid and sa.subjectareacode='SHISGOVA'
		WHERE ap.abbreviatedname ilike 'KAP' order by st.createddate desc limit 2
  </select>
  
  <select id="selectKapSSByTestSessionIdAndStudentId" resultType="StudentsTests">
		select distinct st.*
		FROM testsession ts
		inner join studentstests st on ts.id = st.testsessionid and ts.activeflag is true and ts.source = 'BATCHAUTO' 
		and st.studentid = #{studentId} and ts.id = #{testSessionId} and ts.schoolyear = #{schoolYear}
		inner join assessmentstestcollections atc ON atc.testcollectionid = st.testcollectionid and atc.activeflag is true
		inner join assessment ass ON ass.id = atc.assessmentid and ass.activeflag is true 
		inner join testingprogram tp ON tp.id = ass.testingprogramid and tp.activeflag is true
		inner join assessmentprogram ap ON ap.id = tp.assessmentprogramid and ap.activeflag is true
		inner join subjectarea sa on sa.id=ts.subjectareaid and sa.subjectareacode='SHISGOVA'
		WHERE ap.abbreviatedname ilike 'KAP' order by st.createddate desc limit 2
  </select>
  
  
  
    <update id="updateTransferedTestSessionId">   
	    UPDATE public.studentstests  set transferedtestsessionid = #{transferedTestsessionId, jdbcType=BIGINT} ,
	     transferedenrollmentid = #{transferedEnrollmentId, jdbcType=BIGINT},
	     modifieddate= now(),
		modifieduser = #{modifiedUser}
	    where id = #{studentsTestsId}
   </update>
   
   <select id="getStudentsWithRostersWithEnrollmentAutoScoring" resultType="edu.ku.cete.domain.StudentsTests" > 
	    select distinct on(st.studentid) st.studentid,e.id enrollmentid,enr.rosterid enrollmentrosterid,rs.id rosterid,st.scoringassignmentid 	      
		from studentstests st
		left join enrollment e on e.id =  st.enrollmentid and e.activeflag is true 
		left join enrollmentsrosters enr on enr.enrollmentid =  e.id and st.activeflag is true and enr.activeflag = true
		left join roster rs on enr.rosterid = rs.id and rs.activeflag is true
	    where st.testsessionid in    
		<foreach collection="testSessionIds" item="testSessionId" open="(" close=")" separator="," >
			#{testSessionId}
		</foreach>
		and st.activeflag is true 
  </select>
  
  <select id="findCompletedTestsInOtherSchool" resultType="StudentsTests">
 	SELECT DISTINCT st.id, st.studentid, st.testid, st.testcollectionid,
		st.testsessionid, st.status, st.enrollmentid
	FROM enrollment preven
	JOIN studentstests st on st.enrollmentid = preven.id
	JOIN testsession ts on ts.id = st.testsessionid
	JOIN testcollection tc on tc.id = st.testcollectionid
	JOIN assessmentstestcollections atc ON st.testcollectionid = atc.testcollectionid
	JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid
	JOIN enrollment en on en.studentid = preven.studentid
	JOIN organizationtreedetail otd ON otd.schoolid = en.attendanceschoolid
	JOIN organizationtreedetail otd1 ON otd1.schoolid = preven.attendanceschoolid
	WHERE preven.studentid = #{studentId} AND en.id = #{currentEnrollmentId}
		AND preven.attendanceschoolid != en.attendanceschoolid AND st.activeflag = TRUE
		AND otd.districtid != otd1.districtid AND tc.contentareaid = #{contentAreaId} 
		AND ts.gradecourseid = #{gradeCourseId} AND ts.testtypeid = #{testTypeId}
		AND atc.assessmentid = #{assessmentId}
		AND ts.schoolyear = #{currentSchoolYear}
		AND ts.source = #{sourceType} AND ts.operationaltestwindowid = #{operationalTestWindowId}
		AND st.activeflag is true and ts.activeflag is true
		AND st.status =  ANY( SELECT c.id FROM category c INNER JOIN categorytype ct ON c.categorytypeid = ct.id WHERE ct.typecode = 'STUDENT_TEST_STATUS'
			AND categorycode IN ( 'complete') )
		AND ts.attendanceschoolid = preven.attendanceschoolid
  </select>
	<update id="softDeleteByUserAndStudent">
	update studentstests
	set modifieduser = #{modifiedUser,jdbcType=BIGINT},
	modifieddate = now(),
	activeflag = false
	where 
	(studentid=#{studentId,jdbcType=BIGINT}
		<if test="enrollmentId !=null"> or enrollmentid=#{enrollmentId,jdbcType=BIGINT}</if>
		)
	and status not in ( select id from category where categoryname ilike
	'COMPLETE' and categorytypeid in (select id from categorytype where
	typecode='STUDENT_TEST_STATUS'))
	and testsessionid in ( select distinct ks.id from testsession ks join test k on k.id=ks.testid join interimtest kit on kit.testtestid=k.id  where k.is_interim_test is true and kit.createduser in 
		<foreach collection="userIds" item="userId" open="(" close=")" separator=",">
		#{userId}
	</foreach>
	<if test="organizationId != null">
	and kit.organizationId=#{organizationId,jdbcType=BIGINT}
		</if>
		)
	

	</update>	  
	<update id="softDeleteByStudentAndTestSession">
	update studentstests
	set modifieduser = #{modifiedUser,jdbcType=BIGINT},
	modifieddate = now(),
	activeflag = false
	where 
	(studentid=#{studentId,jdbcType=BIGINT}
		<if test="enrollmentId !=null"> or enrollmentid=#{enrollmentId,jdbcType=BIGINT}</if>
		)
	and status not in ( select id from category where categoryname ilike
	'COMPLETE' and categorytypeid in (select id from categorytype where
	typecode='STUDENT_TEST_STATUS'))
	and testsessionid in ( select distinct ks.id from testsession ks join test k on k.id=ks.testid join interimtest kit on kit.testtestid=k.id  where k.is_interim_test is true and ks.id in 
		<foreach collection="testSessionIds" item="testSessionId" open="(" close=")" separator=",">
		#{testSessionId}
	</foreach>
	<if test="organizationId != null">
	and kit.organizationId=#{organizationId,jdbcType=BIGINT}
		</if>
		)
	

	</update>	 
  
  	<select id="getPredictiveTestsByEnrollmentId" resultType="StudentsTests">
	    SELECT distinct  st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid, 
	    ts.id as "testSession.id", ts.name as "testSession.name", 
	    ts.status as "testSession.status"
	    FROM studentstests st
	    JOIN testsession ts ON st.testsessionid = ts.id
	    <if test="contentAreaId != null">
	    	JOIN testcollection tc on tc.id = st.testcollectionid
	    </if>
	    JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid
	    JOIN testenrollmentmethod tem ON otw.testenrollmentmethodid = tem.id AND otw.assessmentprogramid = tem.assessmentprogramid AND tem.methodcode = 'PREDICTIVE'
	    WHERE st.activeflag is true AND st.enrollmentid = #{enrollmentId}
	    AND ts.source = 'BATCHAUTO' 
	    AND ts.schoolyear = #{currentSchoolYear,jdbcType=INTEGER}
	    <if test="contentAreaId != null">
	    	AND tc.contentareaid = #{contentAreaId,jdbcType=BIGINT}
	    </if>	    
		AND ts.name LIKE 'Predictive_%'
	    AND (otw.effectivedate &lt;= now() AND now() &lt;= otw.expirydate)
	    AND st.status NOT IN ( SELECT id FROM category WHERE categoryname ilike 'COMPLETE' AND categorytypeid IN (SELECT id FROM categorytype WHERE typecode = 'STUDENT_TEST_STATUS'))
  </select>
  
  <select id="findCompletedPredictiveTestsInOtherSchool" resultType="StudentsTests">
	SELECT   
		 distinct st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
  	FROM testsession ts 
		JOIN testcollection tc ON ts.testcollectionid = tc.id 
		JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
		JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
		JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
		JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid and otw.id = #{operationalTestWindowId}
		JOIN studentstests st on st.testsessionid = ts.id and st.activeflag is true
		JOIN enrollment en on en.studentid = #{studentId}
		join enrollment preven on preven.id = st.enrollmentid and preven.studentid = en.studentid and ts.attendanceschoolid = preven.attendanceschoolid
		join organizationtreedetail otd on otd.schoolid = en.attendanceschoolid
		join organizationtreedetail otd1 on otd1.schoolid = preven.attendanceschoolid
	WHERE ts.activeflag is true 
		and en.id = #{currentEnrollmentId}
		and preven.attendanceschoolid != en.attendanceschoolid
		and preven.currentschoolyear = en.currentschoolyear
		<if test="contentAreaId != null">
			and tc.contentareaid = #{contentAreaId} 
		</if>
		<if test="gradeCourseId != null">
			and ts.gradecourseid = #{gradeCourseId}
		</if>
		<if test="testTypeId != null">
			and ts.testtypeid = #{testTypeId} 
		</if>
		<if test="assessmentId != null">
			and atc.assessmentid= #{assessmentId}
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear}
		</if>				
		and ts.source = #{sourceType}
		<if test="stageId != null">
			and ts.stageid = #{stageId}
		</if>
		and st.status in (select c.id from category c 
				inner join categorytype ct on c.categorytypeid=ct.id where 
				ct.typecode='STUDENT_TEST_STATUS' and categorycode in ('complete'))
    
  </select>
  
  <select id="findCompletedPredictiveStudentsTests" resultType="StudentsTests">
	  SELECT   
			 distinct st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
	  	FROM testsession ts 
			JOIN testcollection tc ON ts.testcollectionid = tc.id 
			JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
			JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
			JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid and otw.id= #{operationalTestWindowId}
			JOIN studentstests st on st.testsessionid = ts.id and st.activeflag= true
			JOIN enrollment en on en.id = st.enrollmentid and ts.attendanceschoolid= en.attendanceschoolid and en.studentid = #{studentId}
		WHERE ts.activeflag is true 
			and tc.contentareaid = #{contentAreaId} 
			and ts.gradecourseid = #{gradeCourseId}
			and ts.testtypeid = #{testTypeId} 
			and atc.assessmentid= #{assessmentId}
			and ts.schoolyear = #{currentSchoolYear}
			<if test="stageId != null">
				and ts.stageid = #{stageId}
			</if>		
			and ts.source = #{sourceType}
			and st.status in (select c.id from category c 
					inner join categorytype ct on c.categorytypeid=ct.id where 
					ct.typecode='STUDENT_TEST_STATUS' and categorycode in ('complete'))
    
  </select>
  
  <select id="findCompletedTestsInOtherSchoolByGradeBand" resultType="StudentsTests">
	SELECT   
		 distinct st.id, st.studentid, st.testid, st.testcollectionid, st.testsessionid, st.status,st.enrollmentid
  	FROM testsession ts 
		JOIN testcollection tc ON ts.testcollectionid = tc.id 
		JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id 
		JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
		JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid 
		JOIN studentstests st on st.testsessionid = ts.id and st.activeflag is true
		JOIN enrollment en on en.studentid = #{studentId}
		join enrollment preven on preven.id = st.enrollmentid and preven.studentid = en.studentid and ts.attendanceschoolid = preven.attendanceschoolid
		join organizationtreedetail otd on otd.schoolid = en.attendanceschoolid
		join organizationtreedetail otd1 on otd1.schoolid = preven.attendanceschoolid
	WHERE ts.activeflag is true
		and otwtc.activeflag is true 
		and en.id = #{currentEnrollmentId,jdbcType=BIGINT}
		and otw.id = #{operationalTestWindowId,jdbcType=BIGINT}
		and preven.attendanceschoolid != en.attendanceschoolid
		and preven.currentschoolyear = en.currentschoolyear
		<if test="contentAreaId != null">
			and tc.contentareaid = #{contentAreaId} 
		</if>
		<if test="gradeBandId != null">
			and ts.gradebandid = #{gradeBandId}
		</if>		
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear}
		</if>				
		and ts.source = #{sourceType}
		<if test="stageId != null">
			and ts.stageid = #{stageId}
		</if>
		and st.status in (select c.id from category c 
				inner join categorytype ct on c.categorytypeid=ct.id where 
				ct.typecode='STUDENT_TEST_STATUS' and categorycode in ('complete'))
    
  </select>
  
  
    <resultMap id="viewMergeStudentTestDetails" type="edu.ku.cete.domain.enrollment.ViewMergeStudentDetailsDTO">
  		<id column="studentTestId" property="studentTestId" jdbcType="BIGINT" />
	    <result column="stateStudentIdentifier" jdbcType="VARCHAR" property="stateStudentIdentifier" />	    
	    <result column="testSessionName" jdbcType="VARCHAR" property="testSessionName" />
	    <result column="testName" jdbcType="VARCHAR" property="testName" />
	    <result column="subject" jdbcType="VARCHAR" property="subject" />  		
	    <result column="testStatus" jdbcType="VARCHAR" property="testStatus" />
	    <result column="activeFlag" jdbcType="BOOLEAN" property="activeFlag" />
  		<result column="testSessionId" property="testSessionId" jdbcType="BIGINT" />
	    <result column="assessmentCode" jdbcType="VARCHAR" property="assessmentCode" />
	    
	</resultMap>
  
    
  <select id="getStudentTestsBasedOnStudentIds" resultMap="viewMergeStudentTestDetails">
	select  std.stateStudentIdentifier as stateStudentIdentifier,
	ts.name as testSessionName, 		t.testname as testName,
	st.id as studentTestId,
	ca.name as subject,					ct.categorycode as testStatus,
	st.activeflag as activeFlag,		ts.id as testSessionId,		
	ap.abbreviatedname as assessmentCode
	from studentstests st 
	inner join student std on std.id = st.studentid
	inner join testsession ts on ts.id = st.testsessionid
	inner join test as t on t.id = st.testid
	inner join testcollection AS tc on tc.id = ts.testcollectionid
	inner join contentarea as ca on ca.id = tc.contentareaid
	inner join category ct on ct.id = st.status 
	inner join studentassessmentprogram as sap on sap.studentid = std.id
	inner join assessmentprogram as ap on ap.id = sap.assessmentprogramid
	<!--  left join GradeCourse tcGc on tc.gradeCourseId = tcGc.id
	 left join gradebandgradecourse tcgbgc on tc.gradebandid = tcgbgc.gradebandid
	 left join gradeband tcgb on tcgbgc.gradebandid = tcgb.id  -->
	where 	
	
	<if test="studentIds != null">
		st.studentid = ANY(ARRAY 
		<foreach collection="studentIds" item="studentId" open="[" close="]" separator=",">
		 	#{studentId, jdbcType=BIGINT}
		 </foreach>)
    </if>
		and	
	(st.activeflag = true 
	<if test="specialCaseInactiveStudentTestStatus != null and specialCaseInactiveStudentTestStatus.size > 0">
		or st.status in
		 <foreach collection="specialCaseInactiveStudentTestStatus" item="statusId" open="(" close=")" separator=",">
	 	 	#{statusId}
	 	 </foreach>
    </if>		
	)	
	
    <if test="currentSchoolYear != null">
		and ts.schoolyear = #{currentSchoolYear}
	</if>
	order by testSessionName, t.testName, statestudentidentifier, testStatus

    </select>
    
    <resultMap id="PLTWScoringAPIMap" type="edu.ku.cete.domain.api.scoring.ScoringAPIObject">
    	<result column="studentid" property="studentId" jdbcType="BIGINT" />
    	<result column="stage1studentstestsid" property="stage1StudentsTestsId" jdbcType="BIGINT" />
    	<result column="stage1testid" property="stage1TestId" jdbcType="BIGINT" />
    	<result column="stage1starttime" property="stage1StartTime" jdbcType="TIMESTAMP" />
    	<result column="stage1endtime" property="stage1EndTime" jdbcType="TIMESTAMP" />
    	<result column="stage2studentstestsid" property="stage2StudentsTestsId" jdbcType="BIGINT" />
    	<result column="stage2testid" property="stage2TestId" jdbcType="BIGINT" />
    	<result column="stage2starttime" property="stage2StartTime" jdbcType="TIMESTAMP" />
    	<result column="stage2endtime" property="stage2EndTime" jdbcType="TIMESTAMP" />
    	<result column="schoolyear" property="schoolYear" jdbcType="INTEGER" />
    	<result column="enrollmentid" property="enrollmentId" jdbcType="BIGINT" />
    	<result column="classroomid" property="classroomId" jdbcType="BIGINT" />
    	<result column="teacherid" property="teacherId" jdbcType="BIGINT" />
    	<result column="schoolid" property="schoolId" jdbcType="BIGINT" />
    	<result column="contentareaid" property="contentAreaId" jdbcType="BIGINT" />
    	<result column="contentareaabbreviatedname" property="contentAreaAbbreviatedName" jdbcType="VARCHAR" />
    	<result column="totalrawscore" property="totalRawScore" jdbcType="NUMERIC" />
    	<result column="reprocessid" property="reprocessId" jdbcType="BIGINT" />
    	
    	<collection property="clusters" ofType="edu.ku.cete.domain.api.scoring.ClusterScoreObject">
    		<result column="contentframeworkdetailid" property="contentFrameworkDetailId" jdbcType="BIGINT" />
    		<result column="contentframeworkdetailname" property="contentFrameworkDetailName" jdbcType="VARCHAR" />
    		<result column="rawscoreearned" property="rawScoreEarned" jdbcType="NUMERIC" />
    	</collection>
    </resultMap>
    
    <select id="getPLTWScoringData" parameterType="map" resultMap="PLTWScoringAPIMap">
    	WITH RECURSIVE windows AS (
			SELECT otws.operationaltestwindowid, otws.stateid
			FROM operationaltestwindow otw
			JOIN operationaltestwindowstate otws ON otw.id = otws.operationaltestwindowid AND otws.activeflag IS TRUE
			JOIN testenrollmentmethod tem ON otw.testenrollmentmethodid = tem.id
			WHERE (now() BETWEEN otw.effectivedate AND otw.expirydate)
			AND tem.methodcode = 'MLTSTG'
			AND otw.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
		),
		cftree(testid, testsectionid, taskvariantid, contentframeworkdetailid, contentcode, parentcontentframeworkdetailid, frameworklevelid, frameworkleveltitle, frameworklevel) as (
			select t.id, ts.id, tvcfd.taskvariantid, cfd.id, cfd.contentcode, cfd.parentcontentframeworkdetailid, cfd.frameworklevelid, fl.title, fl.level
			from operationaltestwindowstestcollections otwtc
			join testcollectionstests tct on otwtc.testcollectionid = tct.testcollectionid
			join test t on tct.testid = t.id
			join testsection ts on t.id = ts.testid
			join testsectionstaskvariants tstv on ts.id = tstv.testsectionid
			join taskvariantcontentframeworkdetail tvcfd on tstv.taskvariantid = tvcfd.taskvariantid
			join contentframeworkdetail cfd on tvcfd.contentframeworkdetailid = cfd.id
			join frameworklevel fl on cfd.frameworklevelid = fl.id
			where otwtc.operationaltestwindowid in (select distinct operationaltestwindowid from windows)
			<!--
				Commented this out because we want to use any content framework a task is associated with, not just the primary.
				Recursive stuff is not easy to debug, so in the event that we ever want to use it again I'm leaving it here.
			-->
			<!-- and tvcfd.isprimary is true -->
			
			union
			select c.testid, c.testsectionid, c.taskvariantid, cfd.id, cfd.contentcode, cfd.parentcontentframeworkdetailid, cfd.frameworklevelid, fl.title, fl.level
			from contentframeworkdetail cfd
			join frameworklevel fl on cfd.frameworklevelid = fl.id
			join cftree c on cfd.id = c.parentcontentframeworkdetailid
		),
		<!--
			The syntax here is a little wonky, but I couldn't figure out a better way.
			We NEED an interval result in this query, and want to build one from config, if it's available.
		-->
		custom_delay AS (
			SELECT CASE WHEN EXISTS (
				SELECT COALESCE(string_to_interval(attrvalue), '0 seconds')::INTERVAL AS delay
				FROM appconfiguration conf
				WHERE conf.attrcode = 'scoring-api-delay'
				AND conf.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
				LIMIT 1
			) THEN (
				SELECT COALESCE(string_to_interval(attrvalue), '0 seconds')::INTERVAL AS delay
				FROM appconfiguration conf
				WHERE conf.attrcode = 'scoring-api-delay'
				AND conf.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
				LIMIT 1
			)
			ELSE '0 seconds'::INTERVAL
			END AS delay
		),
		<if test="isReprocess">
			reprocess AS (
				select *
				from scoringapireprocess
				where reprocesseddate is null
			),
		</if>
		stage2_students AS (
			SELECT
				st.id, st.testid as testid, t.externalid AS testexternalid, st.studentid, ts.schoolyear, ca.id AS contentareaid, ca.abbreviatedname AS contentareaabbreviatedname,
				otd.stateid, otd.statename, otd.districtid, otd.districtname, otd.schoolid AS school_id, otd.schoolname,
				o.externalid AS schoolid, r.classroomid, er.externalid AS enrollmentid, teacher.externalid AS teacherid,
				st.startdatetime AS starttime, st.enddatetime AS endtime
			<!--
				The reason for this <choose> is performance-based. The original way this was had the reprocess table fairly far down in the join order, which
				gave it horrible performance problems. Re-sending 31 kids took about 2 and a half minutes, when the normal process could send hundreds in a few seconds.
				So the join conditions are basically the same between the two possibilities, but the order is different. The reprocess job will start with the small
				set of students and work its way out from there, which will minimize the work done.
				
				The join conditions between the options should be basically the same.
			-->
			<choose>
				<when test="isReprocess">
						,reproc.id AS reprocessid
					FROM reprocess reproc
					JOIN student s ON reproc.studentid = s.id AND s.activeflag IS TRUE
					JOIN enrollment e ON s.id = e.studentid 
						<!-- AND e.activeflag IS TRUE -->
					JOIN studentstests st ON s.id = st.studentid
						<!-- AND e.id = st.enrollmentid -->
						AND st.activeflag IS TRUE
					JOIN testcollection tc ON st.testcollectionid = tc.id
					JOIN contentarea ca ON tc.contentareaid = ca.id
						AND ca.id = reproc.contentareaid
					JOIN test t ON st.testid = t.id
					JOIN enrollmentsrosters er ON e.id = er.enrollmentid
						<!-- AND er.activeflag IS TRUE -->
					JOIN roster r ON er.rosterid = r.id AND e.currentschoolyear = r.currentschoolyear
						<!-- AND r.activeflag IS TRUE -->
					JOIN testsession ts ON st.testsessionid = ts.id AND r.id = ts.rosterid AND r.currentschoolyear = ts.schoolyear AND ts.activeflag IS TRUE
					JOIN windows otw ON ts.operationaltestwindowid = otw.operationaltestwindowid AND s.stateid = otw.stateid
					JOIN stage stg ON ts.stageid = stg.id AND stg.activeflag IS TRUE
					JOIN category stat ON st.status = stat.id
					JOIN categorytype ct ON stat.categorytypeid = ct.id
					JOIN organizationtreedetail otd ON e.attendanceschoolid = otd.schoolid
					JOIN organization o ON otd.schoolid = o.id AND o.activeflag IS TRUE
					JOIN aartuser teacher ON r.teacherid = teacher.id
				</when>
				<otherwise>
						,NULL::BIGINT AS reprocessid
					FROM windows otw
					JOIN testsession ts ON otw.operationaltestwindowid = ts.operationaltestwindowid AND ts.activeflag IS TRUE
					JOIN stage stg ON ts.stageid = stg.id AND stg.activeflag IS TRUE
					JOIN studentstests st ON ts.id = st.testsessionid AND st.activeflag IS TRUE
					JOIN test t ON st.testid = t.id
					JOIN testcollection tc ON st.testcollectionid = tc.id
					JOIN contentarea ca ON tc.contentareaid = ca.id
					JOIN student s ON st.studentid = s.id AND otw.stateid = s.stateid AND s.activeflag IS TRUE
					JOIN category stat ON st.status = stat.id
					JOIN categorytype ct ON stat.categorytypeid = ct.id
					JOIN enrollment e ON s.id = e.studentid AND st.enrollmentid = e.id AND ts.schoolyear = e.currentschoolyear AND e.activeflag IS TRUE
					JOIN roster r ON ts.rosterid = r.id AND ts.schoolyear = r.currentschoolyear AND ca.id = r.statesubjectareaid AND r.activeflag IS TRUE
					JOIN enrollmentsrosters er ON e.id = er.enrollmentid AND r.id = er.rosterid AND er.activeflag IS TRUE
					JOIN organizationtreedetail otd ON e.attendanceschoolid = otd.schoolid
					JOIN organization o ON otd.schoolid = o.id AND o.activeflag IS TRUE
					JOIN aartuser teacher ON r.teacherid = teacher.id
				</otherwise>
			</choose>
			WHERE ct.typecode = 'STUDENT_TEST_STATUS'
			AND stg.code = 'Stg2'
			<choose>
				<!--
					The reason that the date/time checks are included in here is because
					the test assignment job updates the modifieddate on records it doesn't actually update,
					which means we can't use modifieddate checks because they'll get repeated stuff.
					Silly, I know.
				-->
				<when test="isNightlyRun">
					AND stat.categorycode = 'inprogresstimedout'
					<if test="lastRuntime != null and !isReprocess">
						<!-- if we're doing nightly, we want kids who started the test but did not finish -->
						AND st.startdatetime BETWEEN
							((#{lastRuntime,jdbcType=TIMESTAMP}::TIMESTAMP WITH TIME ZONE) - (SELECT delay FROM custom_delay))
							AND
							(CURRENT_TIMESTAMP - (SELECT delay FROM custom_delay))
					</if>
				</when>
				<otherwise>
					AND stat.categorycode = 'complete'
					<if test="lastRuntime != null and !isReprocess">
						<!-- if we're doing daytime, we want kids who finished the test -->
						AND st.enddatetime BETWEEN
							((#{lastRuntime,jdbcType=TIMESTAMP}::TIMESTAMP WITH TIME ZONE) - (SELECT delay FROM custom_delay))
							AND
							(CURRENT_TIMESTAMP - (SELECT delay FROM custom_delay))
					</if>
				</otherwise>
			</choose>
			ORDER BY st.modifieddate
			<if test="limit != null and offset != null">
				LIMIT #{limit} OFFSET #{offset}
			</if>
		),
		stage1_students AS (
			SELECT
				st.id, st.testid as testid, t.externalid AS testexternalid, st.studentid, ts.schoolyear, ca.id AS contentareaid, ca.abbreviatedname AS contentareaabbreviatedname,
				otd.stateid, otd.statename, otd.districtid, otd.districtname, otd.schoolid AS school_id, otd.schoolname,
				o.externalid AS schoolid, r.classroomid, er.externalid AS enrollmentid, teacher.externalid AS teacherid,
				st.startdatetime AS starttime, st.enddatetime AS endtime
			<choose>
				<when test="isReprocess">
					FROM windows otw
					JOIN testsession ts ON otw.operationaltestwindowid = ts.operationaltestwindowid AND ts.activeflag IS TRUE
					JOIN stage stg ON ts.stageid = stg.id AND stg.activeflag IS TRUE
					JOIN studentstests st ON ts.id = st.testsessionid AND st.activeflag IS TRUE AND st.studentid IN (SELECT DISTINCT studentid FROM stage2_students)
					JOIN test t ON st.testid = t.id
					JOIN testcollection tc ON st.testcollectionid = tc.id
					JOIN contentarea ca ON tc.contentareaid = ca.id
					JOIN student s ON st.studentid = s.id AND otw.stateid = s.stateid AND s.activeflag IS TRUE
					JOIN category stat ON st.status = stat.id
					JOIN categorytype ct ON stat.categorytypeid = ct.id
					JOIN enrollment e ON s.id = e.studentid 
						AND ts.schoolyear = e.currentschoolyear
						<!--	AND st.enrollmentid = e.id 
								AND e.activeflag IS TRUE	-->
					JOIN roster r ON ts.rosterid = r.id AND ts.schoolyear = r.currentschoolyear AND ca.id = r.statesubjectareaid 
						<!-- AND r.activeflag IS TRUE -->
					JOIN enrollmentsrosters er ON e.id = er.enrollmentid AND r.id = er.rosterid 
						<!-- AND er.activeflag IS TRUE -->
					JOIN organizationtreedetail otd ON e.attendanceschoolid = otd.schoolid
					JOIN organization o ON otd.schoolid = o.id AND o.activeflag IS TRUE
					JOIN aartuser teacher ON r.teacherid = teacher.id
				</when>
				<otherwise>
					FROM windows otw
					JOIN testsession ts ON otw.operationaltestwindowid = ts.operationaltestwindowid AND ts.activeflag IS TRUE
					JOIN stage stg ON ts.stageid = stg.id AND stg.activeflag IS TRUE
					JOIN studentstests st ON ts.id = st.testsessionid AND st.activeflag IS TRUE AND st.studentid IN (SELECT DISTINCT studentid FROM stage2_students)
					JOIN test t ON st.testid = t.id
					JOIN testcollection tc ON st.testcollectionid = tc.id
					JOIN contentarea ca ON tc.contentareaid = ca.id
					JOIN student s ON st.studentid = s.id AND otw.stateid = s.stateid AND s.activeflag IS TRUE
					JOIN category stat ON st.status = stat.id
					JOIN categorytype ct ON stat.categorytypeid = ct.id
					JOIN enrollment e ON s.id = e.studentid AND st.enrollmentid = e.id AND ts.schoolyear = e.currentschoolyear AND e.activeflag IS TRUE
					JOIN roster r ON ts.rosterid = r.id AND ts.schoolyear = r.currentschoolyear AND ca.id = r.statesubjectareaid AND r.activeflag IS TRUE
					JOIN enrollmentsrosters er ON e.id = er.enrollmentid AND r.id = er.rosterid AND er.activeflag IS TRUE
					JOIN organizationtreedetail otd ON e.attendanceschoolid = otd.schoolid
					JOIN organization o ON otd.schoolid = o.id AND o.activeflag IS TRUE
					JOIN aartuser teacher ON r.teacherid = teacher.id
				</otherwise>
			</choose>
			WHERE ct.typecode = 'STUDENT_TEST_STATUS'
			AND stg.code = 'Stg1'
			AND stat.categorycode = 'complete'
		)
		SELECT DISTINCT
			stg2.studentid,
			stg1.id AS stage1studentstestsid, stg1.testexternalid AS stage1testid, stg1.starttime AS stage1starttime, stg1.endtime AS stage1endtime,
			stg2.id AS stage2studentstestsid, stg2.testexternalid AS stage2testid, stg2.starttime AS stage2starttime, stg2.endtime AS stage2endtime,
			stg2.schoolyear,
			stg2.enrollmentid, stg2.classroomid, stg2.teacherid, stg2.schoolid,
			stg2.contentareaid
			,CASE
				WHEN stg2.contentareaabbreviatedname = 'SEC' THEN 'CS'
				ELSE stg2.contentareaabbreviatedname
			END AS contentareaabbreviatedname
			,(
				SELECT coalesce(sum(sr_all.score), 0.000)
				FROM studentsresponses sr_all
				JOIN cftree cf_in ON sr_all.testid = cf_in.testid AND sr_all.taskvariantid = cf_in.taskvariantid
				WHERE sr_all.activeflag IS TRUE
				AND cf_in.frameworkleveltitle = 'Claim'
				AND sr_all.studentstestsid IN (stg1.id, stg2.id)
			) AS totalrawscore
			,cf.contentframeworkdetailid, cf.contentcode AS contentframeworkdetailname, sum(coalesce(sr.score, 0.000)) AS rawscoreearned
			,stg2.reprocessid
		FROM stage2_students stg2
		JOIN stage1_students stg1
			ON stg2.studentid = stg1.studentid
			AND stg2.contentareaid = stg1.contentareaid
			AND stg2.schoolyear = stg1.schoolyear
			<if test="!isReprocess">
				AND stg2.school_id = stg1.school_id
			</if>
		JOIN cftree cf ON cf.frameworkleveltitle = 'Claim' AND (stg1.testid = cf.testid OR stg2.testid = cf.testid)
		JOIN studentstestsections sts ON (stg1.id = sts.studentstestid OR stg2.id = sts.studentstestid) AND sts.activeflag IS TRUE
		LEFT JOIN studentsresponses sr ON cf.taskvariantid = sr.taskvariantid AND sts.id = sr.studentstestsectionsid AND sr.activeflag IS TRUE
		GROUP BY
			stg2.studentid,
			stg1.id, stg1.testexternalid, stg1.starttime, stg1.endtime,
			stg2.id, stg2.testexternalid, stg2.starttime, stg2.endtime,
			stg2.schoolyear,
			stg2.enrollmentid, stg2.classroomid, stg2.teacherid, stg2.schoolid
			,stg2.contentareaid, stg2.contentareaabbreviatedname
			,cf.contentframeworkdetailid, cf.contentcode, stg2.reprocessid
		ORDER BY stg2.studentid
    </select>
</mapper>
