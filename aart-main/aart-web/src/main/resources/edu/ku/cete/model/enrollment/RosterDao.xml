<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.ku.cete.model.enrollment.RosterDao" >
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.enrollment.Roster" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="coursesectionname" property="courseSectionName" jdbcType="VARCHAR" />
    <result column="coursesectiondescription" property="courseSectionDescription" jdbcType="VARCHAR" />
    <result column="teacherid" property="teacherId" jdbcType="BIGINT" />
    <result column="attendanceSchoolId" property="attendanceSchoolId" jdbcType="BIGINT" />
    <result column="statesubjectareaid" property="stateSubjectAreaId" jdbcType="BIGINT" />
    <result column="courseenrollmentstatusid" property="courseEnrollmentStatusId" jdbcType="BIGINT" />
    <result column="statecoursecode" property="stateCourseCode" jdbcType="VARCHAR" />
    <result column="restrictionid" property="restrictionId" jdbcType="BIGINT" />
    <result column="sourcetype" property="sourceType" jdbcType="VARCHAR" />
    <result column="statecoursesid" property="stateCoursesId" jdbcType="BIGINT" />
    <result column="classroomid" property="classroomId" jdbcType="BIGINT" />
  </resultMap>
  <resultMap id="jsonBaseResultMap" type="edu.ku.cete.domain.enrollment.Roster" >
  		<id property="id" column="id" />
         <result property="courseSectionName" column="coursesectionname"/>
         <result property="attendanceSchoolId" column="attendanceSchoolId"/>
         <result column="createduser" property="createdUser" jdbcType="INTEGER" />
   		 <result column="createddate" property="createdDate" jdbcType="TIMESTAMP" />
   		 <result column="modifieddate" property="modifiedDate" jdbcType="TIMESTAMP" />
   		 <result column="modifieduser" property="modifiedUser" jdbcType="INTEGER" />   		
  		<result column="sourceType" property="sourceType" jdbcType="VARCHAR" />
		<association property="subject" javaType="edu.ku.cete.domain.content.ContentArea">
		<id column="Subject_ID" property="id" javaType="long"/>	
		<result column="Subject" property="name" javaType="String"/>			               	       
	    </association>	    
		<association property="course" javaType="edu.ku.cete.domain.content.GradeCourse">
			<id column="Course_ID" property="id" javaType="long"/>		       
	         <result column="Course" property="name" javaType="String"/>	        	       
	    </association>
		<association property="teacher" javaType="edu.ku.cete.domain.user.User">
		 <id column="Educator_ID" property="id" javaType="long"/>
	        <result column="Educator_First_Name" property="firstName" javaType="String"/>
	        <result column="Educator_Last_Name" property="surName" javaType="String"/>
	        <result column="educatoridentifier" property="uniqueCommonIdentifier" javaType="String"/>	        	       	       
	    </association> 
	           
		  <collection property="enrollments" column="enrollment_ID" ofType="edu.ku.cete.domain.enrollment.Enrollment" javaType="list" >
		  <id property="id" column="enrollment_ID" />		  
         <association property="student" javaType="edu.ku.cete.domain.student.Student">  
             <id column="Student_ID" property="id" javaType="long"/>
	        <result column="Student_First_Name" property="legalFirstName" javaType="String"/>
	        <result column="Student_Last_Name" property="legalLastName" javaType="String"/>
			<result column="Student_State_ID" property="stateStudentIdentifier" javaType="String"/>			
	    </association>
		  </collection>
  </resultMap>
  
  <resultMap id="studentRosterMap" type="edu.ku.cete.domain.enrollment.StudentRoster">
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="enrollmentid" property="enrollmentId" jdbcType="BIGINT" />
	    <result column="studentid" property="studentId" jdbcType="BIGINT" />
	    <result column="studentenrlid" property="studentEnrlId" jdbcType="BIGINT"/>
	    <result column="attendanceschoolid" property="attendanceSchoolId" jdbcType="BIGINT"/>
	    <association property="roster" javaType="edu.ku.cete.domain.enrollment.Roster">
	        <id column="rosterid" property="id" jdbcType="BIGINT" />
	        <result column="coursesectionname" property="courseSectionName" jdbcType="VARCHAR" />
	        <result column="statecoursesid" property="stateCoursesId" jdbcType="BIGINT" />
        </association>
        <association property="student" javaType="edu.ku.cete.domain.student.Student">
			<id property="id" column="studentid" jdbcType="BIGINT" />
			<result property="stateStudentIdentifier" column="statestudentidentifier" jdbcType="VARCHAR" />
			<result property="legalFirstName" column="legalfirstname" jdbcType="VARCHAR" />
			<result property="legalLastName" column="legallastname" jdbcType="VARCHAR" />
		</association>
    </resultMap>

  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and roster.${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and roster.${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and roster.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and roster.${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                 </when>
              </choose>
            </foreach>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and roster.${criterion.condition}
                </when>
                <when test="criterion.join" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.singleValue" >
                  and roster.${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and roster.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and roster.${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    roster.id as rosterid,roster.id , roster.coursesectionname, roster.coursesectiondescription,
     roster.teacherid, roster.attendanceSchoolId,
     roster.statesubjectareaid, roster.activeflag,
     roster.courseenrollmentstatusid, roster.restrictionid,roster.statecoursecode, roster.statecoursesid, roster.currentschoolyear,
     roster.classroomid, roster.sourcetype
  </sql>

  <select id="selectByExample" resultMap="BaseResultMap" parameterType="edu.ku.cete.domain.enrollment.RosterExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.roster
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByEnrollment" resultMap="BaseResultMap" parameterType="edu.ku.cete.domain.enrollment.RosterExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.roster roster
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    select 
    <include refid="Base_Column_List" />
    from public.roster
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    delete from public.roster
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="edu.ku.cete.domain.enrollment.RosterExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    delete from public.roster
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <select id="lastid" resultType="java.lang.Long">
	SELECT lastval() AS id
  </select>
  <insert id="insert" parameterType="edu.ku.cete.domain.enrollment.Roster" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    insert into public.roster (coursesectionname, coursesectiondescription, 
      teacherid, attendanceSchoolId,
      statesubjectareaid, courseenrollmentstatusid, 
      restrictionid, createddate, createduser, activeflag, modifieddate, modifieduser,
      statesubjectcourseidentifier,localcourseid,educatorschooldisplayidentifier,
      statecoursecode, sourcetype,statecoursesid,currentSchoolYear, aypSchoolId, classroomid)

    values (#{courseSectionName,jdbcType=VARCHAR}, #{courseSectionDescription,jdbcType=VARCHAR}, 
      #{teacherId,jdbcType=BIGINT},#{attendanceSchoolId,jdbcType=BIGINT},
       #{stateSubjectAreaId,jdbcType=BIGINT}, #{courseEnrollmentStatusId,jdbcType=BIGINT}, 
      #{restrictionId,jdbcType=BIGINT}, #{createdDate}, #{createdUser}, #{activeFlag},#{modifiedDate},
      #{modifiedUser},#{stateSubjectCourseIdentifier},#{localCourseId}, #{educatorschooldisplayidentifier},
      #{stateCourseCode,jdbcType=VARCHAR},#{sourceType,jdbcType=VARCHAR},
      #{stateCoursesId,jdbcType=BIGINT}, #{currentSchoolYear, jdbcType=INTEGER}, #{aypSchoolId,jdbcType=BIGINT},
      #{classroomId,jdbcType=BIGINT})
  </insert>
  <insert id="insertSelective" parameterType="edu.ku.cete.domain.enrollment.Roster" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    insert into public.roster
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="courseSectionName != null" >
        coursesectionname,
      </if>
      <if test="courseSectionDescription != null" >
        coursesectiondescription,
      </if>
      <if test="teacherId != null" >
        teacherid,
      </if>
      <if test="attendanceSchoolId != null" >
        attendanceSchoolId,
      </if>
      <if test="stateSubjectAreaId != null" >
        statesubjectareaid,
      </if>
      <if test="courseEnrollmentStatusId != null" >
        courseenrollmentstatusid,
      </if>
      <if test="restrictionId != null" >
        restrictionId,
      </if>
      <if test="stateCourseCode != null" >
      statecoursecode,
       </if>
      <if test="sourceType != null" >
      sourcetype,
       </if>       
        createddate, 
		createduser, 
		activeflag,
		modifieddate, 
		modifieduser,
		<if test="classroomId != null">
		classroomid,
		</if>
		<if test="currentSchoolYear != null">
		currentschoolyear,
		</if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="courseSectionName != null" >
        #{courseSectionName,jdbcType=VARCHAR},
      </if>
      <if test="courseSectionDescription != null" >
        #{courseSectionDescription,jdbcType=VARCHAR},
      </if>
      <if test="teacherId != null" >
        #{teacherId,jdbcType=BIGINT},
      </if>
      <if test="attendanceSchoolId != null" >
        #{attendanceSchoolId,jdbcType=BIGINT},
      </if>
      <if test="stateSubjectAreaId != null" >
        #{stateSubjectAreaId,jdbcType=BIGINT},
      </if>
      <if test="courseEnrollmentStatusId != null" >
        #{courseEnrollmentStatusId,jdbcType=BIGINT},
      </if>
      <if test="restrictionId != null" >
        #{restrictionId,jdbcType=BIGINT},
      </if>
      <if test="stateCourseCode != null" >
      #{stateCourseCode,jdbcType=VARCHAR},
       </if>
      <if test="sourceType != null" >
      #{sourceType,jdbcType=VARCHAR},
       </if>       
      #{createdDate},
	  #{createdUser},
	  #{activeFlag},
	  #{modifiedDate},
	  #{modifiedUser},
	  <if test="classroomId != null">
	    #{classroomId},
	  </if>
	  <if test="currentSchoolYear != null">
	    #{currentSchoolYear},
	  </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.ku.cete.domain.enrollment.RosterExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    select count(*) from public.roster
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    update public.roster
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.courseSectionName != null" >
        coursesectionname = #{record.courseSectionName,jdbcType=VARCHAR},
      </if>
      <if test="record.courseSectionDescription != null" >
        coursesectiondescription = #{record.courseSectionDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.teacherId != null" >
        teacherid = #{record.teacherId,jdbcType=BIGINT},
      </if>
      <if test="record.attendanceSchoolId != null" >
        attendanceSchoolId = #{record.attendanceSchoolId,jdbcType=BIGINT},
      </if>
      <if test="record.stateSubjectAreaId != null" >
        statesubjectareaid = #{record.stateSubjectAreaId,jdbcType=BIGINT},
      </if>
      <if test="record.courseEnrollmentStatusId != null" >
        courseenrollmentstatusid = #{record.courseEnrollmentStatusId,jdbcType=BIGINT},
      </if>
      <if test="record.stateCourseCode != null" >
      statecoursecode = #{record.stateCourseCode,jdbcType=VARCHAR},
       </if>
      <if test="record.restrictionId != null" >
        restrictionId = #{record.restrictionId,jdbcType=BIGINT},
      </if>
      <if test="stateCoursesId != null" >
        statecoursesid = #{stateCoursesId,jdbcType=BIGINT},
      </if>
       modifieddate = #{record.modifiedDate},
	   modifieduser = #{record.modifiedUser},
	   activeflag = #{record.activeFlag} 
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    update public.roster
    set id = #{record.id,jdbcType=BIGINT},
      coursesectionname = #{record.courseSectionName,jdbcType=VARCHAR},
      coursesectiondescription = #{record.courseSectionDescription,jdbcType=VARCHAR},
      teacherid = #{record.teacherId,jdbcType=BIGINT},
      attendanceSchoolId = #{record.attendanceSchoolId,jdbcType=BIGINT},
      statesubjectareaid = #{record.stateSubjectAreaId,jdbcType=BIGINT},
      courseenrollmentstatusid = #{record.courseEnrollmentStatusId,jdbcType=BIGINT},
      statecoursecode = #{record.stateCourseCode,jdbcType=VARCHAR},
      restrictionId = #{record.restrictionId,jdbcType=BIGINT},
       modifieddate = #{record.modifiedDate},
	   modifieduser = #{record.modifiedUser},
	   activeflag = #{record.activeFlag} 
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.enrollment.Roster" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    update public.roster
    <set >
      <if test="courseSectionName != null" >
        coursesectionname = #{courseSectionName,jdbcType=VARCHAR},
      </if>
      <if test="courseSectionDescription != null" >
        coursesectiondescription = #{courseSectionDescription,jdbcType=VARCHAR},
      </if>
      <if test="teacherId != null" >
        teacherid = #{teacherId,jdbcType=BIGINT},
      </if>
      <if test="teacherId != null" >
        attendanceSchoolId = #{attendanceSchoolId,jdbcType=BIGINT},
      </if>
      <if test="stateSubjectAreaId != null" >
        statesubjectareaid = #{stateSubjectAreaId,jdbcType=BIGINT},
      </if>
      <if test="courseEnrollmentStatusId != null" >
        courseenrollmentstatusid = #{courseEnrollmentStatusId,jdbcType=BIGINT},
      </if>
      <if test="stateCourseCode != null" >
      statecoursecode = #{stateCourseCode,jdbcType=VARCHAR},
       </if>
      <if test="restrictionId != null" >
        restrictionId = #{restrictionId,jdbcType=BIGINT},
      </if>
      <if test="stateCoursesId != null" >
        statecoursesid = #{stateCoursesId,jdbcType=BIGINT},
      </if>
      modifieddate = #{modifiedDate},
	  modifieduser = #{modifiedUser},
	  activeflag = #{activeFlag},
  </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.enrollment.Roster" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon May 07 11:35:01 CDT 2012.
    -->
    update public.roster
    set coursesectionname = #{courseSectionName,jdbcType=VARCHAR},
      coursesectiondescription = #{courseSectionDescription,jdbcType=VARCHAR},
      teacherid = #{teacherId,jdbcType=BIGINT},
      attendanceSchoolId = #{attendanceSchoolId,jdbcType=BIGINT},
      statesubjectareaid = #{stateSubjectAreaId,jdbcType=BIGINT},
      courseenrollmentstatusid = #{courseEnrollmentStatusId,jdbcType=BIGINT},
      statecoursecode = #{stateCourseCode,jdbcType=VARCHAR},
      restrictionId = #{restrictionId,jdbcType=BIGINT},
      statecoursesid = #{stateCoursesId,jdbcType=BIGINT},
      modifieddate = #{modifiedDate},
	  modifieduser = #{modifiedUser},
	  activeflag = #{activeFlag} 
    where id = #{id,jdbcType=BIGINT}
  </update>

  
    <resultMap id="rosterObjectMap" type="edu.ku.cete.domain.enrollment.Roster">
        <id column="id" property="id" jdbcType="BIGINT" />
        <result column="coursesectionname" property="courseSectionName" jdbcType="VARCHAR" />
        <result column="coursesectiondescription" property="courseSectionDescription" jdbcType="VARCHAR" />
        <result column="teacherid" property="teacherId" jdbcType="BIGINT" />
        <result column="attendanceSchoolId" property="attendanceSchoolId" jdbcType="BIGINT" />
        <result column="statesubjectareaid" property="stateSubjectAreaId" jdbcType="BIGINT" />
        <result column="currentschoolyear" property="currentSchoolYear" jdbcType="BIGINT" />
        <result column="courseenrollmentstatusid" property="courseEnrollmentStatusId" jdbcType="BIGINT" />
        <result column="restrictionId" property="restrictionId" jdbcType="BIGINT" />
    	<result column="statecoursecode" property="stateCourseCode" jdbcType="VARCHAR" />
        <association property="subject" javaType="edu.ku.cete.domain.content.ContentArea">
            <id property="id" column="subject.id" jdbcType="BIGINT"/>
            <result property="name" column="subject.name" jdbcType="VARCHAR"/>
            <result property="externalId" column="subject.externalid" jdbcType="VARCHAR"/>
            <result property="sortOrder" column="subject.sortorder" jdbcType="VARCHAR"/>
            <result property="originationCode" column="subject.originationcode" jdbcType="BIGINT"/>
            <result property="createDate" column="subject.createdate" jdbcType="TIMESTAMP"/>
            <result property="modifiedDate" column="subject.modifieddate" jdbcType="TIMESTAMP"/>
            <result property="abbreviatedName" column="subject.abbreviatedname" jdbcType="TIMESTAMP"/>
        </association>
        <association property="teacher" javaType="edu.ku.cete.domain.user.User">
            <id property="id" column="teacher.id"/>
            <result property="userName" column="teacher.username"/>
            <result property="stateId" column="teacher.stateid"/>
            <result property="firstName" column="teacher.firstname"/>
            <result property="middleName" column="teacher.middlename"/>
            <result property="surName" column="teacher.surname"/>
            <result property="defaultUserGroupsId" column="teacher.defaultusergroupsid"/>
            
	           <result property="uniqueCommonIdentifier" column="uniqueCommonIdentifier"/>
            <result property="email" column="teacher.email"/>
        </association>
    </resultMap>

  <sql id="Object_Graph_Column_List">
      <include refid="Base_Column_List"/>, ca.id as "subject.id", ca.externalid as "subject.externalid",
       ca.sortorder as "subject.sortorder", ca.name as "subject.name",
        ca.abbreviatedname as "subject.abbreviatedname", ca.createdate as "subject.createdate", ca.modifieddate as "subject.modifieddate", 
        ca.originationcode as "subject.originationcode",
       au.id as "teacher.id", au.username as "teacher.username", au.firstname as "teacher.firstname",
        au.middlename as "teacher.middlename", au.surname as "teacher.surname", au.email as "teacher.email",
         au.uniquecommonidentifier as "teacher.uniquecommonidentifier", au.defaultusergroupsid as "teacher.defaultusergroupsid"
  </sql>
  <!-- TODO Find if this is used , if not delete it after making it use the new one. -->
  <select id="findByTeacherIdOLD" resultMap="rosterObjectMap" parameterType="long">
      SELECT
      <include refid="Object_Graph_Column_List"/>
      FROM aartuser as au, roster LEFT JOIN contentarea as ca ON roster.statesubjectareaid = ca.id 
       where au.id = roster.teacherid and roster.teacherid = #{teacherId} and roster.id  =ANY(ARRAY 
		(select rosterid from enrollmentsrosters where enrollmentid  =ANY(ARRAY
		    (select id from enrollment where attendanceschoolid = #{organizationId}))))
  </select>
  <!-- TODO Find if this is used , if not delete it after making it use the new one. -->
  <!-- TODO if used optimize it to use roster.attendanceSchoolId -->
  <select id="findByTeacherId" resultMap="rosterObjectMap" parameterType="map">
      SELECT
      <include refid="Object_Graph_Column_List"/>
      FROM aartuser as au, roster LEFT JOIN contentarea as ca ON roster.statesubjectareaid = ca.id 
       where
      (au.id = roster.teacherid and roster.id  =ANY(ARRAY (select rosterid from enrollmentsrosters,enrollment where enrollmentid=enrollment.id
       and enrollment.attendanceschoolid = #{organizationId}) and roster.teacherid = #{teacherId})) 
       or roster.id  =ANY(ARRAY
      (select rosterid from enrollmentsrosters,enrollment,organizationtreedetail otd where enrollmentid=enrollment.id
       and enrollment.attendanceschoolid=otd.schoolid and (otd.schoolid = #{organizationId} or otd.districtid = #{organizationId} or otd.stateid = #{organizationId})));
<!--        =ANY(ARRAY( select id from organization_children(#{organizationId}) )) )); -->
  </select>
  
	<select id="findRostersforTeacherId" resultMap="rosterObjectMap" parameterType="map">
		SELECT <include refid="Object_Graph_Column_List"/>
		FROM roster roster
		inner join aartuser au on au.id = roster.teacherid and au.activeflag is true and roster.activeflag is true
		inner join enrollmentsrosters er on roster.id = er.rosterid and er.activeflag is true
		inner join enrollment e on er.enrollmentid = e.id and e.activeflag is true
		inner join organizationtreedetail otd on e.attendanceschoolid=otd.schoolid 
		and (otd.schoolid = #{organizationId} or otd.districtid = #{organizationId} or otd.stateid = #{organizationId})
		LEFT JOIN contentarea as ca ON roster.statesubjectareaid = ca.id and ca.activeflag is true
		where roster.teacherid = #{teacherId} and roster.currentschoolyear = #{currentSchoolYear}
	</select>
     
        <select id="findRostersforTeacherIdInCurrentYear" resultMap="rosterObjectMap" parameterType="map">
      SELECT
      <include refid="Object_Graph_Column_List"/>
      FROM aartuser as au, roster 
      LEFT JOIN contentarea as ca ON roster.statesubjectareaid = ca.id 
       where (au.id = roster.teacherid 
       and roster.id  =ANY(ARRAY(select rosterid from enrollmentsrosters,enrollment,organizationtreedetail otd where enrollmentid=enrollment.id
       and enrollment.attendanceschoolid=otd.schoolid and (otd.schoolid = #{organizationId} or otd.districtid = #{organizationId} or otd.stateid = #{organizationId})))
        and roster.teacherid = #{teacherId})
     	<if test="currentSchoolYear != null">
			and roster.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
		</if>
     </select>
     
  <resultMap id="rosterDtoMap" type="edu.ku.cete.web.RosterDTO">
       <association property="roster" javaType="edu.ku.cete.domain.enrollment.Roster">
	        <id column="id" property="id" jdbcType="BIGINT" />
	        <result column="coursesectionname" property="courseSectionName" jdbcType="VARCHAR" />
	        <result column="coursesectiondescription" property="courseSectionDescription" jdbcType="VARCHAR" />
	        <result column="teacherid" property="teacherId" jdbcType="BIGINT" />
	        <result column="attendanceSchoolId" property="attendanceSchoolId" jdbcType="BIGINT" />
	        <result column="statesubjectareaid" property="stateSubjectAreaId" jdbcType="BIGINT" />
	        <result column="courseenrollmentstatusid" property="courseEnrollmentStatusId" jdbcType="BIGINT" />
	        <result column="restrictionId" property="restrictionId" jdbcType="BIGINT" />
    		<result column="statecoursecode" property="stateCourseCode" jdbcType="VARCHAR" />
    		<result column="statecoursesid" property="stateCoursesId" jdbcType="BIGINT" />
    		<result column="currentschoolyear" property="currentSchoolYear" jdbcType="BIGINT" />
    		<result column="schoolname" property="schoolName" jdbcType="VARCHAR" />
    		<result column="schoolid" property="schoolId" jdbcType="BIGINT" />
			<result column="totalrecords" property="totalRecords" jdbcType="INTEGER" />
		    <association property="subject" javaType="edu.ku.cete.domain.content.ContentArea">
	            <id property="id" column="id" jdbcType="BIGINT"/>
	            <result property="name" column="name" jdbcType="VARCHAR"/>
	            <result property="externalId" column="externalid" jdbcType="VARCHAR"/>
	            <result property="sortOrder" column="sortorder" jdbcType="VARCHAR"/>
	            <result property="originationCode" column="originationcode" jdbcType="BIGINT"/>
	            <result property="createDate" column="createdate" jdbcType="TIMESTAMP"/>
	            <result property="modifiedDate" column="modifieddate" jdbcType="TIMESTAMP"/>
	            <result property="abbreviatedName" column="abbreviatedname" jdbcType="TIMESTAMP"/>
	        </association>
		    <association property="teacher" javaType="edu.ku.cete.domain.user.User">
	           <id property="id" column="aartuser.id"/>
	           <result property="userName" column="username"/>
	           <result property="stateId" column="stateid"/>
	           <result property="firstName" column="firstname"/>
	           <result property="middleName" column="middlename"/>
	           <result property="surName" column="surname"/>
	           <result property="defaultUserGroupsId" column="defaultusergroupsid"/>
	           <result property="uniqueCommonIdentifier" column="uniqueCommonIdentifier"/>
	           <result property="email" column="email"/>
	           <result property="activeFlag" column="aartuser.activeFlag"/>
	           <result property="statusCode" column="statusCode"/>
		     </association>
		     <association property="course" javaType="edu.ku.cete.domain.content.GradeCourse">
	            <id property="id" column="course.id" jdbcType="BIGINT"/>
	            <result property="name" column="course.name" jdbcType="VARCHAR"/>
	            <result property="externalId" column="course.externalid" jdbcType="VARCHAR"/>
	            <result property="originationCode" column="course.originationcode" jdbcType="BIGINT"/>
	            <result property="createDate" column="course.createdate" jdbcType="TIMESTAMP"/>
	            <result property="modifiedDate" column="course.modifieddate" jdbcType="TIMESTAMP"/>
	            <result property="abbreviatedName" column="course.abbreviatedname" jdbcType="TIMESTAMP"/>
	        </association>
       </association>
   </resultMap>
  <resultMap id="rosterMap" type="edu.ku.cete.domain.enrollment.Roster">
	<id column="id" property="id" jdbcType="BIGINT" />
	<result column="coursesectionname" property="courseSectionName"
		jdbcType="VARCHAR" />
	<result column="coursesectiondescription" property="courseSectionDescription"
		jdbcType="VARCHAR" />
	<result column="teacherid" property="teacherId" jdbcType="BIGINT" />
	<result column="attendanceSchoolId" property="attendanceSchoolId" jdbcType="BIGINT" />
	<result column="statesubjectareaid" property="stateSubjectAreaId"
		jdbcType="BIGINT" />
	<result column="courseenrollmentstatusid" property="courseEnrollmentStatusId"
		jdbcType="BIGINT" />
	<result column="restrictionId" property="restrictionId" jdbcType="BIGINT" />
    <result column="statecoursecode" property="stateCourseCode" jdbcType="VARCHAR" />
    <result column="statecoursesid" property="stateCoursesId" jdbcType="BIGINT" />
	<result column="currentschoolyear" property="currentSchoolYear" jdbcType="BIGINT" />
	<result column="schoolname" property="schoolName" jdbcType="VARCHAR" />
	<association property="subject" javaType="edu.ku.cete.domain.content.ContentArea">
		<id property="id" column="id" jdbcType="BIGINT" />
		<result property="name" column="name" jdbcType="VARCHAR" />
		<result property="externalId" column="externalid" jdbcType="VARCHAR" />
		<result property="sortOrder" column="sortorder" jdbcType="VARCHAR" />
		<result property="originationCode" column="originationcode"
			jdbcType="BIGINT" />
		<result property="createDate" column="createdate" jdbcType="TIMESTAMP" />
		<result property="modifiedDate" column="modifieddate" jdbcType="TIMESTAMP" />
		<result property="abbreviatedName" column="abbreviatedname"
			jdbcType="TIMESTAMP" />
	</association>
	<association property="teacher" javaType="edu.ku.cete.domain.user.User">
		<id property="id" column="aartuser.id" />
		<result property="userName" column="username" />
		<result property="stateId" column="stateid" />
		<result property="firstName" column="firstname" />
		<result property="middleName" column="middlename" />
		<result property="surName" column="surname" />
		<result property="defaultUserGroupsId" column="defaultusergroupsid" />
		<result property="uniqueCommonIdentifier" column="uniqueCommonIdentifier"/>
		<result property="email" column="email" />
	</association>
   </resultMap>   
   <resultMap id="RosterExtractMap" type="edu.ku.cete.web.RosterExtractDTO">
     <id property="rosterId" column="rosterid"/>
     <result property="state" column="state"/>
     <result property="district" column="district"/>
     <result property="school" column="school"/>
     <result property="modifiedDate" column="modifieddate"/>
     <result property="modifiedUser" column="modifieduser" />
     <result property="rosterName" column="rostername"/>
     <result property="contentAreaName" column="contentareaname"/>
     <result property="gradeCourseName" column="gradecoursename"/>
     <result property="schoolIdentifier" column="schoolidentifier"/>
     <result property="currentSchoolYear" column="currentschoolyear"/>
     <result property="stateStudentIdentifier" column="statestudentidentifier"/>
     <result property="localStudentIdentifier" column="localstudentidentifier"/>
     <result property="studentFirstName" column="studentfirstname"/>
     <result property="studentLastName" column="studentlastname"/>
     <result property="teacherId" column="teacherid"/>
     <result property="teacherFirstName" column="teacherfirstname"/>
     <result property="teacherLastName" column="teacherlastname"/>
     <result property="studentAssesmentPrograms" column="studentAssesmentProgram" />     
   </resultMap>
   <sql id="DTO_Column_List">
     <include refid="Base_Column_List"/>, ca.id, ca.externalid,
       ca.sortorder, ca.name, ca.abbreviatedname, ca.createdate, ca.modifieddate,
        ca.originationcode, au.id as "aartuser.id", au.username, au.firstname, au.middlename,
      au.surname, au.email, au.uniquecommonidentifier, au.defaultusergroupsid, au.activeflag as "aartuser.activeflag"
   </sql>
   
   <sql id="DTO_Column_List_With_Course_School">
     <include refid="DTO_Column_List"/>, gc.id as "course.id", gc.name as "course.name", gc.abbreviatedname as "course.abbreviatedname", o.organizationname as schoolName, o.id as schoolId
     , (CASE  
			WHEN suo.statuscode = '1' THEN 'Pending'
			WHEN suo.statuscode = '2' THEN 'Active' 
			WHEN suo.statuscode = '3' THEN 'Inactive' 
			ELSE 'Inactive' 
		END) as statusCode
   </sql>
   
   <!-- Rosters directly tied to the teacher for the given school. -->
   <!-- TODO optimize it by using roster.attendanceSchoolId -->
  <select id="getRosterDtoByUserAndOrg" resultMap="rosterDtoMap" parameterType="map">
    SELECT distinct <include refid="DTO_Column_List"/>
    from roster LEFT JOIN contentarea as ca ON roster.statesubjectareaid = ca.id JOIN enrollmentsrosters as er ON roster.id = er.rosterid,
     aartuser as au, enrollment as e
    where roster.teacherid = au.id
    AND e.id = er.enrollmentid
    AND e.attendanceschoolid = #{selectedOrganizationId}
    AND roster.teacherid = #{teacherId}
    union 
    SELECT distinct <include refid="DTO_Column_List"/>
    from roster LEFT JOIN contentarea as ca ON roster.statesubjectareaid = ca.id
     JOIN enrollmentsrosters as er ON roster.id = er.rosterid, aartuser as au, enrollment as e
    where roster.teacherid = au.id
    AND e.id = er.enrollmentid
    AND e.attendanceschoolid = #{selectedOrganizationId}
    <if test="restriction != null" >
    AND roster.restrictionId = #{restriction.id}
    </if>
    <if test="restriction == null" >
    AND roster.restrictionId is null
    </if>            
  </select>
   <!-- Rosters directly tied to the teacher if any and 
   in case the logged in user has view all rosters i.e. principal then all rosters in the user's organization tree.
   Teacher can see all rosters tied directly to him, irrespective of he is part of that organization or not.
   This is because teacher does not have to be part of that school to teach in that school.
   TODO optimize it by using roster.attendanceschoolid, if not using enrollment information.
   -->
  <select id="getRosterByUserRestrictionAndOrganization" resultMap="rosterMap" parameterType="map">
    SELECT * from (
	    SELECT distinct <include refid="DTO_Column_List"/>
		from roster
		LEFT JOIN contentarea as ca ON roster.statesubjectareaid = ca.id
<!-- 		join (Select id from organization_children(#{userOrganizationId}) -->
<!-- 		union all -->
<!-- 		Select #{userOrganizationId}) orglist on roster.attendanceschoolid =orglist.id, -->
		join organizationtreedetail orglist on roster.attendanceschoolid =orglist.schoolid,
		aartuser as au, testsession ts
		where roster.teacherid = au.id
		AND roster.id = ts.rosterid
		 AND (orglist.schoolid = #{userOrganizationId,jdbcType=BIGINT}
		  	OR orglist.districtid = #{userOrganizationId,jdbcType=BIGINT}
		  	OR orglist.stateid = #{userOrganizationId,jdbcType=BIGINT}) 
		<if test="restriction == null" >
			AND roster.teacherid = #{userId}
		</if>
		<if test="restriction != null" >
			AND (roster.teacherid = #{userId} or roster.restrictionId = #{restriction.id})
		</if>
    ) AS rosters order by  1
  </select>  
  
  <select id="getRosterForReports" resultMap="rosterMap" parameterType="map">
    SELECT distinct roster.id, roster.courseSectionName
	FROM roster
	LEFT JOIN contentarea as ca ON roster.statesubjectareaid = ca.id
<!-- 	JOIN (Select id from organization_children(#{schoolId,jdbcType=BIGINT}) -->
<!-- 		union all -->
<!-- 		Select #{schoolId,jdbcType=BIGINT}) orglist on roster.attendanceschoolid =orglist.id, -->
	join organizationtreedetail orglist on roster.attendanceschoolid =orglist.schoolid,
	aartuser as au, testsession ts
	where roster.teacherid = au.id
	AND roster.id = ts.rosterid
    AND roster.statesubjectareaid = #{contentAreaId,jdbcType=BIGINT}  
    AND (orglist.schoolid = #{schoolId,jdbcType=BIGINT}
		  	OR orglist.districtid = #{schoolId,jdbcType=BIGINT}
		  	OR orglist.stateid = #{schoolId,jdbcType=BIGINT})  
	<if test="restrictionId == null" >
		AND roster.teacherid = #{userId,jdbcType=BIGINT}
	</if>
	<if test="restrictionId != null" >
		AND (roster.teacherid = #{userId,jdbcType=BIGINT} or roster.restrictionId = #{restrictionId,jdbcType=BIGINT})
	</if>
	<if test="currentSchoolYear != null">
		AND roster.currentschoolyear = #{currentSchoolYear, jdbcType=BIGINT}
	</if>
  </select>
  
  <select id="getRosterForTeacherReports" resultMap="rosterMap" parameterType="map">
    SELECT distinct r.id, r.coursesectionname, o.organizationname as schoolname
	FROM roster r
	join aartuser au on r.teacherid = au.id and au.activeflag is true
	join organization o on o.id = r.attendanceschoolid
	join reportassessmentprogram rap on rap.subjectid = r.statesubjectareaid and rap.activeflag is true 
		and rap.assessmentprogramid = #{apId} and rap.authorityid = #{authorityId} and rap.readytoview is true 
		and rap.stateid = (select stateid from organizationtreedetail where schoolid = #{organizationId})
	join reportassessmentprogramgroup rapg on rapg.reportassessmentprogramid = rap.id and rapg.activeflag is true and rapg.groupid =  #{groupId} 
	where r.currentschoolyear = #{currentSchoolYear}
	AND r.activeflag is true
	AND r.teacherid = #{userId}
	order by coursesectionname
  </select>
  
  <select id="getRosterDtoByOrg" resultMap="rosterDtoMap" parameterType="long">
    SELECT distinct <include refid="DTO_Column_List"/>
    from roster LEFT JOIN contentarea as ca ON roster.statesubjectareaid = ca.id
     JOIN enrollmentsrosters as er ON roster.id = er.rosterid, aartuser as au, enrollment as e
    where roster.teacherid = au.id
    AND e.id = er.enrollmentid
    AND e.attendanceschoolid = #{organizationId}
  </select>
  
  <select id="getNumberOfStudents" resultType="Integer" parameterType="long">
    select count(er.enrollmentid)
    from enrollmentsrosters as er
    where er.rosterid = #{rosterId}
  </select>
  
  <select id="getNumberOfActiveStudents" resultType="Integer" parameterType="long">
    select count(er.enrollmentid)
    from enrollmentsrosters as er
    join enrollment e on er.enrollmentid = e.id
    where e.activeflag = true and er.activeflag = true
    and er.rosterid = #{rosterId}
  </select>
 
  <!--Added to fix DE10302  -->
  <select id="getRosterByTeacher" resultType="Integer" parameterType="long">
    select count(*)
    from roster
    where teacherid = #{userId}
  </select>
  
  <select id="getRosterDtoInRosterIds" resultMap="rosterDtoMap">
    SELECT distinct <include refid="DTO_Column_List"/>
    from roster LEFT JOIN contentarea as ca ON roster.statesubjectareaid = ca.id
     JOIN enrollmentsrosters as er ON roster.id = er.rosterid, aartuser as au, enrollment as e
    where roster.teacherid = au.id
    AND e.id = er.enrollmentid
    AND roster.id  =ANY(ARRAY
    <foreach item="item" index="index" collection="rosterIds"
      open="[" separator="," close="]">
        #{item}
    </foreach>)
  </select>
 
   <select id="getRostersToViewByOrg" resultMap="rosterDtoMap">
   	SELECT  distinct count(*) OVER() AS totalrecords,<include refid="DTO_Column_List_With_Course_School"/>
	FROM 
		<if test="organizationId != null">
			( select distinct r.* from enrollmentsrosters  er 
			inner join roster r on r.id = er.rosterid and r.activeflag is true and er.activeflag is true
			inner join enrollment en on en.id = er.enrollmentid and en.activeflag is true
			inner join student s on s.id = en.studentid and s.activeflag is true
			inner join studentassessmentprogram sap on sap.studentid = s.id and sap.activeflag is true and sap.assessmentprogramid = #{assessmenProgramId}
			inner join organizationtreedetail otd on otd.schoolid=r.attendanceschoolid where r.activeflag is true AND 
			(otd.schoolid = #{organizationId,jdbcType=BIGINT} OR otd.districtid = #{organizationId,jdbcType=BIGINT} OR otd.stateid = #{organizationId,jdbcType=BIGINT}) 
			group by r.id, s.id having count(1) > 0 ) roster
		</if>
		<if test="organizationId == null or organizationId == 0">
			(select * from roster where activeflag is true) roster
		</if>
		JOIN aartuser au on roster.teacherId = au.id and au.activeflag is true
		INNER JOIN 
			(select max(uog.status) as statuscode, uo.aartuserid 
			  from userorganizationsgroups uog 
				inner join usersorganizations uo on uog.userorganizationid = uo.id AND uo.activeflag is true AND uog.activeflag is true
				inner join userassessmentprogram uaps on uo.aartuserid = uaps.aartuserid and uaps.assessmentprogramid = #{assessmenProgramId}
				and uaps.activeflag is true and uaps.userorganizationsgroupsid is not null
			group by uo.aartuserid) suo on suo.aartuserid=au.id  
		JOIN contentarea ca on roster.statesubjectareaid = ca.id 
		left JOIN gradecourse gc on roster.statecoursesid = gc.id and gc.course is true 
		left join organization o on roster.attendanceschoolid = o.id and o.activeflag is true
		WHERE au.activeflag is true 
		<!-- if test="organizationId != null">AND roster.attendanceschoolid =ANY(ARRAY(select id from organization_children(#{organizationId, jdbcType=BIGINT}) union select #{organizationId, jdbcType=BIGINT}))</if> -->
		<if test="arrtUserId != null">AND au.id = #{arrtUserId, jdbcType=BIGINT}</if>		
		<if test="name != null">AND upper(roster.coursesectionname) like upper('%' || #{name} || '%')</if>
		<if test="edUniqueCommonId != null">AND upper(au.uniquecommonidentifier) like upper('%' || #{edUniqueCommonId} || '%')</if>
		<if test="firstName != null">AND upper(au.firstname) like upper('%' || #{firstName} || '%')</if>
		<if test="lastName != null">AND upper(au.surname) like upper('%' || #{lastName} || '%')</if>
		<if test="contentArea != null">AND upper(ca.name) like upper('%' || #{contentArea} || '%')</if>
		<if test="stateCoursesName != null">AND upper(gc.name) like upper('%' || #{stateCoursesName} || '%')</if>
		<if test="currentSchoolYear != null">AND roster.currentschoolyear = #{currentSchoolYear, jdbcType=BIGINT}</if>
		<if test="schoolName != null">AND upper(o.organizationname) like upper('%' || #{schoolName} || '%')</if>
	<if test="orderByColumn != null">
	      ORDER BY 
	      	<choose>
	      		<when test="orderByColumn == 'id'">roster.id</when>
	      		<when test="orderByColumn == 'organizationId'">roster.attendanceschoolid</when>
	      		<when test="orderByColumn == 'name'">roster.coursesectionname</when>
	      		<when test="orderByColumn == 'edUniqueCommonId'">au.uniquecommonidentifier</when>
	      		<when test="orderByColumn == 'firstName'">au.firstname</when>
	      		<when test="orderByColumn == 'lastName'">au.surname</when>
	      		<when test="orderByColumn == 'contentArea'">ca.name</when>
	      		<when test="orderByColumn == 'stateCoursesName'">gc.name</when>
	      		<when test="orderByColumn == 'currentSchoolYear'">roster.currentschoolyear</when>
	      		<when test="orderByColumn == 'schoolName'">o.organizationname</when>
	      		<otherwise>roster.coursesectionname</otherwise>
	      	</choose> 
	      	<if test="order!=null and order=='desc'">
	    		desc
    	 	</if>
    	 	<if test="order=='asc' or order==null">
    	 		asc
    	 	</if>
	    </if>
    LIMIT #{limit}
    OFFSET #{offset}
  </select>

  <select id="countRostersToViewByOrg" resultType="java.lang.Integer">
   	SELECT count(1)
	FROM 
		<if test="organizationId != null">
			(select r.* from roster r inner join organizationtreedetail otd on otd.schoolid=r.attendanceschoolid where r.activeflag is true 
				AND (otd.schoolid = #{organizationId,jdbcType=BIGINT} OR otd.districtid = #{organizationId,jdbcType=BIGINT} OR otd.stateid = #{organizationId,jdbcType=BIGINT}) ) roster
		</if>
		<if test="organizationId == null or organizationId == 0">
			(select * from roster where activeflag is true) roster
		</if>
		
		JOIN aartuser au on roster.teacherId = au.id
		JOIN contentarea ca on roster.statesubjectareaid = ca.id
		left JOIN gradecourse gc on roster.statecoursesid = gc.id and gc.course is true 
		left join organization o on roster.attendanceschoolid = o.id
		<if test="organizationId != null">JOIN organizationtreedetail orglist on roster.attendanceschoolid=orglist.schoolid</if>
	WHERE 1=1 
		<!--  if test="organizationId != null">AND roster.attendanceschoolid =ANY(ARRAY(select id from organization_children(#{organizationId, jdbcType=BIGINT}) union select #{organizationId, jdbcType=BIGINT}))</if>-->
		<if test="arrtUserId != null">AND au.id = #{arrtUserId, jdbcType=BIGINT}</if>
		<if test="name != null">AND upper(roster.coursesectionname) like upper('%' || #{name} || '%')</if>
		<if test="edUniqueCommonId != null">AND upper(au.uniquecommonidentifier) like upper('%' || #{edUniqueCommonId} || '%')</if>
		<if test="firstName != null">AND upper(au.firstname) like upper('%' || #{firstName} || '%')</if>
		<if test="lastName != null">AND upper(au.surname) like upper('%' || #{lastName} || '%')</if>
		<if test="contentArea != null">AND upper(ca.name) like upper('%' || #{contentArea} || '%')</if>
		<if test="stateCoursesName != null">AND upper(gc.name) like upper('%' || #{stateCoursesName} || '%')</if>
		<if test="currentSchoolYear != null">AND roster.currentschoolyear = #{currentSchoolYear, jdbcType=BIGINT}</if>
		<if test="schoolName != null">AND upper(o.organizationname) like upper('%' || #{schoolName} || '%')</if>
  </select>
  
  <select id="getCurrentSchoolYear" resultType="java.lang.Integer">
  	SELECT * from organization_school_year(#{loggedInUserOrgId})
  </select>
  
  <select id="selectByStateSubjectAreaAndEnrollment" resultMap="BaseResultMap">
  	select distinct r.* from roster r
	join enrollmentsrosters er on r.id = er.rosterid
	join enrollment e on e.id = er.enrollmentid
	join contentarea ca on ca.id = r.statesubjectareaid
	where ca.abbreviatedname=#{code}
	and e.id =#{enrollmentId}
	and er.activeflag is true
	and r.activeflag is true
	order by modifieddate desc limit 1
  </select>
  
  <select id="getRosterDataExtractForOrg" parameterType="map" resultMap="RosterExtractMap">
  /*NO LOAD BALANCE*/
  <!-- Optimized enrollments & lastModifiedEnrollmentUsername - Reduced from 50ms to 31.805 ms execution time  -->
    WITH orgenrollments as (SELECT enrl.*
       FROM organizationtreedetail orglist
        INNER JOIN enrollment enrl ON enrl.attendanceschoolid = orglist.schoolid 
        WHERE enrl.activeflag = TRUE AND enrl.currentschoolyear = #{currentSchoolYear,jdbcType=BIGINT}
        AND (orglist.schoolid =#{organizationId,jdbcType=BIGINT} or orglist.districtid =#{organizationId,jdbcType=BIGINT} or orglist.stateid =#{organizationId,jdbcType=BIGINT}) 
        ) 
    SELECT
      otd.statename as state,			
		otd.districtname as district,
		otd.schoolname as school,
      er.modifieddate, er.modifieduser,
      r.id AS rosterid, r.coursesectionname AS rostername, ca.abbreviatedname AS contentareaname, gc.abbreviatedname AS gradecoursename,
      (SELECT displayidentifier FROM organization WHERE id = e.attendanceschoolid) AS schoolidentifier,
      e.currentschoolyear, s.statestudentidentifier, e.localstudentidentifier,
      s.legalfirstname AS studentfirstname, s.legallastname AS studentlastname,
      au.uniquecommonidentifier AS teacherid, au.firstname AS teacherfirstname, au.surname AS teacherlastname
      , CONCAT(modifieduser.firstname, ' ', modifieduser.surname) as lastmodifiedenrlusername,
     array_to_string(ARRAY_AGG(DISTINCT ap.abbreviatedname),', ')   as studentAssesmentProgram
    FROM roster r
      LEFT OUTER JOIN gradecourse gc ON r.statecoursesid = gc.id
      LEFT OUTER JOIN contentarea ca ON r.statesubjectareaid = ca.id
      INNER JOIN enrollmentsrosters er ON r.id = er.rosterid
      INNER JOIN aartuser au ON r.teacherid = au.id
      INNER JOIN orgenrollments e ON e.id = er.enrollmentid
      INNER JOIN student s ON e.studentid = s.id
      inner join organizationtreedetail otd on e.attendanceschoolid=otd.schoolid
      left join aartuser modifieduser ON modifieduser.id = er.modifieduser
      inner JOIN studentassessmentprogram sap ON e.studentid = sap.studentid and sap.activeflag=true 
      inner join assessmentprogram ap ON ap.id=sap.assessmentprogramid 
    WHERE r.activeflag = TRUE
    AND s.id in (select studentid from studentassessmentprogram where assessmentprogramid in 
    (select uap.assessmentprogramid from userassessmentprogram uap 
    inner join assessmentprogram ap ON ap.id = uap.assessmentprogramid and ap.abbreviatedname in ('KAP','DLM','CPASS','KELPA2')
   and ap.activeflag=true where aartuserid=#{educatorId,jdbcType=BIGINT} and uap.activeflag=true ) and activeflag=true)
    AND au.activeflag = TRUE
    AND s.activeflag = TRUE
    AND er.activeflag = TRUE 
    <if test="assessmentPrograms !=null">
    and sap.assessmentprogramid in 
    <foreach collection="assessmentPrograms" item="assessmentprogramid" open="(" close=")" separator=",">
    #{assessmentprogramid}
    </foreach>
    </if>
    AND ap.abbreviatedname in ('KAP','DLM','CPASS','KELPA2')  
    <if test="isTeacher">AND r.teacherid = #{educatorId,jdbcType=BIGINT}</if>
    GROUP BY otd.districtname,otd.statename, otd.schoolname,er.modifieddate,er.modifieduser,r.id,r.coursesectionname,
    ca.abbreviatedname ,gc.abbreviatedname,schoolidentifier,e.currentschoolyear,s.statestudentidentifier,e.localstudentidentifier,
    s.legalfirstname,s.legallastname,au.uniquecommonidentifier,au.firstname,au.surname,lastmodifiedenrlusername
    ORDER BY studentAssesmentProgram
    <!-- ORDER BY state, district, school, r.coursesectionname -->
  </select>
  
  <resultMap id="EducatorDetailsMap" type="edu.ku.cete.domain.Educator">
   		<result column="educatorId" jdbcType="BIGINT" property="educatorId" />
   		<result column="educatorFirstName" jdbcType="VARCHAR" property="educatorFirstName" />
   		<result column="educatorMiddleName" jdbcType="VARCHAR" property="educatorMiddleName" />
   		<result column="educatorLastName" jdbcType="VARCHAR" property="educatorLastName" />
   </resultMap>
   
   <!--
   Biyatpragyan Mohanty : bmohanty_sta@ku.edu : US15500 : DLM Class Roster Report - online report
   Get educator details by roster id. 
    -->
  <select id="selectEducatorByRosterId" resultMap="EducatorDetailsMap">
  	select au.uniquecommonidentifier as educatorId, au.firstname as educatorFirstName, au.middlename as educatorMiddleName, au.surname as educatorLastName
	from roster r 
	inner join aartuser au on r.teacherid = au.id 
	where r.id=#{rosterId,jdbcType=BIGINT}
  </select>
  
  <resultMap id="RosterCourseResultMap" type="edu.ku.cete.domain.enrollment.Roster" extends="BaseResultMap">
  	<association property="course" javaType="edu.ku.cete.domain.content.GradeCourse" column="statecoursesid">
	  	<id column="statecoursesid" property="id" jdbcType="BIGINT"/>
	  	<result column="courseabbreviatedname" property="abbreviatedName" jdbcType="VARCHAR"/>
	  	<result column="coursename" property="name" jdbcType="VARCHAR"/>
  	</association>
  </resultMap>
  
  <select id="selectByContentAreaAndEnrollment" resultMap="RosterCourseResultMap">
	select distinct r.*, course.name as coursename, course.abbreviatedname as courseabbreviatedname 
	from roster r join enrollmentsrosters er on r.id = er.rosterid
		left join gradecourse course on r.statecoursesid = course.id
	where r.currentschoolyear = #{enrollment.currentSchoolYear}
		<if test="contentAreaId != null">
		and r.statesubjectareaid=#{contentAreaId,jdbcType=BIGINT}
		</if>
		and er.enrollmentid = #{enrollment.id,jdbcType=BIGINT}
		and er.activeflag is true
		and r.activeflag is true
  </select>
  
  <select id="selectRosterByRosterAndAttendanceSchool" resultMap="BaseResultMap" >
     SELECT DISTINCT roster.id AS rosterid,
                roster.id,
                roster.coursesectionname,
                roster.coursesectiondescription,
                roster.teacherid,
                roster.attendanceSchoolId,
                roster.statesubjectareaid,
                roster.courseenrollmentstatusid,
                roster.restrictionid,
                roster.statecoursecode,
                roster.statecoursesid,
                roster.currentschoolyear
FROM public.roster roster
WHERE 
	<if test="rosterCourseSectionName != null">
	 roster.coursesectionname = #{rosterCourseSectionName} and
	</if>
	roster.teacherid = #{rosterTeacherId } AND
    roster.statesubjectareaid = #{rosterStateSubjectAreaId } AND
  <if test="rosterStatecoursecode != null">
	 roster.statecoursecode = #{rosterStatecoursecode} and
  </if>
  <if test="rosterStatecoursecode == null">
  	 (roster.statecoursecode IS NULL OR roster.statecoursecode = '') AND
  </if>
  roster.currentSchoolYear = #{rosterCurrentSchoolYear }
  AND roster.attendanceSchoolId = #{attendanceSchoolId}
  AND roster.aypSchoolId = #{rosterAypSchoolId}
  AND roster.activeflag is true
  </select>
  <select id="getRostersBySubject"  resultMap="BaseResultMap" >
  	select distinct
  	<include refid="Base_Column_List" />
  	from roster
  	where 
  	roster.currentSchoolYear = #{rosterCurrentSchoolYear}
  	<if test="isTeacher">
		and roster.teacherid = #{educatorId, jdbcType=INTEGER}
	</if>	
  	and roster.attendanceSchoolId = #{schoolId,jdbcType=BIGINT}
  	and roster.statesubjectareaid = #{subjectId,jdbcType=BIGINT}
  	order by roster.coursesectionname
  </select>

  <select id="getRostersByStudentEnrollInformation" resultMap="BaseResultMap">
  	select
  	<include refid="Base_Column_List" /> 
	from roster roster
	join enrollmentsrosters er on roster.id = er.rosterid
	join enrollment e on e.id = er.enrollmentid
	and e.studentid = #{studentId}
	and roster.attendanceschoolid in (
		select o.id from organization o, organization_parent(roster.attendanceschoolid) op 
		where lower(o.displayidentifier) = lower(#{attendanceSchoolIdentifier}) and o.activeflag is true 
		and op.id = (select stateid from student where id = #{studentId})
	)
	and roster.statesubjectareaid in (
		select id from contentarea where lower(abbreviatedname) = lower(#{subjectAbbreviatedName}) and activeflag is true
	)
	and roster.currentschoolyear = #{currentSchoolYear}
	<if test="courseAbbreviatedName != null">
		and roster.statecoursesid in (
			select id from gradecourse where lower(abbreviatedname) = lower(#{courseAbbreviatedName}) and activeflag is true
		)
	</if>
	<if test="courseAbbreviatedName == null">
		and roster.statecoursesid is null
	</if>
	limit 1
  </select>
  <select id="getRosterJsonFormatData"  resultMap="jsonBaseResultMap">
  SELECT 
  r.id 												, 
  r.coursesectionname 								, 
  ca.id						AS Subject_ID			,
  ca.abbreviatedname 		AS Subject				, 
  gc.id						AS Course_ID			,
  gc.abbreviatedname 		AS Course				,
  au.firstname				AS Educator_First_Name	, 
  au.surname				AS Educator_Last_Name	,
  au.uniquecommonidentifier AS educatoridentifier   , 
  r.teacherid				AS Educator_ID			, 
  en.id						AS enrollment_ID		,
  s.id						AS Student_ID			,
  s.legalfirstname 			AS Student_First_Name	, 
  s.legallastname 			AS Student_Last_Name	, 
  s.statestudentidentifier 	AS Student_State_ID		,
  r.attendanceschoolid      AS attendanceSchoolId   ,
  r.createddate										,
  r.createduser										, 
  r.modifieduser									,
  r.modifiedDate										
 
FROM 
  public.roster r
   LEFT JOIN 
	gradecourse gc
        ON r.statecoursesid = gc.id and gc.activeflag=true
   LEFT JOIN 
	contentarea ca
        ON r.statesubjectareaid = ca.id and ca.activeflag=true
   LEFT JOIN  public.aartuser au 
	ON r.teacherid = au.id and  au.activeflag=true
   LEFT JOIN 
	public.enrollmentsrosters enrl  
	ON r.id = enrl.rosterid and enrl.activeflag=true
   LEFT JOIN 
	public.enrollment en  
	ON enrl.enrollmentid = en.id and en.activeflag=true
   LEFT JOIN
	public.student s 
	ON en.studentid = s.id and  s.activeflag=true
 
WHERE r.id=#{rosterId,jdbcType=BIGINT}
    
  </select>
  
  <select id="getRosterByRosterAndAttendanceSchool" resultMap="BaseResultMap" >
     SELECT DISTINCT roster.id AS rosterid,
                roster.id,
                roster.coursesectionname,
                roster.coursesectiondescription,
                roster.teacherid,
                roster.attendanceSchoolId,
                roster.statesubjectareaid,
                roster.courseenrollmentstatusid,
                roster.restrictionid,
                roster.statecoursecode,
                roster.statecoursesid,
                roster.currentschoolyear
	FROM public.roster roster
	WHERE 
		<if test="rosterCourseSectionName != null">
		 roster.coursesectionname = #{rosterCourseSectionName} AND
		</if>
		<if test="rosterTeacherId != null">
			roster.teacherid = #{rosterTeacherId } AND
		</if>	
	    roster.statesubjectareaid = #{rosterStateSubjectAreaId } AND
	  <if test="rosterStatecoursecode != null">
		 roster.statecoursecode = #{rosterStatecoursecode} AND
	  </if>
	  <if test="rosterStatecoursecode == null">
	  	 (roster.statecoursecode IS NULL OR roster.statecoursecode = '') AND
	  </if>
	  <if test="rosterCurrentSchoolYear != null">
	  	roster.currentSchoolYear = #{rosterCurrentSchoolYear } AND
	  </if>
	  <if test="attendanceSchoolId != null">
	  	roster.attendanceSchoolId = #{attendanceSchoolId} AND
	  </if>  
	  
	  <if test="rosterAypSchoolId != null">
	  	roster.aypSchoolId = #{rosterAypSchoolId} AND
	  </if>  
	  
	  	roster.activeflag is true
  </select>
  
  <select id="getRosterIdsForStudentAndSchoolYear" parameterType="map" resultType="Long">
    select r.id
    from roster r
    join enrollmentsrosters er on r.id = er.rosterid and er.activeflag = true
    join enrollment e on er.enrollmentid = e.id and r.currentschoolyear = e.currentschoolyear and e.activeflag = true
    where e.studentid = #{studentId,jdbcType=BIGINT}
    and r.currentschoolyear = #{schoolYear,jdbcType=INTEGER}
    and r.activeflag = true
  </select>

  
  <select id="getRostersByOrgId" resultType="edu.ku.cete.domain.enrollment.Roster">
  	select * from roster where attendanceschoolid=#{sourceSchoolId, jdbcType=BIGINT} and 
 	currentschoolyear=#{currentSchoolYear, jdbcType=INTEGER}
  </select>
    <select id="getRostersByEnrollmentId" resultType="edu.ku.cete.domain.enrollment.Roster" parameterType="java.lang.Long">
  	select r.* from enrollment e
  	join enrollmentsrosters er on er.enrollmentid=e.id and er.activeflag is true
  	join roster r on r.id=er.rosterid and r.activeflag is true
  	where e.activeflag is true and e.id=#{enrollmentId,jdbcType=BIGINT}
  </select>
  
  <update id="transferRoster" parameterType="edu.ku.cete.domain.enrollment.Roster">
  	update roster set attendanceschoolid = #{attendanceSchoolId},
  	modifieddate = #{modifiedDate},
	modifieduser = #{modifiedUser}
	where id = #{id}
  </update>
  
  <update id="disableRoster" parameterType="edu.ku.cete.domain.enrollment.Roster">
  	update roster set activeflag = false,
  	modifieddate = #{modifiedDate},
	modifieduser = #{modifiedUser}
	where id = #{id}
  </update>
  
  <select id="getCountByOrganizationId" resultType="java.lang.Long">
  	select count(1) from roster where attendanceschoolid=#{organizationId, jdbcType=BIGINT} and 
 	currentschoolyear=#{schoolYear, jdbcType=INTEGER} and activeflag=true
  </select>
  
  
  <select id="checkIfRosterHasEnrollments" resultType="java.lang.Integer" parameterType="java.lang.Long">
  	select count(er.enrollmentid)    
	from roster r
	JOIN enrollmentsrosters er ON er.rosterid = r.id AND er.activeflag is true
	JOIN enrollment enrl ON enrl.id = er.enrollmentid AND enrl.activeflag is true
	WHERE r.activeflag is true
	AND r.id = #{rosterId, jdbcType=BIGINT} 
  </select>
  
  
  <select id="checkIfRosterExistsForEnrollmentSubjectCourse" resultMap="studentRosterMap">
  	SELECT distinct enrl.studentid, er.enrollmentid as enrollmentid, st.statestudentidentifier, st.legalfirstname, st.legallastname, er.rosterid, #{enrollmentId, jdbcType=BIGINT} as studentenrlid, r.attendanceschoolid
	FROM enrollment enrl 
	JOIN student st ON st.id = enrl.studentid and st.activeflag is true 
	JOIN studentassessmentprogram sap ON sap.studentid = enrl.studentid AND sap.activeflag is true
	JOIN assessmentprogram ap ON ap.id = sap.assessmentprogramid AND ap.activeflag is true
	JOIN enrollmentsrosters er ON er.enrollmentid = enrl.id AND er.activeflag is true
	JOIN roster r ON r.id = er.rosterid AND r.activeflag is true
	WHERE enrl.activeflag is true 
		AND st.id = (select studentid from enrollment where id = #{enrollmentId, jdbcType=BIGINT} and activeflag is true) 
		<if test="subjectId != null">
	  		AND r.statesubjectareaid = #{subjectId, jdbcType=BIGINT} 
	  	</if>  
		<if test="courseId != null"> 
			AND r.statecoursesid = #{courseId, jdbcType=BIGINT} 
		</if>
		<if test="courseId == null">
			and r.statecoursesid is null
		</if>
		<if test="schoolYear!=null">
			AND enrl.currentschoolyear = #{schoolYear, jdbcType=BIGINT}
		</if>
		 AND ap.abbreviatedname = #{assessmentProgramCode,jdbcType=VARCHAR}
		 AND sap.assessmentprogramid NOT IN (select id from assessmentprogram where abbreviatedname != #{assessmentProgramCode,jdbcType=VARCHAR})
  </select>
  
  <select id="checkForTestSessionsOnExitedRostersAlso" resultMap="studentRosterMap">
  	SELECT distinct enrl.studentid, er.enrollmentid as enrollmentid, er.rosterid, st.statestudentidentifier, st.legalfirstname, st.legallastname, er.rosterid, #{enrollmentId, jdbcType=BIGINT} as studentenrlid, r.attendanceschoolid
	FROM student st 
	JOIN enrollment enrl ON enrl.studentid = st.id
	JOIN enrollmentsrosters er ON er.enrollmentid = enrl.id and er.activeflag is false
	JOIN studentassessmentprogram sap ON sap.studentid = enrl.studentid AND sap.activeflag is true
	JOIN assessmentprogram ap ON ap.id = sap.assessmentprogramid AND ap.activeflag is true
	JOIN roster r ON r.id = er.rosterid
	WHERE st.id = (select studentid from enrollment where id = #{enrollmentId, jdbcType=BIGINT} and activeflag is true) 
	AND enrl.id = #{enrollmentId, jdbcType=BIGINT} AND enrl.activeflag is true
	and st.activeflag is true  
	<if test="subjectId != null">
  		AND r.statesubjectareaid = #{subjectId, jdbcType=BIGINT} 
  	</if>  
	<if test="courseId != null"> 
		AND r.statecoursesid = #{courseId, jdbcType=BIGINT} 
	</if>
	<if test="courseId == null">
		and r.statecoursesid is null
	</if>
	<if test="schoolYear!=null">
		AND enrl.currentschoolyear = #{schoolYear, jdbcType=BIGINT}
	</if>
	AND ap.abbreviatedname = #{assessmentProgramCode,jdbcType=VARCHAR}
	AND sap.assessmentprogramid NOT IN (select id from assessmentprogram where abbreviatedname != #{assessmentProgramCode,jdbcType=VARCHAR})
	union
	SELECT distinct enrl.studentid, er.enrollmentid as enrollmentid, er.rosterid, st.statestudentidentifier, st.legalfirstname, st.legallastname, er.rosterid, #{enrollmentId, jdbcType=BIGINT} as studentenrlid, r.attendanceschoolid
	FROM student st 
	JOIN enrollment enrl ON enrl.studentid = st.id
	JOIN enrollmentsrosters er ON er.enrollmentid = enrl.id
	JOIN studentassessmentprogram sap ON sap.studentid = enrl.studentid AND sap.activeflag is true
	JOIN assessmentprogram ap ON ap.id = sap.assessmentprogramid AND ap.activeflag is true
	JOIN roster r ON r.id = er.rosterid
	WHERE st.id = (select studentid from enrollment where id = #{enrollmentId, jdbcType=BIGINT})
	AND enrl.activeflag is false
	and st.activeflag is true  
	<if test="subjectId != null">
  		AND r.statesubjectareaid = #{subjectId, jdbcType=BIGINT} 
  	</if>  
	<if test="courseId != null"> 
		AND r.statecoursesid = #{courseId, jdbcType=BIGINT} 
	</if>
	<if test="courseId == null">
		and r.statecoursesid is null
	</if>
	<if test="schoolYear!=null">
		AND enrl.currentschoolyear = #{schoolYear, jdbcType=BIGINT}
	</if>
	AND ap.abbreviatedname = #{assessmentProgramCode,jdbcType=VARCHAR}
	AND sap.assessmentprogramid NOT IN (select id from assessmentprogram where abbreviatedname != #{assessmentProgramCode,jdbcType=VARCHAR})
  </select>
  
   <resultMap id="itiBPSubjectGradeRosteredStudentMap" type="edu.ku.cete.web.ITIBPCoverageExtractRostersDTO">
   		<result column="subjectname" property="subjectName"/>
   		<result column="subjectid" property="subjectId"/>
   		<result column="gradename" property="gradeName"/>
   		<result column="gradecourseabbrname" property="gradeAbbrName"/>
   		<collection property="rosteredStudentsDetailsList" ofType="edu.ku.cete.web.ITIBPCoverageRosteredStudentsDTO">
   			<result column="studentid" property="studentId"/>
   			<result column="studentfirstname" property="studentFirstName"/>
   			<result column="studentlastname" property="studentLastName"/>
   		</collection>
   </resultMap>
  
  <select id ="getRosterDetailsForITIBluePrintExtract" resultMap="itiBPSubjectGradeRosteredStudentMap">
  	WITH schoolslist as ( select * from organizationtreedetail where schoolid = #{orgId} or districtid = #{orgId} or stateid = #{orgId}),
 		rosterdetails AS(SELECT r.id as rosterid, r.statesubjectareaid as subjectid 
 					from roster r
	     			join schoolslist scl on scl.schoolid = r.attendanceschoolid
             		where r.currentschoolyear = #{currentSchoolYear} and r.activeflag is true
             		<if test="subjectId != null">
             			and r.statesubjectareaid = #{subjectId}
             		</if>
             		<if test="teacherIds != null">
             			and r.teacherid = any(values
             			<foreach collection="teacherIds" item="teacherId" open="" separator="," close="">
             				(#{teacherId})
             			</foreach>)
             		</if>)
	select ca.name as subjectname, ca.id as subjectid, gc.name as gradename, gc.abbreviatedname as gradecourseabbrname,
       en.studentid, en.id as enrollmentid, enr.id as enrollmentsrosterid, rd.rosterid, (gc.abbreviatedname)::int as gcabbr,
       s.legalfirstname as studentfirstname, s.legallastname as studentlastname
       from rosterdetails rd
       join enrollmentsrosters enr on enr.rosterid = rd.rosterid
       join enrollment en on en.id = enr.enrollmentid
       join student s on en.studentid = s.id
       join studentassessmentprogram sap on sap.studentid = s.id
       join gradecourse gc on gc.id = en.currentgradelevel
       join contentarea ca on ca.id = rd.subjectid        
       join assessmentprogram asp on asp.id = sap.assessmentprogramid
       where en.activeflag is true and enr.activeflag is true
       and asp.abbreviatedname = 'DLM' and sap.activeflag is true and gc.activeflag is true and ca.activeflag is true
       <if test="gradeId != null">
       		and gc.id = #{gradeId}
       </if>       
       and asp.activeflag is true
       and exists (select bp.contentareaid,bgc.abbreviatedname from  blueprint bp join gradecourse bgc on bgc.id = bp.gradecourseid
                   where bp.activeflag is true and bp.contentareaid = ca.id and bgc.abbreviatedname = gc.abbreviatedname)
       order by ca.name, (gc.abbreviatedname)::int, s.legallastname, s.legalfirstname
  </select>
  
  <resultMap id="itiBPSubjectGradeRosteredStudentGroupByTeacherMap" type="edu.ku.cete.web.ITIBPCoverageExtractRostersDTO" extends="itiBPSubjectGradeRosteredStudentMap">
   		<result column="teacherid" property="teacherId"/>
   		<result column="firstname" property="teacherFirstName"/>
   		<result column="surname" property="teacherLastName"/>
   </resultMap>
  
  <select id ="getrosterDetalsGroupByTeacherForITIBP" resultMap="itiBPSubjectGradeRosteredStudentGroupByTeacherMap">
  	WITH schoolslist as ( select * from organizationtreedetail where schoolid = #{orgId} or districtid = #{orgId} or stateid = #{orgId}),
 		rosterdetails AS(SELECT r.id as rosterid, r.statesubjectareaid as subjectid, au.id as teacherid, au.firstname, au.surname
 					from roster r
 					join aartuser au on au.id = r.teacherid
	     			join schoolslist scl on scl.schoolid = r.attendanceschoolid
             		where r.currentschoolyear = #{currentSchoolYear} and r.activeflag is true and au.activeflag is true
             		<if test="subjectId != null">
             			and r.statesubjectareaid = #{subjectId}
             		</if>
             		<if test="isTeacher">
             			and r.teacherid = #{teacherId}
             		</if>)
	select ca.name as subjectname, ca.id as subjectid, gc.name as gradename, gc.abbreviatedname as gradecourseabbrname,
       en.studentid, en.id as enrollmentid, enr.id as enrollmentsrosterid, rd.rosterid, (gc.abbreviatedname)::int as gcabbr,
       s.legalfirstname as studentfirstname, s.legallastname as studentlastname,
       rd.teacherid, rd.firstname, rd.surname
       from rosterdetails rd
       join enrollmentsrosters enr on enr.rosterid = rd.rosterid
       join enrollment en on en.id = enr.enrollmentid
       join student s on en.studentid = s.id
       join studentassessmentprogram sap on sap.studentid = s.id
       join gradecourse gc on gc.id = en.currentgradelevel
       join contentarea ca on ca.id = rd.subjectid        
       join assessmentprogram asp on asp.id = sap.assessmentprogramid
       where en.activeflag is true and enr.activeflag is true
       and asp.abbreviatedname = 'DLM' and sap.activeflag is true and gc.activeflag is true and ca.activeflag is true
       <if test="gradeId != null">
       		and gc.id = #{gradeId}
       </if>       
       and asp.activeflag is true
       and exists (select bp.contentareaid,bgc.abbreviatedname from  blueprint bp join gradecourse bgc on bgc.id = bp.gradecourseid
                   where bp.activeflag is true and bp.contentareaid = ca.id and bgc.abbreviatedname = gc.abbreviatedname)
       order by ca.name, (gc.abbreviatedname)::int, s.legallastname, s.legalfirstname
  </select>
  
   <select id="getDeactivateCountByOrganizationId" resultType="java.lang.Long">
  	select count(1) from roster where attendanceschoolid=#{organizationId, jdbcType=BIGINT} and 
 	currentschoolyear=#{schoolYear, jdbcType=INTEGER} and activeflag=false
  </select>
  
  <select id="getRosterIdsByEnrollmentId" resultType="java.lang.Long" parameterType="java.lang.Long">
    select r.id
    from enrollmentsrosters er
    join roster r on er.rosterid = r.id
    where er.activeflag = true and r.activeflag = true
    and er.enrollmentid = #{enrollmentId,jdbcType=BIGINT}
  </select>
  <select id="getOldRosterIdsByEnrollmentId" resultType="java.lang.Long" parameterType="java.lang.Long">
    select r.id
    from enrollmentsrosters er
    join roster r on er.rosterid = r.id
    where er.enrollmentid = #{oldEnrollmentId,jdbcType=BIGINT}
  </select>
  
  <select id="getOldRosterIdsByEnrollmentIdForHGSS" resultType="java.lang.Long" parameterType="java.lang.Long">
    select r.id
    from enrollmentsrosters er
    join roster r on er.rosterid = r.id 
    join contentarea ca on ca.id=r.statesubjectareaid and ca.abbreviatedname='SS'
    where er.enrollmentid = #{enrollmentId,jdbcType=BIGINT}
  </select>
  <select id="rosterInformationForAudit" resultType="edu.ku.cete.domain.enrollment.Roster">
   select rs.coursesectionname ,rs.attendanceschoolid ,concat(au.firstname,' ',au.surname) as educatorname,au.uniquecommonidentifier as educatorid,rs.statesubjectareaid,ca.name  as subjectName 
   	,au.id as teacherId
   	from roster rs  
 	inner join aartuser au on au.id=rs.teacherid
 	inner join contentarea ca on ca.id=rs.statesubjectareaid
 	where 
 	rs.id=#{rosterId, jdbcType=BIGINT}
  </select>
   <update id="deleteIfNoStudentPresent">
  UPDATE roster set activeflag = false, modifieddate = now(), modifieduser = #{modifiedUserId,jdbcType=BIGINT}
  where id = #{rosterId,jdbcType=BIGINT} and 
  (select count(distinct enrollmentid) from enrollmentsrosters 
  where rosterid = #{rosterId,jdbcType=BIGINT} and activeflag is true) = 0;
  </update>
    <select id="getRosterIdsByEnrollmentIdAndSchoolId" resultType="java.lang.Long" parameterType="java.lang.Long">
    select distinct r.id
    from enrollmentsrosters er
    join roster r on er.rosterid = r.id
    join enrollment e on e.id=er.enrollmentid and e.activeflag is true
    where er.activeflag = true and r.activeflag = true
    and er.enrollmentid = #{enrollmentId,jdbcType=BIGINT}
    and e.attendanceschoolid= #{schoolId,jdbcType=BIGINT}
  </select>
  
    <select id="getRosterIdByTeacherIdTestSessionId" resultType="java.lang.Long">
		select distinct r.id from roster r 
		join enrollmentsrosters enr on enr.rosterid = r.id 
		join enrollment en on en.id=enr.enrollmentid 
		join studentstests sts on sts.enrollmentid=en.id 
		where en.activeflag is true and enr.activeflag is true and sts.activeflag is true and r.activeflag is true 
		and sts.testsessionid=#{testSessionId,jdbcType=BIGINT} 
		and r.teacherid=#{teacherId,jdbcType=BIGINT};
  </select>
  
  <select id="getByClassroomId" parameterType="map" resultMap="BaseResultMap">
    select <include refid="Base_Column_List"/>
    from roster
    where classroomid = #{classroomId,jdbcType=BIGINT}
  </select>
  
   <select id="getClassroomIds" resultType="java.lang.Long">
		select distinct classroomid from roster r 
		where r.activeflag is true 
		and r.currentschoolyear=#{schoolYear, jdbcType=INTEGER} 
		and r.teacherid=#{userId,jdbcType=BIGINT};
  </select>
  
  <select id="checkActiveStudentsCountOnRoster" resultType="java.lang.Boolean" parameterType="map">
  	SELECT count(distinct st.studentid) > 0 as studentscount
	FROM studentstests st
	JOIN test t on t.id = st.testid
	JOIN testsession ts on st.testsessionid = ts.id
	JOIN roster r on r.id = ts.rosterid
	JOIN category ct on ct.id = st.status
	JOIN categorytype cat on cat.id=ct.categorytypeid and cat.typecode = 'STUDENT_TEST_STATUS'
	WHERE r.classroomid =  #{classroomId}
	AND st.activeflag is true
	AND ct.categorycode != 'unused'
	AND ts.schoolyear = #{schoolYear};
  </select>
  
   <select id="findRostersforTeacherIdInCurrentYearForMergeUser" resultMap="rosterDtoMap" parameterType="map">
      			SELECT  distinct count(*) OVER() AS totalrecords,<include refid="DTO_Column_List_With_Course_School"/>
	FROM 
		(select * from roster where activeflag is true and teacherId=#{teacherId}) roster

		JOIN aartuser au on roster.teacherId = au.id and au.activeflag is true
		INNER JOIN 
			(select max(uog.status) as statuscode, uo.aartuserid 
			  from userorganizationsgroups uog 
				inner join usersorganizations uo on uog.userorganizationid = uo.id AND uo.activeflag is true AND uog.activeflag is true
				inner join userassessmentprogram uaps on uo.aartuserid = uaps.aartuserid 
				and uaps.activeflag is true and uaps.userorganizationsgroupsid is not null
			group by uo.aartuserid) suo on suo.aartuserid=au.id  
		JOIN contentarea ca on roster.statesubjectareaid = ca.id 
		left JOIN gradecourse gc on roster.statecoursesid = gc.id and gc.course is true 
		left join organization o on roster.attendanceschoolid = o.id and o.activeflag is true
		WHERE au.activeflag is true 
		<!-- if test="organizationId != null">AND roster.attendanceschoolid =ANY(ARRAY(select id from organization_children(#{organizationId, jdbcType=BIGINT}) union select #{organizationId, jdbcType=BIGINT}))</if> -->
		<if test="arrtUserId != null">AND au.id = #{arrtUserId, jdbcType=BIGINT}</if>		
		<if test="name != null">AND upper(roster.coursesectionname) like upper('%' || #{name} || '%')</if>
		<if test="edUniqueCommonId != null">AND upper(au.uniquecommonidentifier) like upper('%' || #{edUniqueCommonId} || '%')</if>
		<if test="firstName != null">AND upper(au.firstname) like upper('%' || #{firstName} || '%')</if>
		<if test="lastName != null">AND upper(au.surname) like upper('%' || #{lastName} || '%')</if>
		<if test="contentArea != null">AND upper(ca.name) like upper('%' || #{contentArea} || '%')</if>
		<if test="stateCoursesName != null">AND upper(gc.name) like upper('%' || #{stateCoursesName} || '%')</if>
		<if test="schoolName != null">AND upper(o.organizationname) like upper('%' || #{schoolName} || '%')</if>
	<if test="orderByColumn != null">
	      ORDER BY 
	      	<choose>
	      		<when test="orderByColumn == 'id'">roster.id</when>
	      		<when test="orderByColumn == 'organizationId'">roster.attendanceschoolid</when>
	      		<when test="orderByColumn == 'name'">roster.coursesectionname</when>
	      		<when test="orderByColumn == 'edUniqueCommonId'">au.uniquecommonidentifier</when>
	      		<when test="orderByColumn == 'firstName'">au.firstname</when>
	      		<when test="orderByColumn == 'lastName'">au.surname</when>
	      		<when test="orderByColumn == 'contentArea'">ca.name</when>
	      		<when test="orderByColumn == 'stateCoursesName'">gc.name</when>
	      		<when test="orderByColumn == 'currentSchoolYear'">roster.currentschoolyear</when>
	      		<when test="orderByColumn == 'schoolName'">o.organizationname</when>
	      		<otherwise>roster.coursesectionname</otherwise>
	      	</choose> 
	      	<if test="order!=null and order=='desc'">
	    		desc
    	 	</if>
    	 	<if test="order=='asc' or order==null">
    	 		asc
    	 	</if>
	    </if>
    LIMIT #{limit}
    OFFSET #{offset}     
    </select>
  
  
</mapper>
