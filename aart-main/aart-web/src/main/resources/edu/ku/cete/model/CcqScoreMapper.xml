<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.ku.cete.model.CcqScoreMapper" >
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.CcqScore" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Oct 01 12:38:09 IST 2015.
    -->
    <id column="id" property="id" jdbcType="BIGINT" />    
    <result column="scoringassignmentstudentid" property="scoringAssignmentStudentId" jdbcType="BIGINT" />
    <result column="scoringassignmentscorerid" property="scoringAssignmentScorerId" jdbcType="BIGINT" />
    <result column="isscored" property="isScored" jdbcType="BIT" />
    <result column="totalscore" property="totalScore" jdbcType="NUMERIC" />
    <result column="createddate" property="createdDate" jdbcType="TIMESTAMP" />
    <result column="createduser" property="createdUser" jdbcType="INTEGER" />
    <result column="activeflag" property="active" jdbcType="BIT" />
    <result column="excludeflag" property="excludeFlag" jdbcType="BIT" />
    <result column="notificationflag" property="notificationFlag" jdbcType="BIT" />
    <result column="status" property="status" jdbcType="BIT" />
  </resultMap>
  
  <resultMap id="ExtendedResultMap" type="edu.ku.cete.domain.CcqScore"> 
	   <id column="id" property="id" jdbcType="BIGINT" />    
	    <result column="scoringassignmentstudentid" property="scoringAssignmentStudentId" jdbcType="BIGINT" />
	    <result column="scoringassignmentscorerid" property="scoringAssignmentScorerId" jdbcType="BIGINT" />
	    <result column="isscored" property="isScored" jdbcType="BIT" />
	    <result column="totalscore" property="totalScore" jdbcType="NUMERIC" />
	    <result column="createddate" property="createdDate" jdbcType="TIMESTAMP" />
	    <result column="createduser" property="createdUser" jdbcType="INTEGER" />
	    <result column="activeflag" property="active" jdbcType="BIT" />
	    <result column="excludeflag" property="excludeFlag" jdbcType="BIT" />
	    <result column="notificationflag" property="notificationFlag" jdbcType="BIT" /> 
	    <result column="status" property="status" jdbcType="BIT" />
      <collection property="scoreItems" column="itemid" ofType="edu.ku.cete.domain.CcqScoreItem" javaType="list" >
           <id property="id" column="itemid" />
           <result column="ccqscoreid" property="ccqScoreId" jdbcType="BIGINT" />
		    <result column="rubriccategoryid" property="rubricCategoryId" jdbcType="BIGINT" />
		    <result column="score" property="score" jdbcType="NUMERIC" />
		    <result column="taskvariantid" property="taskVariantId" jdbcType="BIGINT" />
		    <result column="itemcreateddate" property="createdDate" jdbcType="TIMESTAMP" />
		    <result column="itemcreateduser" property="createdUser" jdbcType="INTEGER" />
		    <result column="itemactiveflag" property="active" jdbcType="BIT" />
		    <result column="nonscoringreason" property="nonScoringReason" jdbcType="BIT" />		    
      </collection>
  </resultMap>
  
  <resultMap id="MonitorScoringExtractMap" type="edu.ku.cete.web.MonitorScoringExtractDTO">
    	<result column="state" property="state"/>
    	<result column="district" property="district"/>
    	<result column="school" property="school"/>
    	<result column="schoolidentifier" property="schoolIdentifier"/>
    	<result column="grade" property="grade"/>
    	<result column="rostername" property="rosterName"/>
    	<result column="educatoridentifier" property="educatorIdentifier"/>
    	<result column="educatorlastname" property="educatorLastName"/>
    	<result column="educatorfirstname" property="educatorFirstName"/>
    	<result column="studentlastname" property="studentLastName"/>
    	<result column="studentfirstname" property="studentFirstName"/>
    	<result column="studentmiddlename" property="studentMiddleName"/>
    	<result column="statestudentidentifier" property="stateStudentIdentifier"/>
    	<result column="subject" property="subject"/>
    	<result column="scoringassignmentname" property="scoringAssignmentName"/>
    	<result column="testcollectionname" property="testCollectionName"/>
    	<result column="stage" property="stage"/>
    	<result column="scoringstatus" property="scoringStatus"/>
    	<result column="qtytoscore" property="qtyToScore"/>
    	<result column="scored" property="scored"/>
    </resultMap>  
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Oct 01 12:38:09 IST 2015.
    -->
    id, scoringassignmentstudentid, scoringassignmentscorerid, isscored, totalscore, createddate, 
    createduser, activeflag,excludeflag,notificationflag,status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Oct 01 12:38:09 IST 2015.
    -->
    select 
    <include refid="Base_Column_List" />
    from ccqscore
    where id = #{id,jdbcType=BIGINT}
  </select>
  <insert id="insert" parameterType="edu.ku.cete.domain.CcqScore" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Oct 01 12:38:09 IST 2015.
    -->
    <selectKey resultType="java.lang.Long" keyProperty="id" order="BEFORE" >
      SELECT nextval('ccqscore_id_seq')
    </selectKey>
    insert into ccqscore (id, scoringassignmentstudentid, 
      scoringassignmentscorerid, isscored, totalscore, 
      createddate, createduser, modifieduser, modifieddate, activeflag,excludeflag,notificationflag,status,source
      )
    values (#{id,jdbcType=BIGINT}, #{scoringAssignmentStudentId,jdbcType=BIGINT}, 
      #{scoringAssignmentScorerId,jdbcType=BIGINT}, #{isScored,jdbcType=BIT}, #{totalScore,jdbcType=NUMERIC}, 
      #{createdDate,jdbcType=TIMESTAMP}, #{createdUser,jdbcType=INTEGER}, #{modifiedUser,jdbcType=BIGINT}
      ,#{modifiedDate,jdbcType=TIMESTAMP},  #{active,jdbcType=BIT},
      #{excludeFlag,jdbcType=BIT},#{notificationFlag,jdbcType=BIT},#{status,jdbcType=BIGINT},#{source,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="edu.ku.cete.domain.CcqScore" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Oct 01 12:38:09 IST 2015.
    -->
    <selectKey resultType="java.lang.Long" keyProperty="id" order="BEFORE" >
      SELECT nextval('ccqscore_id_seq')
    </selectKey>
    insert into ccqscore
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      <if test="scoringAssignmentStudentId != null" >
        scoringassignmentstudentid,
      </if>
      <if test="scoringAssignmentScorerId != null" >
        scoringassignmentscorerid,
      </if>
      <if test="isScored != null" >
        isscored,
      </if>
      <if test="totalScore != null" >
        totalscore,
      </if>
      <if test="createdDate != null" >
        createddate,
      </if>
      <if test="createdUser != null" >
        createduser,
      </if>
      <if test="modifiedDate != null" >
        modifieddate,
      </if>
      <if test="modifiedUser != null" >
        modifieduser,
      </if>      
      <if test="active != null" >
        activeflag,
      </if>
      <if test="excludeFlag != null" >
        excludeflag,
      </if>
      <if test="notificationFlag != null" >
        notificationflag,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{id,jdbcType=BIGINT},
      <if test="scoringAssignmentStudentId != null" >
        #{scoringAssignmentStudentId,jdbcType=BIGINT},
      </if>
      <if test="scoringAssignmentScorerId != null" >
        #{scoringAssignmentScorerId,jdbcType=BIGINT},
      </if>
      <if test="isScored != null" >
        #{isScored,jdbcType=BIT},
      </if>
      <if test="totalScore != null" >
        #{totalScore,jdbcType=NUMERIC},
      </if>
      <if test="createdDate != null" >
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdUser != null" >
        #{createdUser,jdbcType=INTEGER},
      </if>
      <if test="modifiedDate != null" >
        #{modifiedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedUser != null" >
        #{modifiedUser,jdbcType=INTEGER},
      </if>
      <if test="active != null" >
        #{active,jdbcType=BIT},
      </if>
      <if test="excludeFlag != null" >
        #{excludeFlag,jdbcType=BIT},
      </if>
      <if test="notificationFlag != null" >
        #{notificationFlag,jdbcType=BIT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <update id="updateCCQScoreStatus" parameterType="edu.ku.cete.domain.CcqScore">
  	update ccqscore set status = (Select id from category where categorycode  = 'IN_PROGRESS' 
  	and categorytypeid in (select id from categorytype where typecode = 'SCORING_STATUS')),
  	modifieduser = #{modifiedUser,jdbcType=BIGINT}, modifieddate = #{modifiedDate,jdbcType=TIMESTAMP}
  	where scoringassignmentstudentid = #{scoringAssignmentStudentId,jdbcType=BIGINT} 
  	and scoringassignmentscorerid = #{scoringAssignmentScorerId,jdbcType=BIGINT}
  	and activeflag is true
  </update>
  			                              
 <update id="updateCCQscoreStatusAfterCountingItems">
  	update ccqscore set status = (select ( case when (select count(tv.id) from testsection tsec 
    inner join testsectionstaskvariants tsectv on tsectv.testsectionid = tsec.id
    inner join taskvariant tv on tv.id = tsectv.taskvariantid and tv.rubricneeded is true 
    where tsec.testid = #{testId,jdbcType=BIGINT}) = (select count(distinct taskvariantid) from ccqscoreitem where ccqscoreid = #{ccqScoreId,jdbcType=BIGINT}) 
    THEN (Select id from category where categorycode  = 'COMPLETED' and categorytypeid in 
    (select id from categorytype where typecode = 'SCORING_STATUS')) else 
    (Select id from category where categorycode  = 'IN_PROGRESS' and categorytypeid in 
    (select id from categorytype where typecode = 'SCORING_STATUS')) END)

     )  where id = #{ccqScoreId,jdbcType=BIGINT} and activeflag is true
  </update> 
  
  <update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.CcqScore" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Oct 01 12:38:09 IST 2015.
    -->
    update ccqscore
    <set >
     <if test="scoringAssignmentStudentId != null" >
        scoringassignmentstudentid = #{scoringAssignmentStudentId,jdbcType=BIGINT},
      </if>
      <if test="scoringAssignmentScorerId != null" >
        scoringassignmentscorerid = #{scoringAssignmentScorerId,jdbcType=BIGINT},
      </if>
      <if test="isScored != null" >
        isscored = #{isScored,jdbcType=BIT},
      </if>
      <if test="totalScore != null" >
        totalscore = #{totalScore,jdbcType=NUMERIC},
      </if>
      <if test="createdDate != null" >
        createddate = #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdUser != null" >
        createduser = #{createdUser,jdbcType=INTEGER},
      </if>
      <if test="active != null" >
        activeflag = #{active,jdbcType=BIT},
      </if>
      <if test="excludeFlag != null" >
        excludeflag = #{excludeFlag,jdbcType=BIT},
      </if>
      <if test="notificationFlag != null" >
        notificationflag = #{notificationFlag,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.CcqScore" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Oct 01 12:38:09 IST 2015.
    -->
    update ccqscore
    set scoringassignmentstudentid = #{scoringAssignmentStudentId,jdbcType=BIGINT},
      scoringassignmentscorerid = #{scoringAssignmentScorerId,jdbcType=BIGINT},
      isscored = #{isScored,jdbcType=BIT},
      totalscore = #{totalScore,jdbcType=NUMERIC},
      createddate = #{createdDate,jdbcType=TIMESTAMP},
      createduser = #{createdUser,jdbcType=INTEGER},
      activeflag = #{active,jdbcType=BIT},
      excludeflag = #{excludeFlag,jdbcType=BIT},
      notificationflag = #{notificationFlag,jdbcType=BIT},
      status=#{status,jdbcType=BIT}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <select id="getCountOfAllTestSessionStudentsToScoreForScorer" resultType="java.lang.Integer">
  	  select count(*) from (	
	  	  select sa.id, sast.id scoringStudentId from  ScoringAssignment sa  
				     join scoringassignmentscorer sasc on sa.id = sasc.scoringassignmentid
				     join ScoringAssignmentStudent sast	on sa.id = sast.scoringassignmentid
				     where sasc.scorerid = #{scorerId,jdbcType=BIGINT}
	      except				
	      select scor.scoringassignmentid, ccqsc.scoringassignmentstudentid
	      			 from ccqscore ccqsc
	      			 join scoringassignmentscorer scor on ccqsc.scoringassignmentscorerid = scor.id   
	        		where scor.scorerid = #{scorerId,jdbcType=BIGINT}
      ) students
  </select>
  
  <select id="getCountOfTestSessionStudentsToScoreForScorer" resultType="java.lang.Integer">
  	  select count(*) from (
	  	  select sast.id from  ScoringAssignment sa  
				     join  scoringassignmentscorer sasc on sa.id = sasc.scoringassignmentid
				     join ScoringAssignmentStudent sast	on sa.id = sast.scoringassignmentid
				     where sasc.id = #{scoringAssignmentScorerId,jdbcType=BIGINT} 
				     and sa.id = #{scoringAssignmentid,jdbcType=BIGINT}
	      except				
	      select scoringassignmentstudentid from  ccqscore ccq
	      			left join scoringassignmentscorer sasc on ccq.scoringassignmentscorerid = sasc.id where
	      			ccq.scoringassignmentscorerid = #{scoringAssignmentScorerId,jdbcType=BIGINT}
	      			and sasc.scoringassignmentid = #{scoringAssignmentid,jdbcType=BIGINT}
      ) students			
  </select>
  
  <select id="getMonitorCcqScoresDetails" resultType="edu.ku.cete.web.MonitorCcqScorersDetailsDTO">
	 select  sas.id as scoringAssignmentStudentId,scsco.id as scoringAssignmentScorerId, s.id as studentId, scsco.scorerid as scorerId, s.legallastname as lastName, 
	  s.legalfirstname as firstName,
	  case when cat.categorycode = 'COMPLETED' then '1' ELSE '0' end as scored, 
	  string_agg(distinct otd.districtname,',') as districtName, 
		string_agg(distinct otd.schoolname,',') as schoolName, 
		string_agg(distinct tp.programname,',') as testingProgramName, 
		s.statestudentidentifier as stateStudentIdentifier, 
		artusr.firstname as scorerFirstName,
		artusr.surname as scorerLastName 
		from scoringassignment sa
		inner join ScoringAssignmentStudent sas on sas.scoringassignmentid = sa.id and sas.activeflag is true
		inner join scoringassignmentscorer scsco on scsco.scoringassignmentid = sa.id and scsco.activeflag is true
		inner join student s on s.id = sas.studentid and s.activeflag is true
		inner join testsession ts on ts.id = sa.testsessionid and ts.activeflag is true 
		inner join testcollection AS tc ON tc.id = ts.testcollectionid 
		inner join assessmentsTestCollections asstTc ON tc.id = asstTc.testcollectionid and ts.testcollectionid = asstTc.testcollectionid and asstTc.activeflag = true 
		INNER JOIN assessment asst ON asst.id = asstTc.assessmentid and asst.activeflag = true 
		INNER JOIN testingProgram tp ON asst.testingProgramId = tp.id and tp.activeflag = true
		INNER JOIN organizationtreedetail otd ON otd.schoolid = ts.attendanceschoolid 
		inner join aartuser artusr on artusr.id = scsco.scorerid and artusr.activeflag is true
		left join ccqscore ccqsco on ccqsco.scoringassignmentstudentid = sas.id and ccqsco.scoringassignmentscorerid = scsco.id and ccqsco.activeflag is true 
		left join category cat on cat.id = ccqsco.status and cat.activeflag is true 
		left join categorytype cattype on cattype.id = cat.categorytypeid and cattype.activeflag is true 
	  where  sa.activeflag is true 
      and sa.id = #{scoringAssignmentId}
      and ts.schoolyear =  #{currentSchoolYear}  
		<if test="scorerTestStudentRecordCriteriaMap.firstName != null">
					AND (s.legalfirstname) ilike #{scorerTestStudentRecordCriteriaMap.firstName}
				</if>	
				<if test="scorerTestStudentRecordCriteriaMap.lastName != null">
					AND (s.legallastname) ilike #{scorerTestStudentRecordCriteriaMap.lastName}
				</if>	
				<if test="scorerTestStudentRecordCriteriaMap.stateStudentIdentifier != null">
					AND (s.statestudentidentifier) ilike #{scorerTestStudentRecordCriteriaMap.stateStudentIdentifier}
				</if>		
				<if test="scorerTestStudentRecordCriteriaMap.testingProgramName != null">
					AND (tp.programname) ilike #{scorerTestStudentRecordCriteriaMap.testingProgramName}
				</if> 
				
				<if test="scorerTestStudentRecordCriteriaMap.districtName != null">
					AND ( district.organizationname) ilike #{scorerTestStudentRecordCriteriaMap.districtName}
				</if>
				<if test="scorerTestStudentRecordCriteriaMap.schoolName != null">
					AND ( org.organizationname) ilike #{scorerTestStudentRecordCriteriaMap.schoolName}
				</if>
				
				
				group by sas.id,scsco.id,s.id, scsco.scorerid,  sas.id , s.legallastname , s.legalmiddlename ,
				s.legalfirstname, cat.categorycode,
				s.statestudentidentifier,artusr.firstname,artusr.surname
			    <if test="sidx != null">
	     		ORDER BY sas.id,scsco.scorerid,
			      	<choose>
			      		<when test="sidx == 'lastName'">lastName</when>
			      		<when test="sidx == 'firstName'">firstName</when>
						<when test="sidx == 'scored'">scored</when>
						<when test="sidx == 'stateStudentIdentifier'">stateStudentIdentifier</when>
						<when test="sidx == 'districtName'">districtName</when>
						<when test="sidx == 'schoolName'">schoolName</when>
						<when test="sidx == 'testingProgramName'">testingProgramName</when>
						<otherwise>lastName</otherwise>
					</choose> 
			      <if test="sord!=null and sord=='desc'">
			    		desc
		    	  </if>
		    	  <if test="sord=='asc' or sord==null">
		    	 		asc
		    	  </if>
			    </if>
		
	
	</select>
	
	<select id="isCheckScorerAndStudent" resultType="java.lang.Long">
		select id from ccqscore where scoringassignmentstudentid = #{scoringAssignmentStudentId} and scoringassignmentscorerid = #{scoringAssignmentScorerId} and activeflag is true
	</select>	
	
	<select id="updateScorerAndStudent" parameterType="edu.ku.cete.domain.CcqScore">
		 update ccqscore
    		set excludeflag = #{excludeFlag,jdbcType=BIT},
      		notificationflag = #{notificationFlag,jdbcType=BIT}
    	where id = #{id,jdbcType=BIGINT}
	</select>
   
   	<select id="getKELPAScoresByAssignmentIdAndStudentTestId" resultMap="ExtendedResultMap" >	
		select ccs.id,ccs.scoringassignmentstudentid,ccs.scoringassignmentscorerid,ccs.isscored,ccs.totalscore,ccs.createddate,ccs.createduser,ccs.activeflag,ccs.excludeflag,ccs.notificationflag,ccs.status,
		ccsi.id as itemId,ccsi.ccqscoreid,ccsi.rubriccategoryid,ccsi.score,ccsi.createddate as itemcreateddate,ccsi.createduser,ccsi.activeflag as itemactiveflag,ccsi.taskvariantid, ccsi.nonscoringreason
		from ccqScore ccs
		inner join ccqscoreItem ccsi on ccs.id = ccsi.ccqscoreid and ccsi.activeflag is true
		inner join scoringassignmentstudent sas on ccs.scoringassignmentstudentid = sas.id and sas.activeflag is true
		where sas.studentstestsid = #{studentsTestId,jdbcType=BIGINT} and  sas.scoringassignmentid = #{scoringAssignmentId,jdbcType=BIGINT}
		 and ccs.activeflag is true 
	</select>
	
	<select id="updateScoreAndStatus" parameterType="edu.ku.cete.domain.CcqScore" resultMap="BaseResultMap">
		 update ccqscore
    		set status = #{status,jdbcType=BIT},
      		totalscore = totalscore + #{totalScore,jdbcType=BIT}, modifieduser = #{modifiedUser,jdbcType=BIGINT},
      		modifieddate = #{modifiedDate,jdbcType=TIMESTAMP}
    	where scoringassignmentstudentid = #{scoringAssignmentStudentId,jdbcType=BIGINT}
    	and  scoringassignmentscorerid = #{scoringAssignmentScorerId,jdbcType=BIGINT} and activeflag is true RETURNING *
	</select>  
	<select id="getMonitorScoringExtractByOrg" parameterType="map" resultMap="MonitorScoringExtractMap">
			select distinct sa.id as id,
			    otd.statename as state, 
			    otd.districtname as district, 
			    otd.schoolname as school, 
			    e.aypschoolidentifier as schoolidentifier, 
			    tcGc.name as grade,
			    r.coursesectionname as rostername, 
			    au.uniquecommonidentifier as educatoridentifier, 
			    au.surname as educatorlastname, 
			    au.firstname as educatorfirstname, 
			    s.legallastname as studentlastname, s.legalfirstname as studentfirstname, s.legalmiddlename as studentmiddlename, s.statestudentidentifier as statestudentidentifier, 
			    ca.name as subject, sa.ccqtestname as scoringassignmentname, tc.name as testcollectionname, sta.name as stage, 
			    <!-- case when cat.categorycode = 'COMPLETED' then 'Complete' ELSE 'In Progress' end as scoringstatus, -->
			    case when cat.categoryname is null then 'Not Scored' ELSE cat.categoryname end as scoringstatus,
			    t.numitems as qtytoscore, 
			    count(ccqscoitem.ccqscoreid) as scored
			  from testsession ts      
			  inner join studentstests stst on ts.id = stst.testsessionid 
			  inner join test t on stst.testid = t.id
			  inner join enrollment e on e.id = stst.enrollmentid and e.activeflag is true   
			  inner join organizationtreedetail otd on otd.schoolid = e.attendanceschoolid 
			  inner join testcollection AS tc ON tc.id = ts.testcollectionid 
			   left join stage sta on ts.stageid = sta.id
			   
			  inner join assessmentsTestCollections asstTc ON tc.id = asstTc.testcollectionid and ts.testcollectionid = asstTc.testcollectionid and asstTc.activeflag is true 
			  INNER JOIN assessment asst ON asst.id = asstTc.assessmentid and asst.activeflag is true 
			  INNER JOIN testingProgram tp ON asst.testingProgramId = tp.id and tp.activeflag is true 
			  inner join scoringassignment sa on sa.testsessionid = ts.id and sa.activeflag is true 
			  inner join scoringassignmentstudent sas on sas.scoringassignmentid = sa.id and sas.activeflag is true 
			  inner join student s on sas.studentid = s.id and s.activeflag is true			  
			  inner join scoringassignmentscorer sass on sass.scoringassignmentid = sa.id and sass.activeflag is true 
			  inner join aartuser au on sass.scorerid =  au.id and au.activeflag is true			  
			  inner join contentarea ca on ca.id = tc.contentareaid and ca.activeflag is true			  
			  left join GradeCourse tcGc on (tc.gradeCourseId = tcGc.id or ts.gradecourseid = tcgc.id )and tcGc.activeflag = true 
			  left join ccqscore ccqsco on ccqsco.scoringassignmentstudentid = sas.id and ccqsco.scoringassignmentscorerid = sass.id 
			  left join ccqscoreitem ccqscoitem on ccqscoitem.ccqscoreid = ccqsco.id
					left join category cat on cat.id = ccqsco.status  and cat.activeflag is true
					left join categorytype cattype on cattype.id = cat.categorytypeid and cattype.activeflag is true
					left join roster r on sa.rosterid = r.id  and r.activeflag is true    
			  where stst.activeflag is true and ts.activeflag is true and 
			  		<if test="assessmentProgIds !=null">
						tp.assessmentprogramid in 
						<foreach collection="assessmentProgIds" item="assessmentprogramid" open="(" close=")" separator=",">
							#{assessmentprogramid}
						</foreach>
					</if>
			  		and (otd.schoolid = #{orgId,jdbcType=BIGINT} OR otd.districtid = #{orgId,jdbcType=BIGINT} OR otd.stateid = #{orgId,jdbcType=BIGINT} ) and 
			        e.currentschoolyear = #{currentSchoolYear,jdbcType=BIGINT}
			  group by ts.name, sa.createddate, sa.id,tcGc.name, tp.programname,ca.id,otd.schoolid ,e.id,au.id,tc.id,sta.id,cat.id,s.id,r.id,t.numitems
			  order by ca.name,otd.statename,otd.districtname,otd.schoolname,au.surname,sta.name,s.legallastname asc				
	</select>
	<select id="getCountOfInprogressDomainsForStudent"  resultType="java.lang.Integer">
		select count(ass.*) from scoringassignmentstudent ass
        join studentstests st on st.id = ass.studentstestsid and st.studentid = ass.studentid and st.activeflag = true
		join scoringassignment sa on sa.id = ass.scoringassignmentid and sa.activeflag = true 
		join testsession ts on ts.id = sa.testsessionid and ts.activeflag = true
		where ts.stageid in (select id from stage where code = ANY(ARRAY
				<foreach collection="scoringDomains"
					item="scoringDomain" open="[" close="]" separator="," >
					#{scoringDomain}
				</foreach>))
			and ass.studentid = #{studentId,jdbcType=BIGINT}
			and ass.activeflag is true
			and ass.kelpascoringstatus = (select c.id from category c 
								inner join categorytype ct on c.categorytypeid=ct.id 
							where ct.typecode='SCORING_STATUS' and categorycode in ('IN_PROGRESS'))			
	</select>
	
		<select id="getByScorerAndStudent"  parameterType="map" resultMap="BaseResultMap">
			select * from ccqscore where scoringassignmentstudentid = #{scoringAssignmentStudentId,jdbcType=BIGINT}
    	   and scoringassignmentscorerid = #{scoringAssignmentScorerId,jdbcType=BIGINT} and activeflag is true		
	</select>
	
	<select id="getByEducatorIdAndStateStudentId" resultMap="ExtendedResultMap" >	
		select ccs.id,ccs.scoringassignmentstudentid,ccs.scoringassignmentscorerid,ccs.isscored,ccs.totalscore,ccs.createddate,ccs.createduser,ccs.activeflag,ccs.excludeflag,ccs.notificationflag,ccs.status,
		ccsi.id as itemId,ccsi.ccqscoreid,ccsi.rubriccategoryid,ccsi.score,ccsi.createddate as itemcreateddate,ccsi.createduser,ccsi.activeflag as itemactiveflag,ccsi.taskvariantid, ccsi.nonscoringreason
		from  scoringassignment sa 
		inner join scoringassignmentscorer sasc ON sasc.scoringassignmentid = sa.id and sasc.activeflag is true
		inner join scoringassignmentstudent sast ON sast.scoringassignmentid = sa.id and sast.activeflag is true
		inner join ccqscore ccs ON ccs.scoringassignmentscorerid = sasc.id and ccs.scoringassignmentstudentid = sast.id and ccs.activeflag is true
		inner join ccqscoreitem ccsi ON ccsi.ccqscoreid = ccs.id and ccsi.activeflag is true
		inner join student s ON s.id = sast.studentid and s.activeflag is true
		inner join aartuser au ON au.id = sasc.scorerid and au.activeflag is true
		where sa.ccqtestname =  #{assignmentName} and s.statestudentidentifier = #{stateStudentId} and au.uniquecommonidentifier = #{educatorId}
	</select>
</mapper>