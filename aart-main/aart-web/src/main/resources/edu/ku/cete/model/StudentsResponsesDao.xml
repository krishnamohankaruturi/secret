<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.ku.cete.model.StudentsResponsesDao" >
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.StudentsResponses" >
    <!--selectStudentAndTestByTestSession
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
    <result column="studentid" property="studentId" jdbcType="BIGINT" />
    <result column="testid" property="testId" jdbcType="BIGINT" />
    <result column="taskvariantid" property="taskVariantId" jdbcType="BIGINT" />
    <result column="foilid" property="foilId" jdbcType="BIGINT" />
    <result column="response" property="response" jdbcType="VARCHAR" />
    <result column="studentstestsid" property="studentsTestsId" jdbcType="BIGINT" />
    <result column="score" property="score" jdbcType="NUMERIC" />
    <result column="studentstestsectionsid" property="studentsTestSectionsId" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
	studentid, testid, taskvariantid, foilid, response, studentstestsid,score
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="edu.ku.cete.domain.StudentsResponsesExample" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.studentsresponses
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <insert id="insert" parameterType="edu.ku.cete.domain.StudentsResponses" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
    insert into public.studentsresponses (studentid, testid, 
      taskvariantid, foilid, response, 
      studentstestsid, createddate, createduser, activeflag, modifieddate, modifieduser)
    values (#{studentId,jdbcType=BIGINT}, #{testId,jdbcType=BIGINT}, 
      #{taskVariantId,jdbcType=BIGINT}, #{foilId,jdbcType=BIGINT}, #{response,jdbcType=VARCHAR}, 
      #{studentsTestsId,jdbcType=BIGINT}, #{createdDate}, #{createdUser}, #{activeFlag},#{modifiedDate},#{modifiedUser})
  </insert>
  <insert id="insertSelective" parameterType="edu.ku.cete.domain.StudentsResponses" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
    insert into public.studentsresponses
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        studentid,
      </if>
      <if test="testId != null" >
        testid,
      </if>
      <if test="taskVariantId != null" >
        taskvariantid,
      </if>
      <if test="foilId != null" >
        foilid,
      </if>
      <if test="response != null" >
        response,
      </if>
      <if test="studentsTestsId != null" >
        studentstestsid,
      </if>
        createddate, 
		createduser, 
		activeflag,
		modifieddate, 
		modifieduser,
      
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="studentId != null" >
        #{studentId,jdbcType=BIGINT},
      </if>
      <if test="testId != null" >
        #{testId,jdbcType=BIGINT},
      </if>
      <if test="taskVariantId != null" >
        #{taskVariantId,jdbcType=BIGINT},
      </if>
      <if test="foilId != null" >
        #{foilId,jdbcType=BIGINT},
      </if>
      <if test="response != null" >
        #{response,jdbcType=VARCHAR},
      </if>
      <if test="studentsTestsId != null" >
        #{studentsTestsId,jdbcType=BIGINT},
      </if>
      #{createdDate},
	  #{createdUser},
	  #{activeFlag},
	  #{modifiedDate},
	  #{modifiedUser},
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.ku.cete.domain.StudentsResponsesExample" resultType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
    select count(*) from public.studentsresponses
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
    update public.studentsresponses
    <set >
      <if test="record.studentId != null" >
        studentid = #{record.studentId,jdbcType=BIGINT},
      </if>
      <if test="record.testId != null" >
        testid = #{record.testId,jdbcType=BIGINT},
      </if>
      <if test="record.taskVariantId != null" >
        taskvariantid = #{record.taskVariantId,jdbcType=BIGINT},
      </if>
      <if test="record.foilId != null" >
        foilid = #{record.foilId,jdbcType=BIGINT},
      </if>
      <if test="record.response != null" >
        response = #{record.response,jdbcType=VARCHAR},
      </if>
      <if test="record.studentsTestsId != null" >
        studentstestsid = #{record.studentsTestsId,jdbcType=BIGINT},
      </if>
		modifieddate = #{record.modifiedDate},
		modifieduser = #{record.modifiedUser},
		activeflag = #{record.activeFlag},
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
    update public.studentsresponses
    set studentid = #{record.studentId,jdbcType=BIGINT},
      testid = #{record.testId,jdbcType=BIGINT},
      taskvariantid = #{record.taskVariantId,jdbcType=BIGINT},
      foilid = #{record.foilId,jdbcType=BIGINT},
      response = #{record.response,jdbcType=VARCHAR},
      studentstestsid = #{record.studentsTestsId,jdbcType=BIGINT},
      modifieddate = #{record.modifiedDate},
	   modifieduser = #{record.modifiedUser},
	   activeflag = #{record.activeFlag} 
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByFoilIdAndStudentsTestsId" parameterType="edu.ku.cete.domain.StudentsResponses">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Oct 22 15:42:42 CDT 2012.
    -->
    UPDATE studentsresponses
    SET studentid = #{studentId,jdbcType=BIGINT},
      testid = #{testId,jdbcType=BIGINT},
      taskvariantid = #{taskVariantId,jdbcType=BIGINT},   
      foilid = #{foilId,jdbcType=BIGINT},   
      response = #{response,jdbcType=VARCHAR},   
      modifieddate = #{modifiedDate},
	  modifieduser = #{modifiedUser},
	  activeflag = #{activeFlag}	
    WHERE studentstestsid = #{studentsTestsId,jdbcType=BIGINT}
    	AND taskvariantid = #{taskVariantId,jdbcType=BIGINT} 
    	    	 
  </update>
  
  <resultMap type="edu.ku.cete.domain.StudentsResponsesReportDto" id="studentTestResponsesDtoMap">
  	<id column="studentresponsesid" property="id" jdbcType="BIGINT"/>
    <result column="tasklayoutformat" property="taskLayoutFormat" jdbcType="VARCHAR"/>
    <result column="reporttasklayoutformat" property="reportTaskLayoutFormat" jdbcType="VARCHAR"/>
    <result column="testsectionname" property="testSectionName" jdbcType="VARCHAR"/>
    <association property="studentsResponses" javaType="edu.ku.cete.domain.StudentsResponses">
	    <result column="studentid" property="studentId" jdbcType="BIGINT" />
	    <result column="testid" property="testId" jdbcType="BIGINT" />
	    <result column="taskvariantid" property="taskVariantId" jdbcType="BIGINT" />
	    <result column="foilid" property="foilId" jdbcType="BIGINT" />
	    <result column="response" property="response" jdbcType="VARCHAR" />
	    <result column="studentstestsid" property="studentsTestsId" jdbcType="BIGINT" />
		<result column="srtestcreateddate" property="createdDate" jdbcType="TIMESTAMP" />
		<result column="srmodifieddate" property="modifiedDate" jdbcType="TIMESTAMP" />
		<result column="srtestcreateduser" property="createdUser" jdbcType="BIGINT" />
		<result column="srtestmodifieduser" property="modifiedUser" jdbcType="BIGINT" />    
    </association>
    <association property="taskVariantsFoils" javaType="edu.ku.cete.domain.content.TaskVariantsFoils">
        <id column="tvftaskvariantid" property="id" jdbcType="BIGINT"/>
        <id column="tvffoilid" property="id" jdbcType="BIGINT"/>
        <result column="externaltaskid" property="externalTaskId" jdbcType="BIGINT"/>
        <result column="externalfoilid" property="externalFoilId" jdbcType="BIGINT"/>
        <result column="tvforiginationcode" property="originationCode" jdbcType="VARCHAR"/>
        <result column="responseorder" property="responseOrder" jdbcType="BIGINT"/>
        <result column="correctresponse" property="correctResponse" jdbcType="BOOLEAN"/>
        <result column="responsescore" property="responseScore" jdbcType="INTEGER"/>
    </association>
    <association property="testSectionsTaskVariants" javaType="edu.ku.cete.domain.content.TestSectionsTaskVariants">
        <id column="testsectionid" property="testSectionId" jdbcType="BIGINT"/>
        <id column="tstvstaskvariantid" property="taskVariantId" jdbcType="BIGINT"/>
	    <result column="externaltestsectionid" property="externalTestSectionId" jdbcType="BIGINT" />
	    <result column="externaltaskid" property="externalTaskId" jdbcType="BIGINT" />
	    <result column="tstvsoriginationcode" property="originationCode" jdbcType="VARCHAR" />
	    <result column="taskvariantposition" property="taskVariantPosition" jdbcType="INTEGER" />
    </association>    
  </resultMap>
  
  <!-- QuestarTaskResponseMap
  There is an assumption that all items in a group will be in one section.
  If this ever changes, the AssessmentAdministrationRefId will HAVE to be moved to ONLY in the StudentsResponses.
  The reason is because the studentsTestSectionsId will NOT be accurate at the top-level, like it's used now,
  since the responses would NOT all come from the same section. This would result in XML coming back (to sendScores.htm)
  that would NOT map to any response in our system.
  -->
  <resultMap id="QuestarTaskResponseMap" type="edu.ku.cete.web.QuestarDTO">
    <result column="studentstestsid" property="studentsTestsId"/>
    <result column="testsessionid" property="testSessionId"/>
    <result column="studentid" property="studentId"/>
    <result column="studentstestsectionsid" property="studentsTestSectionsId"/>
    <collection property="responses" ofType="edu.ku.cete.domain.StudentsResponses" column="studentstestsectionsid">
      <result column="studentstestsectionsid" property="studentsTestSectionsId"/>
      <result column="response" property="response"/>
      <result column="foilid" property="foilId"/>
      <result column="taskvariantid" property="taskVariantId"/>
      <association property="taskVariant" column="taskvariantid" javaType="edu.ku.cete.domain.content.TaskVariant">
        <result column="taskvariantid" property="id"/>
        <result column="variantname" property="variantName"/>
      </association>
    </collection>
  </resultMap>
   
   <select id="selectStudentTestResponsesByStudentTest" parameterType="long" resultMap="studentTestResponsesDtoMap">
	select row_number() over(order by sr.studentstestsid, ts.sectionorder, tstvs.taskvariantposition) as studentresponsesid,
	 sr.studentid, sr.testid, sr.taskvariantid, sr.foilid,
	  sr.response, sr.studentstestsid,
	 sr.createddate as srcreateddate, sr.createduser as srcreateduser,
	  sr.activeflag as sractiveflag, sr.modifieddate as srmodifieddate,
	   sr.modifieduser as srmodifieduser,
	   tvf.externaltaskid,tvf.externalfoilid,tvf.originationcode as tvforiginationcode,
	   tvf.responseorder,tvf.correctresponse,tvf.responsescore,
	   tstvs.testsectionid,ts.testsectionname, tstvs.taskvariantid as tstvstaskvariantid,tstvs.externaltestsectionid,
	   tstvs.externaltaskid,	   
	   tstvs.originationcode as tstvsoriginationcode,tstvs.taskvariantposition,
	   (select tlf.formatcode from tasklayoutformat tlf where tlf.id=tv.tasklayoutformatid) as tasklayoutformat,
	   (select tlf.formatcode from tasklayoutformat tlf where tlf.id=tv.reporttasklayoutformatid) as reporttasklayoutformat
	 from
	 studentsresponses sr
	 inner join testsection ts on (sr.testsectionid= ts.id and sr.testid = ts.testid)
	 inner join testsectionstaskvariants tstvs on ts.id = tstvs.testsectionid and sr.taskvariantid = tstvs.taskvariantid
	 inner join taskvariant tv on tv.id = sr.taskvariantid
	 <if test="! includeFoilLessItems">
	 	inner join taskvariantsfoils tvf on (sr.foilid = tvf.foilid and sr.taskvariantid = tvf.taskvariantid)
	 </if>
	 <if test="includeFoilLessItems">
	 	left join taskvariantsfoils tvf on (sr.foilid = tvf.foilid and sr.taskvariantid = tvf.taskvariantid)
	 </if>
	where
	sr.activeflag is true
	<if test="studentsTestsIdList != null">
		and sr.studentstestsid =ANY(ARRAY
		<foreach collection="studentsTestsIdList" item="studentsTestsId"
			open="[" close="]" separator=",">
			#{studentsTestsId}
		</foreach>)
	</if>	
	order by sr.studentstestsid, ts.sectionorder, tstvs.taskvariantposition
  </select>
    <select id="getStudentResponse" resultMap="BaseResultMap">
		select <include refid="Base_Column_List" />
		from studentsresponses 
		where 
		studentid= #{studentId} 
		and taskvariantid = #{taskVariantId} 
		and testid = #{testId} 
		order by modifieddate limit 1
  </select>
   <select id="getStudentResponseInterim" resultMap="BaseResultMap">
	select
	<include refid="Base_Column_List" />
	from studentsresponses
	where
	studentid= #{studentId}
	and taskvariantid = #{taskVariantId}
	and testid = #{testId}
	and studentstestsid=(select id from studentstests where studentid=
	#{studentId} and testsessionid=#{testSessionId} and activeflag is true order by modifieddate desc limit 1)
	order by modifieddate limit 1
  </select>
  
  <select id="getByStudentsTestsIdAndTaskType" parameterType="map" resultMap="BaseResultMap">
		SELECT sr.*
		FROM studentsresponses sr
			INNER JOIN taskvariant tv ON sr.taskvariantid = tv.id
		WHERE studentstestsid = #{studentsTestsId,jdbcType=BIGINT}
			AND tv.tasktypeid IN
				(SELECT id FROM tasktype WHERE code = ANY(ARRAY
					<foreach collection="taskTypeCodes" item="taskTypeCode" open="[" close="]" separator=",">
						#{taskTypeCode,jdbcType=VARCHAR}
					</foreach>
				))
		LIMIT #{limit,jdbcType=BIGINT}
  </select>
  
  <select id="getQuestarInfo" parameterType="map" resultMap="QuestarTaskResponseMap">
   	SELECT
        sr.studentid, sr.studentstestsid, sr.studentstestsectionsid, tstv.taskvariantposition, sr.taskvariantid, sr.response, sr.foilid
    FROM
        studentsresponses sr
        INNER JOIN studentstests st ON sr.studentstestsid = st.id
        INNER JOIN test ON st.testid = test.id
        INNER JOIN testsection ts ON test.id = ts.testid
        INNER JOIN testsectionstaskvariants tstv ON ts.id = tstv.testsectionid
        INNER JOIN taskvariant tv ON tstv.taskvariantid = tv.id AND sr.taskvariantid = tv.id
    WHERE
    	sr.activeflag = TRUE
    	AND sr.studentstestsid = ANY(ARRAY
        	<foreach collection="studentsTestsIds" item="studentsTestsId" open="[" close="]" separator=",">
        		#{studentsTestsId,jdbcType=BIGINT}
        	</foreach>::BIGINT[]
        )
        AND sr.taskvariantid = ANY(ARRAY
        	<foreach collection="taskVariantIds" item="taskVariantId" open="[" close="]" separator=",">
        		#{taskVariantId,jdbcType=BIGINT}
        	</foreach>::BIGINT[]
        )
    ORDER BY sr.studentid, sr.studentstestsid, tstv.taskvariantposition
  </select>
  
  <resultMap type="java.util.HashMap" id="StudentsResponsesResultMap">
  	<result column="essentialelement" property="essentialElement" jdbcType="VARCHAR" />
  	<collection property="value" javaType="java.util.ArrayList" ofType="edu.ku.cete.domain.StudentsResponses">  	
  		<result column="studentid" property="studentId" jdbcType="BIGINT" />
    	<result column="testid" property="testId" jdbcType="BIGINT" />
    	<result column="taskvariantid" property="taskVariantId" jdbcType="BIGINT" />
    	<result column="studentstestsid" property="studentsTestsId" jdbcType="BIGINT" />
    	<result column="score" property="score" jdbcType="NUMERIC" />
    
    	<association property="taskVariant" javaType="edu.ku.cete.domain.content.TaskVariant">
	    	<id column="id" property="id" jdbcType="BIGINT" />
	    	<result column="scoringmethod" property="scoringMethod" jdbcType="VARCHAR" />
	    	<result column="maxscore" property="maxScore" jdbcType="INTEGER" />	 
	    	<result column="essentialelement" property="essentialElement" jdbcType="VARCHAR" />  
	    	<result column="essentialelementid" property="essentialElementId" jdbcType="BIGINT" />     
    	</association>
    </collection>
  </resultMap>
  
  <select id="findResponsesByStudentTest" parameterType="map" resultMap="StudentsResponsesResultMap">
		select st.studentid, st.testid, st.id as studentstestsid, sr.score, tstv.taskvariantid, tv.id, tv.scoringmethod,
		tv.maxscore, cfd.contentcode as essentialelement, cfd.contentframeworkid as essentialelementid
		from studentstests st
		inner join testsection ts on ts.testid=st.testid
		inner join testsectionstaskvariants tstv on tstv.testsectionid=ts.id
		inner join taskvariant tv on tstv.taskvariantid = tv.id
		inner join taskvariantcontentframeworkdetail tvcf on tv.id = tvcf.taskvariantid
		inner join contentframeworkdetail cfd on tvcf.contentframeworkdetailid = cfd.id
		left join studentsresponses sr on sr.studentstestsid=st.id and sr.taskvariantid = tv.id and sr.activeflag is true
		where cfd.activeflag is true and tvcf.isprimary is true 
		and st.id=#{studentsTestsId,jdbcType=BIGINT};
  </select>  
    
  <update id="updateQuestarRequestId" parameterType="map">
  	UPDATE studentsresponses
  	SET questarrequestid = #{questarRequestId,jdbcType=BIGINT}
  	WHERE studentstestsectionsid = #{studentsTestSectionsId,jdbcType=BIGINT}
  	AND taskvariantid = #{taskVariantId,jdbcType=BIGINT}
  	AND activeflag = TRUE
  </update>
  
  <select id="selectQuestarResponse" parameterType="map" resultMap="BaseResultMap">
    SELECT studentid, testid, studentstestsid, studentstestsectionsid, taskvariantid,
      foilid, response, score
    FROM studentsresponses sr
    WHERE sr.studentstestsectionsid = #{studentsTestSectionsId,jdbcType=BIGINT}
    AND sr.taskvariantid IN (SELECT id FROM taskvariant WHERE externalid = #{taskVariantId,jdbcType=BIGINT})
    AND sr.studentid = #{studentId,jdbcType=BIGINT}
    AND sr.studentstestsid = #{studentsTestsId,jdbcType=BIGINT}
    AND sr.questarrequestid IS NOT NULL
    AND sr.activeflag = TRUE
  </select>
  
  <select id="findQuestarResponseByStudentTestSectionId" parameterType="map" resultMap="BaseResultMap">
	SELECT studentid, testid, studentstestsid, studentstestsectionsid, taskvariantid,
     	foilid, response, score
	FROM studentsresponses sr 
	WHERE sr.studentstestsectionsid=#{studentsTestSectionsId,jdbcType=BIGINT}
	AND sr.questarrequestid IS NOT NULL
  </select>
  
  <resultMap id="QuestarResponseMapByStudentTestSectionId" type="java.util.HashMap" >
     <result property="studentsTestSectionsId" column="studentstestsectionsid"/>
     <collection property="value" javaType="java.util.ArrayList" resultMap="BaseResultMap" column="studentstestsectionsid" >
     </collection>
  </resultMap>
  
  <select id="findQuestarResponseMapByStudentTestId" parameterType="map" resultMap="QuestarResponseMapByStudentTestSectionId">
	SELECT studentid, testid, studentstestsid, studentstestsectionsid, taskvariantid,
     	foilid, response, score
	FROM studentsresponses sr 
	WHERE sr.studentstestsid=#{studentsTestsId,jdbcType=BIGINT}
	AND sr.questarrequestid IS NOT NULL AND sr.activeflag = TRUE
  </select>
    
  <update id="updateScoreForQuestar" parameterType="map">
    UPDATE studentsresponses
    SET score = #{score,jdbcType=NUMERIC}, modifieddate = NOW(), modifieduser = #{userId,jdbcType=BIGINT}
    WHERE studentstestsectionsid = #{studentsTestSectionsId,jdbcType=BIGINT}
    AND taskvariantid = #{taskVariantId,jdbcType=BIGINT}
    AND questarrequestid IS NOT NULL
    AND activeflag = TRUE
  </update>
  
  <insert id="insertStudentResponse" parameterType="edu.ku.cete.domain.StudentsResponses">
    INSERT INTO studentsresponses
    (studentid, testid, testsectionid, studentstestsid, studentstestsectionsid, taskvariantid, foilid, response, score,
    createduser, modifieduser, activeflag, questarresponsetext)
    VALUES
    (#{studentId,jdbcType=BIGINT}, #{testId,jdbcType=BIGINT}, #{testSectionId,jdbcType=BIGINT}, #{studentsTestsId,jdbcType=BIGINT},
    #{studentsTestSectionsId,jdbcType=BIGINT}, #{taskVariantId,jdbcType=BIGINT}, #{foilId,jdbcType=BIGINT}, #{response,jdbcType=VARCHAR},
    #{score,jdbcType=NUMERIC}, #{createdUser,jdbcType=BIGINT}, #{modifiedUser,jdbcType=BIGINT}, TRUE, #{questarResponseText,jdbcType=BIGINT})
  </insert>
  
  
  <!-- Count Total Number Of Scoreable Items -->
  <select id="countTotalNumberOfScoreableItems" resultType="java.lang.Integer">
	select count(id) 
	from studentsresponses sr
	left join taskvariant tv ON sr.taskvariantid = tv.id
	where tv.scoringneeded is true
	<if test="studentId != null">
		AND sr.studentid = #{studentId,jdbcType=BIGINT} 
	</if>
	<if test="testId != null">
		and sr.testid = #{testId,jdbcType=BIGINT}
	</if>
  </select>
  
  <!-- Count Number Of Scoreable Items With Correct Responses -->
  <select id="countNumberOfScoreableItemsWithCorrectResponses" resultType="java.lang.Integer">
	select count(sr.score)
	from studentsresponses sr
	left join taskvariant tv ON sr.taskvariantid = tv.id
	where tv.scoringneeded is true
	AND sr.score = CAST(tv.maxscore AS numeric(6,3)) 
	<if test="studentId != null">
		AND sr.studentid = #{studentId,jdbcType=BIGINT} 
	</if>
	<if test="testId != null">
		and sr.testid = #{testId,jdbcType=BIGINT}
	</if>
  </select>
  
   <select id="getNoOfNotResponsesMachineScoreItems" parameterType="long" resultType="java.lang.Integer">
	 select count(id) from (select tv.id,strs.taskvariantid
	 from studentstests st 
	 join testsection tsec on st.testid = tsec.testid 
	 join testsectionstaskvariants tstv on tstv.testsectionid = tsec.id 
	 join taskvariant tv on tv.id = tstv.taskvariantid 
	 left join tasktype tt on tt.id = tv.tasktypeid  
	 left join studentsresponses strs on st.id = strs.studentstestsid and strs.testid = st.testid and strs.taskvariantid = tv.id and strs.activeflag is true
	 where st.id = #{studentsTestId,jdbcType=BIGINT} and tt.code not in ('ER','UDI')
	 ) responsesitem where taskvariantid is null
  </select>	  
  
</mapper>