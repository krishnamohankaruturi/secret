<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.ku.cete.model.ScoringAssignmentMapper" >
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.ScoringAssignment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Sep 21 17:07:36 IST 2015.
    -->
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="testsessionid" property="testSessionId" jdbcType="BIGINT" />
    <result column="createddate" property="createdDate" jdbcType="TIMESTAMP" />
    <result column="createduser" property="createdUser" jdbcType="INTEGER" />
    <result column="activeflag" property="active" jdbcType="BIT" />
    <result column="ccqtestname" property="ccqTestName" jdbcType="VARCHAR" />
  </resultMap>
  
  
  <resultMap id="ExtendedResultMap" type="edu.ku.cete.domain.ScoringAssignment" >  	
    <collection  property="scoringAssignmentStudent" ofType="edu.ku.cete.domain.ScoringAssignmentStudent" javaType="ArrayList"  >
    	<id column="scoringassignmentstudentid" property="id" jdbcType="BIGINT" />
    	<result column="studentid" property="studentId" jdbcType="BIGINT" />
    	<result column="studentstestsid" property="studentsTestsId" jdbcType="BIGINT" />
    </collection>
    <collection  property="scoringAssignmentScorer" ofType="edu.ku.cete.domain.ScoringAssignmentScorer" javaType="ArrayList"  >
        <id column="scoringassignmentscorerid" property="id" jdbcType="BIGINT" />
    	<result column="scorerid" property="scorerid" jdbcType="BIGINT" />
    </collection>
  </resultMap>
  
   <resultMap id="ScoreUploadMap" type="edu.ku.cete.domain.ScoringUploadDto"  >
   		<id property="id" column="id" jdbcType="BIGINT"/>
		<result column="ccqtestname" property="assignmentName" jdbcType="VARCHAR" />
		<result column="attendanceschoolid" property="attendanceSchoolId" jdbcType="BIGINT" />
		<result column="status" property="status" jdbcType="BIGINT" />		
		<collection  property="educatorIdentifiers" ofType="java.lang.String" javaType="List"  >
          <result column ="uniquecommonidentifier" />
        </collection>
        <collection  property="stateStudentIdentifiers" ofType="java.lang.String" javaType="List"  >
           <result column ="statestudentidentifier" />
        </collection>
         <collection  property="testIds" ofType="java.lang.Long" javaType="List"  >
           <result column ="testid" />
        </collection>
   </resultMap>
   
   <resultMap id="BaseStudentTestAssignmentMap" type="edu.ku.cete.web.ScorerTestStudentsSessionDTO"  >
   		<id property="studentsTestsId" column="studentsTestsId" jdbcType="BIGINT"/>
   		<id property="scoringStudentId" column="scoringstudentid" jdbcType="BIGINT"/>
   		<id property="id" column="id" jdbcType="BIGINT"/>
		<result column="testingProgramName" property="testingProgramName" jdbcType="VARCHAR" />
		<result column="lastname" property="lastName" jdbcType="VARCHAR" />
		<result column="mi" property="mi" jdbcType="VARCHAR" />
		<result column="firstname" property="firstName" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="VARCHAR" />	
		<result column="statestudentidentifier" property="stateStudentIdentifier" jdbcType="VARCHAR" />
		<result column="grade" property="grade" jdbcType="VARCHAR" />
		<result property="testsId" column="testsid" jdbcType="BIGINT"/>					
		<result column="districtname" property="districtName" jdbcType="VARCHAR" />
		<result column="schoolName" property="schoolName" jdbcType="VARCHAR" />		
		<result column="testName" property="testName" jdbcType="VARCHAR" />	
		<collection  property="taskVariantDetails" ofType="edu.ku.cete.domain.test.TestSectionTaskVariantDetails" javaType="ArrayList"  >
           <result property="taskVariantId" column="taskvariantid" jdbcType="VARCHAR"/>
           <result property="taskVariantPosition" column="count_pos" jdbcType="VARCHAR"/>
           <result property="testletId" column="testletid" jdbcType="BIGINT"/>
           <result property="testletStatus" column="testletstatus" jdbcType="BOOLEAN"/>
           <result property="response" column="response" jdbcType="VARCHAR"/>           
           <result property="variantScore" column="itemscore" jdbcType="VARCHAR"/>
           <result property="clusterScoring" column="clusterscoring" jdbcType="BOOLEAN"/>
           <result property="stimulusFlag" column="stimulusflag" jdbcType="BOOLEAN"/>
        </collection>
   </resultMap>
   
   <resultMap id="BaseMonitorScoreMap"  type="edu.ku.cete.web.ScorerTestStudentsSessionDTO" >
   		<id property="studentsTestsId" column="studentsTestsId" jdbcType="BIGINT"/>
   		<id property="scorerId" column="scorerid" jdbcType="BIGINT"/>		
   		<result column="studentfirstname" property="firstName" jdbcType="VARCHAR" />     
    	<result column="studentlastname" property="lastName" jdbcType="VARCHAR" /> 
   		<result column="statestudentidentifier" property="stateStudentIdentifier" jdbcType="VARCHAR" />
   		<result column="stage" property="stage" jdbcType="VARCHAR"/>
		<result column="status" property="status" jdbcType="VARCHAR" />	
		<result column="scorer" property="educatorFirstName" jdbcType="VARCHAR" />
		<collection  property="taskVariantDetails" ofType="edu.ku.cete.domain.test.TestSectionTaskVariantDetails" javaType="ArrayList"  >
           <result property="taskVariantId" column="taskvariantid" jdbcType="VARCHAR"/>
           <result property="taskVariantPosition" column="positionintest" jdbcType="VARCHAR"/>
           <result property="testletId" column="testletid" jdbcType="BIGINT"/>
         	<result property="variantScore" column="variantScore" jdbcType="VARCHAR"/>
           <result property="clusterScoring" column="clusterscoring" jdbcType="BOOLEAN"/>
           <result property="variantNonScoreReason" column="nonscorereason" jdbcType="VARCHAR"/>
        </collection>
    </resultMap>
   
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Sep 21 17:07:36 IST 2015.
    -->
    id, testsessionid, createddate, createduser, activeflag, ccqtestname
  </sql>
  	
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Sep 21 17:07:36 IST 2015.
    -->
    select 
    <include refid="Base_Column_List" />
    from scoringassignment
    where id = #{id,jdbcType=BIGINT}
  </select>
  <insert id="insert" parameterType="edu.ku.cete.domain.ScoringAssignment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Sep 21 17:07:36 IST 2015.
    -->
    <selectKey resultType="java.lang.Long" keyProperty="id" order="BEFORE" >
      SELECT nextval('scoringassignment_id_seq')
    </selectKey>
    insert into scoringassignment (id, testsessionid, createddate, 
      createduser, activeflag, ccqtestname,source,modifieddate,modifieduser)
    values (#{id,jdbcType=BIGINT}, #{testSessionId,jdbcType=BIGINT}, #{createdDate,jdbcType=TIMESTAMP}, 
      #{createdUser,jdbcType=INTEGER}, #{active,jdbcType=BIT}, #{ccqTestName,jdbcType=VARCHAR}, #{source,jdbcType=VARCHAR}
      , #{createdDate,jdbcType=TIMESTAMP}, 
      #{createdUser,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="edu.ku.cete.domain.ScoringAssignment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Sep 21 17:07:36 IST 2015.
    -->
    <selectKey resultType="java.lang.Long" keyProperty="id" order="BEFORE" >
      SELECT nextval('scoringassignment_id_seq')
    </selectKey>
    insert into scoringassignment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      id,
      <if test="testSessionId != null" >
        testsessionid,
      </if>
      <if test="createdDate != null" >
        createddate,
      </if>
      <if test="createdUser != null" >
        createduser,
      </if>
      <if test="active != null" >
        activeflag,
      </if>
      <if test="ccqTestName != null" >
        ccqtestname,
      </if>
      <if test="rosterId != null" >
        rosterid,
      </if>
      <if test="source != null" >
        source,
      </if>
      <if test="createdDate != null" >
        modifieddate,
      </if>
      <if test="createdUser != null" >
        modifieduser,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      #{id,jdbcType=BIGINT},
      <if test="testSessionId != null" >
        #{testSessionId,jdbcType=BIGINT},
      </if>
      <if test="createdDate != null" >
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdUser != null" >
        #{createdUser,jdbcType=INTEGER},
      </if>
      <if test="active != null" >
        #{active,jdbcType=BIT},
      </if>
      <if test="ccqTestName != null" >
        #{ccqTestName,jdbcType=VARCHAR},
      </if>
      <if test="rosterId != null" >
       #{rosterId,jdbcType=VARCHAR},
      </if>
      <if test="source != null" >
       #{source,jdbcType=VARCHAR},
      </if>
       <if test="createdDate != null" >
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdUser != null" >
        #{createdUser,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.ScoringAssignment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Sep 21 17:07:36 IST 2015.
    -->
    update scoringassignment
    <set >
      <if test="testSessionId != null" >
        testsessionid = #{testSessionId,jdbcType=BIGINT},
      </if>
      <if test="createdDate != null" >
        createddate = #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createdUser != null" >
        createduser = #{createdUser,jdbcType=INTEGER},
      </if>
      <if test="active != null" >
        activeflag = #{active,jdbcType=BIT},
      </if>
      <if test="ccqTestName != null" >
       ccqtestname = #{ccqTestName,jdbcType=VARCHAR},
      </if>
      <if test="modifiedDate != null" >
        modifieddate = #{modifiedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedUser != null" >
        modifieduser = #{modifiedUser,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.ScoringAssignment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Mon Sep 21 17:07:36 IST 2015.
    -->
    update scoringassignment
    set testsessionid = #{testSessionId,jdbcType=BIGINT},
      createddate = #{createdDate,jdbcType=TIMESTAMP},
      createduser = #{createdUser,jdbcType=INTEGER},
      activeflag = #{active,jdbcType=BIT},
      ccqtestname = #{ccqTestName,jdbcType=VARCHAR},
       modifieduser = #{modifiedUser,jdbcType=INTEGER},
       modifieddate =now()
    where id = #{id,jdbcType=BIGINT}
  </update>
  
 <sql id="selectTestSessionAndStudentCountForScorerTests" >			
  	SELECT distinct 
  		sa.id as scoringassignmentid,
  		count(*) OVER() AS totalrecords,
  		sa.testsessionid as id, ts.name as testsessionname,
  		sa.ccqtestname,
        ca.name as subject,
        gc.name as grade,
        (select count(id) from scoringassignmentstudent where scoringassignmentid = sa.id and activeflag is true) studentcount,
        (select count (sass.id) from scoringassignmentstudent sass
  			INNER JOIN category cat on cat.id = sass.kelpascoringstatus and cat.categorycode = 'COMPLETED' and cat .activeflag is true
  		WHERE scoringassignmentid = sa.id and sass.activeflag is true) as studentsscoredcount
  	FROM scoringassignment sa 
  		INNER JOIN testsession ts on ts.id = sa.testsessionid and ts.activeflag is true and ts.schoolyear = #{schoolYear}
        INNER JOIN testcollection tc on tc.id = ts.testcollectionid 
        INNER JOIN scoringassignmentscorer sas on sas.scoringassignmentid = sa.id and sas.activeflag is true
        INNER JOIN gradecourse gc on ts.gradecourseid = gc.id and gc.activeflag is true
        INNER JOIN organizationtreedetail otd on otd.schoolid = ts.attendanceschoolid 
        INNER JOIN contentarea ca on ca.id = tc.contentareaid and ca.activeflag is true
        INNER JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.activeflag is true 
    WHERE sa.activeflag is true
          and (otd.schoolid = #{stateId} OR otd.districtid = #{stateId} OR otd.stateid = #{stateId}) 
                and otw.assessmentprogramid = #{assessmentPrgId}
                <!-- <if test="isScoreAllTest != null and isScoreAllTest == false"> -->
                <if test="userId != null">
			  	and  sas.scorerid = #{userId}
				</if> 
                <if test="subjectId != null" >
				and tc.contentareaid =  #{subjectId}	
				</if>
                <if test="gradeId != null" >
		       	and ts.gradecourseid = #{gradeId}
		  		</if>             
                and (otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP  &lt;  otw.scoringwindowenddate)
   				<if test="scorerTestSessionRecordCriteriaMap.ccqTestName != null">
   				and sa.ccqtestname ilike #{scorerTestSessionRecordCriteriaMap.ccqTestName} 
  				</if>
				<if test="scorerTestSessionRecordCriteriaMap.grade != null">
   				and gc.name ilike #{scorerTestSessionRecordCriteriaMap.grade} 
   				</if>
   </sql>
  
  	<select id="getCountTestSessionAndStudentCountForScorer" resultType="java.lang.Integer">
	 	select count(*) from (
		<include refid="selectTestSessionAndStudentCountForScorerTests" />
		) baseq
	</select>
	
	<select id="getTestSessionAndStudentCountForScorer" resultType="edu.ku.cete.web.ScoreTestTestSessionDTO">
	select count(*) OVER() AS totalrecords,* from (
		<include refid="selectTestSessionAndStudentCountForScorerTests" />
	) baseq	
	 
		<if test="sidx != null">
	      ORDER BY 
	      	<choose>      		
	      		<when test="sidx == 'ccqTestName'">ccqtestname</when>
	      		<when test="sidx == 'subject'">subject</when>
	      		<when test="sidx == 'grade'">grade</when>
	      		<when test="sidx == 'studentCount'">studentcount</when>
	      		<when test="sidx == 'studentsscoredcount'">studentsscoredcount</when>	      	      		
	      		<otherwise>id</otherwise>
	      	</choose> 
	      	<if test="sord!=null and sord=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sord=='asc' or sord==null">
    	 		asc
    	 	</if>
	    </if>
		limit #{limit}
	    offset #{offset} 
	</select>
	
	<sql id="selectTestSessionAndStudentCountForMonitorScorer" >			
		select  count(*) OVER() AS totalrecords, sa.id as id , sa.ccqtestname as ccqtestname, 
		sa.createddate as createdDate,
		tp.programname testingProgramName,		
		count(distinct sas.id)  as studentcount, 
		( select count(distinct scoas.id) from scoringassignmentscorer scoas where scoas.scoringassignmentid = sa.id   )  as scorercount,
		<if test="assessmentProgramCode != null and assessmentProgramCode == 'KELPA2'"> 		 	
			(select count (sass.id) from scoringassignmentstudent sass
			 inner join category cat on cat.id = sass.kelpascoringstatus and cat.categorycode = 'COMPLETED' and cat .activeflag is true
			 where scoringassignmentid = sa.id and sass.activeflag is true) as studentsscoredcount,
		</if> 
		<if test="assessmentProgramCode != null and assessmentProgramCode != 'KELPA2'"> 
			(select count(*) from (
			select distinct(scoringassignmentstudentid) as studentcount from ccqscore cqss 
			join scoringassignmentscorer scorer on scorer.id = cqss.scoringassignmentscorerid and scorer.scoringassignmentid = sa.id 
			join category cat on cat.id = cqss.status and cat.categorycode = 'COMPLETED'
			group by scoringassignmentstudentid having (count(scoringassignmentstudentid) = (select count(scoas.id) from scoringassignmentscorer scoas where scoas.scoringassignmentid = sa.id))
			) as actualcount) as studentsscoredcount, 
		</if>
		ca.name as subject,tcGc.name as grade,
		otd.districtname districtName,
  		otd.schoolname schoolName,
  		ts.name as testSessionName 	 
		from testsession ts 
 		inner join organizationtreedetail otd on otd.schoolid = ts.attendanceschoolid
		inner join testcollection AS tc ON tc.id = ts.testcollectionid 
		inner join assessmentsTestCollections asstTc ON tc.id = asstTc.testcollectionid and ts.testcollectionid = asstTc.testcollectionid and asstTc.activeflag = true 
		INNER JOIN assessment asst ON asst.id = asstTc.assessmentid and asst.activeflag = true 
		INNER JOIN testingProgram tp ON asst.testingProgramId = tp.id and tp.activeflag = true
		inner join scoringassignment sa on sa.testsessionid = ts.id and sa.activeflag = true
		inner join scoringassignmentstudent sas on sas.scoringassignmentid = sa.id  and sas.activeflag = true
		inner join scoringassignmentscorer sass on sass.scoringassignmentid = sa.id  and sass.activeflag = true	
		inner join GradeCourse tcGc on ts.gradeCourseId = tcGc.id and tcGc.activeflag is true 
		inner join contentarea ca on ca.id = tc.contentareaid and ca.activeflag is true	
		inner join operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.activeflag is true
		left join ccqscore ccqsco on ccqsco.scoringassignmentstudentid = sas.id and ccqsco.scoringassignmentscorerid = sass.id and ccqsco.activeflag is true 
		left join category cat on ccqsco.status = cat.id and cat.activeflag is true
		left join categorytype cattype on cat.categorytypeid = cattype.id and cattype.activeflag is true
		where ts.activeflag = true and tp.assessmentprogramid = #{assessmentPrgId}
		and ts.schoolyear = #{currentSchoolYear}
		and (otw.scoringwindowstartdate is null OR otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP  &lt;  otw.scoringwindowenddate)
		<if test="schoolId != null">
			AND otd.schoolid = #{schoolId}
		</if>
		<if test="districtId != null">	
			AND otd.districtid = #{districtId}
		</if>		
		<if test="stateId != null">
			and otd.stateid = #{stateId}  
		</if>
		<if test="subjectId != null" >
			and tc.contentareaid =  #{subjectId}
		</if>
		<if test="gradeId != null" >
			and ts.gradecourseid = #{gradeId} 
        </if>
        <if test="scorerTestSessionRecordCriteriaMap.ccqTestName != null">
			and (sa.ccqtestname ) ilike #{scorerTestSessionRecordCriteriaMap.ccqTestName}
		</if> 
		 <if test="scorerTestSessionRecordCriteriaMap.testingProgramName != null">
			and (tp.programname ) ilike #{scorerTestSessionRecordCriteriaMap.testingProgramName}
		</if> 
		<if test="scorerTestSessionRecordCriteriaMap.subject != null">
			and (ca.name ) ilike #{scorerTestSessionRecordCriteriaMap.subject}
		</if>
		<if test="scorerTestSessionRecordCriteriaMap.grade != null">
			and (tcGc.name ) ilike #{scorerTestSessionRecordCriteriaMap.grade}
		</if>
		<if test="scorerTestSessionRecordCriteriaMap.districtName != null">
					AND (otd.districtname) ilike #{scorerTestSessionRecordCriteriaMap.districtName}
		</if>
		<if test="scorerTestSessionRecordCriteriaMap.schoolName != null">
					AND (otd.schoolname) ilike #{scorerTestSessionRecordCriteriaMap.schoolName}
		</if>
		group by  ts.name, sa.createddate, sa.id,tcGc.name,
		tp.programname,ca.id,otd.districtname,otd.schoolname
  </sql>
	
	<select id="getCountTestSessionAndStudentCountForMonitorScorer" resultType="java.lang.Integer">
	 	select count(*) from (
		<include refid="selectTestSessionAndStudentCountForMonitorScorer" />
		) baseq
	</select>
		
	<select id="getTestSessionAndStudentCountForMonitorScorer" resultType="edu.ku.cete.web.ScoreTestTestSessionDTO">
		<include refid="selectTestSessionAndStudentCountForMonitorScorer" />
		
		<if test="sidx != null">
	      ORDER BY 
	      	<choose>
	      		<when test="sidx == 'testsessionName'">testsessionName</when>
	      		<when test="sidx == 'createdDate'">createdDate</when>
	      		<when test="sidx == 'studentCount'">studentCount</when>
	      		<when test="sidx == 'studentsscoredcount'">studentsscoredcount</when>
	      		<when test="sidx == 'scorercount'">scorercount</when>
	      		<when test="sidx == 'testingProgramName'">testingProgramName</when>
	      		<when test="sidx == 'id'">id</when>
	      		<when test="sidx == 'districtName'">districtName</when>
			    <when test="sidx == 'schoolName'">schoolName</when>
	      		<otherwise>id</otherwise>
	      	</choose> 
	      	<if test="sord!=null and sord=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sord=='asc' or sord==null">
    	 		asc
    	 	</if>
	    </if>
		limit #{limit}
	    offset #{offset} 
	</select>
	
	<resultMap id="BaseResultMapContentArea" type="edu.ku.cete.domain.content.ContentArea" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="externalid" property="externalId" jdbcType="BIGINT" />
    <result column="sortorder" property="sortOrder" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="abbreviatedname" property="abbreviatedName" jdbcType="VARCHAR" />
    <result column="createdate" property="createDate" jdbcType="TIMESTAMP" />
    <result column="modifieddate" property="modifiedDate" jdbcType="TIMESTAMP" />
    <result column="originationcode" property="originationCode" jdbcType="VARCHAR" />
   </resultMap>
	
	<sql id="Extended_Column_List" >
    ca.id, ca.externalid, ca.sortorder, ca.name, ca.abbreviatedname, ca.createdate, ca.modifieddate, ca.originationcode
    </sql>
    
	<select id="getScoresHarmToSelfDetails" resultType="edu.ku.cete.web.ScoreTestSelfToHarmDTO">			
		select count(*) OVER() AS totalrecords,'HS'||ROW_NUMBER () over (ORDER BY legalFirstName) as gridRowId,* from (SELECT distinct
         std.legalfirstname ||' '|| std.legallastname ||' - '|| std.statestudentidentifier as legalFirstName, 
         st.studentid,
         orgtreedetail.districtname,
         orgtreedetail.schoolname,
         gc.name,
         ts.name as testName,
         stmd.positionintest as item,
      aau.firstname || ' '|| aau.surname   as scorer,aau.surname
                       FROM studentstestscore sts 
                        inner join studentstests st on st.id= sts.studenttestid and st.activeflag is true
                        INNER JOIN student std ON std.id = st.studentid and std.activeflag is true
                        INNER JOIN testsession ts ON ts.id = st.testsessionid and ts.activeflag is true and ts.schoolyear = #{currentSchoolYear}
                        INNER JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.activeflag is true and (otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP &lt; otw.scoringwindowenddate)
        INNER JOIN organizationtreedetail orgtreedetail ON orgtreedetail.schoolid = ts.attendanceschoolid
     INNER JOIN gradecourse gc ON ts.gradecourseid = gc.id and gc.activeflag is true
   INNER JOIN aartuser aau ON sts.scorerid = aau.id
   INNER JOIN scoringtestmetadata stmd on (stmd.taskvariantid = sts.taskvariantid and stmd.testid = st.testid) 
where sts.nonscorereason  = #{nonscorerid} and otw.assessmentprogramid = #{assessmentPrgId}
   and (orgtreedetail.stateid = #{orgId} OR orgtreedetail.districtid = #{orgId} OR orgtreedetail.schoolid = #{orgId})			
			<if test="monitorSelfToHarmFilters.legalFirstName != null">
			AND ((std.legalfirstname) ilike '%' || #{monitorSelfToHarmFilters.legalFirstName} || '%' OR (std.legallastname) ilike '%' || #{monitorSelfToHarmFilters.legalFirstName} || '%' OR (std.statestudentidentifier) ilike '%' || #{monitorSelfToHarmFilters.legalFirstName} || '%')
			</if>
			<if test="monitorSelfToHarmFilters.districtName != null">
			AND (orgtreedetail.districtname) ilike #{monitorSelfToHarmFilters.districtName}
			</if>
			<if test="monitorSelfToHarmFilters.schoolName != null">
			AND (orgtreedetail.schoolname) ilike #{monitorSelfToHarmFilters.schoolName}
			</if>
			<if test="monitorSelfToHarmFilters.name != null">
			AND (gc.name) ilike #{monitorSelfToHarmFilters.name}
			</if>
			<if test="monitorSelfToHarmFilters.testName != null">
			AND (ts.name) ilike #{monitorSelfToHarmFilters.testName}
			</if>
			<if test="monitorSelfToHarmFilters.item != null">
			AND (stmd.positionintest) ilike #{monitorSelfToHarmFilters.item}
			</if>
			<if test="monitorSelfToHarmFilters.scorer != null">
			AND( (aau.firstname) ilike '%' || #{monitorSelfToHarmFilters.scorer}|| '%' OR (aau.surname) ilike '%' || #{monitorSelfToHarmFilters.scorer} || '%' )
			</if>
			
			<if test="sortByColumn != null">
    	ORDER BY
    		<choose>
	    		<when test="sortByColumn == 'legalFirstName'">std.legalfirstname||' '||std.legallastname ||' - '||std.statestudentidentifier</when>
	      		<when test="sortByColumn == 'districtName'">orgtreedetail.districtname</when>
	      		<when test="sortByColumn == 'schoolName'">orgtreedetail.schoolname</when>
	      		<when test="sortByColumn == 'name'">gc.name</when>
	      		<when test="sortByColumn == 'testName'">ts.name</when>
	      		<when test="sortByColumn == 'item'">stmd.positionintest</when>
	      		<when test="sortByColumn == 'scorer'">aau.surname</when>
	      	</choose>
    	 	<if test="sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
		</if> 
		  ) As selftoharm
		 limit #{limit}
	     offset #{offset}
	    
	</select>
	
	<select id="findByContentArea" resultMap="BaseResultMapContentArea">
    SELECT distinct <include refid="Extended_Column_List"/>
    FROM scoringassignment sa 
    INNER JOIN testsession ts ON  sa.testsessionid = ts.id AND ts.activeflag is true
    INNER JOIN testcollection AS tc ON tc.id = ts.testcollectionid AND tc.activeflag is true
    INNER JOIN contentarea ca ON ca.id = tc.contentareaid AND ca.activeflag is true
    INNER JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid AND otw.activeflag is true
    WHERE ts.attendanceschoolid = #{schoolId} AND otw.assessmentprogramid = #{assessmentProgramId} 
    AND sa.activeflag is true 
    AND (otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP  &lt;  otw.scoringwindowenddate)
    AND ts.schoolyear = #{currentSchoolYear}
    ORDER BY ca.name
  </select>
  
  <resultMap id="BaseResultMapGradeId" type="edu.ku.cete.domain.content.GradeCourse">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="externalid" jdbcType="BIGINT" property="externalId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="abbreviatedname" jdbcType="VARCHAR" property="abbreviatedName" />
    <result column="ordinality" jdbcType="BIGINT" property="ordinality" />
    <result column="gradelevel" jdbcType="INTEGER" property="gradeLevel" />
    <result column="shortdescription" jdbcType="VARCHAR" property="shortDescription" />
    <result column="longdescription" jdbcType="VARCHAR" property="longDescription" />
    <result column="createdate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="modifieddate" jdbcType="TIMESTAMP" property="modifiedDate" />
    <result column="originationcode" jdbcType="VARCHAR" property="originationCode" />
    <result column="assessmentprogramgradesid" jdbcType="BIGINT" property="assessmentProgramGradesId" />
    <result column="contentareaid" jdbcType="BIGINT" property="contentAreaId" />
  </resultMap>
  
  <sql id="Base_Column_List_Grade_Id">
    gc.id, gc.externalid, gc.name, gc.abbreviatedname, gc.ordinality, gc.gradelevel, gc.shortdescription, 
    gc.longdescription, gc.createdate, gc.modifieddate, gc.originationcode,gc.assessmentprogramgradesid, gc.contentareaid
  </sql>
	
  <select id="selectGradeCourseByContentAreaId" resultMap="BaseResultMapGradeId">
 				SELECT distinct ON (gc.name) <include refid="Base_Column_List_Grade_Id"/> 
 				FROM scoringassignment sa
         	    INNER JOIN testsession ts ON ts.id = sa.testsessionid and ts.activeflag is true
                INNER JOIN testcollection tc ON tc.id = ts.testcollectionid 
                INNER JOIN gradecourse gc ON ts.gradecourseid = gc.id 
                INNER JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid AND otw.activeflag is true 
                WHERE ts.attendanceschoolid = #{schoolId} AND otw.assessmentprogramid = #{assessmentProgramId} AND sa.activeflag is true 
                AND tc.contentareaid =  #{contentAreaId}
                AND (otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP  &lt;  otw.scoringwindowenddate)
                AND ts.schoolyear = #{currentSchoolYear} 
                ORDER BY gc.name
 </select>
  
	<sql id="selectScorerStudentsAppearsForScoreTests">
         select * from (select distinct on (sas.id,stm.positionintest) 
		 s.id,
		 sas.id as scoringStudentId,
		 s.legallastname as lastName,
		 s.legalmiddlename as mi,
		 s.legalfirstname as firstName,
		 case 
		 when cat.categoryname is null then 'Not Scored' 
		 ELSE cat.categoryname end as status,
		 s.statestudentidentifier as stateStudentIdentifier,
		 sas.studentstestsid as studentsTestsId, 
		 sas.testid as testsid,
		 stm.taskvariantid as taskvariantid,
		 stm.positionintest as count_pos, 
		 sr.response, 
		  array_to_string(array(select score from studentstestscore where studenttestid = sas.studentstestsid and taskvariantid = stm.taskvariantid and activeflag is true), ', ') as itemscore,
		 stm.testletid,
		  case when((
		           select count(stimulusvariantid) from taskvariantsstimulusvariants 
		           where taskvariantid = stm.taskvariantid)>0 
		           OR 
		           (select contextstimulusid from taskvariant where id = stm.taskvariantid) is not null)  then true Else false END as stimulusflag,
		 stm.clusterscoring
		from scoringassignment sa
		inner join ScoringAssignmentStudent sas on sas.scoringassignmentid = sa.id and sas.activeflag is true
		inner join testsession testsession on sa.testsessionid = testsession.id and testsession.schoolyear = #{currentSchoolYear}
		inner join scoringtestmetadata stm on stm.testid = sas.testid 
		inner join student s on s.id = sas.studentid and s.activeflag is true
		left join studentstestscore sts on sts.studenttestid = sas.studentstestsid and sts.activeflag is true
		left join category cat on cat.id = sas.kelpascoringstatus and cat.activeflag is true 
		left join studentsresponses sr on (sas.studentstestsid = sr.studentstestsid and stm.taskvariantid = sr.taskvariantid) and sr.activeflag is true
		where sa.id = #{scoringAssignmentId} and sa.activeflag is true
		order by sas.id,stm.positionintest asc) studentitems
		  
	<!-- 	<if test="scorerTestStudentRecordCriteriaMap.firstName != null">
			AND (firstname) ilike #{scorerTestStudentRecordCriteriaMap.firstName}
		</if>	
		<if test="scorerTestStudentRecordCriteriaMap.lastName != null">
			AND (lastname) ilike #{scorerTestStudentRecordCriteriaMap.lastName}
		</if>	
		<if test="scorerTestStudentRecordCriteriaMap.stateStudentIdentifier != null">
			AND (statestudentidentifier) ilike #{scorerTestStudentRecordCriteriaMap.stateStudentIdentifier}
		</if>		
		<if test="scorerTestStudentRecordCriteriaMap.testingProgramName != null">
			AND (testingProgramName) ilike #{scorerTestStudentRecordCriteriaMap.testingProgramName}
		</if> 
		
		<if test="scorerTestStudentRecordCriteriaMap.districtName != null">
			AND ( districtname) ilike #{scorerTestStudentRecordCriteriaMap.districtName}
		</if>
		<if test="scorerTestStudentRecordCriteriaMap.schoolName != null">
			AND (schoolName) ilike #{scorerTestStudentRecordCriteriaMap.schoolName}
		</if>
		<if test="scorerTestStudentRecordCriteriaMap.grade != null">
			AND (grade) ilike #{scorerTestStudentRecordCriteriaMap.grade}
		</if>
		<if test="scorerTestStudentRecordCriteriaMap.testName != null">
			AND (testName) ilike #{scorerTestStudentRecordCriteriaMap.testName}
		</if>
		<if test="sidx != null">
	  		ORDER BY  
	     	<choose>
	     		<when test="sidx == 'lastName'">lastName</when>
	     		<when test="sidx == 'mi'">mi</when>
	     		<when test="sidx == 'firstName'">firstName</when>
				<when test="sidx == 'status'">status</when>
				<when test="sidx == 'stateStudentIdentifier'">stateStudentIdentifier</when>
				<when test="sidx == 'grade'">grade</when>
				<when test="sidx == 'districtName'">districtName</when>
				<when test="sidx == 'schoolName'">schoolName</when>
				<when test="sidx == 'testingProgramName'">testingProgramName</when>
				<when test="sidx == 'testName'">testName</when>
				<otherwise>id</otherwise>
				</choose> 
		    <if test="sord!=null and sord=='desc'">
		   		desc
		  	</if>
		  	<if test="sord=='asc' or sord==null">
		  	 		asc
		  	</if>
	   	</if>  -->
	</sql>
		

	<select id="getScorerStudentsAppearsForScoreTests" resultMap="BaseStudentTestAssignmentMap" >
		<include refid="selectScorerStudentsAppearsForScoreTests" />		
<!-- 		limit #{limit}
	    offset #{offset} 		 --> 
	    order by  lastName, firstName, mi 
	</select>
	
	<select id="getScorerStudentsAppearsForScoreTestsCount" resultType="java.lang.Integer">
	 	select count(*) from (
	 		<include refid="selectScorerStudentsAppearsForScoreTests" />	
		) baseq
	</select>
  
  <select id="getStudentTestScoringCriteria" resultType="edu.ku.cete.web.ScoreTestScoringCriteriaDTO" >
		select distinct rc.id as rubricCatergoryId,  rc.name as rubricCatName, rinf.description as rubricInfoDesc,
		rinf.score score  ,tv.rubrictype,
		(CASE 
		    WHEN rc.rubricscoreweight is null THEN '1'
			WHEN rc.rubricscoreweight = 0 THEN '1'
			ELSE rc.rubricscoreweight  
		 END
		)::int as rubricScoreWeight 	
		from studentstests st 
		join testsection tsec on st.testid = tsec.testid
		join testsectionstaskvariants tstv on tstv.testsectionid = tsec.id   
		join rubriccategory  rc on rc.taskvariantid = tstv.taskvariantid
		join rubricinfo rinf on rinf.rubriccategoryid  = rc.id
		join taskvariant tv on  tv.id =tstv.taskvariantid
		where st.testid = #{testsId,jdbcType=BIGINT} and st.studentid = #{studentId,jdbcType=BIGINT} and st.testsessionid = #{testSessionId,jdbcType=BIGINT}
		and tv.id= #{variantValue,jdbcType=BIGINT} order by rc.id, rinf.score desc 
	</select> 
	
	<select id="checkAssignScoringStudentScorer" resultType="edu.ku.cete.web.AssignScorerStudentScorerCriteriaDTO" >		
		select distinct au.surname || ',' || coalesce(au.middlename,'') || case  when length(au.middlename) > 0 then ',' else '' end || au.firstname as scorername,
		s.legallastname || ',' || coalesce(s.legalmiddlename,'') || case when length(s.legalmiddlename) > 0 then ',' else '' end || s.legalfirstname as studentname
		from scoringassignmentstudent sas 
		join scoringassignment sa on sa.id = sas.scoringassignmentid 
		join scoringassignmentscorer scas on scas.scoringassignmentid=sa.id
		join student s on s.id=sas.studentid
		join aartuser au on au.id=scas.scorerid
		where sa.testsessionid = #{testSessionId,jdbcType=BIGINT} and sas.studentid in
				  <foreach collection="studentIds"
				    item="studentId" open="(" close=")" separator="," >
				   #{studentId,jdbcType=BIGINT}
			    </foreach> and scas.scorerid in
			    <foreach collection="scorerIds"
				    item="scorerId" open="(" close=")" separator="," >
				   #{scorerId,jdbcType=BIGINT}
			    </foreach> order by scorername,studentname 
	</select> 
	<select id="checkUniqueCcqTestName" resultType="Integer">
		select count(ccqtestname) from scoringassignment where ccqtestname ilike #{ccqTestName}
	</select>
	
	<select id="getMonitorCCQStudentDetails" resultType="edu.ku.cete.web.ScorerTestStudentsSessionDTO">		
			SELECT id, stateStudentIdentifier as stateStudentIdentifier,  legalFirstName as firstName, 
			        legalLastName as lastName, legalmiddlename as mi
					FROM student 
					WHERE id in 
					<foreach collection="studentIds"
				    	item="studentId" open="(" close=")" separator="," >
				  		 #{studentId,jdbcType=BIGINT}
			   		 </foreach> 
	</select>
	
	<select id="getscorerTestStudentsSessionDTOForDynamicColumn" resultMap="BaseStudentTestAssignmentMap" >
		 select distinct on (sas.id,stm.positionintest) 
		 s.id as studentid,
		 sas.id as scoringStudentId,
		 s.legallastname as lastName,
		 case when s.legalmiddlename is null then '' ELSE s.legalmiddlename END as mi,
		 s.legalfirstname as firstName,
		 case 
		 when cat.categoryname is null then 'Not Scored' 
		 ELSE cat.categoryname end as status,
		 s.statestudentidentifier as stateStudentIdentifier,
		 sas.studentstestsid as studentsTestsId, 
		 sas.testid as testsid,
		 stm.taskvariantid as taskvariantid,
		 stm.positionintest as count_pos, 
		 sr.response, 
		 array_to_string(array(select score from studentstestscore where studenttestid = sas.studentstestsid and taskvariantid = stm.taskvariantid and activeflag is true), ', ') as itemscore,
		 stm.testletid,
		 stm.clusterscoring
		from scoringassignment sa
		inner join ScoringAssignmentStudent sas on sas.scoringassignmentid = sa.id and sas.activeflag is true
		inner join testsession testsession on sa.testsessionid = testsession.id and testsession.schoolyear = #{currentSchoolYear}
		inner join scoringtestmetadata stm on stm.testid = sas.testid 
		inner join student s on s.id = sas.studentid and s.activeflag is true
		left join studentstestscore sts on sts.studenttestid = sas.studentstestsid and sts.activeflag is true
		left join category cat on cat.id = sas.kelpascoringstatus and cat.activeflag is true 
		left join studentsresponses sr on (sas.studentstestsid = sr.studentstestsid and stm.taskvariantid = sr.taskvariantid) and sr.activeflag is true
		where sa.id = #{scoringAssignmentId} and sa.activeflag is true
		order by sas.id,stm.positionintest asc		  
 	</select>  
	
	<select id="getScorerStudentResources" resultType="edu.ku.cete.web.ScorerStudentResourcesDTO">
		select distinct on(sva.filelocation) ts.id , tsec.id as sessionId, sva.filename as fileName, sva.filetype as fileType, sva.filelocation as fileLocation 
			from testsession ts  
			JOIN studentstests st on ts.testcollectionid = st.testcollectionid and ts.id=st.testsessionid 
			join testsection tsec on tsec.testid = st.testid
			join testsectionresource tsr on tsr.testsectionid = tsec.id 
			join stimulusvariantattachment sva on sva.stimulusvariantid = tsr.stimulusvariantid 
		where ts.id in (#{testSessionId})		
	</select>
	<select id="getByTestSessionAndRoster" resultMap="BaseResultMap">		
		select * from scoringassignment where rosterid = #{rosterId,jdbcType=BIGINT} and testsessionid = #{testSessionId,jdbcType=BIGINT} and activeflag is true
    </select>
     <select id="getAssignmentsByStudentsTestId" resultMap="BaseResultMap">		
		select sa.* from scoringassignmentstudent sast 
		inner join scoringAssignment sa on sast.scoringassignmentid = sa.id 
		where sast.studentstestsid =  #{studentsTestId,jdbcType=BIGINT} 
		and sa.activeflag is true 
		and sast.activeflag is true 
    </select>
    <select id="getUploadScoreSubject" resultMap="BaseResultMapContentArea" >
	    SELECT distinct <include refid="Extended_Column_List"/>
    from scoringassignment sa 
    inner join scoringassignmentscorer sass on sass.scoringassignmentid = sa.id and sass.activeflag is true	
    inner join testsession ts on  sa.testsessionid = ts.id and ts.activeflag is true
    inner join organizationtreedetail otd on otd.schoolid = ts.attendanceschoolid
    inner join testcollection AS tc ON tc.id = ts.testcollectionid and tc.activeflag is true
    inner join contentarea ca on ca.id = tc.contentareaid and ca.activeflag is true
    inner join operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.activeflag is true
    where otw.assessmentprogramid = #{assessmentPrgId} and sa.activeflag is true 
    and otd.schoolid in 
			<foreach collection="schoolIds" item="schoolId" open="(" close=")" separator=",">
			 #{schoolId,jdbcType=BIGINT}
			</foreach>
    <!-- <if test="isScoreAllTest != null and isScoreAllTest == false">
	  and sass.scorerid = #{scorerId}
    </if>  -->         
    and ( otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP  &lt;  otw.scoringwindowenddate)
  </select>
  <select id="getUploadScoresGradeBySubjectId" resultMap="BaseResultMapGradeId">			
			select distinct on (gc.name) <include refid="Base_Column_List_Grade_Id"/> 
 				 from scoringassignment sa
         	    inner join  scoringassignmentscorer saco on saco.scoringassignmentid = sa.id and saco.activeflag is true
         	    inner join testsession ts on ts.id = sa.testsessionid and ts.activeflag is true
                inner join organizationtreedetail otd on otd.schoolid = ts.attendanceschoolid 
                inner join testcollection tc on tc.id = ts.testcollectionid 
                inner join gradecourse gc on ts.gradecourseid = gc.id 
                inner join operationaltestwindow otw ON otw.id = ts.operationaltestwindowid 
                and otw.activeflag is true 
                and (otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP  &lt;  otw.scoringwindowenddate)
                where sa.activeflag is true 
                <if test="schoolIds !=null">
						and otd.schoolid in 
						<foreach collection="schoolIds" item="schoolId" open="(" close=")" separator=",">
						#{schoolId}
						</foreach>
				</if>    
                and tc.contentareaid = #{contentAreaId} 
                <!-- <if test="isScoreAllTest != null and isScoreAllTest == false">
	        		and  saco.scorerid = #{scorerId}
         		</if>  -->
                and ts.schoolyear = #{currentSchoolYear}
  </select>
    
  <resultMap id="BaseStudentToBeScoredAssignmentMap" type="edu.ku.cete.web.ScorerTestStudentsSessionDTO"  >
   		<id property="id" column="id" jdbcType="BIGINT"/>
   		<!-- <id property="educatorIdentifier" column="educatoridentifier" jdbcType="VARCHAR"/>
   		<id property="scoringAssignmentStudentId" column="scoringassignmentstudentid" jdbcType="BIGINT"/> -->
   		<id property="studentsTestsId" column="studentstestsid" jdbcType="BIGINT"/>
		<result property="testsId" column="testsid" jdbcType="BIGINT"/>
		
		<result column="statedisplayidentifier" property="stateDisplayIdentifier" jdbcType="VARCHAR" />
		<result column="districtdisplayidentifier" property="districtDisplayIdentifier" jdbcType="VARCHAR" />
		<result column="schooldisplayidentifier" property="schoolDisplayIdentifier" jdbcType="VARCHAR" />
		<result column="scoringassessmentname" property="scoringAssignmentName" jdbcType="VARCHAR" />
		<result column="educatoridentifier" property="educatorIdentifier" jdbcType="VARCHAR" />
		<result column="educatorlastname" property="educatorLastName" jdbcType="VARCHAR" />
		<result column="educatorFirstname" property="educatorFirstName" jdbcType="VARCHAR" />
		<result column="studentlastname" property="lastName" jdbcType="VARCHAR" />
		<result column="mi" property="mi" jdbcType="VARCHAR" />
		<result column="studentfirstname" property="firstName" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="VARCHAR" />	
		<result column="statestudentidentifier" property="stateStudentIdentifier" jdbcType="VARCHAR" />
		<result column="grade" property="grade" jdbcType="VARCHAR" />
		<result column="stage" property="stage" jdbcType="VARCHAR" />
		<result column="stagename" property="stageName" jdbcType="VARCHAR" />
		<result column="subjectname" property="subjectName" jdbcType="VARCHAR" />
		<result column="subjectabbreviatedname" property="subjectAbbreviatedName" jdbcType="VARCHAR" />
		<result column="testsessionname" property="testSessionName" jdbcType="VARCHAR" />
		<collection  property="taskVariantDetails" ofType="edu.ku.cete.domain.test.TestSectionTaskVariantDetails" javaType="ArrayList"  >
           <result column="taskvariantid" property="taskVariantId" jdbcType="VARCHAR" />
           <result column="count_pos" property="taskVariantPosition" jdbcType="VARCHAR"/>
           <result column="tasktypecode" property="taskTypeCode" jdbcType="VARCHAR"/>
           <result column="response" property="response" jdbcType="VARCHAR"/>
           <result column="testletid" property="testletId" jdbcType="BIGINT"/>
           <result column="testlettatus" property="testletStatus" jdbcType="BOOLEAN"/>
           <result column="clusterscoring" property="clusterScoring" jdbcType="BOOLEAN"/>           
           <result column="itemscore" property="variantScore" jdbcType="VARCHAR"/>
           <result column="itemnonscorereason" property="variantNonScoreReason" jdbcType="VARCHAR"/>
           <result column="rubricminscore" property="rubricMinScore" jdbcType="VARCHAR"/>
           <result column="rubricmaxscore" property="rubricMaxScore" jdbcType="VARCHAR"/>
        </collection>
   </resultMap>
  
	<select id="getScoringAssignmentsMappedStudentsToScore" resultMap="BaseStudentToBeScoredAssignmentMap" >	 
	 select * from 
	     (select distinct on (sas.studentstestsid, stm.positionintest) 
		      s.id as studentid, 
		      orgtd.statedisplayidentifier,
	          orgtd.districtId as districtId, 
	          orgtd.districtdisplayidentifier, 
	          orgtd.schoolId as schoolId,
	          orgtd.schooldisplayidentifier, 
	          ca.id as contentareaid, 
	          ca.abbreviatedname as subjectabbreviatedname, 
	          ca.name as subjectname,
	          sa.ccqtestname as scoringassessmentname,
	          s.legallastname as studentlastname, 
	          s.legalmiddlename  as mi,
	          s.legalfirstname as studentfirstname, 
	          stage.id as stageId, 
	          stage.code as stage, 
	          stage.name as stagename, 
	          stm.positionintest as count_pos, 
	          case when cat.categoryname is null then 'Not Scored' ELSE cat.categoryname end as status,
	          sas.id as scoringassignmentstudentid,
	          s.statestudentidentifier as stateStudentIdentifier, 
	          gc.id as gradeId,
	          gc.name as grade, 
	          stm.testid as testsid, 
	          stm.taskvariantid as taskvariantid,
	          case when (select nonscorereason
	                            from studentstestscore 
	                            where studenttestid = sas.studentstestsid 
	                            and taskvariantid = stm.taskvariantid 
	                            and activeflag is true) is null 
	          then '' ELSE (select catg.categorycode 
	                       from studentstestscore ss
	                       left join category catg on ss.nonscorereason = catg.id and catg.activeflag is true
	                       where studenttestid = sas.studentstestsid 
	                       and taskvariantid = stm.taskvariantid 
	                       and ss.activeflag is true) END as itemnonscorereason,
	          array_to_string(array(select score from studentstestscore 
	                            where studenttestid = sas.studentstestsid 
	                            and taskvariantid = stm.taskvariantid 
	                            and activeflag is true), ', ') as itemscore,
	         stm.testletid,
	         stm.clusterscoring,
	         stm.rubricminscore,
	         stm.rubricmaxscore,
	         testsession.id,
	         testsession.name as testsessionname,
	         stm.rubrictype,
	         sas.studentstestsid
	      
	    from testsession testsession
	    inner join scoringassignment sa on sa.testsessionid = testsession.id and sa.actIveflag is true
	    inner join scoringAssignmentstudent sas on sas.scoringassignmentid = sa.id and sas.activeflag is true
	    inner join organizationtreedetail orgtd on orgtd.schoolid = testsession.attendanceschoolid
	    inner join student s on s.id = sas.studentid and s.activeflag is true
	    inner join gradecourse gc on testsession.gradecourseid = gc.id and gc.activeflag is true
	    inner join testcollection tc on tc.id = testsession.testcollectionid
	    inner join contentarea ca on ca.id = tc.contentareaid
	    inner join stage stage on stage.id = testsession.stageid and stage.activeflag is true 
	    inner join scoringtestmetadata stm on stm.testid = sas.testid             
	    left join studentstestscore sts on sts.studenttestid = sas.studentstestsid and sts.activeflag is true
	    left join category cat on cat.id = sas.kelpascoringstatus and cat.activeflag is true 
	    left join category catg on sts.nonscorereason = catg.id and catg.activeflag is true
	    where   stm.rubrictype ilike ('holistic') 
	          <if test="testSessionIds != null">
		          and testsession.id in 
		          <foreach collection="testSessionIds" item="testSessionId" open="(" close=")" separator=",">
			         #{testSessionId}
		         </foreach>
	         </if> 
	         <if test="stageId != null">
		         and testsession.stageid = #{stageId,jdbcType=BIGINT}
	       </if>  
	       and testsession.activeflag is true and stm.rubrictype ilike ('holistic')
	    order by  sas.studentstestsid, stm.positionintest)studentstestwithscore 
	    <if test="includeItem == false">
	         where status not ilike  ('COMPLETED') 
	      </if>
	    
	</select>  
     <select id="getAssignmentsForUpload" resultMap="ScoreUploadMap">		
		select distinct sa.id,sa.ccqtestname,au.uniquecommonidentifier,s.statestudentidentifier,e.attendanceschoolid,st.testid,ccs.status from scoringassignment sa
		inner join testsession ts ON ts.id = sa.testsessionid and ts.activeflag is true
		inner join studentstests st ON st.testsessionid = ts.id and st.activeflag is true
		inner join enrollment e ON e.id = st.enrollmentid 
		inner join scoringassignmentscorer sasc ON sasc.scoringassignmentid = sa.id and sasc.activeflag is true
		inner join scoringassignmentstudent sast ON sast.scoringassignmentid = sa.id AND st.id = sast.studentstestsid AND sast.activeflag IS TRUE
		inner join aartuser au ON au.id = sasc.scorerid and au.activeflag is true
		inner join student s ON s.id = sast.studentid and s.activeflag is true
		left join ccqscore ccs ON sasc.id = ccs.scoringassignmentscorerid and sast.id = ccs.scoringassignmentstudentid and ccs.activeflag is true
		where sa.ccqtestname = #{assignmentName}
		<if test="scoreAllpermission == false"> 
		     and sasc.scorerid = #{scorerId,jdbcType=BIGINT}
		</if>
		and sa.activeflag is true 
    </select>
    
    <select id="getByAssessmentNameAndStudentAndEducator" resultMap="ExtendedResultMap">		
		select distinct sa.id, testsessionid, ccqtestname,
        sasc.id as scoringassignmentscorerid,studentstestsid, studentid,sast.id as scoringassignmentstudentid,
        scorerid from scoringassignment sa
		inner join scoringassignmentscorer sasc ON sasc.scoringassignmentid = sa.id and sasc.activeflag is true
		inner join scoringassignmentstudent sast ON sast.scoringassignmentid = sa.id and sast.activeflag is true
		inner join student s ON s.id = sast.studentid and s.activeflag is true
		inner join aartuser au ON au.id = sasc.scorerid and au.activeflag is true
		where au.uniquecommonidentifier =#{educatorIdentifier}
		and   sa.ccqtestname = #{assignmentName}
		and   s.statestudentidentifier = #{stateStudentIdentifier} and sa.activeflag is true
    </select>  

  
  <select id="getCountTestSessionIds" resultType="java.lang.Long">
  select count(distinct st.testid)  from studentstests st 
	inner join testsession ts on st.testsessionid = ts.id and ts.activeflag is true
 	where  
    	<if test="testSessionIds != null">
			ts.id in 
		<foreach collection="testSessionIds" item="testSessionId" open="(" close=")" separator=",">
			#{testSessionId}
		</foreach>
		</if> 
	 	  	
  </select>
  <select id="getCountStageIds" resultType="java.lang.Long">
  select count(distinct ts.stageid)  from studentstests st 
	inner join testsession ts on st.testsessionid = ts.id and ts.activeflag is true
 	where  
    	<if test="testSessionIds != null">
			ts.id in 
		<foreach collection="testSessionIds" item="testSessionId" open="(" close=")" separator=",">
			#{testSessionId}
		</foreach>
		</if> 
	  	
  </select>  
  <select id="getGradeCourseByContentAreaIdForAssignScorers" resultMap="BaseResultMapGradeId" >  	   
				select distinct  gc.id, gc.externalid, gc.name, gc.abbreviatedname, gc.ordinality, gc.gradelevel, gc.shortdescription, 
gc.longdescription, gc.createdate, gc.modifieddate, gc.originationcode,gc.assessmentprogramgradesid, gc.contentareaid 
from testsession ts  
inner join organizationtreedetail otd on otd.schoolid = ts.attendanceschoolid 
inner join testcollection tc on tc.id = ts.testcollectionid 
inner join gradecourse gc on ts.gradecourseid = gc.id 
inner join operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.activeflag is true 
where otw.assessmentprogramid = #{assessmentProgramId}  
and otd.schoolid in ( #{schoolAreaId} ) 
and tc.contentareaid =  #{contentAreaId}
and ts.schoolyear = #{currentSchoolYear}
and (otw.scoringwindowenddate is null OR  CURRENT_TIMESTAMP &lt; otw.scoringwindowenddate) order by gc.name
  </select>
  
  <select id="getMappedstudentForScorers" resultType="edu.ku.cete.domain.student.Student">
       	select distinct s.* from scoringassignment sa
	    inner join scoringassignmentstudent sas ON sas.scoringassignmentid = sa.id and sas.activeflag is true
	    inner join scoringassignmentscorer sasc ON sasc.scoringassignmentid = sa.id and sasc.activeflag is true
	    inner join student s ON s.id = sas.studentid and s.activeflag is true
	where sas.studentstestsid in
	<foreach collection="studentIdList" item="studentTestId" open="(" close=")" separator=",">
			#{studentTestId}
		</foreach>
	and sasc.scorerid in 
	<foreach collection="scorerIds" item="scorerId" open="(" close=")" separator=",">
			#{scorerId}
		</foreach> 
		and sa.activeflag is true
  </select>
  
   <select id="getNoOfUnScoredItemsByStudentTest" resultType="java.lang.Integer">     
             select count(distinct taskvariantid) 
             from studentstestscore 
             where studenttestid = #{studentsTestId}
			 and activeflag is true  	
  </select>  
  <select id="getStudentTestMonitorScore" resultMap="BaseMonitorScoreMap">
		select studentstestsid,scorerid,student,studentfirstname, studentlastname, 
			statestudentidentifier,
			scorer,scorerfirstname, scorersurname,
			taskvariantid,positionintest,variantScore,nonscorereason,
			 case 
			when cat.categoryname is null then 'Not Started' 
			ELSE cat.categoryname end as status,
			testletid,clusterscoring,stage
		FROM(
		select distinct 
			sas.studentstestsid,
			sts1.scorerid,
			s.legalfirstname|| ' ' ||s.legallastname as student,
			s.legalfirstname as studentfirstname,
			s.legallastname as studentlastname,
			s.statestudentidentifier, 
			au.firstname || ' '||au.surname as scorer,
			au.firstname as scorerfirstname,
			au.surname as scorersurname,
			stm.taskvariantid,
			stm.positionintest,
			(select sum(score) from studentstestscore where   taskvariantid =stm.taskvariantid and   studenttestid =sas.studentstestsid and scorerid=sts1.scorerid) as variantScore,
			case when sts.nonscorereason is not null then (select categorycode from   category where id=sts.nonscorereason)  
			else null end as nonscorereason,
			sas.kelpascoringstatus,
			stm.testletid,
			stm.clusterscoring,
			stg.name as stage 
		FROM testsession ts
			inner join scoringassignment sa ON ts.id = sa.testsessionid and sa.activeflag is true
			inner join testcollection tc on tc.id = ts.testcollectionid 
			inner join stage stg ON stg.id = ts.stageid 
			inner join operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.activeflag is true 
			inner join ScoringAssignmentStudent sas on sa.id = sas.scoringassignmentid and sas.actIveflag is true
			inner join student s on s.id = sas.studentid and s.activeflag is true
			inner join studentstestscore sts1 on sts1.studenttestid = sas.studentstestsid and  sts1.activeflag is true
			inner join aartuser au on (au.id = sts1.scorerid) and au.activeflag is true
			inner join scoringtestmetadata stm on stm.testid = sas.testid
			left join studentstestscore sts on sts.studenttestid = sas.studentstestsid and stm.taskvariantid = sts.taskvariantid and au.id = sts.scorerid and sts.activeflag is true
		WHERE ts.attendanceschoolid = #{schoolId} 
			and ts.gradecourseid = #{gradeId} 
			and tc.contentareaid =  #{contentAreaId}
			and ts.stageid = #{stageId} 
			and ts.activeflag is true and ts.schoolyear = #{currentSchoolYear}
			and otw.assessmentprogramid = #{assessmentProgramId}
			
		UNION
		
		select distinct 
			sas.studentstestsid, 
			sasc.scorerid,
			s.legalfirstname|| ' ' ||s.legallastname as student,
			s.legalfirstname as studentfirstname,
			s.legallastname as studentlastname,
			s.statestudentidentifier, 
			au.firstname || ' ' ||au.surname as scorer,
			au.firstname as scorerfirstname,
			au.surname as scorersurname,
			stm.taskvariantid,
			stm.positionintest,
			(select sum(score) from studentstestscore where   taskvariantid =stm.taskvariantid and   studenttestid =sas.studentstestsid and scorerid=sasc.scorerid) as variantScore,
			case when sts.nonscorereason is not null then (select categorycode from   category where id=sts.nonscorereason)  
			else null end as nonscorereason, 
			sas.kelpascoringstatus, 
			stm.testletid,
			stm.clusterscoring, 
			stg.name as stage 
		FROM testsession ts
			inner join scoringassignment sa ON ts.id = sa.testsessionid and sa.activeflag is true
			inner join testcollection tc on tc.id = ts.testcollectionid 
			inner join stage stg ON stg.id = ts.stageid 
			inner join operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.activeflag is true 
			inner join scoringassignmentscorer sasc on sa.id = sasc.scoringassignmentid and sasc.actIveflag is true  
			inner join ScoringAssignmentStudent sas on sa.id = sas.scoringassignmentid and sas.actIveflag is true
			inner join aartuser au on (au.id = sasc.scorerid) and au.activeflag is true
			inner join student s on s.id = sas.studentid and s.activeflag is true
			inner join scoringtestmetadata stm on stm.testid = sas.testid
			left join studentstestscore sts on sts.studenttestid = sas.studentstestsid and stm.taskvariantid = sts.taskvariantid and au.id = sts.scorerid and sts.activeflag is true
		WHERE ts.attendanceschoolid = #{schoolId} 
			and ts.gradecourseid = #{gradeId} 
			and tc.contentareaid =  #{contentAreaId}
			and ts.stageid = #{stageId} 
			and ts.activeflag is true and ts.schoolyear = #{currentSchoolYear}
			and otw.assessmentprogramid = #{assessmentProgramId}
		) ssadf
		left join category cat on cat.id = ssadf.kelpascoringstatus and cat.activeflag is true  
		ORDER BY studentlastname, studentfirstname,scorersurname, scorerfirstname 
		<!-- order by legallastname,surname,scorerid,positionintest -->
	</select>
  
</mapper>