<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.ku.cete.model.GradeCourseDao">
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.content.GradeCourse">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="externalid" jdbcType="BIGINT" property="externalId" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="abbreviatedname" jdbcType="VARCHAR" property="abbreviatedName" />
    <result column="ordinality" jdbcType="BIGINT" property="ordinality" />
    <result column="gradelevel" jdbcType="INTEGER" property="gradeLevel" />
    <result column="shortdescription" jdbcType="VARCHAR" property="shortDescription" />
    <result column="longdescription" jdbcType="VARCHAR" property="longDescription" />
    <result column="createdate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="modifieddate" jdbcType="TIMESTAMP" property="modifiedDate" />
    <result column="originationcode" jdbcType="VARCHAR" property="originationCode" />
    <result column="assessmentprogramgradesid" jdbcType="BIGINT" property="assessmentProgramGradesId" />
    <result column="contentareaid" jdbcType="BIGINT" property="contentAreaId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    gc.id, gc.externalid, gc.name, gc.abbreviatedname, gc.ordinality, gc.gradelevel, gc.shortdescription, 
    gc.longdescription, gc.createdate, gc.modifieddate, gc.originationcode,gc.assessmentprogramgradesid, gc.contentareaid
  </sql>
  <select id="selectByExample" parameterType="edu.ku.cete.domain.content.GradeCourseExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.gradecourse gc
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    select 
    <include refid="Base_Column_List" />
    from public.gradecourse gc
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    delete from public.gradecourse
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="edu.ku.cete.domain.content.GradeCourseExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    delete from public.gradecourse
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
    <!-- 
  	NO INSERTS SHOULD OCCUR IN EP - GRADE COURSES COME FROM CONTENT BUILDER
  -->

  <select id="countByExample" parameterType="edu.ku.cete.domain.content.GradeCourseExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    select count(*) from public.gradecourse
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    update public.gradecourse
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.externalId != null">
        externalid = #{record.externalId,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.abbreviatedName != null">
        abbreviatedname = #{record.abbreviatedName,jdbcType=VARCHAR},
      </if>
      <if test="record.ordinality != null">
        ordinality = #{record.ordinality,jdbcType=BIGINT},
      </if>
      <if test="record.gradeLevel != null">
        gradelevel = #{record.gradeLevel,jdbcType=INTEGER},
      </if>
      <if test="record.shortDescription != null">
        shortdescription = #{record.shortDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.longDescription != null">
        longdescription = #{record.longDescription,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        createdate = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifiedDate != null">
        modifieddate = #{record.modifiedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.originationCode != null">
        originationcode = #{record.originationCode,jdbcType=VARCHAR},
      </if> 
      <if test="record.assessmentProgramGradesId != null">
        originationcode = #{record.assessmentprogramgradesid,jdbcType=BIGINT},
      </if> 
	   modifieduser = #{record.modifiedUser},
	   activeflag = #{record.activeFlag}, 
	   </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    update public.gradecourse
    set id = #{record.id,jdbcType=BIGINT},
      externalid = #{record.externalId,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      abbreviatedname = #{record.abbreviatedName,jdbcType=VARCHAR},
      ordinality = #{record.ordinality,jdbcType=BIGINT},
      gradelevel = #{record.gradeLevel,jdbcType=INTEGER},
      shortdescription = #{record.shortDescription,jdbcType=VARCHAR},
      longdescription = #{record.longDescription,jdbcType=VARCHAR},
      createdate = #{record.createDate,jdbcType=TIMESTAMP},
      modifieddate = #{record.modifiedDate,jdbcType=TIMESTAMP},
      originationcode = #{record.originationCode,jdbcType=VARCHAR},
       modifieduser = #{record.modifiedUser},
	   activeflag = #{record.activeFlag}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.content.GradeCourse">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    update public.gradecourse
    <set>
      <if test="externalId != null">
        externalid = #{externalId,jdbcType=BIGINT},
      </if>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="abbreviatedName != null">
        abbreviatedname = #{abbreviatedName,jdbcType=VARCHAR},
      </if>
      <if test="ordinality != null">
        ordinality = #{ordinality,jdbcType=BIGINT},
      </if>
      <if test="gradeLevel != null">
        gradelevel = #{gradeLevel,jdbcType=INTEGER},
      </if>
      <if test="shortDescription != null">
        shortdescription = #{shortDescription,jdbcType=VARCHAR},
      </if>
      <if test="longDescription != null">
        longdescription = #{longDescription,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        createdate = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedDate != null">
        modifieddate = #{modifiedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="originationCode != null">
        originationcode = #{originationCode,jdbcType=VARCHAR},
      </if>
        modifieduser = #{modifiedUser},
	   activeflag = #{activeFlag}, 
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.content.GradeCourse">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 13:56:00 CDT 2012.
    -->
    update public.gradecourse
    set externalid = #{externalId,jdbcType=BIGINT},
      name = #{name,jdbcType=VARCHAR},
      abbreviatedname = #{abbreviatedName,jdbcType=VARCHAR},
      ordinality = #{ordinality,jdbcType=BIGINT},
      gradelevel = #{gradeLevel,jdbcType=INTEGER},
      shortdescription = #{shortDescription,jdbcType=VARCHAR},
      longdescription = #{longDescription,jdbcType=VARCHAR},
      createdate = #{createDate,jdbcType=TIMESTAMP},
      modifieddate = #{modifiedDate,jdbcType=TIMESTAMP},
      originationcode = #{originationCode,jdbcType=VARCHAR},
        modifieduser = #{record.modifiedUser},
	   activeflag = #{record.activeFlag} 
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <select id="lastid" resultType="java.lang.Long">
      SELECT lastval() AS id
  </select>
  
  <!-- TODO fix it -->
  <select id="findByName" resultMap="BaseResultMap" parameterType="map">
    SELECT <include refid="Base_Column_List"/>
    from gradecourse gc
    where name = #{name}
    limit 1
  </select>
  
  <!-- TODO fix it and remove the duplicates in the database -->
  <select id="findByGradeCode" resultMap="BaseResultMap" parameterType="map">
    SELECT <include refid="Base_Column_List"/>
    from gradecourse gc
    JOIN assessmentprogramgrades apg
    ON gc.assessmentprogramgradesid = apg.id 
    where apg.gradecode = #{code}
  </select>
 
  <select id="findAssessmentProgramGradesIDByCode" resultType="Long" parameterType="map">
    SELECT id
    from assessmentprogramgrades apg
    where apg.gradecode = #{code}
  </select> 
 
  <sql id="Extended_Column_List">
    gc.id, gc.externalid, gc.name, gc.abbreviatedname, gc.ordinality, gc.gradelevel, gc.shortdescription, 
    gc.longdescription, gc.createdate, gc.modifieddate, gc.originationcode
  </sql>
  <select id="findByAssessmentProgram" resultMap="BaseResultMap" parameterType="long">
    SELECT distinct <include refid="Extended_Column_List"/>
    from assessmentprogram ap join testingprogram tp on ap.id = tp.assessmentprogramid join assessment asm on tp.id = asm.testingprogramid
         join assessmentstestcollections atc on asm.id = atc.assessmentid join testcollection tc on atc.testcollectionid = tc.id join gradecourse gc on tc.gradecourseid = gc.id
    where ap.id = #{assessmentProgramId}
  </select>
  
  <select id="getGradesForBundledReporting" resultMap="BaseResultMap">
  
  		SELECT DISTINCT ON (gc.abbreviatedname) gc.* FROM gradecourse gc
  		<if test = "assessmentProgCode == 'CPASS' or assessmentProgCode == 'DLM' ">
			INNER JOIN externalstudentreports esr ON esr.gradeid = gc.id and esr.assessmentprogramid= #{assessmentProgId} 
			AND esr.schoolid in 
			<foreach close=")" collection="schoolIds" item="schoolId" open="(" separator=",">
				#{schoolId}
			</foreach>
			<if test="subjectIds != null">
			and esr.subjectid in 
			<foreach close=")" collection="subjectIds" item="subjectId" open="(" separator=",">
				#{subjectId} 
			</foreach>	
			</if>
			<if test="subjectIds == null">
			and esr.subjectid is null
			</if>
			and esr.districtid = #{districtId} AND esr.schoolyear = #{schoolYear} AND esr.activeflag is true 
			 <if test="reportTypeCode != null">
     			 AND esr.reporttype = #{reportTypeCode,jdbcType=VARCHAR}
     		</if>
		</if>
		<if test = "assessmentProgCode == 'KAP' or assessmentProgCode == 'KELPA2'">
			inner join studentreport sr on sr.gradeid = gc.id and  sr.contentareaid in 
			<foreach close=")" collection="subjectIds" item="subjectId" open="(" separator=",">
				#{subjectId}
			</foreach>	
			and sr.districtid = #{districtId}		
			and attendanceschoolid in 
			<foreach close=")" collection="schoolIds" item="schoolId" open="(" separator=",">
			#{schoolId}
			</foreach> 
			and sr.assessmentprogramid = #{assessmentProgId}
			and sr.schoolyear = #{schoolYear}
			<!-- and sr.status is true -->
		</if>
		ORDER BY gc.abbreviatedname
		  
  </select>
  
  
   <select id="findByAssessmentId" resultMap="BaseResultMap" parameterType="Long">
   	SELECT DISTINCT <include refid="Extended_Column_List"/>
	 FROM            assessmentprogram ap
	                 JOIN testingprogram tp
	                 ON              ap.id = tp.assessmentprogramid
	                 JOIN assessment asm
	                 ON              tp.id = asm.testingprogramid
	                 JOIN assessmentstestcollections atc
	                 ON              asm.id = atc.assessmentid
	                 JOIN testcollection tc
	                 ON              atc.testcollectionid = tc.id
	                 JOIN gradecourse gc
	                 ON              tc.gradecourseid = gc.id
	 WHERE           asm.id                           = #{assessmentId}
  </select>
  
  <select id="selectAllGradeCourses" resultMap="BaseResultMap" >
   	SELECT DISTINCT gc.name
	FROM  gradecourse gc
	WHERE gc.name IS NOT NULL
	ORDER BY gc.name
  </select>  
  
   <select id="selectGradeCourseByContentAreaId" resultMap="BaseResultMap" parameterType="Long">
		SELECT DISTINCT gc.* 
		FROM gradecourse gc 
			JOIN (SELECT id, name, gradecourseid, contentareaid FROM testcollection 
				  UNION SELECT id, name, gbgc.gradecourseid, contentareaid
				   FROM testcollection tci INNER JOIN gradebandgradecourse gbgc ON tci.gradebandid = gbgc.gradebandid ) AS tc
				   on gc.id=tc.gradecourseid
			JOIN contentarea ca ON tc.contentareaid = ca.id and gc.contentareaid=ca.id
		WHERE ca.id = #{contentAreaId}
		ORDER BY gc.name
  </select> 
  
  <select id="selectGradeCourseByTestTypeIdSubjectAreaId" resultMap="BaseResultMap">  
  	select distinct 
    <include refid="Base_Column_List" />
	from gradecourse gc
		join contentarea ca on gc.contentareaid = ca.id
		join contentareatesttypesubjectarea cattsa on cattsa.contentareaid = ca.id
		join testtypesubjectarea ttsa on ttsa.id = cattsa.testtypesubjectareaid
	where ttsa.subjectareaid = #{subjectAreaId} and ttsa.testtypeid = #{testTypeId}
		--and gc.abbreviatedname in (select distinct abbreviatedname from gradecourse igc
		--	join assessmentprogramgrades apgc on igc.assessmentprogramgradesid = apgc.id)
	ORDER BY gc.name 
  </select>
  
  <select id="findByTestTypeAndContentArea" resultMap="BaseResultMap">	
	select distinct <include refid="Base_Column_List" />,(substring(gc.name, '[0-9]+'))::int, substring(gc.name, '[^0-9]+')
	from contentareatesttypesubjectarea cttsa
	   inner join testtypesubjectarea ttsa on cttsa.testtypesubjectareaid=ttsa.id
	   inner join gradecontentareatesttypesubjectarea gcttsa on gcttsa.contentareatesttypesubjectareaid=cttsa.id
	   inner join gradecourse gc on gcttsa.gradecourseid=gc.id
	where ttsa.testtypeid=#{testTypeId} and cttsa.contentareaid=#{contentAreaId} and ttsa.assessmentid = #{assessmentId}
	and gc.activeflag is true and gcttsa.activeflag is true and ttsa.activeflag is true and cttsa.activeflag is true
	order by (substring(gc.name, '[0-9]+'))::int ,substring(gc.name, '[^0-9]+')
  </select>
  
  <select id="selectGradeCourseOfKansasBreakDay" resultMap="BaseResultMap">
	  select distinct 
	    <include refid="Base_Column_List" /> 
	    from gradecourse gc where contentareaid is null and abbreviatedname in ('3','4','5','6','7', '8','9','10','11','12')
  </select>
    
  <select id="findGradeCodeByGradeCourseId" resultType="java.lang.String">
    SELECT apg.gradecode
    from gradecourse gc
    JOIN assessmentprogramgrades apg
    ON gc.assessmentprogramgradesid = apg.id 
    where gc.contentareaid is null and gc.abbreviatedname = (select abbreviatedname from gradecourse where id = #{gradeCourseId})
  </select>
  
  <select id="findAllIndependentGrades" resultMap="BaseResultMap">
    select  
    <include refid="Base_Column_List" />
    from gradecourse gc
    where contentareaid is null 
    	and assessmentprogramgradesid is not null
    order by (substring(abbreviatedname, '^[0-9]+'))::int
          ,substring(abbreviatedname, '[^0-9_].*$');
  </select>
  <select id="findIndependentGradeByAbbreviatedName" resultMap="BaseResultMap" parameterType="String">
    select  
    <include refid="Base_Column_List" />
    from gradecourse gc
    where contentareaid is null 
    and assessmentprogramgradesid is not null
    and abbreviatedname = #{abbreviatedName}
  </select>
  <select id="basicFindIndependentGradeByAbbreviatedName" resultMap="BaseResultMap" parameterType="String">
    <!-- this does not include the check for assessmentprogramgradesid...no idea what that's even for. -->
    select  
    <include refid="Base_Column_List" />
    from gradecourse gc
    where contentareaid is null 
    and abbreviatedname = #{abbreviatedName}
  </select>
  
  <select id="findByContentAreaAndAbbreviatedName" resultMap="BaseResultMap" parameterType="map">
    select  
    <include refid="Base_Column_List" />
    from gradecourse gc
    where contentareaid = #{contentAreaId}
    and abbreviatedname = #{abbreviatedName}
  </select>
  
  <select id="findGradesByContentAreaAndAssessmentProgram" resultMap="BaseResultMap" parameterType="map">
	select distinct gc.id, gc.name, gc.abbreviatedname, (substring(gc.name, '[0-9]+'))::int 
    from contentareatesttypesubjectarea cttsa
		inner join testtypesubjectarea ttsa on ttsa.id = cttsa.testtypesubjectareaid
		inner join gradecontentareatesttypesubjectarea gcttsa on gcttsa.contentareatesttypesubjectareaid=cttsa.id
		inner join gradecourse gc on gcttsa.gradecourseid=gc.id
		inner join assessment a on a.id = ttsa.assessmentid
		inner join testingprogram tp on tp.id = a.testingprogramid 
		where tp.assessmentprogramid = #{assessmentProgramId}
		<if test="contentAreaId > 0" >
			and cttsa.contentareaid=#{contentAreaId}
		</if>
		and gc.activeflag is true and gcttsa.activeflag is true and ttsa.activeflag is true and cttsa.activeflag is true and a.activeflag is true 
		and (substring(gc.name, '[0-9]+')) !=''
		order by (substring(gc.name, '[0-9]+'))::int 
 
  </select>
  
  <select id="getGradesUsingAssessmentProgramAndCourseForExternalReport" resultMap="BaseResultMap" parameterType="map">
	select distinct gc.id, gc.name, gc.abbreviatedname, (substring(gc.name, '[0-9]+'))::int 
     from gradecourse gc
     inner join externalstudentreports esr on esr.gradeid = gc.id
     where esr.assessmentprogramid = #{assessmentProgramId}
     <if test="contentAreaId > 0" >
       and esr.subjectid = #{contentAreaId}
     </if>
     and gc.activeflag = true
     and esr.activeflag = true
     and esr.schoolyear = #{reportYear}
     <if test="assessmentCode != 'CPASS'" >
	  and (substring(gc.name, '[0-9]+')) !=''
	 </if>
	 order by (substring(gc.name, '[0-9]+'))::int	 
  </select>
  
  <!--
	  Biyatpragyan Mohanty : bmohanty_sta@ku.edu : US15421 : Roster - refactor Add Roster manually page
	  Get all courses that are related a content area, This is achieved by getting the gradecourse data
	  that has course column as true i.e. they are only courses. 
   -->
  <select id="findCoursesByContentArea" resultMap="BaseResultMap" parameterType="map">
    select  
    <include refid="Base_Column_List" /> 
    from gradecourse gc 
    where course is true and contentareaid = #{contentAreaId} 
  </select>
  
  <select id="selectGradeCourseByContentAreaIdForTestCoordination" resultMap="BaseResultMap" parameterType="Long">
		select distinct ts.name, max(ts.id) as id from (select  distinct gc.name,max(gc.id) as id
		from test t
		join category ct on t.status=ct.id and ct.activeflag is true and
		ct.categorycode ='DEPLOYED'
		join categorytype ctype on ct.categorytypeid=ctype.id and
		ctype.typecode='TESTSTATUS' and ctype.activeflag is true
		join testcollectionstests tct on tct.testid=t.id
		join testcollection tc on tc.id=tct.testcollectionid
		join assessmentstestcollections atc on
		atc.testcollectionid=tct.testcollectionid
		join assessment a on a.id=atc.assessmentid
		join testingprogram tp on tp.id=a.testingprogramid   and
		tp.id=#{testingProgramId}
		join assessmentprogram ap on tp.assessmentprogramid=ap.id and
		ap.id=#{assessmentProgramId}
		join contentarea ca on t.contentareaid = ca.id and ca.activeflag is true
		  and ca.id=#{contentAreaId}
		inner join gradecourse gc on gc.id = t.gradecourseid
		and gc.activeflag is true
		where t.qccomplete is true
		group by gc.name
		
		union
		select  distinct gc.name, max (gc.id) as id
		from test t		
		join category ct on t.status=ct.id and ct.activeflag is true and
		ct.categorycode ='DEPLOYED'
		join categorytype ctype on ct.categorytypeid=ctype.id and
		ctype.typecode='TESTSTATUS' and ctype.activeflag is true
		join testcollectionstests tct on tct.testid=t.id
		join testcollection tc on tc.id=tct.testcollectionid
		join assessmentstestcollections atc on
		atc.testcollectionid=tct.testcollectionid
		join assessment a on a.id=atc.assessmentid
		join testingprogram tp on tp.id=a.testingprogramid   and
		tp.id=#{testingProgramId}
		join assessmentprogram ap on tp.assessmentprogramid=ap.id and
		ap.id=#{assessmentProgramId}
		join contentarea ca on t.contentareaid = ca.id and ca.activeflag is true
		  and ca.id=#{contentAreaId}
		join gradeband gb on
		tc.gradebandid=gb.id and gb.activeflag is true
		join gradebandgradecourse gbgc on gb.id=gbgc.gradebandid
		join gradecourse gc on gc.id=gbgc.gradecourseid and
		gc.activeflag is true
		and gc.activeflag is true
		where t.qccomplete is true
		group by gc.name
		Order by name) ts group by ts.name

  </select> 
  
  <select id="selectAllGradeCoursesDropdown" resultMap="BaseResultMap" parameterType="Long">
  select  distinct gc.name,max(gc.id) as id
		from test t
		join category ct on t.status=ct.id and ct.activeflag is true and
		ct.categorycode ='DEPLOYED'
		join categorytype ctype on ct.categorytypeid=ctype.id and
		ctype.typecode='TESTSTATUS' and ctype.activeflag is true
		join testcollectionstests tct on tct.testid=t.id
		join testcollection tc on tc.id=tct.testcollectionid
		join assessmentstestcollections atc on
		atc.testcollectionid=tct.testcollectionid
		join assessment a on a.id=atc.assessmentid
		join testingprogram tp on tp.id=a.testingprogramid
		join assessmentprogram ap on tp.assessmentprogramid=ap.id and
		ap.id=#{assessmentProgramId}
		join contentarea ca on t.contentareaid = ca.id and ca.activeflag is true
		inner join gradecourse gc on gc.id = t.gradecourseid
		and gc.activeflag is true
		group by gc.name
		Order by name
  </select>
  
  <select id="selectGradeCourseByContentAreaIdForTestManagement" resultMap="BaseResultMap" parameterType="Long">
	select distinct ts.name, max(ts.id) as id from (select  distinct gc.name,max(gc.id) as id
		from test t
		join category ct on t.status=ct.id and ct.activeflag is true and
		ct.categorycode ='DEPLOYED'
		join categorytype ctype on ct.categorytypeid=ctype.id and
		ctype.typecode='TESTSTATUS' and ctype.activeflag is true
		join testcollectionstests tct on tct.testid=t.id
		join testcollection tc on tc.id=tct.testcollectionid
		join assessmentstestcollections atc on
		atc.testcollectionid=tct.testcollectionid
		join assessment a on a.id=atc.assessmentid
		join testingprogram tp on tp.id=a.testingprogramid   and
		tp.id=#{testingProgramId}
		join assessmentprogram ap on tp.assessmentprogramid=ap.id and
		ap.id=#{assessmentProgramId}
		join contentarea ca on t.contentareaid = ca.id and ca.activeflag is true
		  and ca.id=#{contentAreaId}
		inner join gradecourse gc on gc.id = t.gradecourseid
		and gc.activeflag is true
		where t.qccomplete is true
		group by gc.name
		
		union
		select  distinct gc.name, max (gc.id) as id
		from test t		
		join category ct on t.status=ct.id and ct.activeflag is true and
		ct.categorycode ='DEPLOYED'
		join categorytype ctype on ct.categorytypeid=ctype.id and
		ctype.typecode='TESTSTATUS' and ctype.activeflag is true
		join testcollectionstests tct on tct.testid=t.id
		join testcollection tc on tc.id=tct.testcollectionid
		join assessmentstestcollections atc on
		atc.testcollectionid=tct.testcollectionid
		join assessment a on a.id=atc.assessmentid
		join testingprogram tp on tp.id=a.testingprogramid   and
		tp.id=#{testingProgramId}
		join assessmentprogram ap on tp.assessmentprogramid=ap.id and
		ap.id=#{assessmentProgramId}
		join contentarea ca on t.contentareaid = ca.id and ca.activeflag is true
		  and ca.id=#{contentAreaId}
		join gradeband gb on
		tc.gradebandid=gb.id and gb.activeflag is true
		join gradebandgradecourse gbgc on gb.id=gbgc.gradebandid
		join gradecourse gc on gc.id=gbgc.gradecourseid and
		gc.activeflag is true
		and gc.activeflag is true
		where t.qccomplete is true
		group by gc.name
		Order by name) ts group by ts.name 
  </select> 
   
  <select id="getGradesWhereReportsHaveProcessed" parameterType="map" resultMap="BaseResultMap">
    SELECT DISTINCT ON (gc.abbreviatedname) gc.*
    FROM assessmentprogram ap
    <if test="reportType == 'general_student' || reportType == 'kelpa_student_individual'">
      INNER JOIN reportprocess rp ON ap.id = rp.assessmentprogramid
      INNER JOIN studentreport dynamic ON rp.id = dynamic.batchreportprocessid
        AND dynamic.attendanceschoolid = #{schoolId,jdbcType=BIGINT}
        AND dynamic.districtid = #{districtId,jdbcType=BIGINT}
        <if test="contentAreaIds!=null">
        AND dynamic.contentareaid = ANY(ARRAY
        <foreach collection="contentAreaIds" item="caId" open="[" separator="," close="]">
          #{caId,jdbcType=BIGINT}
        </foreach>)
        </if>       
        AND dynamic.schoolyear = #{schoolYear,jdbcType=INTEGER}
         <if test="assessmentProgramIds!=null">
       	 AND dynamic.assessmentprogramid IN
		    <foreach collection="assessmentProgramIds" item="apId" open="(" separator="," close=")">
		      #{apId,jdbcType=BIGINT}
		    </foreach>
    	</if>
    </if>
    <if test="reportType == 'general_student_writing'">
      INNER JOIN studentassessmentprogram sap ON ap.id = sap.assessmentprogramid AND sap.activeflag IS TRUE
      INNER JOIN enrollment dynamic
        ON sap.studentid = dynamic.studentid
        AND dynamic.currentschoolyear = #{schoolYear,jdbcType=INTEGER}
        AND dynamic.activeflag IS TRUE
      INNER JOIN organizationtreedetail otd
        ON dynamic.attendanceschoolid = otd.schoolid
        AND otd.districtid = #{districtId,jdbcType=BIGINT}
        AND otd.schoolid = #{schoolId,jdbcType=BIGINT}
    </if>
    <if test="reportType == 'alternate_student_individual'">
      INNER JOIN externalstudentreports dynamic ON ap.id = dynamic.assessmentprogramid
        AND dynamic.schoolid = #{schoolId,jdbcType=BIGINT}
        AND dynamic.districtid = #{districtId,jdbcType=BIGINT}
        <if test="contentAreaIds!=null">
        AND dynamic.subjectid = ANY(ARRAY
	        <foreach collection="contentAreaIds" item="caId" open="[" separator="," close="]">
	          #{caId,jdbcType=BIGINT}
	        </foreach>)
        </if>
        AND dynamic.schoolyear = #{schoolYear,jdbcType=INTEGER}
        AND dynamic.activeflag is true
        <if test="reportTypeCode != null">
     	 and dynamic.reporttype = #{reportTypeCode,jdbcType=VARCHAR}
     	</if> 
    </if>
    <if test="reportType == 'alternate_student_summary'">
      INNER JOIN externalstudentreports dynamic ON ap.id = dynamic.assessmentprogramid
        AND dynamic.schoolid = #{schoolId,jdbcType=BIGINT}
        AND dynamic.districtid = #{districtId,jdbcType=BIGINT}
        AND dynamic.subjectid is null
        AND dynamic.reporttype = 'StudentSummary'
        AND dynamic.schoolyear = #{schoolYear,jdbcType=INTEGER}
        AND dynamic.activeflag is true
    </if>
    <if test="reportType == 'alternate_student_dcps'">
      INNER JOIN externalstudentreports dynamic ON ap.id = dynamic.assessmentprogramid
        AND dynamic.schoolid = #{schoolId,jdbcType=BIGINT}
        AND dynamic.districtid = #{districtId,jdbcType=BIGINT}
        AND dynamic.subjectid is null
        AND dynamic.reporttype = #{reportTypeCode}
        AND dynamic.schoolyear = #{schoolYear,jdbcType=INTEGER}
        AND dynamic.activeflag is true
    </if>
    
    
    <!-- student bundled report by prem -->    
    <if test="reportType == 'alternate_student_all'">
      INNER JOIN externalstudentreports dynamic ON ap.id = dynamic.assessmentprogramid
       <!--  AND dynamic.schoolid = #{schoolId,jdbcType=BIGINT} -->
       <!--  AND dynamic.districtid = #{districtId,jdbcType=BIGINT} -->
       <!--  AND dynamic.subjectid = ANY(ARRAY
        <foreach collection="contentAreaIds" item="caId" open="[" separator="," close="]">
          #{caId,jdbcType=BIGINT}
        </foreach>) -->
        AND dynamic.schoolyear = #{schoolYear,jdbcType=INTEGER}
        AND dynamic.activeflag is true
        <if test="reportTypeCode != null">
     	 and dynamic.reporttype = 'ALT_ST_IND'
     	</if>
    </if>
    <if test="reportType == 'alternate_blueprint_coverage'">
      INNER JOIN studentassessmentprogram sap ON ap.id = sap.assessmentprogramid
      INNER JOIN enrollment dynamic ON dynamic.studentid = sap.studentid
        AND dynamic.attendanceschoolid = #{schoolId,jdbcType=BIGINT}
        AND dynamic.currentschoolyear = #{schoolYear,jdbcType=INTEGER}
        AND dynamic.activeflag = TRUE
      INNER JOIN enrollmentsrosters er ON dynamic.id = er.enrollmentid
        AND er.activeflag = TRUE
      INNER JOIN roster r ON er.rosterid = r.id
        AND r.activeflag = TRUE
        AND r.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
        AND r.attendanceschoolid = dynamic.attendanceschoolid
         <if test="contentAreaIds!=null">
	        AND r.statesubjectareaid = ANY(ARRAY
	        <foreach collection="contentAreaIds" item="caId" open="[" separator="," close="]">
	          #{caId,jdbcType=BIGINT}
	        </foreach>)
        </if>
        <if test="shouldOnlySeeRostered">
          AND r.teacherid = #{educatorId,jdbcType=BIGINT}
        </if>
    </if>
    <choose>
      <when test="reportType == 'alternate_blueprint_coverage' or reportType == 'general_student_writing'">
        INNER JOIN gradecourse gc ON dynamic.currentgradelevel = gc.id
      </when>
      <otherwise>
        INNER JOIN gradecourse gc ON dynamic.gradeid = gc.id
      </otherwise>
    </choose>
    <if test="assessmentProgramIds!=null">
    WHERE ap.id IN
	    <foreach collection="assessmentProgramIds" item="apId" open="(" separator="," close=")">
	      #{apId,jdbcType=BIGINT}
	    </foreach>
    </if>
    ORDER BY gc.abbreviatedname
  </select>
  <select id="selectOrgGradeCourses" resultMap="BaseResultMap">
  	select  distinct
    <include refid="Base_Column_List" /> 
    from gradecourse gc join enrollment enrl 
    on gc.id = enrl.currentgradelevel
    and enrl.attendanceschoolid = #{schoolId,jdbcType=BIGINT}
    order by gc.name
  </select>
  
  <select id ="getCoursesListByOtwId" resultMap="BaseResultMap">
  	select * from (
	  	select distinct <include refid="Base_Column_List" />
	  	from gradecourse gc
	  	join testcollection tc on tc.courseid = gc.id
	  	join operationaltestwindowstestcollections optwtc on optwtc.testcollectionid = tc.id
	    where optwtc.operationaltestwindowid = #{operationalTestWindowId,jdbcType=BIGINT}
	    UNION
	    select distinct <include refid="Base_Column_List" />
	    from testcollection tc
		join operationaltestwindowstestcollections optwtc on optwtc.testcollectionid = tc.id
		join gradeband gb on tc.gradebandid=gb.id
		join gradebandgradecourse gbgc on gbgc.gradebandid=gb.id
		join gradecourse gc on gc.id=gbgc.gradecourseid
	    where optwtc.operationaltestwindowid = #{operationalTestWindowId,jdbcType=BIGINT}
	) gc
	order by gc.name
  </select>
  
  <select id="getDistinctGradesByAssessmentPrgmId" resultMap="BaseResultMap" parameterType="long">
    SELECT distinct gc.name, gc.abbreviatedname
    from assessmentprogram ap join testingprogram tp on ap.id = tp.assessmentprogramid join assessment asm on tp.id = asm.testingprogramid
         join assessmentstestcollections atc on asm.id = atc.assessmentid join testcollection tc on atc.testcollectionid = tc.id join gradecourse gc on tc.gradecourseid = gc.id
    where ap.id = #{assessmentProgramId}    
  </select>
  <select id="getDistinctGradesByAssessmentPrgmIdBanded" resultMap="BaseResultMap" parameterType="long">
    SELECT distinct gc.name, gc.abbreviatedname
    from assessmentprogram ap join testingprogram tp on ap.id = tp.assessmentprogramid join assessment asm on tp.id = asm.testingprogramid
         join assessmentstestcollections atc on asm.id = atc.assessmentid join testcollection tc on atc.testcollectionid = tc.id 
         JOIN gradeband gb ON tc.gradebandid = gb.id
         JOIN gradebandgradecourse gbgc ON gb.id = gbgc.gradebandid
         join gradecourse gc on gbgc.gradecourseid = gc.id
    where ap.id = #{assessmentProgramId}    
  </select>
   <select id="getGradeCourse" resultMap="BaseResultMap">
    select distinct gc.id, gc.name from gradecourse gc 
  </select>
  
   <select id="getGradeCourseInterim" resultMap="BaseResultMap">
	select distinct gc.name,gc.id from gradecourse gc
	join test t on gc.id=t.gradecourseid
	<if test="isInterim==true">
	JOIN interimtest it on it.testtestid=t.id
	</if>
	INNER JOIN testcollectionstests tct on t.id = tct.testid
	INNER JOIN testspecstatementofpurpose tstop on t.testspecificationid=tstop.testspecificationid
	INNER JOIN category ct on ct.id=tstop.statementofpurposeid
	INNER JOIN assessmentstestcollections atc on atc.testcollectionid=tct.testcollectionid
	INNER JOIN assessment a on a.id=atc.assessmentid
	INNER JOIN testingprogram tp on tp.id=a.testingprogramid
	INNER JOIN assessmentprogram ap on tp.assessmentprogramid=ap.id
	INNER JOIN category c on c.id=t.status
	INNER JOIN categorytype cct on c.categorytypeid = cct.id and
	c.categorycode='DEPLOYED' and cct.typecode='TESTSTATUS'
	INNER JOIN testcollection tc on tct.testcollectionid=tc.id and tc.activeflag is true
	INNER JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid=tct.testcollectionid
    INNER JOIN operationaltestwindow otw on otw.id=otwtc.operationaltestwindowid and otw.activeflag is true 
    <!-- and otw.suspendwindow is false -->
	where tstop.activeflag is true and t.qccomplete is true and c.activeflag is
	true and ct.activeflag is true
	and tp.programname ilike 'interim' and ap.id = #{assessmentProgramId} and
	t.activeflag is true and 
	t.is_interim_test=#{isInterim} and 
	ct.id=#{purpose,jdbcType=BIGINT} 
	and otw.expirydate &gt; now() and otw.effectivedate &lt; now()
	<if test="contentAreaId!=null">
		and t.contentareaid=#{contentAreaId,jdbcType=BIGINT}
		and gc.contentareaid=#{contentAreaId,jdbcType=BIGINT}
	</if>
	<if test="isInterim==true">
		<if test="organizationId != null">
			and it.organizationid = ANY(ARRAY(
				select id from organization_children((SELECT op.id
				from organization_parent(#{organizationId}) op
				inner join organizationtype ot ON op.organizationtypeid=ot.id
				where ot.typecode='DT'
				union
				select o.id from organization o
				inner join organizationtype ot ON o.organizationtypeid=ot.id
				where ot.typecode='DT' and o.id=#{organizationId})) oc
				union select distinct districtid from organizationtreedetail where schoolid=#{organizationId}
		        union select o.id from organization o
				inner join organizationtype ot ON o.organizationtypeid=ot.id
				where ot.typecode='DT' and o.id=#{organizationId}
			))
		</if>
	</if>
	order by gc.name asc
    
  </select>
  
  <select id="findGradesForStudentScoreExtract" resultMap="BaseResultMap">
	SELECT distinct gc.name, gc.abbreviatedname, (substring(gc.name, '[0-9]+'))::int 
    from contentareatesttypesubjectarea cttsa
		JOIN testtypesubjectarea ttsa ON ttsa.id = cttsa.testtypesubjectareaid
		JOIN gradecontentareatesttypesubjectarea gcttsa ON gcttsa.contentareatesttypesubjectareaid=cttsa.id
		JOIN gradecourse gc ON gcttsa.gradecourseid=gc.id
		JOIN assessment a ON a.id = ttsa.assessmentid
		JOIN testingprogram tp ON tp.id = a.testingprogramid
		JOIN assessmentprogram ap ON ap.id = tp.assessmentprogramid AND ap.abbreviatedname='KAP' 
		WHERE cttsa.contentareaid= ANY(ARRAY
	      <foreach collection="contentAreaId" item="id" open="[" close="]" separator=",">
	        #{id,jdbcType=BIGINT}
	      </foreach>
    	) 
		AND ap.activeflag is true 
		AND gc.activeflag is true AND gcttsa.activeflag is true AND ttsa.activeflag is true AND cttsa.activeflag is true AND a.activeflag is true 
		AND (substring(gc.name, '[0-9]+')) !=''
		ORDER BY (substring(gc.name, '[0-9]+'))::int 
 
  </select>
  
  
  
  
  <select id ="getGradesForItiBPCoverageExtract" resultMap="BaseResultMap">
  	select distinct <include refid="Base_Column_List" />, (substring(gc.name, '[0-9]+'))::int 	
    from studentassessmentprogram sap
    join enrollment en on en.studentid = sap.studentid 
    join enrollmentsrosters enr on enr.enrollmentid = en.id
    join roster r on r.id = enr.rosterid       
    join gradecourse gc on gc.id = en.currentgradelevel
    where r.attendanceschoolid in (select schoolid from organizationtreedetail where schoolid = #{narrowOrgId} or districtid = #{narrowOrgId} or stateid = #{narrowOrgId})
    	and r.currentschoolyear = #{schoolYear} and r.statesubjectareaid = #{contentAreaId} and r.activeflag is true and en.activeflag is true and enr.activeflag is true    
    	and sap.assessmentprogramid = (select id from assessmentprogram where abbreviatedname =  'DLM')
    	and sap.activeflag is true and (substring(gc.name, '[0-9]+')) !=''
    	<if test="isTeacher">
			and r.teacherid = #{educatorId}
		</if>
	order by (substring(gc.name, '[0-9]+'))::int
  </select>
  <select id="selectGradeByAbbreviatedNameAndContentAreaId" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" />
  	from gradecourse gc
  	where 
  	<if test='contentAreaId != null'>
  		gc.assessmentprogramgradesid is null 
  		and gc.contentareaid = #{contentAreaId}
  	</if>
  	<if test='contentAreaId == null'>
  	  	gc.assessmentprogramgradesid is not null 
  		and gc.contentareaid is null
  	</if>
  	and lower(gc.abbreviatedname) = lower(#{abbreviatedName})
  	LIMIT 1
  </select>
  <select id ="findByContentAreaAbbreviatedNameAndGradeCourseAbbreviatedName" resultMap="BaseResultMap">
  select distinct <include refid="Base_Column_List" /> from gradecourse gc
		join contentarea ca on gc.contentareaid=ca.id
		where  lower (gc.abbreviatedname)=lower(#{gradeCourseAbbreviatedName,jdbcType=VARCHAR})
		and lower(ca.abbreviatedname)=lower(#{contentAreaAbbreviatedName,jdbcType=VARCHAR})
  </select>
  
  <select id="getGradesForDynamicStudentSummaryBundledReport" resultMap="BaseResultMap">
  
  		SELECT DISTINCT ON (gc.abbreviatedname) gc.* FROM gradecourse gc
			INNER JOIN externalstudentreports esr ON esr.gradeid = gc.id and esr.assessmentprogramid= #{assessmentProgId} 
			AND esr.schoolid in 
			<foreach close=")" collection="schoolIds" item="schoolId" open="(" separator=",">
				#{schoolId}
			</foreach>
			<if test="reportType != null">
				AND esr.reporttype = #{reportType,jdbcType=VARCHAR}
			</if>
			and esr.districtid = #{districtId} AND esr.schoolyear = #{schoolYear} AND esr.activeflag is true
		
		ORDER BY gc.abbreviatedname
		  
  </select>
  <select id="findGradeByAbbreviatedName" resultMap="BaseResultMap">
  	SELECT <include refid="Base_Column_List" />
    	from gradecourse gc
    	where LOWER(gc.abbreviatedName) = LOWER(#{abbreviatedName})
  </select>
  
  <select id="getGradesForScoring" resultMap="BaseResultMap" parameterType="String">
    select  
    <include refid="Base_Column_List" />
    from gradecourse gc
    where contentareaid is null 
    and assessmentprogramgradesid is not null
    and abbreviatedname ilike #{abbreviatedName}
  </select>
  
   <select id="getGradesForReportGeneration" resultMap="BaseResultMap">  
  		SELECT DISTINCT ON (gc.abbreviatedname) gc.* FROM gradecourse gc	
			inner join studentreport sr on sr.gradeid = gc.id 
			and  sr.contentareaid = #{contentAreaId}
			and sr.stateid = #{stateId}		
			and sr.assessmentprogramid = #{assessmentProgramId}
			and sr.schoolyear = #{schoolYear}
		ORDER BY gc.abbreviatedname		  
  </select>
  
    <select id="findByContentAreaId" resultMap="BaseResultMap" parameterType="map">
    select  
    <include refid="Base_Column_List" />
    from gradecourse gc
    where contentareaid = #{contentAreaId} and gc.activeflag is true    
  </select>
  
  <resultMap id="gradeBandMap" type="edu.ku.cete.domain.content.GradeCourse">
  	<id column="gradebandid" property="gradeBandId" jdbcType="BIGINT" />
	<result column="gradebandname" property="gradeBandName" jdbcType="VARCHAR" />
	<result column="gradebandabbrname" property="gradeBandAbbrName" jdbcType="VARCHAR" />
  </resultMap>
  
  <select id="getGradeBandsByContentAreaIdAndOTWId" resultMap="gradeBandMap">
  		SELECT DISTINCT gb.id AS gradebandid, gb.name AS gradebandname, gb.abbreviatedname AS gradebandabbrname
		FROM gradeband gb
		JOIN testcollection tc on tc.gradebandid = gb.id
		JOIN operationaltestwindowstestcollections optwtc ON optwtc.testcollectionid = tc.id
		WHERE tc.activeflag is true
			AND gb.activeflag is true
			AND tc.contentareaid = gb.contentareaid
			AND optwtc.operationaltestwindowid = #{operationalTestWindowId,jdbcType=BIGINT}
			AND tc.contentareaid = #{contentAreaId,jdbcType=BIGINT}
  </select>
  
  <select id="getGradeCourseToGradeBandMap" resultType="edu.ku.cete.domain.content.GradeCourse">
	select distinct enroll_gc.id, gc.id as gradeCourseId, gb.id as gradeBandId
	from testcollection tc
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id
	join gradeband gb on tc.gradebandid=gb.id
	join gradebandgradecourse gbgc on gbgc.gradebandid=gb.id
	join gradecourse gc on gc.id=gbgc.gradecourseid	and gc.contentareaid = #{contentAreaId,jdbcType=BIGINT} 
	join gradecourse enroll_gc on gc.abbreviatedname=enroll_gc.abbreviatedname and enroll_gc.contentareaid is null 
	where otwtc.operationaltestwindowid = #{operationalTestWindowId,jdbcType=BIGINT}

  </select>
  
  <select id="getByEnrollmentsRostersId" parameterType="map" resultType="edu.ku.cete.domain.content.GradeCourse">
    SELECT gc.id, gc.name, gc.abbreviatedname, gc.gradelevel, gc.activeflag
    FROM enrollmentsrosters er
    JOIN enrollment e ON er.enrollmentid = e.id AND e.activeflag IS TRUE
    JOIN gradecourse gc ON e.currentgradelevel = gc.id
    WHERE er.id = #{enrollmentsRostersId,jdbcType=BIGINT}
  </select>
  
  <select id="getGradeBandsBySchoolIDAndAssesmentProgrammIDAndYear" resultType="edu.ku.cete.domain.content.GradeCourse">
  <!--Grade for only ('M', 'ELA', 'Sci')
  The query is written for the grade drop down in the IAP home search.
  -->
  	select  DISTINCT gc.*
    from gradecourse gc 
    INNER JOIN enrollment enrl on gc.id = enrl.currentgradelevel AND enrl.attendanceschoolid = #{schoolID,jdbcType=BIGINT}
     and enrl.activeflag = true and enrl.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
    INNER JOIN enrollmentsrosters enros on enros.enrollmentid = enrl.id and enros.activeflag  = true
    INNER JOIN roster ros on ros.id= enros.rosterid and ros.activeflag = true AND ros.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
    <if test="teacherID != null">
    	AND ros.teacherid= #{teacherID,jdbcType=BIGINT}
    </if>
    INNER JOIN studentassessmentprogram stdap on stdap.studentid = enrl.studentid AND stdap.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
    INNER JOIN contentarea ca ON ros.statesubjectareaid = ca.id and ca.abbreviatedname IN ('M', 'ELA', 'Sci')
    order by gc.gradelevel
  </select>
  
</mapper>