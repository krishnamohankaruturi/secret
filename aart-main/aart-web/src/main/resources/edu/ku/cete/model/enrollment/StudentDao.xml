<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="edu.ku.cete.model.enrollment.StudentDao">

 <resultMap id="actScoringLevelMap" type="edu.ku.cete.domain.report.ActScoringLevel">    
        <id property="id" column="levelid" jdbcType="INTEGER" />
        <result property="levelId" column="levelid" jdbcType="INTEGER" />
	    <result property="actDescriptionId" column="actdescriptionid" jdbcType="INTEGER" />
        	<collection property="actScoringDescriptions" column="actdescriptionid" ofType="edu.ku.cete.domain.report.ActScoringDescription" javaType="ArrayList" >
	            <id property="actDescriptionId" column="actdescriptionid" />
	        	<result property="actDescriptionId" column="actdescriptionid" jdbcType="INTEGER" />
	            <result property="description" column="description" javaType="String" />
			    <result property="maxvalue" column="maxvalue" javaType="Integer" />
			    <result property="minvalue" column="minvalue" javaType="Integer" />
        	</collection>   
	</resultMap> 
	
	<resultMap id="actScoringDescriptionLevelMap" type="edu.ku.cete.domain.report.ActScoringDescription">
        <id property="id" column="id" jdbcType="BIGINT" />
    	<result property="levelId" column="maxvalue" jdbcType="INTEGER" />
    	<result property="actDescriptionId" column="actdescriptionid" jdbcType="INTEGER" />
        <result property="description" column="description" jdbcType="VARCHAR" />
    	<result property="maxvalue" column="maxvalue" jdbcType="INTEGER" />
    	<result property="minvalue" column="minvalue" jdbcType="INTEGER" />
     </resultMap>
	
  <resultMap id="studentTestSessionDtoMap" type="edu.ku.cete.domain.enrollment.StudentTestSessionDto">
	<id column="studentid" property="studentId" jdbcType="BIGINT" />
	<id column="studenttestid" property="studentTestId" jdbcType="BIGINT" />
	<association property="student" javaType="edu.ku.cete.domain.student.Student">
		<id property="id" column="studentid" jdbcType="BIGINT" />
		<result property="stateStudentIdentifier" column="statestudentidentifier" jdbcType="VARCHAR" />
		<result property="legalFirstName" column="legalfirstname" jdbcType="VARCHAR" />
		<result property="legalMiddleName" column="legalmiddlename" jdbcType="VARCHAR" />
		<result property="legalLastName" column="legallastname"
			jdbcType="VARCHAR" />
		<result property="createdDate" column="studentcreateddate" jdbcType="TIMESTAMP" />
		<result property="modifiedDate" column="studentmodifieddate" jdbcType="TIMESTAMP" />
		<result property="createdUser" column="studentcreateduser" jdbcType="BIGINT" />
		<result property="modifiedUser" column="studentmodifieduser" jdbcType="BIGINT" />
		<result property="assessmentProgramId" column="assessmentprogramid" jdbcType="BIGINT" />		
	</association>
	<association property="studentsTests" javaType="edu.ku.cete.domain.StudentsTests">
		<id property="id" column="studenttestid" jdbcType="BIGINT"/>
		<result property="testId" column="testid" jdbcType="BIGINT" />
		<result property="testCollectionId" column="testcollectionid" jdbcType="BIGINT"/>
		<result property="status" column="status" jdbcType="BIGINT"/>
		<result property="testSessionId" column="testsessionid" jdbcType="BIGINT"/>
		<result property="createdDate" column="studenttestcreateddate" jdbcType="TIMESTAMP" />
		<result property="modifiedDate" column="studentmodifieddate" jdbcType="TIMESTAMP" />
		<result property="createdUser" column="studenttestcreateduser" jdbcType="BIGINT" />
		<result property="modifiedUser" column="studenttestmodifieduser" jdbcType="BIGINT" />
	</association>
   </resultMap> 
  <resultMap id="studentJsonMap" type="edu.ku.cete.domain.student.StudentJson">	
		<id property="id" column="studentid" jdbcType="BIGINT" />
		<result property="stateStudentIdentifier" column="studentstateid" jdbcType="VARCHAR" />
		<result property="firstName" column="firstname" jdbcType="VARCHAR" />
		<result property="middleName" column="middlename" jdbcType="VARCHAR" />
		<result property="username" column="username" jdbcType="VARCHAR" />
		<result property="lastName" column="lastname"	jdbcType="VARCHAR" />
		<result property="generation" column="generation" jdbcType="VARCHAR" />
		<result property="dateOfBirth" column="dateofbirth" jdbcType="TIMESTAMP" />
		<result property="gender" column="gender" jdbcType="VARCHAR" />
		<result property="comprehensiveResponse" column="comprehensiverace" jdbcType="VARCHAR" />
		<result property="hispanicEthnicity" column="hispanicethnicity" jdbcType="VARCHAR" />
		<result property="firstLanguage" column="firstlanguage" jdbcType="VARCHAR" />
		<result property="primaryDisability" column="primarydisabilitycode" jdbcType="VARCHAR" />
		<result property="eSOLParticipation" column="eSOLParticipation" jdbcType="VARCHAR" />
		
		 <collection property="assessmentPrograms" ofType="java.lang.String" javaType="list">
           <result column="assessmentprogram" />
         </collection>
         <collection property="studentOrganization" column="so_id" ofType="edu.ku.cete.domain.student.StudentOrganization" javaType="list" >
            <id property="attendanceSchoolId" column="so_id" />
            <result property="attendanceSchoolName" column="schoolname" jdbcType="VARCHAR" />
		    <result property="districtName" column="district" jdbcType="VARCHAR" />
		    <result property="stateName" column="state" jdbcType="VARCHAR" />
		    <result property="localId" column="localId" jdbcType="VARCHAR" />
		    <result property="aypSchoolName" column="aypSchoolName" jdbcType="VARCHAR" />
         </collection>    
   </resultMap>
   
  <resultMap id="studentsTestSectionsDtoMap" type="edu.ku.cete.domain.StudentsTestSections">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="studentstestid" jdbcType="BIGINT" property="studentsTestId" />
    <result column="testsectionid" jdbcType="BIGINT" property="testSectionId" />
    <result column="ticketno" jdbcType="VARCHAR" property="ticketNo" />
    <result column="createddate" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="createduser" jdbcType="INTEGER" property="createdUser" />
    <result column="activeflag" jdbcType="BIT" property="activeFlag" />
    <result column="statusid" jdbcType="BIGINT" property="statusId" />
    <result column="modifieduser" jdbcType="INTEGER" property="modifiedUser" />
    <result column="modifieddate" jdbcType="TIMESTAMP" property="modifiedDate" />
	<association property="studentsTests" javaType="edu.ku.cete.domain.StudentsTests">
		<id property="id" column="studentstestid" jdbcType="BIGINT"/>
		<result property="testId" column="st_testid" jdbcType="BIGINT" />
		<result property="studentId" column="st_studentid" jdbcType="BIGINT" />
		<result property="testCollectionId" column="st_testcollectionid" jdbcType="BIGINT"/>
		<result property="status" column="st_status" jdbcType="BIGINT"/>
		<result property="testSessionId" column="st_testsessionid" jdbcType="BIGINT"/>
		<result property="createdDate" column="st_createddate" jdbcType="TIMESTAMP" />
		<result property="modifiedDate" column="st_modifieddate" jdbcType="TIMESTAMP" />
	    <result property="activeFlag" column="st_activeflag" jdbcType="BIT"  />
		<result property="createdUser" column="st_createduser" jdbcType="BIGINT" />
		<result property="modifiedUser" column="st_modifieduser" jdbcType="BIGINT" />
		<association property="student" javaType="edu.ku.cete.domain.student.Student">
			<id property="id" column="st_studentid" jdbcType="BIGINT" />
			<result property="stateStudentIdentifier" column="s_statestudentidentifier" jdbcType="VARCHAR" />
			<result property="legalFirstName" column="s_legalfirstname" jdbcType="VARCHAR" />
			<result property="legalMiddleName" column="s_legalmiddlename" jdbcType="VARCHAR" />
			<result property="legalLastName" column="s_legallastname"
				jdbcType="VARCHAR" />
		    <result property="synced" column="s_synced" jdbcType="BIT"  />
		    <result property="activeFlag" column="s_activeFlag" jdbcType="BIT"  />
			<result property="createdDate" column="s_createddate" jdbcType="TIMESTAMP" />
			<result property="modifiedDate" column="s_modifieddate" jdbcType="TIMESTAMP" />
			<result property="createdUser" column="s_createduser" jdbcType="BIGINT" />
			<result property="modifiedUser" column="s_modifieduser" jdbcType="BIGINT" />
		</association>		
	</association>    	
	<association property="testSection" javaType="edu.ku.cete.domain.content.TestSection">
		    <id column="ts_id" property="id" jdbcType="BIGINT" />
		    <result column="ts_externalid" property="externalId" jdbcType="BIGINT" />
		    <result column="ts_testid" property="testId" jdbcType="BIGINT" />
		    <result column="ts_testsectionname" property="testSectionName" jdbcType="VARCHAR" />
		    <result column="ts_numberoftestitems" property="numberOfTestItems" jdbcType="INTEGER" />
		    <result column="ts_helpnotes" property="helpNotes" jdbcType="VARCHAR" />
		    <result column="ts_toolsusageid" property="toolsUsageId" jdbcType="BIGINT" />
		    <result column="ts_taskdeliveryruleid" property="taskDeliveryRuleId" jdbcType="BIGINT" />
		    <result column="ts_createdate" property="createDate" jdbcType="TIMESTAMP" />
		    <result column="ts_modifieddate" property="modifiedDate" jdbcType="TIMESTAMP" />
		    <result column="ts_originationcode" property="originationCode" jdbcType="VARCHAR" />
		    <result column="ts_begininstructions" property="beginInstructions" jdbcType="VARCHAR" />
		    <result column="ts_endinstructions" property="endInstructions" jdbcType="VARCHAR" />
		    <result column="ts_contextstimulusid" property="contextStimulusId" jdbcType="BIGINT" />
		    <result column="ts_ticketed" property="ticketed" jdbcType="BIT" />
	</association>
	</resultMap>

	<resultMap id="studentRecordsMap" type="edu.ku.cete.domain.student.StudentInformationRecord">
        <id column="enrollmentRosterId" property="id" jdbcType="BIGINT" /> 
        <result column="enrollmentid" property="enrollmentId" jdbcType="BIGINT" />
	    <result column="aypschoolidentifier" property="aypSchoolIdentifier" jdbcType="VARCHAR" />
	    <result column="residencedistrictidentifier" property="residenceDistrictIdentifier" jdbcType="VARCHAR" />
	    <result column="currentgradelevel" property="currentGradeLevel" jdbcType="INTEGER" />
	    <result column="localstudentidentifier" property="localStudentIdentifier" jdbcType="VARCHAR" />
	    <result column="currentschoolyear" property="currentSchoolYear" jdbcType="INTEGER" />
	    <result column="schoolentrydate" property="schoolEntryDate" jdbcType="TIMESTAMP" />
	    <result column="districtentrydate" property="districtEntryDate" jdbcType="TIMESTAMP" />
	    <result column="stateentrydate" property="stateEntryDate" jdbcType="TIMESTAMP" />
	    <result column="exitwithdrawaldate" property="exitWithdrawalDate" jdbcType="TIMESTAMP" />
	    <result column="exitwithdrawaltype" property="exitWithdrawalType" jdbcType="INTEGER" />
	    <result column="specialcircumstancestransferchoice" property="specialCircumstancesTransferChoice" jdbcType="VARCHAR" />
	    <result column="giftedstudent" property="giftedStudent" jdbcType="BIT" />
	    <result column="specialedprogramendingdate" property="specialEdProgramEndingDate" jdbcType="TIMESTAMP" />
	    <result column="qualifiedfor504" property="qualifiedFor504" jdbcType="VARCHAR" />
	    <result column="studentid" property="studentId" jdbcType="BIGINT" />
	    <result column="attendanceschoolid" property="attendanceSchoolId" jdbcType="BIGINT" />
	    <result column="restrictionid" property="restrictionId" jdbcType="BIGINT" />
	    <result column="createddate" property="createdDate" jdbcType="TIMESTAMP" />
	    <result column="createduser" property="createdUser" jdbcType="INTEGER" />
	    <result column="activeflag" property="activeFlag" jdbcType="BIT" />
	    <result column="modifieddate" property="modifiedDate" jdbcType="TIMESTAMP" />
	    <result column="modifieduser" property="modifiedUser" jdbcType="INTEGER" />
	    <result column="status" property="surveyStatus" jdbcType="VARCHAR" />
	    <result column="accessprofilestatus" property="accessProfileStatus" jdbcType="VARCHAR" />
        <association property="roster" javaType="edu.ku.cete.domain.enrollment.Roster">
	        <id column="rosterid" property="id" jdbcType="BIGINT" />
	        <result column="coursesectionname" property="courseSectionName" jdbcType="VARCHAR" />
	        <result column="coursesectiondescription" property="courseSectionDescription" jdbcType="VARCHAR" />
	        <result column="teacherid" property="teacherId" jdbcType="BIGINT" />
	        <result column="statesubjectareaid" property="stateSubjectAreaId" jdbcType="BIGINT" />
	        <result column="courseenrollmentstatusid" property="courseEnrollmentStatusId" jdbcType="BIGINT" />
	        <result column="statecourseid" property="stateCourseId" jdbcType="BIGINT" />
	        <result column="restrictionId" property="restrictionId" jdbcType="BIGINT" />
        </association>
        <association property="educator" javaType="edu.ku.cete.domain.user.User">
            <id property="id" column="teacherid"/>
            <result property="userName" column="educatorusername"/>
            <result property="uniqueCommonIdentifier" column="educatorIdentifier"/>
            <result property="firstName" column="educatorFirstName"/>
            <result property="middleName" column="educatorMiddleName"/>
            <result property="surName" column="educatorLastName"/>
            <result property="defaultUserGroupsId" column="educatorDefaultUserGroupsId"/>
            <result property="email" column="educatorEmail"/>
        </association>
        <association property="gradeCourse" javaType="edu.ku.cete.domain.content.GradeCourse">
	        <id column="gradeCourseId" property="id"/>
		    <result column="gradeCourseName" jdbcType="VARCHAR" property="name" />
    	</association>
      <!--   <association property="stateSubjectArea" javaType="edu.ku.cete.domain.content.ContentArea">
            <id property="id" column="stateSubjectAreaId" jdbcType="BIGINT"/>
            <result property="name" column="stateSubjectAreaName" jdbcType="VARCHAR"/>
            <result property="externalId" column="stateSubjectAreaExternalId" jdbcType="VARCHAR"/>
            <result property="sortOrder" column="stateSubjectAreaSortOrder" jdbcType="VARCHAR"/>
            <result property="originationCode" column="stateSubjectAreaOriginationCode" jdbcType="BIGINT"/>
            <result property="abbreviatedName" column="stateSubjectAreaAbbreviatedName" jdbcType="TIMESTAMP"/>
        </association> -->
        <association property="student" javaType="edu.ku.cete.domain.student.Student">
			<id property="id" column="studentid" jdbcType="BIGINT" />
			<result property="stateStudentIdentifier" column="statestudentidentifier" jdbcType="VARCHAR" />
			<result property="legalFirstName" column="legalfirstname" jdbcType="VARCHAR" />
			<result property="legalMiddleName" column="legalmiddlename" jdbcType="VARCHAR" />
			<result property="legalLastName" column="legallastname" jdbcType="VARCHAR" />
			<result property="generationCode" column="generationcode" jdbcType="VARCHAR" />
			<result property="gender" column="gender" jdbcType="INTEGER" />
			<result property="dateOfBirth" column="dateofbirth" jdbcType="TIMESTAMP" />
			<result property="comprehensiveRace" column="comprehensiverace" jdbcType="VARCHAR" />
			<result property="primaryDisabilityCode" column="primarydisabilitycode" jdbcType="VARCHAR" />
			<result property="firstLanguage" column="firstlanguage" jdbcType="VARCHAR" />
			<!--  <result property="createdDate" column="studentcreateddate" jdbcType="TIMESTAMP" />
			<result property="modifiedDate" column="studentmodifieddate" jdbcType="TIMESTAMP" />
			<result property="createdUser" column="studentcreateduser" jdbcType="BIGINT" />
			<result property="modifiedUser" column="studentmodifieduser" jdbcType="BIGINT" />-->
		</association>       
		<association property="attendanceSchool" javaType="edu.ku.cete.domain.common.Organization">
	        <id column="attendanceschoolid" property="id" jdbcType="BIGINT"/>
	        <result column="attendanceSchoolName" property="organizationName" javaType="String"/>
	        <result column="attendanceSchoolIdentifier" property="displayIdentifier" javaType="String"/>
	        <result column="welcomeMessage" property="welcomeMessage" javaType="String"/>
	        <result column="organizationtypeid" property="organizationType.organizationTypeId"/>
		</association>
		<association property="courseEnrollment" javaType="edu.ku.cete.domain.common.Category">
            <id property="id" column="courseenrollmentstatusid" jdbcType="BIGINT"/>
            <result property="categoryName" column="courseenrollmentstatus" jdbcType="VARCHAR"/>            
        </association>
    </resultMap>  

	<resultMap id="studentRecordsForDLMMap" type="edu.ku.cete.domain.student.StudentRosterITIRecord">
        <id column="enrollmentRosterId" property="id" jdbcType="BIGINT" /> 
        <result column="enrollmentid" property="enrollmentId" jdbcType="BIGINT" />
	    <result column="aypschoolidentifier" property="aypSchoolIdentifier" jdbcType="VARCHAR" />
	    <result column="residencedistrictidentifier" property="residenceDistrictIdentifier" jdbcType="VARCHAR" />
	    <result column="currentgradelevel" property="currentGradeLevel" jdbcType="INTEGER" />
	    <result column="localstudentidentifier" property="localStudentIdentifier" jdbcType="VARCHAR" />
	    <result column="currentschoolyear" property="currentSchoolYear" jdbcType="INTEGER" />
	    <result column="schoolentrydate" property="schoolEntryDate" jdbcType="TIMESTAMP" />
	    <result column="districtentrydate" property="districtEntryDate" jdbcType="TIMESTAMP" />
	    <result column="stateentrydate" property="stateEntryDate" jdbcType="TIMESTAMP" />
	    <result column="exitwithdrawaldate" property="exitWithdrawalDate" jdbcType="TIMESTAMP" />
	    <result column="exitwithdrawaltype" property="exitWithdrawalType" jdbcType="INTEGER" />
	    <result column="specialcircumstancestransferchoice" property="specialCircumstancesTransferChoice" jdbcType="VARCHAR" />
	    <result column="giftedstudent" property="giftedStudent" jdbcType="BIT" />
	    <result column="specialedprogramendingdate" property="specialEdProgramEndingDate" jdbcType="TIMESTAMP" />
	    <result column="qualifiedfor504" property="qualifiedFor504" jdbcType="VARCHAR" />
	    <result column="studentid" property="studentId" jdbcType="BIGINT" />
	    <result column="attendanceschoolid" property="attendanceSchoolId" jdbcType="BIGINT" />
	    <result column="restrictionid" property="restrictionId" jdbcType="BIGINT" />
	    <result column="createddate" property="createdDate" jdbcType="TIMESTAMP" />
	    <result column="createduser" property="createdUser" jdbcType="INTEGER" />
	    <result column="activeflag" property="activeFlag" jdbcType="BIT" />
	    <result column="modifieddate" property="modifiedDate" jdbcType="TIMESTAMP" />
	    <result column="modifieduser" property="modifiedUser" jdbcType="INTEGER" />
	    <result column="status" property="surveyStatus" jdbcType="VARCHAR" />
	    <result column="accessprofilestatus" property="accessProfileStatus" jdbcType="VARCHAR" />
        <association property="roster" javaType="edu.ku.cete.domain.enrollment.Roster">
	        <id column="rosterid" property="id" jdbcType="BIGINT" />
	        <result column="coursesectionname" property="courseSectionName" jdbcType="VARCHAR" />
	        <result column="coursesectiondescription" property="courseSectionDescription" jdbcType="VARCHAR" />
	        <result column="teacherid" property="teacherId" jdbcType="BIGINT" />
	        <result column="statesubjectareaid" property="stateSubjectAreaId" jdbcType="BIGINT" />
	        <result column="courseenrollmentstatusid" property="courseEnrollmentStatusId" jdbcType="BIGINT" />
	        <result column="statecourseid" property="stateCourseId" jdbcType="BIGINT" />
	        <result column="restrictionId" property="restrictionId" jdbcType="BIGINT" />
        </association>
        <association property="educator" javaType="edu.ku.cete.domain.user.User">
            <id property="id" column="teacherid"/>
            <result property="userName" column="educatorusername"/>
            <result property="uniqueCommonIdentifier" column="educatorIdentifier"/>
            <result property="firstName" column="educatorFirstName"/>
            <result property="middleName" column="educatorMiddleName"/>
            <result property="surName" column="educatorLastName"/>
            <result property="defaultUserGroupsId" column="educatorDefaultUserGroupsId"/>
            <result property="email" column="educatorEmail"/>
        </association>
        <association property="gradeCourse" javaType="edu.ku.cete.domain.content.GradeCourse">
	        <id column="gradeCourseId" property="id"/>
		    <result column="gradeCourseName" jdbcType="VARCHAR" property="name" />
    	</association>
      <!--   <association property="stateSubjectArea" javaType="edu.ku.cete.domain.content.ContentArea">
            <id property="id" column="stateSubjectAreaId" jdbcType="BIGINT"/>
            <result property="name" column="stateSubjectAreaName" jdbcType="VARCHAR"/>
            <result property="externalId" column="stateSubjectAreaExternalId" jdbcType="VARCHAR"/>
            <result property="sortOrder" column="stateSubjectAreaSortOrder" jdbcType="VARCHAR"/>
            <result property="originationCode" column="stateSubjectAreaOriginationCode" jdbcType="BIGINT"/>
            <result property="abbreviatedName" column="stateSubjectAreaAbbreviatedName" jdbcType="TIMESTAMP"/>
        </association> -->
        <association property="student" javaType="edu.ku.cete.domain.student.Student">
			<id property="id" column="studentid" jdbcType="BIGINT" />
			<result property="stateStudentIdentifier" column="statestudentidentifier" jdbcType="VARCHAR" />
			<result property="legalFirstName" column="legalfirstname" jdbcType="VARCHAR" />
			<result property="legalMiddleName" column="legalmiddlename" jdbcType="VARCHAR" />
			<result property="legalLastName" column="legallastname" jdbcType="VARCHAR" />
			<result property="generationCode" column="generationcode" jdbcType="VARCHAR" />
			<result property="gender" column="gender" jdbcType="INTEGER" />
			<result property="dateOfBirth" column="dateofbirth" jdbcType="TIMESTAMP" />
			<result property="comprehensiveRace" column="comprehensiverace" jdbcType="VARCHAR" />
			<result property="primaryDisabilityCode" column="primarydisabilitycode" jdbcType="VARCHAR" />
			<result property="firstLanguage" column="firstlanguage" jdbcType="VARCHAR" />
			<!--  <result property="createdDate" column="studentcreateddate" jdbcType="TIMESTAMP" />
			<result property="modifiedDate" column="studentmodifieddate" jdbcType="TIMESTAMP" />
			<result property="createdUser" column="studentcreateduser" jdbcType="BIGINT" />
			<result property="modifiedUser" column="studentmodifieduser" jdbcType="BIGINT" />-->
		</association>       
		<association property="attendanceSchool" javaType="edu.ku.cete.domain.common.Organization">
	        <id column="attendanceschoolid" property="id" jdbcType="BIGINT"/>
	        <result column="attendanceSchoolName" property="organizationName" javaType="String"/>
	        <result column="attendanceSchoolIdentifier" property="displayIdentifier" javaType="String"/>
	        <result column="welcomeMessage" property="welcomeMessage" javaType="String"/>
	        <result column="organizationtypeid" property="organizationType.organizationTypeId"/>
		</association>
		<association property="courseEnrollment" javaType="edu.ku.cete.domain.common.Category">
            <id property="id" column="courseenrollmentstatusid" jdbcType="BIGINT"/>
            <result property="categoryName" column="courseenrollmentstatus" jdbcType="VARCHAR"/>            
        </association>
    </resultMap>
		 
    <resultMap id="kelpaStudentScoreMap" type="edu.ku.cete.domain.report.KELPAReport">
        <!-- <id column="enrollmentRosterId" property="id" jdbcType="BIGINT" /> --> 
		<result column="administration" property="administration" jdbcType="VARCHAR" />
		<result column="districtnumber" property="districtNumber" jdbcType="VARCHAR" />
		<result column="districtname" property="districtName" jdbcType="VARCHAR" />
		<result column="schoolnumber" property="schoolNumber" jdbcType="VARCHAR" />
		<result column="schoolname" property="schoolName" jdbcType="VARCHAR" />
		<result column="studentlastname" property="studentLastName" jdbcType="VARCHAR" />
		<result column="studentfirstname" property="studentFirstName" jdbcType="VARCHAR" />
		<result column="studentmiddleinitial" property="studentMiddleInitial" jdbcType="VARCHAR" />
		<result column="studentdateofbirth" property="studentDateOfBirth" jdbcType="VARCHAR" />
		<result column="statestudentid" property="stateStudentID" jdbcType="VARCHAR" />
		<result column="grade" property="grade" jdbcType="VARCHAR" />
		<result column="gender" property="gender" jdbcType="VARCHAR" />
		<result column="ethnicity" property="ethnicity" jdbcType="VARCHAR" />
		<result column="homelanguage" property="homeLanguage" jdbcType="VARCHAR" />
		<result column="disability" property="disability" jdbcType="VARCHAR" />
		<result column="iep" property="IEP" jdbcType="VARCHAR" />
		<result column="section504" property="section504" jdbcType="VARCHAR" />
		<result column="ellstatus" property="ELLStatus" jdbcType="VARCHAR" />
		<result column="economicallydisadvantaged" property="economicallyDisadvantaged" jdbcType="VARCHAR" />
		<result column="studentstn" property="studentSTN" jdbcType="VARCHAR" />
		<result column="studentresponseformlistening" property="studentResponseFormListening" jdbcType="VARCHAR" />
		<result column="studentresponseformreading" property="studentResponseFormReading" jdbcType="VARCHAR" />
		<result column="studentresponseformspeaking" property="studentResponseFormSpeaking" jdbcType="VARCHAR" />
		<result column="studentresponseformwriting" property="studentResponseFormWriting" jdbcType="VARCHAR" />
		<result column="testedorattempted" property="testedOrAttempted" jdbcType="VARCHAR" />
		<result column="teacherid" property="teacherID" jdbcType="VARCHAR" />
		<result column="teacherlastname" property="teacherLastName" jdbcType="VARCHAR" />
		<result column="teacherfirstname" property="teacherFirstName" jdbcType="VARCHAR" />
		<result column="teachermiddleinitial" property="teacherMiddleInitial" jdbcType="VARCHAR" />
		<result column="universalfeaturezoom" property="universalFeatureZoom" jdbcType="VARCHAR" />
		<result column="designatedfeaturezoomsize" property="designatedFeatureZoomSize" jdbcType="VARCHAR" />
		<result column="designatedfeatureanswermasking" property="designatedFeatureAnswerMasking" jdbcType="VARCHAR" />
		<result column="designatedfeaturescreenreader" property="designatedFeatureScreenReader" jdbcType="VARCHAR" />
		<result column="designatedfeaturemagnifyingglass" property="designatedFeatureMagnifyingGlass" jdbcType="VARCHAR" />
		<result column="designatedfeaturebackgroundcolor" property="designatedFeatureBackgroundColor" jdbcType="VARCHAR" />
		<result column="designatedfeaturebackgroundcoloroptions" property="designatedFeatureBackgroundColorOptions" jdbcType="VARCHAR" />
		<result column="designatedfeaturereversecontrast" property="designatedFeatureReverseContrast" jdbcType="VARCHAR" />
		<result column="designatedfeaturebraille" property="designatedFeatureBraille" jdbcType="VARCHAR" />
		<result column="designatedfeaturelargeprint" property="designatedFeatureLargePrint" jdbcType="VARCHAR" />
		<result column="testmode" property="testMode" jdbcType="VARCHAR" />
		<result column="studentnottestedcodelistening" property="studentNotTestedCodeListening" jdbcType="VARCHAR" />
		<result column="studentnottestedcodereading" property="studentNotTestedCodeReading" jdbcType="VARCHAR" />
		<result column="studentnottestedcodespeaking" property="studentNotTestedCodeSpeaking" jdbcType="VARCHAR" />
		<result column="studentnottestedcodewriting" property="studentNotTestedCodeWriting" jdbcType="VARCHAR" />
		<result column="testinvalidationforlistening" property="testInvalidationForListening" jdbcType="VARCHAR" />
		<result column="testinvalidationforreading" property="testInvalidationForReading" jdbcType="VARCHAR" />
		<result column="testinvalidationforspeaking" property="testInvalidationForSpeaking" jdbcType="VARCHAR" />
		<result column="testinvalidationforwriting" property="testInvalidationForWriting" jdbcType="VARCHAR" />
		<result column="domainstatuslistening" property="domainStatusListening" jdbcType="VARCHAR" />
		<result column="domainstatusreading" property="domainStatusReading" jdbcType="VARCHAR" />
		<result column="domainstatusspeaking" property="domainStatusSpeaking" jdbcType="VARCHAR" />
		<result column="domainstatuswriting" property="domainStatusWriting" jdbcType="VARCHAR" />
		<result column="overallrawscore" property="overallRawScore" jdbcType="VARCHAR" />
		<result column="overallscalescore" property="overallScaleScore" jdbcType="VARCHAR" />
		<result column="proficiencydetermination" property="proficiencyDetermination" jdbcType="VARCHAR" />
		<result column="overallmeasurementerror" property="overallMeasurementError" jdbcType="VARCHAR" />
		<result column="listeningrawscore" property="listeningRawScore" jdbcType="VARCHAR" />
		<result column="listening_scalescore" property="listeningScaleScore" jdbcType="VARCHAR" />
		<result column="listeningmeasurementerror" property="listeningMeasurementError" jdbcType="VARCHAR" />
		<result column="listening_level" property="listeningPerformanceLevel" jdbcType="VARCHAR" />
		<result column="readingrawscore" property="readingRawScore" jdbcType="VARCHAR" />
		<result column="reading_scalescore" property="readingScaleScore" jdbcType="VARCHAR" />
		<result column="readingmeasurementerror" property="readingMeasurementError" jdbcType="VARCHAR" />
		<result column="reading_level" property="readingPerformanceLevel" jdbcType="VARCHAR" />
		<result column="speakingrawscore" property="speakingRawScore" jdbcType="VARCHAR" />
		<result column="speaking_scalescore" property="speakingScaleScore" jdbcType="VARCHAR" />
		<result column="speakingmeasurementerror" property="speakingMeasurementError" jdbcType="VARCHAR" />
		<result column="speaking_level" property="speakingPerformanceLevel" jdbcType="VARCHAR" />
		<result column="writingrawscore" property="writingRawScore" jdbcType="VARCHAR" />
		<result column="writing_scalescore" property="writingScaleScore" jdbcType="VARCHAR" />
		<result column="writingmeasurementerror" property="writingMeasurementError" jdbcType="VARCHAR" />
		<result column="writing_level" property="writingPerformanceLevel" jdbcType="VARCHAR" />
		<result column="comprehension_scalescore" property="comprehensionScaleScore" jdbcType="VARCHAR" />
		<result column="comprehensionmeasurementerror" property="comprehensionMeasurementError" jdbcType="VARCHAR" />
		
		<result column="overall_level" property="overallLevel" jdbcType="INTEGER" />
		<result column="listeningquestioncount" property="listeningQuestionCount" jdbcType="INTEGER"/>
		<result column="listeningresponsecount" property="listeningResponseCount" jdbcType="INTEGER"/>
		<result column="readingquestioncount" property="readingQuestionCount" jdbcType="INTEGER"/>
		<result column="readingresponsecount" property="readingResponseCount" jdbcType="INTEGER"/>
		<result column="speakingquestioncount" property="speakingQuestionCount" jdbcType="INTEGER"/>
		<result column="speakingresponsecount" property="speakingResponseCount" jdbcType="INTEGER"/>
		<result column="writingquestioncount" property="writingQuestionCount" jdbcType="INTEGER"/>
		<result column="writingresponsecount" property="writingResponseCount" jdbcType="INTEGER"/>
		<result column="speakinghumanscoredcount" property="speakingHumanScoredCount" jdbcType="INTEGER"/>
		<result column="speakingnonscorablecodes" property="speakingNonScorableCodes" jdbcType="VARCHAR"/>
		<result column="writinghumanscoredcount" property="writingHumanScoredCount" jdbcType="INTEGER"/>
		<result column="writingnonscorablecodes" property="writingNonScorableCodes" jdbcType="VARCHAR"/>
    </resultMap>
    
    <select id="getKELPAStateStudents" parameterType="map" resultMap="kelpaStudentScoreMap" >
		select distinct
			otd.districtdisplayidentifier as districtnumber
			,otd.schooldisplayidentifier as schoolnumber
			,s.statestudentidentifier as statestudentid
			,(case when gc.abbreviatedname = 'K' then 5 else (gc.abbreviatedname::integer) + 5 end)::integer as grade
			,array_to_string(array(
				select distinct ksdecode::text
				from get_sc_codes_for_test(sr.studentid, sr.studenttest1id)
			), ',') as studentnottestedcodereading
			,array_to_string(array(
				select distinct ksdecode::text
				from get_sc_codes_for_test(sr.studentid, sr.studenttest2id)
			), ',') as studentnottestedcodelistening
			,array_to_string(array(
				select distinct ksdecode::text
				from get_sc_codes_for_test(sr.studentid, sr.studenttest3id)
			), ',') as studentnottestedcodespeaking
			,array_to_string(array(
				select distinct ksdecode::text
				from get_sc_codes_for_test(sr.studentid, sr.studenttest4id)
			), ',') as studentnottestedcodewriting
			,list_status.categoryname as domainstatuslistening
			,read_status.categoryname as domainstatusreading
			,spk_status.categoryname as domainstatusspeaking
			,writ_status.categoryname as domainstatuswriting
			,sr.scalescore as overallscalescore
			,sr.overall_level
			,sr.listening_scalescore
			,sr.listening_level
			,sr.reading_scalescore
			,sr.reading_level
			,sr.speaking_scalescore
			,sr.speaking_level
			,sr.writing_scalescore
			,sr.writing_level
			,sr.comprehension_scalescore
			,srts.test1idtaskvariantcount as readingquestioncount
			,srts.test1idresponsecount as readingresponsecount
			,srts.test2idtaskvariantcount as listeningquestioncount
			,srts.test2idresponsecount as listeningresponsecount
			,srts.test3idtaskvariantcount as speakingquestioncount
			,srts.test3idresponsecount as speakingresponsecount
			,srts.test4idtaskvariantcount as writingquestioncount
			,srts.test4idresponsecount as writingresponsecount
			,kelpa_get_number_items_human_scored(sr.studenttest3id) as speakinghumanscoredcount
			,array_to_string(array(select kelpa_get_non_scorable_codes_for_test(sr.studentid, sr.studenttest3id)), ',') as speakingnonscorablecodes
			,kelpa_get_number_items_human_scored(sr.studenttest4id) as writinghumanscoredcount
			,array_to_string(array(select kelpa_get_non_scorable_codes_for_test(sr.studentid, sr.studenttest4id)), ',') as writingnonscorablecodes
		from studentreport sr
		join assessmentprogram ap on sr.assessmentprogramid = ap.id and ap.abbreviatedname = 'KELPA2'
		join studentreporttestscores srts on sr.id = srts.studentreportid
		join organizationtreedetail otd on sr.attendanceschoolid = otd.schoolid
		join student s on sr.studentid = s.id
		join enrollment e on sr.enrollmentid = e.id and s.id = e.studentid
		join studentstests read_test on sr.studentid = read_test.studentid and sr.studenttest1id = read_test.testid and read_test.activeflag
		join category read_status on read_test.status = read_status.id
		join testsession read_session on read_test.testsessionid = read_session.id and read_session.activeflag
		join gradecourse gc on read_session.gradecourseid = gc.id
		join studentstests list_test on sr.studentid = list_test.studentid and sr.studenttest2id = list_test.testid and list_test.activeflag
		join category list_status on list_test.status = list_status.id
		join studentstests spk_test on sr.studentid = spk_test.studentid and sr.studenttest3id = spk_test.testid and spk_test.activeflag
		join category spk_status on spk_test.status = spk_status.id
		join studentstests writ_test on sr.studentid = writ_test.studentid and sr.studenttest4id = writ_test.testid and writ_test.activeflag
		join category writ_status on writ_test.status = writ_status.id
		where sr.schoolyear = #{schoolYear,jdbcType=BIGINT}
		and sr.districtid = #{districtId,jdbcType=BIGINT}
		order by otd.schooldisplayidentifier, grade
	</select>
       	
	<sql id="Extended_Student_With_Roster_Column_List">
	<!-- This is added so that a unique id will be always returned even when roster is not present. -->
	  	non_empty_id(enrlroster.id,enrl.id) as enrollmentRosterId,
	    enrl.id as enrollmentId,enrl.aypschoolidentifier,enrl.residencedistrictidentifier,
	    enrl.localstudentidentifier,enrl.
	    currentgradelevel,enrl.currentschoolyear,
	    enrl.schoolentrydate,
	    enrl.districtentrydate,enrl.stateentrydate,enrl.exitwithdrawaldate,
	    enrl.exitwithdrawaltype,enrl.specialcircumstancestransferchoice,enrl.giftedstudent,
	    enrl.specialedprogramendingdate,enrl.qualifiedfor504,enrl.studentid, 
	    enrl.restrictionid,st.id,
	    gc.id as gradeCourseId,gc.name as gradeCourseName,
	    r.id as rosterId, r.coursesectionname,r.teacherid,r.statesubjectareaid,
	    r.statesubjectcourseidentifier,
	    r.localcourseid,r.educatorschooldisplayidentifier,
	    courseenrollment.id as courseenrollmentstatusid,courseenrollment.categoryname as courseenrollmentstatus,
   		au.username as educatorUserName, au.firstname as educatorFirstName,
   		au.middlename as educatorMiddleName,
   		au.surname as educatorLastName, au.email as educatorEmail,
   		au.uniquecommonidentifier as educatorIdentifier, 
   		au.defaultusergroupsid as educatorDefaultUserGroupsId,
	  <!--   stateSubjectArea.name as stateSubjectAreaName, 
	    stateSubjectArea.externalId as stateSubjectAreaExternalId,
	    stateSubjectArea.sortOrder as stateSubjectAreaSortOrder,
	    stateSubjectArea.originationCode as stateSubjectAreaOriginationCode,
	    stateSubjectArea.abbreviatedName as stateSubjectAreaAbbreviatedName, -->
	    st.statestudentidentifier,st.legalfirstname,st.legalmiddlename,
	    st.legallastname,st.generationcode,
	    st.comprehensiverace,st.primarydisabilitycode,
	    st.dateofbirth,st.gender,st.firstlanguage, 
	    attendanceSchool.id as attendanceschoolid,
	    attendanceSchool.displayidentifier as attendanceSchoolIdentifier,
	    attendanceSchool.organizationname as attendanceSchoolName,
	    attendanceSchool.welcomemessage,
	    ot.id as "attendanceSchool.organizationType.organizationTypeId", 
	    ot.typename as "attendanceSchool.organizationType.typeName",
	    ot.typecode as "attendanceSchool.organizationType.typeCode", 
	    ot.typelevel as "attendanceSchool.organizationType.typeLevel",	    
	   <!--  CASE WHEN st.assessmentprogramid is null
			THEN 'Not Applicable' -->
		CASE WHEN 'DLM' NOT IN (SELECT ap.abbreviatedname FROM assessmentprogram ap INNER JOIN studentassessmentprogram sap ON sap.studentid = st.id AND ap.id = sap.assessmentprogramid AND sap.activeflag = TRUE) THEN 'Not Applicable' 
	    	WHEN survey.studentid is null
			THEN 'NOT_STARTED'
			WHEN survey.status is null
			THEN 'NOT_STARTED'
			ELSE surveystatuscategory.categoryname
	    END as status,
	  
	    CASE WHEN apstatus.studentid is null
			THEN 'NO SETTINGS'
			ELSE 'CUSTOM'
	    END as accessprofilestatus
	</sql>
		  
	<sql id="Extended_Roster_Where_Clause">
		<if test="studentInformationRecordCriteriaMap.enrollmentsRostersId != null">
			AND (r.id || '') ilike #{studentInformationRecordCriteriaMap.enrollmentsRostersId}
		</if>
		<if test="studentInformationRecordCriteriaMap.stateStudentIdentifier != null">
			AND st.stateStudentIdentifier ilike #{studentInformationRecordCriteriaMap.stateStudentIdentifier}
		</if>
		<if test="studentInformationRecordCriteriaMap.localStudentIdentifier != null">
			AND enrl.localstudentidentifier ilike #{studentInformationRecordCriteriaMap.localStudentIdentifier}
		</if>
		<if test="studentInformationRecordCriteriaMap.legalFirstName != null">
			AND st.legalFirstName ilike #{studentInformationRecordCriteriaMap.legalFirstName}
		</if>
		<if test="studentInformationRecordCriteriaMap.legalMiddleName != null">
			AND st.legalMiddleName ilike #{studentInformationRecordCriteriaMap.legalMiddleName}
		</if>   	
		<if test="studentInformationRecordCriteriaMap.legalLastName != null">
			AND st.legalLastName ilike #{studentInformationRecordCriteriaMap.legalLastName}
		</if>	
		<if test="studentInformationRecordCriteriaMap.generation != null">
			AND st.generationcode ilike #{studentInformationRecordCriteriaMap.generation}
		</if>
		<if test="studentInformationRecordCriteriaMap.gender != null">
			AND (st.gender || '') ilike #{studentInformationRecordCriteriaMap.gender}
		</if>
		<if test="studentInformationRecordCriteriaMap.dateOfBirth != null">
			AND to_char(dateofbirth, 'MM/DD/YYYY') ilike #{studentInformationRecordCriteriaMap.dateOfBirth} 
		</if>
		<if test="studentInformationRecordCriteriaMap.gradeCourseName != null">
			AND gc.name ilike #{studentInformationRecordCriteriaMap.gradeCourseName}
		</if>
		<if test="studentInformationRecordCriteriaMap.stateSubjectAreaName != null">
			AND stateSubjectArea.name ilike #{studentInformationRecordCriteriaMap.stateSubjectAreaName}
		</if>
		<if test="studentInformationRecordCriteriaMap.stateCourseId != null">
			AND (r.stateCourseId || '') ilike #{studentInformationRecordCriteriaMap.stateCourseId}
		</if>
		<if test="studentInformationRecordCriteriaMap.courseSectionName != null">
			AND r.courseSectionName ilike #{studentInformationRecordCriteriaMap.courseSectionName}
		</if>	
		<if test="studentInformationRecordCriteriaMap.attendanceSchoolName != null">
			AND attendanceSchool.organizationname ilike #{studentInformationRecordCriteriaMap.attendanceSchoolName}
		</if>
		<if test="studentInformationRecordCriteriaMap.currentSchoolYear != null">
			AND (enrl.currentschoolyear || '') ilike #{studentInformationRecordCriteriaMap.currentSchoolYear}
		</if>
		<if test="studentInformationRecordCriteriaMap.firstLanguage != null">
			AND st.firstlanguage ilike #{studentInformationRecordCriteriaMap.firstLanguage}
		</if>  
		<if test="studentInformationRecordCriteriaMap.comprehensiveRace != null">
			AND st.comprehensiverace ilike #{studentInformationRecordCriteriaMap.comprehensiveRace}
		</if>
		<if test="studentInformationRecordCriteriaMap.residenceDistrictIdentifier != null">
			AND enrl.residencedistrictidentifier ilike #{studentInformationRecordCriteriaMap.residenceDistrictIdentifier}
		</if>
		<if test="studentInformationRecordCriteriaMap.primaryDisabilityCode != null">
			AND st.primarydisabilitycode ilike #{studentInformationRecordCriteriaMap.primaryDisabilityCode}
		</if>
		<if test="studentInformationRecordCriteriaMap.educatorUniqueCommonIdentifier != null">
			And au.uniquecommonidentifier ilike #{studentInformationRecordCriteriaMap.educatorUniqueCommonIdentifier}
		</if>	    	
		<if test="studentInformationRecordCriteriaMap.educatorFirstName != null">
			AND au.firstname ilike #{studentInformationRecordCriteriaMap.educatorFirstName}
		</if>	    	
		<if test="studentInformationRecordCriteriaMap.educatorLastName != null">
			AND au.surname ilike #{studentInformationRecordCriteriaMap.educatorLastName}
		</if>
		<if test="studentInformationRecordCriteriaMap.courseEnrollmentStatus != null">
	    		AND (courseenrollment.categoryname || '') ilike #{studentInformationRecordCriteriaMap.courseEnrollmentStatus}
	    </if>
		<if test="studentInformationRecordCriteriaMap.studentId != null">
			AND (st.id || '') ilike #{studentInformationRecordCriteriaMap.studentId}
		</if>
		<if test="studentInformationRecordCriteriaMap.enrollmentId != null">
			AND (enrl.id || '') ilike #{studentInformationRecordCriteriaMap.enrollmentId}
		</if>
		<if test="studentInformationRecordCriteriaMap.rosterId != null">
			AND (r.id || '') ilike #{studentInformationRecordCriteriaMap.rosterId}
		</if>
		<if test="studentInformationRecordCriteriaMap.teacherId != null">
			AND (r.teacherId || '') ilike #{studentInformationRecordCriteriaMap.teacherId}
		</if>
		<if test="studentInformationRecordCriteriaMap.attendanceSchoolId != null">
			AND (attendanceSchool.id || '') ilike #{studentInformationRecordCriteriaMap.attendanceSchoolId}
		</if>
		<if test="studentInformationRecordCriteriaMap.stateCourse != null">
			AND stateCourse.name ilike #{studentInformationRecordCriteriaMap.stateCourse}
		</if>
		<if test="studentInformationRecordCriteriaMap.stateCourseName != null">
			AND statecourse.name ilike #{studentInformationRecordCriteriaMap.stateCourseName}
		</if>
		<!-- <if test="studentInformationRecordCriteriaMap.stateSubjectArea != null">
			AND (stateSubjectArea.abbreviatedName || '') ilike #{studentInformationRecordCriteriaMap.stateSubjectArea}
		</if> -->	    		    			    
		<if test="studentInformationRecordCriteriaMap.gradeCourseId != null">
			AND (gc.id || '') ilike #{studentInformationRecordCriteriaMap.gradeCourseId}
		</if>	    	    
		<if test="studentInformationRecordCriteriaMap.currentGradeLevel != null">
			AND (enrl.currentgradelevel || '') ilike #{studentInformationRecordCriteriaMap.currentGradeLevel}
		</if>
		<if test="studentInformationRecordCriteriaMap.gradeCourseAbbreviatedName != null">
			AND gc.abbreviatedname ilike #{studentInformationRecordCriteriaMap.gradeCourseAbbreviatedName}
		</if>
		<if test="studentInformationRecordCriteriaMap.gradeLevel != null">
			AND (gc.gradeLevel || '') ilike #{studentInformationRecordCriteriaMap.gradeLevel}
		</if>
	</sql>		 		  		 				  
		  
	<insert id="add" parameterType="Student" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
		INSERT INTO student(stateStudentIdentifier,  legalFirstName, 
       legalMiddleName, legalLastName, generationCode,
       comprehensiveRace,primaryDisabilityCode,
        firstLanguage, dateOfBirth, gender,
       createdDate, synced,hispanicEthnicity,
       modifiedDate, username, password, createduser, activeflag, modifieduser, 
       esolParticipationCode, esolProgramEntryDate, 
       esolProgramEndingDate, usaEntryDate, stateId, source, externalid)
		  values(#{stateStudentIdentifier},#{legalFirstName},
		  #{legalMiddleName},#{legalLastName},#{generationCode},
		  #{comprehensiveRace},#{primaryDisabilityCode},
		  #{firstLanguage}, #{dateOfBirth},#{gender},
		  #{createdDate}, #{synced}, #{hispanicEthnicity},
		  #{modifiedDate},
		  #{username},
		   #{password},
		    #{createdUser}, #{activeFlag},#{modifiedUser},
		    #{esolParticipationCode},#{esolProgramEntryDate},
		    #{esolProgramEndingDate},#{usaEntryDate}, #{stateId}, #{sourceType}, #{externalId})
	</insert>
	<select id="lastid" resultType="java.lang.Long">
		SELECT lastval() AS id
	</select>
	<delete id="delete">
		DELETE FROM student WHERE id = #{id}
	</delete>

<!-- TODO Performance Fixes -->
<!-- 
1. Seperate into 1 sql for user with view all and  other for user without view all
-->
	<select id="getStudentInformationRecords" resultMap="studentRecordsMap" >
	    SELECT
		    <if test="distinct">
		      distinct
		    </if>
		    <include refid="Extended_Student_With_Roster_Column_List" />
	    FROM
  		    Organization attendanceSchool, OrganizationType ot, 
	    	Student st
	    	<if test="orgChildrenById != null">
	    	JOIN (select ienrl.* from enrollment ienrl 
			inner join organizationtreedetail orglist 
					on ienrl.attendanceschoolid = orglist.schoolid 
			where ienrl.activeflag is true AND ienrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}) enrl ON enrl.Studentid = st.id 
			and (orglist.schoolid = #{orgChildrenById, jdbcType=BIGINT} or orglist.districtid = #{orgChildrenById, jdbcType=BIGINT} or orglist.stateid = #{orgChildrenById, jdbcType=BIGINT})
			</if>
			<if test="orgChildrenById == null">
	    	JOIN enrollment enrl ON  enrl.Studentid = st.id 
	    	</if>
    		<if test="hasViewAllPermission">
	    	LEFT JOIN 
	    	</if>
    		<if test="! hasViewAllPermission">
	    	JOIN 
	    	</if> 
			enrollmentsRosters enrlRoster
	        ON  (
	        	enrl.id=enrlRoster.enrollmentid
	        )
    		<if test="hasViewAllPermission">
	    	LEFT JOIN 
	    	</if>
    		<if test="! hasViewAllPermission">
	    	JOIN 
	    	</if> 
	    	Roster r
	    	ON	( r.id = enrlRoster.rosterId )	
	    	LEFT JOIN GradeCourse gc ON (enrl.currentgradelevel = gc.id)
	    	LEFT JOIN aartuser au ON (r.teacherId = au.id)
	    	<!-- LEFT JOIN ContentArea stateSubjectArea ON (r.stateSubjectAreaId = stateSubjectArea.id) -->
	    	LEFT JOIN Category courseenrollment ON (r.courseenrollmentstatusid = courseenrollment.id)
	    	LEFT JOIN survey survey ON (survey.studentid = st.id and survey.activeflag = true)
	    	LEFT JOIN Category surveystatuscategory ON (survey.status = surveystatuscategory.id)
	    	LEFT JOIN (select distinct studentid from studentprofileitemattributevalue spiav where spiav.activeflag = true and lower(spiav.selectedvalue) = 'true') as apstatus 
	    		on (apstatus.studentid = st.id)
	    	WHERE attendanceSchool.id = enrl.attendanceschoolid
    		AND attendanceSchool.organizationtypeid = ot.id
    		AND enrl.activeflag is true
    		<if test="orgChildrenById == null"> 
    		AND enrl.currentschoolyear = organization_school_year(attendanceSchool.id)
	    	</if>
	    	<if test="attendanceSchoolIds != null">
	    	    AND enrl.attendanceschoolid in 
			    <foreach collection="attendanceSchoolIds"
				    item="attendanceSchoolId" open="(" close=")" separator="," >
				    #{attendanceSchoolId}
			    </foreach>
		    </if>
	    	<if test="userOrganizationIds != null">
	    	    AND enrl.attendanceschoolid in 
			    <foreach collection="userOrganizationIds"
				    item="userOrganizationId" open="(" close=")" separator="," >
				    #{userOrganizationId}
			    </foreach>
		    </if>
		      <if test="educatorId != null">
		    	AND r.teacherId=#{educatorId}
		    	</if>
	    	<include refid="Extended_Roster_Where_Clause" />		    
		    <if test="orderByClause != null">
		      ORDER BY ${orderByClause}
		    </if>
	    limit #{limit}
	    offset #{offset}
	</select>

  	<select id="getStudentInformationRecordsCount" 
	  	parameterType="edu.ku.cete.domain.enrollment.EnrollmentExample" resultType="java.lang.Integer" >
		select count(st.id)
		FROM
  		    Organization attendanceSchool, OrganizationType ot, 
	    	Student st
	    	<if test="orgChildrenById != null">
	    	JOIN (select ienrl.* from enrollment ienrl 
			inner join organizationtreedetail orglist 
					on ienrl.attendanceschoolid = orglist.schoolid 
			where ienrl.activeflag is true AND ienrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}) enrl ON enrl.Studentid = st.id 
			and (orglist.schoolid = #{orgChildrenById, jdbcType=BIGINT} or orglist.districtid = #{orgChildrenById, jdbcType=BIGINT} or orglist.stateid = #{orgChildrenById, jdbcType=BIGINT})
			</if>
			<if test="orgChildrenById == null">
	    	JOIN enrollment enrl ON  enrl.Studentid = st.id 
	    	</if>
    		<if test="hasViewAllPermission">
	    	LEFT JOIN 
	    	</if>
    		<if test="! hasViewAllPermission">
	    	JOIN 
	    	</if> 
			enrollmentsRosters enrlRoster
	        ON  (
	        	enrl.id=enrlRoster.enrollmentid
	        )
    		<if test="hasViewAllPermission">
	    	LEFT JOIN 
	    	</if>
    		<if test="! hasViewAllPermission">
	    	JOIN 
	    	</if> 
	    	Roster r
	    	ON	( r.id = enrlRoster.rosterId )	
         	LEFT JOIN GradeCourse gc ON (enrl.currentgradelevel = gc.id)
         	LEFT JOIN aartuser au ON (r.teacherId = au.id)
	    	<!-- LEFT JOIN ContentArea stateSubjectArea ON (r.stateSubjectAreaId = stateSubjectArea.id) -->
	    	LEFT JOIN Category courseenrollment ON (r.courseenrollmentstatusid = courseenrollment.id)
	    	LEFT JOIN survey survey ON (survey.studentid = st.id and survey.activeflag = true)
	    	LEFT JOIN Category surveystatuscategory ON (survey.status = surveystatuscategory.id)
	    	LEFT JOIN (select distinct studentid 
	    				from profileitemattribute pia 
                		INNER JOIN profileitemattributenameattributecontainer pianc ON pia.id=pianc.attributenameid
                		INNER JOIN studentprofileitemattributevalue spiav ON pianc.id = spiav.profileitemattributenameattributecontainerid
                		where spiav.activeflag = true and lower(spiav.selectedvalue) = 'true') as apstatus 
	    		on (apstatus.studentid = st.id)
	    	WHERE attendanceSchool.id = enrl.attendanceschoolid
    		AND attendanceSchool.organizationtypeid = ot.id
    		AND enrl.activeflag is true
    		<if test="orgChildrenById == null"> 
    		AND enrl.currentschoolyear = organization_school_year(attendanceSchool.id) 		
	    	</if>
	    	<if test="attendanceSchoolIds != null">
	    	    AND enrl.attendanceschoolid in 
			    <foreach collection="attendanceSchoolIds"
				    item="attendanceSchoolId" open="(" close=")" separator="," >
				    #{attendanceSchoolId}
			    </foreach>
		    </if>
	    	<if test="userOrganizationIds != null">
	    	    AND enrl.attendanceschoolid in 
			    <foreach collection="userOrganizationIds"
				    item="userOrganizationId" open="(" close=")" separator="," >
				    #{userOrganizationId}
			    </foreach>
		    </if>    
		      <if test="educatorId != null">
		    	AND r.teacherId=#{educatorId}
		    	</if>
	    	<include refid="Extended_Roster_Where_Clause" />
	</select>
	
	<select id="getByStateStudentIdentifier" resultType="Student" parameterType="String">
		SELECT
			id, stateStudentIdentifier,  legalFirstName, 
       legalMiddleName, legalLastName, generationCode,
       comprehensiveRace,primaryDisabilityCode,
       firstLanguage, dateOfBirth, gender,
       createdDate, synced,
       modifiedDate, username, password, externalid
		FROM student 
		WHERE stateStudentIdentifier = #{stateStudentIdentifier}
	</select>
	
	<select id="getByStudentID" resultType="Student">
		SELECT
			id, stateStudentIdentifier,  legalFirstName, 
       legalMiddleName, legalLastName, generationCode,
       comprehensiveRace,primaryDisabilityCode,
       firstLanguage, dateOfBirth, gender,
       createdDate, synced,
       modifiedDate, username, password, stateid
		FROM student 
		WHERE id = #{studentID}
	</select>
	
	<select id="getByStudentIDWithFirstContact" resultType="Student">
		SELECT
			std.*,
			CASE
				WHEN 'DLM' NOT IN (
					SELECT apinner.abbreviatedname
					FROM assessmentprogram apinner
					INNER JOIN studentassessmentprogram sapinner
						ON sapinner.studentid = #{studentID,jdbcType=BIGINT}
						AND apinner.id = sapinner.assessmentprogramid
						AND sapinner.activeflag = TRUE
				) THEN 'Not Applicable'
				WHEN sur.studentid is null THEN 'Not Started'
				WHEN sur.status is null THEN 'Not Started'
				ELSE cat.categoryname
			END as firstContact
		FROM student std
		left join survey sur on sur.studentid = std.id and sur.activeflag=true
		left join Category as cat on cat.id = sur.status
		WHERE std.id = #{studentID,jdbcType=BIGINT}
	</select>
	
	<select id="getUsername" resultType="java.lang.String" parameterType="String">
	/* NO LOAD BALANCE */
		select (case when ucount is null 
			then #{username}
			else #{username} || '.' || (ucount+1)
			end) as modifiedUsername from 
				(select (select 0 as ucount from student where username = #{username} 
					union select CAST(split_part(username, '.', 3) as int) as ucount from student 
					where username like #{username} || '.%' order by ucount desc limit 1) ) a
	</select>
	
	<select id="findByRoster" resultType="Student" parameterType="long">
	    select student.id, statestudentidentifier, legalfirstname, 
	    legalmiddlename, legallastname
	    from student, roster, enrollmentsrosters, enrollment
	    where enrollmentsrosters.rosterid = roster.id
	       and enrollmentsrosters.enrollmentid = enrollment.id
	       and enrollment.studentid = student.id
	       and roster.activeflag IS true
	       and enrollmentsrosters.activeflag IS true
	       and enrollment.activeflag IS true
	       and student.activeflag IS true
	       and roster.id = #{rosterId}
	</select>
	
	<select id="findByRosterInCurrentYear" resultType="Student">
	    select student.id, statestudentidentifier, legalfirstname, 
	    legalmiddlename, legallastname
	    from student, roster, enrollmentsrosters, enrollment
	    where enrollmentsrosters.rosterid = roster.id
	       and enrollmentsrosters.enrollmentid = enrollment.id
	       and enrollment.studentid = student.id
	       and roster.activeflag IS true
	       and enrollmentsrosters.activeflag IS true
	       and enrollment.activeflag IS true
	       and student.activeflag IS true
	       and roster.id = #{id}
	       <if test="currentSchoolYear != null">
		    	and roster.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
		    	and enrollment.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
			</if>
	</select>


<!-- for status alone -->
	<select id="findByTestSession" resultMap="studentsTestSectionsDtoMap">
		Select
		sts.*,
		ts.id as ts_id , ts.externalid as ts_externalid , ts.testid as ts_testid ,
		ts.testsectionname as ts_testsectionname , ts.numberoftestitems as ts_numberoftestitems ,
		ts.helpnotes as ts_helpnotes ,
		ts.toolsusageid as ts_toolsusageid , ts.taskdeliveryruleid as ts_taskdeliveryruleid ,
		ts.createdate as ts_createdate , ts.modifieddate as ts_modifieddate ,
		ts.originationcode as ts_originationcode , 
		ts.begininstructions as ts_begininstructions , ts.endinstructions as ts_endinstructions ,
		ts.contextstimulusid as ts_contextstimulusid , ts.ticketed as ts_ticketed , 
		ts.hardbreak as ts_hardbreak , ts.sectionorder as ts_sectionorder,
		st.studentid as st_studentid, st.testid as st_testid, st.testcollectionid as st_testcollectionid,
		st.status as st_status, st.testsessionid as st_testsessionid, 
        st.createddate as st_createddate, st.createduser as st_createduser, st.activeflag  as st_activeflag,
        st.modifieduser  as st_modifieduser, st.modifieddate  as st_modifieddate, 
        st.ticketno as st_ticketno,
        s.statestudentidentifier as s_statestudentidentifier, s.legalfirstname as s_legalfirstname,
        s.legalmiddlename as s_legalmiddlename, 
       	s.legallastname as s_legallastname, s.generationcode as s_generationcode,
       	s.dateofbirth as s_dateofbirth, s.createddate as s_createddate, s.modifieddate as s_modifieddate, 
       	s.gender as s_gender, s.firstlanguage as s_firstlanguage, s.comprehensiverace as s_comprehensiverace,
       	s.primarydisabilitycode as s_primarydisabilitycode, 
       	s.username as s_username, s.password as s_password, s.synced as s_synced,
       	s.createduser as s_createdUser, s.activeflag as s_activeflag, s.modifieduser as s_modifieduser
		from studentstestsections sts,testsection ts,studentstests st,student s, enrollment enrl 
		where
		sts.studentstestid=st.id 
		AND ts.id = sts.testsectionid
		ANd st.studentid = s.id
		and enrl.studentid = s.id
		AND sts.activeflag IS true
		AND st.activeflag is true
		AND enrl.activeflag is true
		AND st.testsessionId=#{testSessionId}
		order by s.legallastname, s.legalfirstname,s.legalmiddlename, ts_testsectionname asc
	</select>	
		
	<select id="getCompletedStudentsCount" resultType="java.lang.Integer">
		SELECT count(*)
		FROM student s left join studentstests st on st.studentid=s.id
		WHERE s.activeflag IS true
			AND	st.activeflag is true		
		    <if test="completedStatusId != null" >
				AND	st.status = #{completedStatusId}
		    </if>		
			AND	st.testsessionId = #{testSessionId} 
	</select>

	<select id="getCompletedAndEnrolledStudentsCount" resultType="java.lang.Integer">
		SELECT count(*)
		FROM student s left join studentstests st on st.studentid=s.id
		inner join enrollment enrl on s.id = enrl.studentid
		WHERE s.activeflag IS true
			AND	st.activeflag is true
			AND enrl.activeflag is true 		
			AND	st.status = #{completedStatusId}	
			AND	st.testsessionId = #{testSessionId} 
	</select>
		
	<select id="findByRosterAndTestSession" resultMap="studentTestSessionDtoMap">
	  SELECT distinct s.id as studentid, s.statestudentidentifier, s.legalfirstname, s.legalmiddlename, 
	   s.legallastname, s.generationcode, s.dateofbirth, 
	   s.createddate as studentcreateddate, s.modifieddate as studentmodifieddate,
	          s.gender, s.firstlanguage, s.comprehensiverace, s.primarydisabilitycode,
	          s.username, s.password, s.synced,
	          s.createduser as studentcreateduser, s.activeflag as studentactiveflag,
	          s.modifieduser as studentmodifieduser,
	   st.id as studenttestid, st.testid, st.testcollectionid, st.status, st.testsessionid,
	   st.createddate as studenttestcreateddate, st.createduser studenttestcreateduser,
	   st.activeflag as studenttestactiveflag, st.modifieduser as studenttestmodifieduser,
	    st.modifieddate as studenttestmodifieddate
	  FROM   student s 
	   inner join enrollment en on s.id = en.studentid and en.currentschoolyear = #{currentSchoolYear}
	   inner join organizationtreedetail orgtree on orgtree.schoolid = en.attendanceschoolid 
	   left join enrollmentsrosters enr on en.id = enr.enrollmentid AND enr.activeflag IS true 
	   left join roster r on r.id = enr.rosterid AND r.activeflag IS true 
	   left join studentstests st on st.studentid=s.id 
	   <if test="currentSchoolYear != null">
	   	left join testsession ts on ts.id=st.testsessionid and ts.schoolyear = #{currentSchoolYear}
	   </if>
	  WHERE  s.activeflag IS true
	  AND (en.activeflag IS true OR (en.activeflag IS false AND en.exitwithdrawaltype IS NOT null))
	  AND  st.activeflag is true
	  <if test="assessmentProgramAbbr == 'KAP'">
	    AND st.status != (
	      select id
		  from category
  		  where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
	    )
	  </if>
	  <!--  Used by 2 services -->
	     <if test="rosterIds != null" >
	   AND  r.id= ANY(ARRAY
	   					 <foreach collection="rosterIds" item="rosterId" open="[" close="]" separator=",">
					       #{rosterId}
					     </foreach>
					   ) 
	     </if>
	     <if test="completedStatusId != null" >
	   AND  st.status = #{completedStatusId}
	     </if>  
	  AND  (st.testsessionId = #{testSessionId}  or st.transferedtestsessionid = #{testSessionId})
	  AND (orgtree.schoolid = #{organizationId}
			OR orgtree.districtid = #{organizationId}
			OR orgtree.stateid = #{organizationId})
	  order by s.legallastname, s.legalfirstname , s.legalmiddlename asc
	 </select>
    
    <select id="findById" resultType="Student">
        SELECT *
        FROM student
        WHERE id = #{studentId}
    </select>
    
    <select id="checkIfDLMByEnrollmentId" resultType="INTEGER" parameterType="long">
    	<!-- select count(*)
		from student
		where id = (select studentid from enrollment where id=#{enrollmentId,jdbcType=BIGINT}) 
			and assessmentprogramid=(select id from assessmentprogram where abbreviatedname='DLM')  -->
			
			SELECT count(DISTINCT st.id) FROM enrollment e
			JOIN student st ON st.id = e.studentid
            JOIN studentassessmentprogram sap ON e.studentid = sap.studentid
            WHERE sap.assessmentprogramid = (SELECT id
                                  FROM assessmentprogram
                                  WHERE abbreviatedname = 'DLM' and activeflag  = true limit 1)
               AND e.id = #{enrollmentId,jdbcType=BIGINT}
               AND sap.activeflag = true
    </select>
     
	<select id="getAll" resultType="Student">
		SELECT * FROM student
	</select>
	
	<select id="getStudentDetailsById" resultType="Student" parameterType="map">
	select * from student where id = #{studentId,jdbcType=BIGINT}
	</select>
	
	<select id="getStudentStateName" resultType="String" parameterType="map">
	select o.organizationname from student s 
	join organization o on s.stateid = o.id
	where s.id = #{studentId,jdbcType=BIGINT}
	</select>

  <sql id="Update_By_Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Jun 08 14:38:13 CDT 2012.
    -->
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>	
  <update id="update" parameterType="Student">
	UPDATE student SET
		id=#{id}, stateStudentIdentifier=#{stateStudentIdentifier},
		legalFirstName=#{legalFirstName},
		legalMiddleName=#{legalMiddleName}, legalLastName=#{legalLastName},
		generationCode=#{generationCode},
		comprehensiveRace=#{comprehensiveRace},
		primaryDisabilityCode=#{primaryDisabilityCode},
		firstLanguage=#{firstLanguage},
		dateOfBirth=#{dateOfBirth},
		gender=#{gender},
		synced=#{synced},
		createdDate=#{createdDate}, modifiedDate=#{modifiedDate}, username=#{username}, password=#{password},
	    modifieduser = #{modifiedUser},
	    activeflag = #{activeFlag},
	    elabandid = #{elaBandId},
	    writingbandid = #{writingBandId},
	    commbandid = #{commBandId}, 
	    finalelabandid = #{finalElaBandId},
	    mathbandid = #{mathBandId},
	    finalmathbandid = #{finalMathBandId},
	    scibandid = #{sciBandId},
	    finalscibandid = #{finalSciBandId},
	    hispanicethnicity = #{hispanicEthnicity},
	    esolparticipationcode = #{esolParticipationCode},
	    esolprogramentrydate = #{esolProgramEntryDate},
	    esolprogramendingdate = #{esolProgramEndingDate},
	    usaentrydate = #{usaEntryDate} 
	WHERE id = #{id}
  </update>
  
  <update id="updateByExampleSelective" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Jun 08 14:38:13 CDT 2012.
    -->
    update public.student st
    <set >
      <if test="record.legalFirstName != null" >
        legalfirstname = #{record.legalFirstName,jdbcType=VARCHAR},
      </if>
      <if test="record.legalMiddleName != null" >
        legalmiddlename = #{record.legalMiddleName,jdbcType=VARCHAR},
      </if>
      <if test="record.legalLastName != null" >
        legallastname = #{record.legalLastName,jdbcType=VARCHAR},
      </if>
      <if test="record.generationCode != null" >
        generationcode = #{record.generationCode,jdbcType=VARCHAR},
      </if>
      <if test="record.dateOfBirth != null" >
        dateofbirth = #{record.dateOfBirth,jdbcType=DATE},
      </if>
      <if test="record.stateStudentIdentifier != null">
        statestudentidentifier = #{record.stateStudentIdentifier,jdbcType=VARCHAR},
      </if>
      <if test="record.createdDate != null" >
        createdDate = #{record.createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifiedDate != null" >
        modifiedDate = #{record.modifiedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifiedUser != null" >
      	modifieduser = #{record.modifiedUser},
      </if>
      <if test="record.gender != null" >
        gender = #{record.gender,jdbcType=INTEGER},
      </if>
      <if test="record.firstLanguage != null" >
        firstlanguage = #{record.firstLanguage,jdbcType=VARCHAR},
      </if>
      <if test="record.comprehensiveRace != null" >
        comprehensiverace = #{record.comprehensiveRace,jdbcType=INTEGER},
      </if>
      <if test="record.primaryDisabilityCode != null" >
        primarydisabilitycode = #{record.primaryDisabilityCode,jdbcType=VARCHAR},
      </if>     
      <if test="record.username != null" >
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null" >
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.synced != null">
        synced = #{record.synced, jdbcType=BOOLEAN},
      </if>
      <if test="record.elaBandId != null">
        elabandid = #{record.elaBandId, jdbcType=BIGINT},
      </if>
      <if test="record.writingBandId != null">
        writingbandid = #{record.writingBandId, jdbcType=BIGINT},
      </if>
      <if test="record.commBandId != null">
        commbandid = #{record.commBandId, jdbcType=BIGINT},
      </if>      
      <if test="record.finalElaBandId != null">
        finalelabandid = #{record.finalElaBandId, jdbcType=BIGINT},
      </if>
      <if test="record.mathBandId != null">
        mathbandid = #{record.mathBandId, jdbcType=BIGINT},
      </if>      
      <if test="record.finalMathBandId != null">
        finalmathbandid = #{record.finalMathBandId, jdbcType=BIGINT},
      </if>
      <if test="record.sciBandId != null">
        scibandid = #{record.sciBandId, jdbcType=BIGINT},
      </if>      
      <if test="record.finalSciBandId != null">
        finalscibandid = #{record.finalSciBandId, jdbcType=BIGINT},
      </if>
      <if test="record.hispanicEthnicity != null">       
         hispanicethnicity = #{record.hispanicEthnicity, jdbcType=VARCHAR},
      </if>
      <if test="record.esolParticipationCode != null">       
         esolparticipationcode = #{record.esolParticipationCode, jdbcType=VARCHAR},
      </if>
      <if test="record.esolProgramEntryDate != null">       
         esolprogramentrydate = #{record.esolProgramEntryDate, jdbcType=TIMESTAMP},
      </if>
      <if test="record.esolProgramEndingDate != null">       
         esolprogramendingdate = #{record.esolProgramEndingDate, jdbcType=TIMESTAMP},
      </if>
      <if test="record.usaEntryDate != null">       
         usaentrydate = #{record.usaEntryDate, jdbcType=TIMESTAMP},
      </if>
      <if test="record.profileStatus != null" >
        profilestatus = #{record.profileStatus,jdbcType=VARCHAR},
      </if>       
	   activeflag = #{record.activeFlag}
    </set>
    <if test="example != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>	
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 26 20:33:35 CDT 2012.
    -->
    st.id, st.statestudentidentifier, st.legalfirstname, st.legalmiddlename, st.legallastname,
     st.generationcode,
     st.comprehensiveRace,primaryDisabilityCode, 
     st.firstLanguage,
    st.dateofbirth, st.createdDate, st.modifiedDate, st.gender, st.username, st.password, st.synced,
    st.hispanicEthnicity, st.stateId, st.source as sourceType, st.externalid
  </sql>
  <sql id="Example_Where_Clause" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Thu Apr 26 20:33:35 CDT 2012.
    -->
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix=" " suffix=" " prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
	<select id="getByCriteria" parameterType="edu.ku.cete.domain.student.StudentExample" resultType="Student">
		<!--
		 WARNING - @mbggenerated
		 This element is automatically generated by MyBatis Generator, do not modify.
		 This element was generated on Thu Apr 26 20:33:35 CDT 2012.
		-->
	   select
	   <if test="distinct" >
	     distinct
	   </if>
	   <include refid="Base_Column_List" />
	   from public.student st, enrollment en
	   where st.id = en.studentid
		<trim prefix=" " suffix=" " prefixOverrides="(">
			<trim prefix=" AND " prefixOverrides="WHERE">
			    <if test="_parameter != null" >
			      <include refid="Example_Where_Clause" />
			    </if>
			</trim> 
		</trim> 
	   <if test="limit != null">
	       limit #{limit}
	   </if>
	   <if test="orderByClause != null" >
	     order by ${orderByClause}
	   </if>
	 </select>

	 <select id="getByCriteriaForResync" parameterType="edu.ku.cete.domain.student.StudentExample" resultType="Student">
	   <!--
	     WARNING - @mbggenerated
	     This element is automatically generated by MyBatis Generator, do not modify.
	     This element was generated on Thu Apr 26 20:33:35 CDT 2012.
	   -->
	   select
	   <if test="distinct" >
	     distinct
	   </if>
	   <include refid="Base_Column_List" />
	   from public.student st, enrollment en, enrollmentsrosters er, roster r
	   where st.id = en.studentid AND en.id = er.enrollmentid AND er.rosterid = r.id
		<trim prefix=" " suffix=" " prefixOverrides="(">
			<trim prefix=" AND " prefixOverrides="WHERE">
			    <if test="_parameter != null" >
			      <include refid="Example_Where_Clause" />
			    </if>
			</trim> 
		</trim> 
	   <if test="limit != null">
	       limit #{limit}
	   </if>
	   <if test="orderByClause != null" >
	     order by ${orderByClause}
	   </if>
	 </select>
	<select id="verifyStateStudentIdentifier" resultType="Boolean">
		select true from enrollment en,student st 
		where
		st.id = en.studentid and
		st.statestudentidentifier = #{stateStudentIdentifier} 
        <if test="attendanceSchoolIds != null" >
        and attendanceSchoolId in 
	        <foreach collection="attendanceSchoolIds" item="attendanceSchoolId" open="(" close=")" separator="," >
	        	#{attendanceSchoolId}
	        </foreach>
        </if>       		
		 limit 1;
	</select>
	
	<select id="verifyStateStudentIdentifiers" resultType="String">
		select distinct st.statestudentidentifier from enrollment en,student st 
		where
		st.id = en.studentid 
        <if test="attendanceSchoolIds != null" >
        and attendanceSchoolId in 
	        <foreach collection="attendanceSchoolIds" item="attendanceSchoolId" open="(" close=")" separator="," >
	        	#{attendanceSchoolId}
	        </foreach>
        </if>       		
        <if test="stateStudentIdentifiers != null" >
        and st.statestudentidentifier in 
	        <foreach collection="stateStudentIdentifiers" item="stateStudentIdentifier" open="(" close=")" separator="," >
	        	#{stateStudentIdentifier}
	        </foreach>
        </if>       		
	</select>
	
	<select id="verifyStudentsExist" resultType="Student">
		select distinct st.statestudentidentifier,st.id from enrollment en,student st 
		where
		st.id = en.studentid 
        <if test="attendanceSchoolIds != null" >
        and attendanceSchoolId in 
	        <foreach collection="attendanceSchoolIds" item="attendanceSchoolId" open="(" close=")" separator="," >
	        	#{attendanceSchoolId}
	        </foreach>
        </if>       		
        <if test="stateStudentIdentifiers != null" >
        and st.statestudentidentifier in 
	        <foreach collection="stateStudentIdentifiers" item="stateStudentIdentifier" open="(" close=")" separator="," >
	        	#{stateStudentIdentifier}
	        </foreach>
        </if>       		
	</select>	
	
	<select id="findByIdAndSynced" resultType="Student">
	select
	st.id, st.stateStudentIdentifier,  st.legalFirstName, 
    st.legalMiddleName, st.legalLastName, st.generationCode,
    st.comprehensiveRace,st.primaryDisabilityCode,
    st.firstLanguage, st.dateOfBirth, st.gender,
    st.createdDate, st.synced,
    st.modifiedDate, st.username, st.password
    from student st 
	where
    st.id in 
	<foreach collection="studentIds" item="studentId" open="(" close=")" separator="," >
		#{studentId}
	</foreach>
    <if test="synced != null" >
     	and st.synced = #{synced} 
    </if>       		
	
	</select>
	
	<select id="getStudentIdsByEnrollmentRosterIds" resultType="java.lang.Long" >
	  	SELECT e.studentid AS enrollmentRosterId FROM enrollmentsrosters er JOIN enrollment e ON er.enrollmentid = e.id
		WHERE er.id in
	  		<foreach collection="enrollmentRosterIds" item="enrollmentRosterId" open="(" close=")" separator="," >
				#{enrollmentRosterId}
			</foreach>
	</select>
	
	<select id="getStudentInformationRecordsForDLM" resultMap="studentRecordsForDLMMap" >
	    SELECT
		    <if test="distinct">
		      distinct
		    </if>
		    <include refid="Extended_Student_With_Roster_Column_List" />
	    FROM
  		    Organization attendanceSchool, OrganizationType ot, 
	    	Student st
	    	JOIN enrollment enrl ON  enrl.Studentid = st.id 
    		<if test="hasViewAllPermission">
	    	LEFT JOIN 
	    	</if>
    		<if test="! hasViewAllPermission">
	    	JOIN 
	    	</if> 
			enrollmentsRosters enrlRoster
	        ON  (
	        	enrl.id=enrlRoster.enrollmentid
	        )
    		<if test="hasViewAllPermission">
	    	LEFT JOIN 
	    	</if>
    		<if test="! hasViewAllPermission">
	    	JOIN 
	    	</if> 
	    	Roster r
	    	ON	( r.id = enrlRoster.rosterId )
	    	<if test="! hasViewAllPermission">
	    	AND r.teacherId=#{educatorId}
	    	</if>	
	    	LEFT JOIN GradeCourse gc ON (enrl.currentgradelevel = gc.id)
         	      	<!-- TODO Performance Fix change these as inner join and move these inside the inner view  enrlRosterDetail-->
	    	LEFT JOIN aartuser au ON (r.teacherId = au.id)
	    	<!-- LEFT JOIN ContentArea stateSubjectArea ON (r.stateSubjectAreaId = stateSubjectArea.id) -->
	    	LEFT JOIN Category courseenrollment ON (r.courseenrollmentstatusid = courseenrollment.id)
	    	LEFT JOIN survey survey ON (survey.studentid = st.id and survey.activeflag = true)
	    	LEFT JOIN Category surveystatuscategory ON (survey.status = surveystatuscategory.id)
	    	LEFT JOIN (select distinct studentid from studentprofileitemattributevalue spiav where spiav.activeflag = true and lower(spiav.selectedvalue) = 'true') as apstatus 
	    		on (apstatus.studentid = st.id)
	    	WHERE attendanceSchool.id = enrl.attendanceschoolid
    		AND attendanceSchool.organizationtypeid = ot.id
    		AND enrl.activeflag is true 
	    	<if test="attendanceSchoolIds != null">
	    	    AND enrl.attendanceschoolid in 
			    <foreach collection="attendanceSchoolIds"
				    item="attendanceSchoolId" open="(" close=")" separator="," >
				    #{attendanceSchoolId}
			    </foreach>
		    </if>
	    	<if test="userOrganizationIds != null">
	    	    AND enrl.attendanceschoolid in 
			    <foreach collection="userOrganizationIds"
				    item="userOrganizationId" open="(" close=")" separator="," >
				    #{userOrganizationId}
			    </foreach>
		    </if>
	    	<include refid="Extended_Roster_Where_Clause" />		    
		    <if test="orderByClause != null">
		      ORDER BY ${orderByClause}
		    </if>
	    limit #{limit}
	    offset #{offset}
	</select>
	
	<select id="getStudentInformationRecordsCountForDLM" 
	  	parameterType="edu.ku.cete.domain.enrollment.EnrollmentExample" resultType="java.lang.Integer" >
		select count(st.id)
		FROM
  		    Organization attendanceSchool, OrganizationType ot, 
	    	Student st
	    	JOIN enrollment enrl ON  enrl.Studentid = st.id 
    		<if test="hasViewAllPermission">
	    	LEFT JOIN 
	    	</if>
    		<if test="! hasViewAllPermission">
	    	JOIN 
	    	</if> 
			enrollmentsRosters enrlRoster
	        ON  (
	        	enrl.id=enrlRoster.enrollmentid
	        )
    		<if test="hasViewAllPermission">
	    	LEFT JOIN 
	    	</if>
    		<if test="! hasViewAllPermission">
	    	JOIN 
	    	</if> 
	    	Roster r
	    	ON	( r.id = enrlRoster.rosterId )
	    	<if test="! hasViewAllPermission">
	    	AND r.teacherId=#{educatorId}
	    	</if>	
         	LEFT JOIN GradeCourse gc ON (enrl.currentgradelevel = gc.id)
         	<!-- TODO Performance Fix change these as inner join and move these inside the inner view  enrlRosterDetail-->
	    	LEFT JOIN aartuser au ON (r.teacherId = au.id)
	    	<!-- LEFT JOIN ContentArea stateSubjectArea ON (r.stateSubjectAreaId = stateSubjectArea.id) -->
	    	LEFT JOIN Category courseenrollment ON (r.courseenrollmentstatusid = courseenrollment.id)
	    	LEFT JOIN survey survey ON (survey.studentid = st.id and survey.activeflag = true)
	    	LEFT JOIN Category surveystatuscategory ON (survey.status = surveystatuscategory.id)
	    	LEFT JOIN (select distinct studentid 
	    				from profileitemattribute pia 
                		INNER JOIN profileitemattributenameattributecontainer pianc ON pia.id=pianc.attributenameid
                		INNER JOIN studentprofileitemattributevalue spiav ON pianc.id = spiav.profileitemattributenameattributecontainerid
                		where spiav.activeflag = true and lower(spiav.selectedvalue) = 'true') as apstatus 
	    		on (apstatus.studentid = st.id)
	    	WHERE attendanceSchool.id = enrl.attendanceschoolid
    		AND attendanceSchool.organizationtypeid = ot.id
    		AND enrl.activeflag is true
	    	<if test="attendanceSchoolIds != null">
	    	    AND enrl.attendanceschoolid in 
			    <foreach collection="attendanceSchoolIds"
				    item="attendanceSchoolId" open="(" close=")" separator="," >
				    #{attendanceSchoolId}
			    </foreach>
		    </if>
	    	<if test="userOrganizationIds != null">
	    	    AND enrl.attendanceschoolid in 
			    <foreach collection="userOrganizationIds"
				    item="userOrganizationId" open="(" close=")" separator="," >
				    #{userOrganizationId}
			    </foreach>
		    </if>		    
	    	<include refid="Extended_Roster_Where_Clause" />
	</select>
	
	<select id="getSimplifiedStudentInformationRecordsCountForDLM" 
	  	parameterType="edu.ku.cete.domain.enrollment.EnrollmentExample" resultType="java.lang.Integer" >
		 select count(1) from (
			 SELECT
			    <if test="distinct">
			      distinct
			    </if>
			    <include refid="Extended_Student_With_Roster_Column_List" />
		    FROM
	  		    Organization attendanceSchool, OrganizationType ot, 
		    	Student st
		    	JOIN enrollment enrl ON  enrl.Studentid = st.id 
	    		<if test="hasViewAllPermission">
		    	LEFT JOIN 
		    	</if>
	    		<if test="! hasViewAllPermission">
		    	JOIN 
		    	</if> 
				enrollmentsRosters enrlRoster
		        ON  (
		        	enrl.id=enrlRoster.enrollmentid
		        )
	    		<if test="hasViewAllPermission">
		    	LEFT JOIN 
		    	</if>
	    		<if test="! hasViewAllPermission">
		    	JOIN 
		    	</if> 
		    	Roster r
		    	ON	( r.id = enrlRoster.rosterId )
		    	<if test="! hasViewAllPermission">
		    	AND r.teacherId=#{educatorId}
		    	</if>	
		    	LEFT JOIN GradeCourse gc ON (enrl.currentgradelevel = gc.id)
	         	     	<!-- TODO Performance Fix change these as inner join and move these inside the inner view  enrlRosterDetail-->
		    	LEFT JOIN aartuser au ON (r.teacherId = au.id)
		    <!-- 	LEFT JOIN ContentArea stateSubjectArea ON (r.stateSubjectAreaId = stateSubjectArea.id) -->
		    	LEFT JOIN Category courseenrollment ON (r.courseenrollmentstatusid = courseenrollment.id)
		    	LEFT JOIN survey survey ON (survey.studentid = st.id and survey.activeflag = true)
		    	LEFT JOIN Category surveystatuscategory ON (survey.status = surveystatuscategory.id)
		    	LEFT JOIN (select distinct studentid 
		    				from profileitemattribute pia 
	                		INNER JOIN profileitemattributenameattributecontainer pianc ON pia.id=pianc.attributenameid
	                		INNER JOIN studentprofileitemattributevalue spiav ON pianc.id = spiav.profileitemattributenameattributecontainerid
	                		where spiav.activeflag = true and lower(spiav.selectedvalue) = 'true') as apstatus 
		    		on (apstatus.studentid = st.id)
		    	WHERE attendanceSchool.id = enrl.attendanceschoolid
	    		AND attendanceSchool.organizationtypeid = ot.id
	    		AND enrl.activeflag is true
		    	<if test="attendanceSchoolIds != null">
		    	    AND enrl.attendanceschoolid in 
				    <foreach collection="attendanceSchoolIds"
					    item="attendanceSchoolId" open="(" close=")" separator="," >
					    #{attendanceSchoolId}
				    </foreach>
			    </if>
		    	<if test="userOrganizationIds != null">
		    	    AND enrl.attendanceschoolid in 
				    <foreach collection="userOrganizationIds"
					    item="userOrganizationId" open="(" close=")" separator="," >
					    #{userOrganizationId}
				    </foreach>
			    </if>		    
		    	<include refid="Extended_Roster_Where_Clause" />		    
			    <if test="orderByClause != null">
			      ORDER BY ${orderByClause}
			    </if>
			limit #{simplifiedLimit}
			) studentrecords  
	</select>
	<select id="getBySsidAndState" resultType="Student" parameterType="map">
		SELECT distinct
	   		<include refid="Base_Column_List" />
		FROM student st
		WHERE st.stateStudentIdentifier = #{stateStudentIdentifier}
			and st.stateId = #{stateId}
			and st.activeflag is true
	</select>

	<sql id="Student_Info_Where_Clause">
		<if test="studentInformationRecordCriteriaMap.stateStudentIdentifier != null">
			AND statestudentidentifier ilike #{studentInformationRecordCriteriaMap.stateStudentIdentifier}
		</if>
		<if test="studentInformationRecordCriteriaMap.legalFirstName != null">
			AND legalfirstname ilike #{studentInformationRecordCriteriaMap.legalFirstName}
		</if>
		<if test="studentInformationRecordCriteriaMap.legalMiddleName != null">
			AND legalmiddlename ilike #{studentInformationRecordCriteriaMap.legalMiddleName}
		</if>   	
		<if test="studentInformationRecordCriteriaMap.legalLastName != null">
			AND legallastname ilike #{studentInformationRecordCriteriaMap.legalLastName}
		</if>	
		<if test="studentInformationRecordCriteriaMap.generationCode != null">
			AND generationcode ilike #{studentInformationRecordCriteriaMap.generationCode}
		</if>
		<if test="studentInformationRecordCriteriaMap.genderString != null">
			AND CAST(gender AS TEXT) ilike #{studentInformationRecordCriteriaMap.genderString}
		</if>
		<if test="studentInformationRecordCriteriaMap.dateOfBirth != null">
			AND to_char(dateofbirth, 'MM/DD/YYYY') ilike #{studentInformationRecordCriteriaMap.dateOfBirth} 
		</if>
		<if test="studentInformationRecordCriteriaMap.dateOfBirthStr != null">
			AND to_char(dateofbirth, 'MM/DD/YYYY') ilike #{studentInformationRecordCriteriaMap.dateOfBirthStr} 
		</if>
		<if test="studentInformationRecordCriteriaMap.firstLanguage != null">
			AND firstlanguage ilike #{studentInformationRecordCriteriaMap.firstLanguage}
		</if>  
		<if test="studentInformationRecordCriteriaMap.comprehensiveRace != null">
			AND comprehensiverace ilike #{studentInformationRecordCriteriaMap.comprehensiveRace}
		</if>
		<if test="studentInformationRecordCriteriaMap.primaryDisabilityCode != null">
			AND primarydisabilitycode ilike #{studentInformationRecordCriteriaMap.primaryDisabilityCode}
		</if>
		<if test="studentInformationRecordCriteriaMap.hispanicethnicity != null">
			AND hispanicethnicity ilike #{studentInformationRecordCriteriaMap.hispanicEthnicity}
		</if>
		<if test="studentInformationRecordCriteriaMap.studentId != null">
			AND (id || '') ilike #{studentInformationRecordCriteriaMap.studentId}
		</if>
		<if test="studentInformationRecordCriteriaMap.programName != null">
			AND programname ilike #{studentInformationRecordCriteriaMap.programName}
		</if>
		<if test="studentInformationRecordCriteriaMap.localStudentIdentifiers != null">
			AND localstudentidentifiers ilike #{studentInformationRecordCriteriaMap.localStudentIdentifiers}
   		</if>
	   	<if test="studentInformationRecordCriteriaMap.currentSchoolYears != null">
				AND currentschoolyears ilike #{studentInformationRecordCriteriaMap.currentSchoolYears}
	   	</if>
	 	<if test="studentInformationRecordCriteriaMap.residenceDistrictIdentifiers != null">
				AND residencedistrictidentifiers ilike #{studentInformationRecordCriteriaMap.residenceDistrictIdentifiers}
		</if>			
		<if test="studentInformationRecordCriteriaMap.attendanceSchoolNames != null">
				AND attendanceschoolnames ilike #{studentInformationRecordCriteriaMap.attendanceSchoolNames}
		</if>
		<if test="studentInformationRecordCriteriaMap.rosterIds != null">
				AND rosterids ilike #{studentInformationRecordCriteriaMap.rosterIds}
		</if>
		<if test="studentInformationRecordCriteriaMap.rosterNames != null">
				AND rosternames ilike #{studentInformationRecordCriteriaMap.rosterNames}
		</if>		
		<if test="studentInformationRecordCriteriaMap.attendanceSchoolDisplayIdentifiers != null">
				AND attendanceschooldisplayidentifiers ilike #{studentInformationRecordCriteriaMap.attendanceSchoolDisplayIdentifiers}
		</if>
		<if test="studentInformationRecordCriteriaMap.gradeCourseName != null">
				AND gradecoursename ilike #{studentInformationRecordCriteriaMap.gradeCourseName}
		</if>
		<if test="studentInformationRecordCriteriaMap.gradeCourseId != null">
				AND gradecourseid ilike #{studentInformationRecordCriteriaMap.gradeCourseId}
		</if>
		<if test="studentInformationRecordCriteriaMap.accessProfileStatus != null">
				AND accessprofilestatus ilike #{studentInformationRecordCriteriaMap.accessProfileStatus}
		</if>
		<if test="studentInformationRecordCriteriaMap.status != null">
				AND status ilike #{studentInformationRecordCriteriaMap.status}
		</if>
		<!-- During Changed - US16241  -->
		<if test="studentInformationRecordCriteriaMap.esolParticipationCode != null">
				AND esolparticipationcode ilike #{studentInformationRecordCriteriaMap.esolParticipationCode}
		</if>
		<!-- Changed for - US16942  -->
		<if test="studentInformationRecordCriteriaMap.aypSchoolNames != null">
				AND aypschoolnames ilike #{studentInformationRecordCriteriaMap.aypSchoolNames}
		</if>
		<if test="studentInformationRecordCriteriaMap.stateStudentIdentifier != null">
			AND statestudentidentifier ilike #{studentInformationRecordCriteriaMap.stateStudentIdentifier}
		</if>
		<if test="studentInformationRecordCriteriaMap.accountabilityDistrictName != null">
			AND accountabilitydistrictname ilike #{studentInformationRecordCriteriaMap.accountabilityDistrictName}
		</if>
		<if test="studentInformationRecordCriteriaMap.subjectName != null">
			AND (
           CASE
                      WHEN sa.subjectareacode = 'D74' THEN ( SELECT NAME FROM   contentarea WHERE  abbreviatedname = 'M')
                      WHEN sa.subjectareacode = 'SELAA' THEN ( SELECT NAME FROM   contentarea WHERE  abbreviatedname = 'ELA')
                      WHEN sa.subjectareacode = 'SHISGOVA' THEN(SELECT NAME FROM   contentarea WHERE  abbreviatedname = 'SS')
                      WHEN sa.subjectareacode = 'SSCIA' THEN(SELECT NAME FROM   contentarea WHERE  abbreviatedname = 'Sci')
                      ELSE
                            (
                            SELECT     ca.NAME FROM contentarea ca
                            INNER JOIN contentareatesttypesubjectarea cattsa ON         cattsa.contentareaid=ca.id
                            INNER JOIN testtypesubjectarea ttsa ON         cattsa.testtypesubjectareaid = ttsa.id
                            WHERE ttsa.subjectareaid = sa.id AND ttsa.testtypeid =tt.id
                            AND cattsa.activeflag = true AND ttsa.activeflag = true and ca.activeflag = true )
					           END) ilike #{studentInformationRecordCriteriaMap.subjectName}
		</if>
		<if test="studentInformationRecordCriteriaMap.testTypeName != null">
			AND testtypename ilike #{studentInformationRecordCriteriaMap.testTypeName}
		</if>	
	</sql>
		
<resultMap id="viewStudentInfo" type="edu.ku.cete.web.ViewStudentDTO">
			<result property="id" column="id" jdbcType="BIGINT"/>
			<result property="stateStudentIdentifier" column="statestudentidentifier" jdbcType="VARCHAR" />
			<result property="legalFirstName" column="legalfirstname" jdbcType="VARCHAR" />
			<result property="legalLastName" column="legallastname" jdbcType="VARCHAR" />
			<result property="legalMiddleName" column="legalmiddlename" jdbcType="VARCHAR" />
			<result property="legalLastName" column="legallastname" jdbcType="VARCHAR" />
			<result property="generationCode" column="generationcode" jdbcType="VARCHAR" />
			<result property="dateOfBirth" column="dateofbirth" jdbcType="TIMESTAMP" />
			<result property="genderString" column="genderString" jdbcType="VARCHAR" />
			<result property="firstLanguage" column="firstlanguage" jdbcType="VARCHAR" />
			<result property="comprehensiveRace" column="comprehensiverace" jdbcType="VARCHAR" />
			<result property="primaryDisabilityCode" column="primarydisabilitycode" jdbcType="VARCHAR" />
			<result property="hispanicEthnicity" column="hispanicethnicity" jdbcType="VARCHAR" />
			<result property="assessmentProgramId" column="assessmentprogramid" jdbcType="BIGINT" />
			<result property="programName" column="programname" jdbcType="VARCHAR" />
			<result property="localStudentIdentifiers" column="localstudentidentifiers" jdbcType="VARCHAR" />
			<result property="currentSchoolYears" column="currentschoolyears" jdbcType="VARCHAR" />
			<result property="residenceDistrictIdentifiers" column="residencedistrictidentifiers" jdbcType="VARCHAR" />
			<result property="attendanceSchoolDisplayIdentifiers" column="attendanceschooldisplayidentifiers" jdbcType="VARCHAR" />
			<result property="attendanceSchoolNames" column="attendanceschoolnames" jdbcType="VARCHAR" />
			<result property="rosterIds" column="rosterids" jdbcType="VARCHAR" />
			<result property="rosterNames" column="rosternames" jdbcType="VARCHAR" />			
			<result property="accessProfileStatus" column="accessprofilestatus" jdbcType="VARCHAR" />
			<result property="status" column="status" jdbcType="VARCHAR" />
			<result property="gradeCourseId" column="gradecourseid" jdbcType="VARCHAR" />
			<result property="gradeCourseName" column="gradecoursename" jdbcType="VARCHAR" />
	
			<result property="enrlModifiedDate" column="modifieddate"/>
     		<result property="enrlModifiedUser" column="modifieduser" />
     		<result property="sourceType" column="sourcetype" jdbcType="VARCHAR" />
     	
     		<result property="esolParticipationCode" column="esolparticipationcode" jdbcType="VARCHAR" />
			<result property="esolParticipationCodeStr" column="esolparticipationcodestr" jdbcType="VARCHAR" />
			<result property="residenceDistrictIdentifiers" column="residencedistrictidentifier" jdbcType="VARCHAR" />
			<result property="schoolEntryDate" column="schoolentrydate" jdbcType="TIMESTAMP" />
			<result property="districtEntryDate" column="districtentrydate" jdbcType="TIMESTAMP" />
			<result property="stateEntryDate" column="stateentrydate" jdbcType="TIMESTAMP" />
			<result property="giftedStudent" column="giftedstudent" jdbcType="BOOLEAN" />
			<result property="dlmStudent" column="dlmstatus" jdbcType="BOOLEAN" />
			<result property="stateName" column="statename" jdbcType="VARCHAR" />
			<result property="districtName" column="districtname" jdbcType="VARCHAR" />
			<result property="schoolName" column="schoolname" jdbcType="VARCHAR" />
			<result property="schoolId" column="schoolid" jdbcType="VARCHAR" />
			<result property="aypSchoolId" column="aypschoolidentifier" jdbcType="VARCHAR" />
			<result property="firstLanguageCode" column="firstlanguagecode" jdbcType="VARCHAR" />
			
			<result property="subjectName" column="subjectname" jdbcType="VARCHAR" />
			<result property="courseName" column="coursename" jdbcType="VARCHAR" />
			<result property="educatorName" column="educatorname" jdbcType="VARCHAR" />
			<result property="rosterName" column="rostername" jdbcType="VARCHAR" />
			<result property="groupingIndicator1" column="groupingindicator1" jdbcType="VARCHAR" />
			<result property="groupingIndicator2" column="groupingindicator2" jdbcType="VARCHAR" />
						
			<result property="finalElaBandId" column="finalelabandid" jdbcType="BIGINT" />
			<result property="finalMathBandId" column="finalmathbandid" jdbcType="BIGINT" />
			<result property="writingBandId" column="writingbandid" jdbcType="BIGINT" />
			<result property="stateModel" column="statemodel" jdbcType="VARCHAR" />
			<!-- During Changed - US16289 -->
			<result property="abbreviatedName" column="abbreviatedname" jdbcType="VARCHAR" />
			<result property="studentAssessmentProgram" column="studentassessmentprogram" jdbcType="VARCHAR" />
			<result property="testTypeCode" column="testtypecode" jdbcType="VARCHAR" />
			<result property="subjectCode" column="subjectcode" jdbcType="VARCHAR" />
			<result property="subjectCodeId" column="subjectcodeid" jdbcType="VARCHAR" />
			<result property="subjectName" column="subjectName" jdbcType="VARCHAR" />
			<result property="testTypeName" column="testtypename" jdbcType="VARCHAR" />
			<result property="aypSchoolNames" column="aypschoolnames" jdbcType="VARCHAR" />
			<result property="accountabilityDistrictName" column="accountabilitydistrictname" jdbcType="VARCHAR" />
			<result property="accountabilityDistrictIdentifier" column="accountabilitydistrictidentifier" jdbcType="VARCHAR" />
			<result property="totalRecords" column="totalrecords" jdbcType="INTEGER" />
			<result property="username" column="username" jdbcType="VARCHAR" />
			<result property="password" column="password" jdbcType="VARCHAR" />
	  </resultMap>
	  
	  <sql id="viewStudentInformationRecordsSql">
	  	SELECT distinct st.id, st.statestudentidentifier, st.legalfirstname, st.legalmiddlename, 
	       st.legallastname, st.generationcode, st.dateofbirth, st.gender, 
	 	   (CASE WHEN st.gender=1 THEN 'Male'
				WHEN st.gender=0 THEN 'Female' ELSE ''
				END) as genderString,
	       st.profilestatus as accessprofilestatus,	   	  
	    	(CASE WHEN 'DLM' NOT IN (SELECT ap.abbreviatedname FROM assessmentprogram ap INNER JOIN studentassessmentprogram sap ON sap.studentid = st.id AND ap.id = sap.assessmentprogramid AND sap.activeflag = TRUE) THEN 'Not Applicable' 
				ELSE
			    	(select CASE when not exists (select status from survey where studentid = st.id and activeflag = true) 
	                                  then 'NOT STARTED'
	                                  else
								    	   (select CASE WHEN status is null  
											THEN 'NOT STARTED'
											ELSE (select categoryname from category where id=status) 
									   		END				
									   		from survey where studentid = st.id and activeflag = true)
 					end)
		   		END) as status,
	       (select categoryname from category where categorycode = st.firstlanguage and categorytypeid = (select id from categorytype where typecode = 'FIRST_LANGUAGE')) as firstlanguage, 
	       (select categoryname from category where categorycode = st.comprehensiverace and categorytypeid = (select id from categorytype where typecode = 'COMPREHENSIVE_RACE')) as comprehensiverace, 
	       (select categoryname from category where upper(categorycode) = upper(st.primarydisabilitycode) and categorytypeid = (select id from categorytype where typecode = 'PRIMARY_DISABILITY_CODES')) as primarydisabilitycode, 
	        st.hispanicethnicity, st.esolparticipationcode  	        
	       ,array_to_string(ARRAY(select currentgradelevel from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') as gradecourseid
	       ,array_to_string(ARRAY(select gc.name from enrollment enrl inner join gradecourse gc on enrl.currentgradelevel = gc.id where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') as gradecoursename
	       ,array_to_string(ARRAY(select localstudentidentifier from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') as localstudentidentifiers
	       ,array_to_string(ARRAY(select currentschoolyear from enrollment enrl where studentid = st.id  and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') as currentschoolyears
	       ,array_to_string(ARRAY(select residencedistrictidentifier from enrollment enrl where studentid = st.id  and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') as residencedistrictidentifiers
	       ,array_to_string(ARRAY(select displayidentifier from organization where id in (select distinct attendanceschoolid from enrollment enrl where studentid = st.id  and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true)),',') as attendanceschooldisplayidentifiers
	       ,array_to_string(ARRAY(select organizationname from organization where id in (select distinct attendanceschoolid from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true)),',') as attendanceschoolnames
	       ,array_to_string(array(SELECT organizationname FROM organization WHERE id IN (SELECT DISTINCT aypschoolid FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND             enrl.activeflag IS true)),',') AS aypschoolnames
	       ,array_to_string(ARRAY(select distinct rosterid from enrollmentsrosters where enrollmentid in (select distinct id from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true) and activeflag is true),',') as rosterids, st.activeflag
	       ,array_to_string(ARRAY(select distinct r.coursesectionname from roster r join enrollmentsrosters er on er.rosterid = r.id and r.activeflag is true where enrollmentid in (select distinct id from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true) and er.activeflag is true),',') as rosternames 	       
	       ,array_to_string(ARRAY(select distinct abbreviatedname from assessmentprogram ap inner join studentassessmentprogram sap on ap.id = sap.assessmentprogramid and  sap.studentid = st.id and sap.activeflag = true),', ') as programname 
	       ,case when array_to_string(ARRAY(select giftedstudent from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') = '' then null else 
		array_to_string(ARRAY(select giftedstudent from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') END as giftedstudent <!-- Case statement added because latest JDBC can't convert '' to boolean-->
		   ,array_to_string(array(SELECT attendanceschoolid FROM   enrollment enrl WHERE  studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true),',') AS schoolid
	    FROM (select distinct studentid, orglist.stateid from organizationtreedetail orglist 
<!-- 	    (select id from organization_children(#{orgChildrenById, jdbcType=BIGINT}) union select #{orgChildrenById, jdbcType=BIGINT}) orglist  -->
				inner join enrollment enrl on enrl.attendanceschoolid = orglist.schoolid 
				<if test="isTeacher">
					inner join enrollmentsrosters enrlr on (enrlr.enrollmentid = enrl.id and enrlr.activeflag is true)
					inner join roster rs on (enrlr.rosterid=rs.id and rs.teacherid = #{educatorId}) 
				</if>    
				WHERE enrl.activeflag is true AND enrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
					AND (orglist.schoolid = #{orgChildrenById,jdbcType=BIGINT}
				  	OR orglist.districtid = #{orgChildrenById,jdbcType=BIGINT}
				  	OR orglist.stateid = #{orgChildrenById,jdbcType=BIGINT})) as slist
		inner join student st on slist.studentid = st.id and st.stateid=slist.stateid
		inner join studentassessmentprogram sapm 
			on sapm.assessmentprogramid = #{userCurrentAssessmentProgramId,jdbcType=BIGINT} and 
			sapm.studentid = st.id and sapm.activeflag = true
	  </sql>
	  
	  <select id="getViewStudentInformationRecords" resultMap="viewStudentInfo" >
	 	select count(*) OVER() AS totalrecords, * from (<include refid="viewStudentInformationRecordsSql"/>) as std
	  where activeflag is true 	
 		<include refid="Student_Info_Where_Clause" />	
 		<!-- <if test="studentInformationRecordCriteriaMap.genderString != null">
			or cast(gender as char) ilike #{studentInformationRecordCriteriaMap.genderString}
		</if>  -->
 		<if test="sortByColumn != null">
    	ORDER BY
    		<choose>
	    		<when test="sortByColumn == 'id'">id</when>
	    		<when test="sortByColumn == 'legalLastName,legalFirstName,legalMiddleName'">legallastname, legalfirstname, legalMiddleName</when>
	      		<when test="sortByColumn == 'stateStudentIdentifier'">statestudentidentifier</when>
	      		<when test="sortByColumn == 'legalFirstName'">legalfirstname</when>
	      		<when test="sortByColumn == 'legalMiddleName'">legalMiddleName</when>
	      		<when test="sortByColumn == 'legalLastName'">legallastname</when>
	      		<when test="sortByColumn == 'generationCode'">generationcode</when>
	      		<when test="sortByColumn == 'dateOfBirthStr'">dateofbirth</when>
	      		<when test="sortByColumn == 'dateOfBirth'">dateofbirth</when>
	      		<when test="sortByColumn == 'genderString'">genderString</when>
	      		<when test="sortByColumn == 'accessProfileStatus'">accessprofilestatus</when>
	      		<when test="sortByColumn == 'status'">status</when> 
	      		<when test="sortByColumn == 'firstLanguage'">firstlanguage</when>
	      		<when test="sortByColumn == 'comprehensiveRace'">comprehensiverace</when>
	      		<when test="sortByColumn == 'primaryDisabilityCode'">primarydisabilitycode</when> 
	      		<when test="sortByColumn == 'gradeCourseId'">gradecourseid</when>
	      		<when test="sortByColumn == 'gradeCourseName'">gradecoursename</when> 
	      		<when test="sortByColumn == 'currentSchoolYears'">currentschoolyears</when>
	      		<when test="sortByColumn == 'localStudentIdentifiers'">localstudentidentifiers</when> 
	      		<when test="sortByColumn == 'residenceDistrictIdentifiers'">residencedistrictidentifiers</when>
	      		<when test="sortByColumn == 'attendanceSchoolDisplayIdentifiers'">attendanceschooldisplayidentifiers</when>
	      		<when test="sortByColumn == 'attendanceSchoolNames'">attendanceschoolnames</when>
	      		<when test="sortByColumn == 'programName'">programname</when>
	      		<when test="sortByColumn == 'giftedStudent'">giftedStudent</when>
	      		<when test="sortByColumn == 'hispanicEthnicity'">hispanicEthnicity</when>
	      		<when test="sortByColumn == 'esolParticipationCode'">esolParticipationCode</when>
	      		<when test="sortByColumn == 'rosterIds'">rosterids</when>
	      		<when test="sortByColumn == 'rosterNames'">rosternames</when>
	      		<when test="sortByColumn == 'aypSchoolNames'">aypschoolnames</when> 
	      	</choose>
    	 	<if test="sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
		</if> 
			
		<if test="limit != null and limit != 0 ">
			limit #{limit} 
		</if>
		<if test="offset!=null">
			offset #{offset};
		</if>
		
	</select>
	<select id="getViewStudentInformationRecordsForDLM" resultMap="viewStudentInfo" >
	 	select count(*) OVER() AS totalrecords, * from (<include refid="viewStudentInformationRecordsSql"/>) as std
		 
	  where activeflag is true
 		<include refid="Student_Info_Where_Clause" />	
 		<!-- <if test="studentInformationRecordCriteriaMap.genderString != null">
			or cast(gender as char) ilike #{studentInformationRecordCriteriaMap.genderString}
		</if>  -->
 		<if test="sortByColumn != null">
    	ORDER BY
    		<choose>
	    		<when test="sortByColumn == 'id'">id</when>
	      		<when test="sortByColumn == 'stateStudentIdentifier'">statestudentidentifier</when>
	      		<when test="sortByColumn == 'legalFirstName'">legalfirstname</when>
	      		<when test="sortByColumn == 'legalMiddleName'">legalMiddleName</when>
	      		<when test="sortByColumn == 'legalLastName'">legallastname</when>
	      		<when test="sortByColumn == 'generationCode'">generationcode</when>
	      		<when test="sortByColumn == 'dateOfBirthStr'">dateofbirth</when>
	      		<when test="sortByColumn == 'dateOfBirth'">dateofbirth</when>
	      		<when test="sortByColumn == 'genderString'">genderString</when>
	      		<when test="sortByColumn == 'accessProfileStatus'">accessprofilestatus</when>
	      		<when test="sortByColumn == 'status'">status</when> 
	      		<when test="sortByColumn == 'firstLanguage'">firstlanguage</when>
	      		<when test="sortByColumn == 'comprehensiveRace'">comprehensiverace</when>
	      		<when test="sortByColumn == 'primaryDisabilityCode'">primarydisabilitycode</when> 
	      		<when test="sortByColumn == 'gradeCourseId'">gradecourseid</when>
	      		<when test="sortByColumn == 'gradeCourseName'">gradecoursename</when> 
	      		<when test="sortByColumn == 'currentSchoolYears'">currentschoolyears</when>
	      		<when test="sortByColumn == 'localStudentIdentifiers'">localstudentidentifiers</when> 
	      		<when test="sortByColumn == 'residenceDistrictIdentifiers'">residencedistrictidentifiers</when>
	      		<when test="sortByColumn == 'attendanceSchoolDisplayIdentifiers'">attendanceschooldisplayidentifiers</when>
	      		<when test="sortByColumn == 'attendanceSchoolNames'">attendanceschoolnames</when>
	      		<when test="sortByColumn == 'programName'">programname</when>
	      		<when test="sortByColumn == 'giftedStudent'">giftedStudent</when>
	      		<when test="sortByColumn == 'hispanicEthnicity'">hispanicEthnicity</when>
	      		<when test="sortByColumn == 'esolParticipationCode'">esolParticipationCode</when>
	      		<when test="sortByColumn == 'rosterIds'">rosterids</when>
	      		<when test="sortByColumn == 'aypSchoolNames'">aypschoolnames</when> 
	      	</choose>
    	 	<if test="sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
		</if> 
			
		<if test="limit != null and limit != 0 ">
			limit #{limit} 
		</if>
		<if test="offset!=null">
			offset #{offset};
		</if>
		
	</select>
	
	<select id="getViewStudentInformationRecordsInLcs" resultMap="viewStudentInfo" >
	 	select count(*) OVER() AS totalrecords, * from (<include refid="viewStudentInformationRecordsSql"/>) as std
		 
	    where activeflag is true 	and
	    std.id in(select distinct st.id from student st
		join studentstests sts on sts.studentid = st.id
		join testsession ts on sts.testsessionid=ts.id
		join lcsstudentstests lcs on lcs.studentstestsid=sts.id where st.activeflag is true and sts.activeflag is true and ts.activeflag is true
		and lcs.activeflag is true)
 		<include refid="Student_Info_Where_Clause" />	
 		<!-- <if test="studentInformationRecordCriteriaMap.genderString != null">
			or cast(gender as char) ilike #{studentInformationRecordCriteriaMap.genderString}
		</if>  -->
 		<if test="sortByColumn != null">
    	ORDER BY
    		<choose>
	    		<when test="sortByColumn == 'id'">id</when>
	      		<when test="sortByColumn == 'stateStudentIdentifier'">statestudentidentifier</when>
	      		<when test="sortByColumn == 'legalFirstName'">legalfirstname</when>
	      		<when test="sortByColumn == 'legalMiddleName'">legalMiddleName</when>
	      		<when test="sortByColumn == 'legalLastName'">legallastname</when>
	      		<when test="sortByColumn == 'generationCode'">generationcode</when>
	      		<when test="sortByColumn == 'dateOfBirthStr'">dateofbirth</when>
	      		<when test="sortByColumn == 'dateOfBirth'">dateofbirth</when>
	      		<when test="sortByColumn == 'genderString'">genderString</when>
	      		<when test="sortByColumn == 'accessProfileStatus'">accessprofilestatus</when>
	      		<when test="sortByColumn == 'status'">status</when> 
	      		<when test="sortByColumn == 'firstLanguage'">firstlanguage</when>
	      		<when test="sortByColumn == 'comprehensiveRace'">comprehensiverace</when>
	      		<when test="sortByColumn == 'primaryDisabilityCode'">primarydisabilitycode</when> 
	      		<when test="sortByColumn == 'gradeCourseId'">gradecourseid</when>
	      		<when test="sortByColumn == 'gradeCourseName'">gradecoursename</when> 
	      		<when test="sortByColumn == 'currentSchoolYears'">currentschoolyears</when>
	      		<when test="sortByColumn == 'localStudentIdentifiers'">localstudentidentifiers</when> 
	      		<when test="sortByColumn == 'residenceDistrictIdentifiers'">residencedistrictidentifiers</when>
	      		<when test="sortByColumn == 'attendanceSchoolDisplayIdentifiers'">attendanceschooldisplayidentifiers</when>
	      		<when test="sortByColumn == 'attendanceSchoolNames'">attendanceschoolnames</when>
	      		<when test="sortByColumn == 'programName'">programname</when>
	      		<when test="sortByColumn == 'giftedStudent'">giftedStudent</when>
	      		<when test="sortByColumn == 'hispanicEthnicity'">hispanicEthnicity</when>
	      		<when test="sortByColumn == 'esolParticipationCode'">esolParticipationCode</when>
	      		<when test="sortByColumn == 'rosterIds'">rosterids</when>
	      		<when test="sortByColumn == 'aypSchoolNames'">aypschoolnames</when> 
	      	</choose>
    	 	<if test="sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
		</if> 
			
		<if test="limit != null and limit != 0 ">
			limit #{limit} 
		</if>
		<if test="offset!=null">
			offset #{offset};
		</if>
		
	</select>
	
	  <select id="getCreateTestRecordStudentsGridData" resultMap="viewStudentInfo" >
	  	WITH orgchildren AS (select schoolid, stateid from organizationtreedetail where (schoolid=#{organizationId, jdbcType=BIGINT} 
	  			or districtid=#{organizationId, jdbcType=BIGINT} or stateid=#{organizationId, jdbcType=BIGINT}))
				SELECT * FROM ( SELECT DISTINCT st.id,st.statestudentidentifier,st.legalfirstname,st.legalmiddlename,st.legallastname,st.generationcode,st.dateofbirth,st.gender, 
				( CASE
				      WHEN st.gender=1 THEN 'Male'
				      WHEN st.gender=0 THEN 'Female'
				    ELSE ''
				END)             AS genderstring,
				st.profilestatus AS accessprofilestatus, 
				( CASE
					WHEN 'DLM' NOT IN(
				        SELECT ap.abbreviatedname FROM assessmentprogram ap INNER JOIN studentassessmentprogram sap ON sap.studentid = st.id AND ap.id = sap.assessmentprogramid AND sap.activeflag = true) THEN 'Not Applicable'
				    ELSE(
				        SELECT CASE WHEN NOT EXISTS(
							SELECT status FROM survey WHERE studentid = st.id AND activeflag = true) THEN 'NOT STARTED'
					ELSE(
				        SELECT CASE WHEN status IS NULL THEN 'NOT STARTED' 
					ELSE( 
				    	SELECT categoryname FROM category WHERE  id=status)
					END
						FROM survey WHERE studentid = st.id AND activeflag = true)
				    END)
				END) AS status,
				(select categoryname from category where categorycode = st.firstlanguage and categorytypeid = (select id from categorytype where typecode = 'FIRST_LANGUAGE')) as firstlanguage, 
				(select categoryname from category where categorycode = st.comprehensiverace and categorytypeid = (select id from categorytype where typecode = 'COMPREHENSIVE_RACE')) as comprehensiverace, 
				(select categoryname from category where categorycode = st.primarydisabilitycode and categorytypeid = (select id from categorytype where typecode = 'PRIMARY_DISABILITY_CODES')) as primarydisabilitycode, 
				st.hispanicethnicity, st.esolparticipationcode 
				,array_to_string(array(select currentgradelevel FROM enrollment enrl WHERE  studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN (select schoolid from orgchildren)), ',') AS gradecourseid 
				,array_to_string(array( SELECT localstudentidentifier FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN (select schoolid from orgchildren)), ',') AS localstudentidentifiers 
				,array_to_string(array(SELECT residencedistrictidentifier FROM enrollment enrl WHERE  studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN (select schoolid from orgchildren)),',') AS residencedistrictidentifiers
				,array_to_string(array(SELECT organizationname FROM organization WHERE  id IN(SELECT DISTINCT aypschoolid FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN (select schoolid from orgchildren))), ',') AS aypschoolnames 
				,array_to_string(array(SELECT organizationname FROM organization WHERE id IN(SELECT DISTINCT accountabilitydistrictid FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN( SELECT schoolid FROM orgchildren))),',') AS accountabilitydistrictname
				,array_to_string(array(SELECT DISTINCT rosterid FROM enrollmentsrosters WHERE enrollmentid IN(SELECT DISTINCT id FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN (select schoolid from orgchildren))), ',') AS rosterids
				,array_to_string(array( SELECT abbreviatedname FROM assessmentprogram ap INNER JOIN studentassessmentprogram sap ON ap.id = sap.assessmentprogramid AND sap.studentid = st.id and sap.activeflag = true), ',') AS programname 
				,case when array_to_string(ARRAY(select giftedstudent from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') = '' then null else 
		array_to_string(ARRAY(select giftedstudent from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') END as giftedstudent 
				,array_to_string(array(SELECT attendanceschoolid FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true), ',')  AS schoolid
				,array_to_string(array( select gc.NAME FROM enrollment enrl INNER JOIN gradecourse gc ON enrl.currentgradelevel = gc.id WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN( select schoolid from orgchildren)), ',') AS gradecoursename
				,array_to_string(array(SELECT organizationname FROM organization WHERE  id IN( SELECT DISTINCT attendanceschoolid FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN(select schoolid from orgchildren))), ',') AS attendanceschoolnames
				,array_to_string(array( SELECT currentschoolyear FROM enrollment enrl WHERE  studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN (select schoolid from orgchildren)), ',') AS currentschoolyears
				,array_to_string(array(SELECT displayidentifier FROM organization WHERE id IN( SELECT DISTINCT attendanceschoolid FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN (select schoolid from orgchildren))), ',') AS attendanceschooldisplayidentifiers
				,st.activeflag FROM ( SELECT DISTINCT studentid,enrl.currentschoolyear,orglist.stateid FROM orgchildren orglist
<!-- 				(SELECT id FROM organization_children(#{organizationId, jdbcType=BIGINT} ) UNION SELECT #{organizationId, jdbcType=BIGINT}) orglist -->
				INNER JOIN  enrollment enrl ON enrl.attendanceschoolid = orglist.schoolid 
				WHERE enrl.activeflag IS true 
				AND enrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}) AS slist
				INNER JOIN student st ON slist.studentid = st.id and st.stateid=slist.stateid) AS std
		 
			<if test="assessmentProgrmId != null">
			INNER JOIN studentassessmentprogram sap on std.id = sap.studentid
				and sap.assessmentprogramid = #{assessmentProgrmId, jdbcType=BIGINT}
			</if>
		where std.activeflag is true 
		<include refid="Student_Info_Where_Clause" />
		<if test="sortByColumn != null">
    	ORDER BY
    		<choose>
	    		<when test="sortByColumn == 'id'">std.id</when>
	    		<when test="sortByColumn == 'legalLastName,legalFirstName,legalMiddleName'">legallastname, legalfirstname, legalMiddleName</when>
	      		<when test="sortByColumn == 'stateStudentIdentifier'">statestudentidentifier</when>
	      		<when test="sortByColumn == 'legalFirstName'">legalfirstname</when>
	      		<when test="sortByColumn == 'legalMiddleName'">legalMiddleName</when>
	      		<when test="sortByColumn == 'legalLastName'">legallastname</when>
	      		<when test="sortByColumn == 'generationCode'">generationcode</when>
	      		<when test="sortByColumn == 'dateOfBirth'">dateofbirth</when>
	      		<when test="sortByColumn == 'genderString'">genderString</when>
	      		<when test="sortByColumn == 'accessProfileStatus'">accessprofilestatus</when>
	      		<when test="sortByColumn == 'status'">status</when> 
	      		<when test="sortByColumn == 'firstLanguage'">firstlanguage</when>
	      		<when test="sortByColumn == 'comprehensiveRace'">comprehensiverace</when>
	      		<when test="sortByColumn == 'primaryDisabilityCode'">primarydisabilitycode</when> 
	      		<when test="sortByColumn == 'gradeCourseId'">gradecourseid</when>
	      		<when test="sortByColumn == 'gradeCourseName'">gradecoursename</when> 
	      		<when test="sortByColumn == 'currentSchoolYears'">currentschoolyears</when>
	      		<when test="sortByColumn == 'localStudentIdentifiers'">localstudentidentifiers</when> 
	      		<when test="sortByColumn == 'residenceDistrictIdentifiers'">residencedistrictidentifiers</when>
	      		<when test="sortByColumn == 'attendanceSchoolDisplayIdentifiers'">attendanceschooldisplayidentifiers</when>
	      		<when test="sortByColumn == 'attendanceSchoolNames'">attendanceschoolnames</when>
	      		<when test="sortByColumn == 'programName'">programname</when>
	      		<when test="sortByColumn == 'giftedStudent'">giftedStudent</when>
	      		<when test="sortByColumn == 'hispanicEthnicity'">hispanicEthnicity</when>
	      		<when test="sortByColumn == 'esolParticipationCode'">esolParticipationCode</when>
	      		<when test="sortByColumn == 'rosterIds'">rosterids</when>
	      		<when test="sortByColumn == 'aypSchoolNames'">aypschoolnames</when> 
	      		<when test="sortByColumn == 'accountabilityDistrictName'">accountabilitydistrictname</when> 
	       	</choose>
    	 	<if test="sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
		</if> 
			
		<if test="limit != null and limit != 0 ">
			limit #{limit} 
		</if>
		<if test="offset!=null">
			offset #{offset};
		</if>
	</select>
	
	
	<select id="getTestRecordByStudentsData" resultMap="viewStudentInfo">
		 SELECT distinct( ettsa.id),tt.testtypename AS testtypename,
           e.currentschoolyear AS currentschoolyears, (
           CASE
                      WHEN sa.subjectareacode = 'D74' THEN ( SELECT NAME FROM   contentarea WHERE  abbreviatedname = 'M')
                      WHEN sa.subjectareacode = 'SELAA' THEN ( SELECT NAME FROM   contentarea WHERE  abbreviatedname = 'ELA')
                      WHEN sa.subjectareacode = 'SHISGOVA' THEN(SELECT NAME FROM   contentarea WHERE  abbreviatedname = 'SS')
                      WHEN sa.subjectareacode = 'SSCIA' THEN(SELECT NAME FROM   contentarea WHERE  abbreviatedname = 'Sci')
                      ELSE
                            (
                            SELECT     ca.NAME FROM contentarea ca
                            INNER JOIN contentareatesttypesubjectarea cattsa ON         cattsa.contentareaid=ca.id
                            INNER JOIN testtypesubjectarea ttsa ON         cattsa.testtypesubjectareaid = ttsa.id
                            WHERE ttsa.subjectareaid = sa.id AND ttsa.testtypeid =tt.id
                            AND cattsa.activeflag = true AND ttsa.activeflag = true and ca.activeflag = true )
					           END) AS subjectname
			FROM enrollmenttesttypesubjectarea ettsa
			INNER JOIN enrollment e ON e.id =ettsa.enrollmentid
			inner join testtypesubjectarea ttsa on (ettsa.testtypeid = ttsa.testtypeid and ettsa.subjectareaid= ttsa.subjectareaid)
			join assessment asmt on asmt.id = ttsa.assessmentid
			join testingprogram tp on tp.id=asmt.testingprogramid
			INNER JOIN testtype tt ON (tt.id = ttsa.testtypeid and tt.id = ettsa.testtypeid)
			INNER JOIN subjectarea sa ON sa.id =ettsa.subjectareaid
			inner join organizationtreedetail otd on e.attendanceschoolid=otd.schoolid
<!-- 			where e.attendanceschoolid IN (select id from organization_children(#{organizationId, jdbcType=BIGINT}) union select #{organizationId, jdbcType=BIGINT})  -->
			where (otd.schoolid = #{organizationId,jdbcType=BIGINT}
			  	OR otd.districtid = #{organizationId,jdbcType=BIGINT}
			  	OR otd.stateid = #{organizationId,jdbcType=BIGINT})
			and e.studentid=#{studentId, jdbcType=BIGINT} 
			and e.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
			and tp.assessmentprogramid = #{assessmentProgramId, jdbcType=BIGINT}
			and tt.testtypecode NOT IN ('C') 
			AND e.activeflag = true AND ettsa.activeflag = true AND tt.activeflag = true 
			AND sa.activeflag = true and asmt.activeflag=true and tp.activeflag = true
			and ttsa.activeflag = true    
			<include refid="Student_Info_Where_Clause" />
			<if test="sortByColumn != null">
	    	ORDER BY
    		<choose>
	    		<when test="sortByColumn == 'id'">id</when>
	    		<when test="sortByColumn == 'testTypeName'">testtypename</when>
	    		<when test="sortByColumn == 'subjectName'">subjectname</when>
	      		<when test="sortByColumn == 'currentSchoolYears'">currentschoolyears</when>
	       	</choose>
    	 	<if test="sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
		</if> 
			
		<if test="limit != null and limit != 0 ">
			limit #{limit} 
		</if>
		<if test="offset!=null">
			offset #{offset};
		</if>
	</select>
	
	
	
	<select id="getClearTestRecordStudentsGridData" resultMap="viewStudentInfo" >
			SELECT DISTINCT e.id, s.legalfirstname, s.legalmiddlename, s.legallastname, s.statestudentidentifier,e.currentschoolyear as currentschoolyears, 
			otd.schoolname AS attendanceschoolnames, 
			otd.schooldisplayidentifier AS attendanceschooldisplayidentifiers, 
			gc.name as gradecoursename 
 			FROM student s
 			JOIN studentassessmentprogram sap ON s.id = sap.studentid
 			JOIN enrollment e ON  e.studentid = s.id
		 	inner join organizationtreedetail otd on e.attendanceschoolid=otd.schoolid
 			JOIN enrollmenttesttypesubjectarea ettsa on e.id = ettsa.enrollmentid 
 			JOIN testtype tt on ettsa.testtypeid = tt.id
 			join gradecourse gc on e.currentgradelevel = gc.id
 			join assessment ass on ass.id =tt.assessmentid
		 	join testingprogram tp on tp.id = ass.testingprogramid and tp.assessmentprogramid = sap.assessmentprogramid
 			WHERE e.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
 			AND (otd.schoolid = #{organizationId,jdbcType=BIGINT}
			  	OR otd.districtid = #{organizationId,jdbcType=BIGINT}
			  	OR otd.stateid = #{organizationId,jdbcType=BIGINT})
			AND e.activeflag = TRUE AND ettsa.activeflag = TRUE  AND tt.activeflag = TRUE AND sap.activeflag = TRUE
			and ettsa.subjectareaid = #{subjectAreaId, jdbcType=BIGINT}
			and tt.testtypeCode = #{testTypeCode, jdbcType=VARCHAR}
			and sap.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
		<include refid="Student_Info_Where_Clause" />
		<if test="sortByColumn != null">
    	ORDER BY
    		<choose>
	    		<when test="sortByColumn == 'id'">id</when>
	    		<when test="sortByColumn == 'legalLastName,legalFirstName,legalMiddleName'">legallastname, legalfirstname, legalMiddleName</when>
	      		<when test="sortByColumn == 'stateStudentIdentifier'">statestudentidentifier</when>
	      		<when test="sortByColumn == 'legalFirstName'">legalfirstname</when>
	      		<when test="sortByColumn == 'legalMiddleName'">legalMiddleName</when>
	      		<when test="sortByColumn == 'legalLastName'">legallastname</when>
	      		<when test="sortByColumn == 'generationCode'">generationcode</when>
	      		<when test="sortByColumn == 'gradeCourseName'">gradecoursename</when> 
	      		<when test="sortByColumn == 'currentSchoolYears'">currentschoolyears</when>
	      		<when test="sortByColumn == 'attendanceSchoolDisplayIdentifiers'">attendanceschooldisplayidentifiers</when>
	       	</choose>
    	 	<if test="sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
		</if> 
			
		<if test="limit != null and limit != 0 ">
			limit #{limit} 
		</if>
		<if test="offset!=null">
			offset #{offset};
		</if>
		
	</select>
	
	 <select id="getViewStudentInformationRecordsForFirstLanguage" resultType="Category" >
	 	SELECT categorycode, categoryname
			FROM category	
			WHERE categorytypeid = (
	
  			SELECT id
  				FROM categorytype
  				WHERE typecode = 'FIRST_LANGUAGE'
				)
					ORDER BY CAST(categorycode as bigint) asc
	 </select>	
	 
	  <select id="getViewStudentInformationRecordsForComprehensiveRace" resultType="Category" >
	 	SELECT categorycode, categoryname
			FROM category
			WHERE categorytypeid = (

  			SELECT id
			  FROM categorytype
  				WHERE typecode = 'COMPREHENSIVE_RACE'
		)
		ORDER BY categorycode asc
	 </select>	
	 
		
  	<select id="getViewStudentInformationRecordsCount" 
	  	parameterType="edu.ku.cete.domain.enrollment.EnrollmentExample" resultType="java.lang.Integer" >
	  	select count(*) from (<include refid="viewStudentInformationRecordsSql"/>) as std
	  where activeflag is true 
	 	<include refid="Student_Info_Where_Clause" />	
	 	<!-- <if test="studentInformationRecordCriteriaMap.genderString != null">
			or cast(gender as char) ilike #{studentInformationRecordCriteriaMap.genderString}
		</if> -->
	</select>
	
	<select id="getCreateTestRecordStudentsGridDataCount" 
	  	parameterType="edu.ku.cete.domain.enrollment.EnrollmentExample" resultType="java.lang.Integer" >
	  	WITH orgchildren AS (select schoolid,stateid from organizationtreedetail where (schoolid=#{organizationId, jdbcType=BIGINT} 
	  			or districtid=#{organizationId, jdbcType=BIGINT} or stateid=#{organizationId, jdbcType=BIGINT}))
		 select count(*) from (
			SELECT DISTINCT st.id,st.statestudentidentifier,st.legalfirstname,st.legalmiddlename,st.legallastname,st.generationcode,st.dateofbirth,st.gender, 
				( CASE
				      WHEN st.gender=1 THEN 'Male'
				      WHEN st.gender=0 THEN 'Female'
				    ELSE ''
				END)             AS genderstring,
				st.profilestatus AS accessprofilestatus, 
				( CASE
					WHEN 'DLM' NOT IN(
				        SELECT ap.abbreviatedname FROM assessmentprogram ap INNER JOIN studentassessmentprogram sap ON sap.studentid = st.id AND ap.id = sap.assessmentprogramid AND sap.activeflag = true) THEN 'Not Applicable'
				    ELSE(
				        SELECT CASE WHEN NOT EXISTS(
							SELECT status FROM survey WHERE studentid = st.id AND activeflag = true) THEN 'NOT STARTED'
					ELSE(
				        SELECT CASE WHEN status IS NULL THEN 'NOT STARTED' 
					ELSE( 
				    	SELECT categoryname FROM category WHERE  id=status)
					END
						FROM survey WHERE studentid = st.id AND activeflag = true)
				    END)
				END) AS status,
				(select categoryname from category where categorycode = st.firstlanguage and categorytypeid = (select id from categorytype where typecode = 'FIRST_LANGUAGE')) as firstlanguage, 
				(select categoryname from category where categorycode = st.comprehensiverace and categorytypeid = (select id from categorytype where typecode = 'COMPREHENSIVE_RACE')) as comprehensiverace, 
				(select categoryname from category where categorycode = st.primarydisabilitycode and categorytypeid = (select id from categorytype where typecode = 'PRIMARY_DISABILITY_CODES')) as primarydisabilitycode, 
				st.hispanicethnicity, st.esolparticipationcode 
				,array_to_string(array(select currentgradelevel FROM enrollment enrl WHERE  studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN
				(SELECT schoolid FROM orgchildren)),',') AS gradecourseid 
				,array_to_string(array( SELECT localstudentidentifier FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN
				(SELECT schoolid FROM orgchildren)),',') AS localstudentidentifiers 
				,array_to_string(array(SELECT residencedistrictidentifier FROM enrollment enrl WHERE  studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN
				(SELECT schoolid FROM orgchildren)),',') AS residencedistrictidentifiers
				,array_to_string(array(SELECT organizationname FROM organization WHERE  id IN(SELECT DISTINCT aypschoolid FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} 
				 AND enrl.activeflag IS true AND attendanceschoolid IN( SELECT schoolid FROM orgchildren))),',') AS aypschoolnames 
				,array_to_string(array(SELECT organizationname FROM organization WHERE id IN(	SELECT DISTINCT accountabilitydistrictid 	FROM enrollment enrl 	WHERE studentid = st.id AND enrl.activeflag IS true )),',') AS accountabilitydistrictname 
				,array_to_string(array(SELECT DISTINCT rosterid FROM enrollmentsrosters WHERE enrollmentid IN(SELECT DISTINCT id FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
				 AND enrl.activeflag IS true AND attendanceschoolid IN( SELECT schoolid FROM orgchildren))),',') AS rosterids
				,array_to_string(array( SELECT abbreviatedname FROM assessmentprogram ap INNER JOIN studentassessmentprogram sap ON ap.id = sap.assessmentprogramid AND sap.studentid = st.id AND sap.activeflag = true),', ') AS programname 
					       ,case when array_to_string(ARRAY(select giftedstudent from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') = '' then null else 
				array_to_string(ARRAY(select giftedstudent from enrollment enrl where studentid = st.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true),',') END as giftedstudent  
				,array_to_string(array(SELECT attendanceschoolid FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN(SELECT schoolid FROM orgchildren)),',')  AS schoolid
				,array_to_string(array( select gc.NAME FROM enrollment enrl INNER JOIN gradecourse gc ON enrl.currentgradelevel = gc.id WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true
				 AND attendanceschoolid IN(SELECT schoolid FROM orgchildren)),',') AS gradecoursename
				,array_to_string(array(SELECT organizationname FROM organization WHERE  id IN( SELECT DISTINCT attendanceschoolid FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
				 AND enrl.activeflag IS true AND attendanceschoolid IN(SELECT schoolid FROM orgchildren))),',') AS attendanceschoolnames
				,array_to_string(array( SELECT currentschoolyear FROM enrollment enrl WHERE  studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN (SELECT schoolid FROM orgchildren)),',') AS currentschoolyears
				,array_to_string(array(SELECT displayidentifier FROM organization WHERE id IN( SELECT DISTINCT attendanceschoolid FROM enrollment enrl WHERE studentid = st.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND enrl.activeflag IS true AND attendanceschoolid IN(SELECT schoolid FROM orgchildren))),',') AS attendanceschooldisplayidentifiers
				,st.activeflag FROM (SELECT DISTINCT studentid,enrl.currentschoolyear,orglist.stateid FROM orgchildren orglist
<!-- 					(SELECT id FROM organization_children(#{organizationId, jdbcType=BIGINT} ) UNION SELECT #{organizationId, jdbcType=BIGINT}) orglist -->
				INNER JOIN  enrollment enrl ON enrl.attendanceschoolid = orglist.schoolid 
				WHERE enrl.activeflag IS true 
				AND enrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}) AS slist
				INNER JOIN student st ON slist.studentid = st.id and st.stateid=slist.stateid) AS std
		
		<if test="assessmentProgrmId != null">
			INNER JOIN studentassessmentprogram sap on std.id = sap.studentid
				and sap.assessmentprogramid = #{assessmentProgrmId, jdbcType=BIGINT}
			</if>
		where std.activeflag is true
		<include refid="Student_Info_Where_Clause" />
	</select>
	
		<select id="getClearTestRecordStudentsGridDataCount" 
	  	parameterType="edu.ku.cete.domain.enrollment.EnrollmentExample" resultType="java.lang.Integer" >
	 
			SELECT count(DISTINCT e.id)
			 FROM student s 
			 JOIN studentassessmentprogram sap on s.id = sap.studentid
 			JOIN enrollment e on e.studentid = s.id
 			inner join organizationtreedetail otd on e.attendanceschoolid=otd.schoolid
 			JOIN enrollmenttesttypesubjectarea ettsa on e.id = ettsa.enrollmentid 
 			JOIN testtype tt on ettsa.testtypeid = tt.id
 			join assessment ass on ass.id =tt.assessmentid
		 	join testingprogram tp on tp.id = ass.testingprogramid and tp.assessmentprogramid = sap.assessmentprogramid
 			join gradecourse gc on e.currentgradelevel = gc.id
 			WHERE e.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
<!--  			AND e.attendanceschoolid IN (select id from organization_children(#{organizationId, jdbcType=BIGINT}) union select #{organizationId, jdbcType=BIGINT})  -->
 			AND (otd.schoolid = #{organizationId,jdbcType=BIGINT}
			  	OR otd.districtid = #{organizationId,jdbcType=BIGINT}
			  	OR otd.stateid = #{organizationId,jdbcType=BIGINT})
			AND e.activeflag = TRUE AND ettsa.activeflag = TRUE  AND tt.activeflag = TRUE AND sap.activeflag = TRUE
			and ettsa.subjectareaid = #{subjectAreaId, jdbcType=BIGINT}
			and tt.testtypeCode = #{testTypeCode, jdbcType=VARCHAR}
			and sap.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			<include refid="Student_Info_Where_Clause" />
	</select>
	
	
	<select id="getTestRecordByStudentsDataGridCount" parameterType="edu.ku.cete.domain.enrollment.EnrollmentExample" resultType="java.lang.Integer">
	
			SELECT count(DISTINCT ettsa.id) as id
			FROM enrollmenttesttypesubjectarea ettsa
			INNER JOIN enrollment e ON e.id =ettsa.enrollmentid
			inner join testtypesubjectarea ttsa on (ettsa.testtypeid = ttsa.testtypeid and ettsa.subjectareaid= ttsa.subjectareaid)
			join assessment asmt on asmt.id = ttsa.assessmentid
			join testingprogram tp on tp.id=asmt.testingprogramid
			INNER JOIN testtype tt ON (tt.id = ttsa.testtypeid and tt.id = ettsa.testtypeid)
			INNER JOIN subjectarea sa ON sa.id =ettsa.subjectareaid
			inner join organizationtreedetail otd on e.attendanceschoolid=otd.schoolid
<!-- 			where e.attendanceschoolid IN (select id from organization_children(#{organizationId, jdbcType=BIGINT}) union select #{organizationId, jdbcType=BIGINT})  -->
			where (otd.schoolid = #{organizationId,jdbcType=BIGINT}
			  	OR otd.districtid = #{organizationId,jdbcType=BIGINT}
			  	OR otd.stateid = #{organizationId,jdbcType=BIGINT})
			and e.studentid=#{studentId, jdbcType=BIGINT}
			and e.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} 
			and tp.assessmentprogramid = #{assessmentProgramId, jdbcType=BIGINT}
			and tt.testtypecode NOT IN ('C') 
			AND e.activeflag = true AND ettsa.activeflag = true AND tt.activeflag = true 
			AND sa.activeflag = true and asmt.activeflag=true and tp.activeflag = true
			and ttsa.activeflag = true  
			<include refid="Student_Info_Where_Clause" />
	</select>
	
	
		
	<!--Changed dlmstatus during US16243  -->
	<!-- US16424 : Modified Query to align to enrollment upload( added student assessment program ) -->
	<select id="getViewStudentInformationRecordsExtract" resultMap="viewStudentInfo" >
	/*NO LOAD BALANCE*/
	<!-- Optimized Gradecourse & lastModifiedEnrollmentUsername - Reduced from 68.681ms to 50.896 ms execution time. Also added indexes on enrollment_modifieduser & studentassessmentprogram_activeflag-->
		select distinct
		st.id, otd.statename
		,otd.districtname 
		,otd.schoolname 
		,enrl.aypschoolidentifier
		,case when enrl.residencedistrictidentifier is not null then enrl.residencedistrictidentifier else otd.districtdisplayidentifier end as residencedistrictidentifier 
		,st.legallastname
		,st.legalfirstname
		,st.legalmiddlename
		,st.generationcode
		,st.gender
		,st.dateofbirth
		,gc.abbreviatedname as gradecoursename
		,enrl.localstudentidentifier as localstudentidentifiers
		,st.statestudentidentifier
		,enrl.currentschoolyear as currentschoolyears
		,(select displayidentifier from organization where id=enrl.attendanceschoolid) as attendanceschooldisplayidentifiers
		,to_char(enrl.schoolentrydate,'MM/dd/yyyy') as schoolentrydate
		,to_char(enrl.districtentrydate,'MM/dd/yyyy') as districtentrydate
		,to_char(enrl.stateentrydate,'MM/dd/yyyy') as stateentrydate
		,st.comprehensiverace
		,st.primarydisabilitycode
		,enrl.giftedstudent
		,st.hispanicethnicity
		,st.firstlanguage as firstlanguagecode
		,st.esolparticipationcode
		,(CASE 
			WHEN 
				enrl.modifieddate > st.modifieddate 
			THEN 
				enrl.modifieddate
			ELSE
				st.modifieddate
		END) as modifieddate
		,(CASE 
			WHEN enrl.modifieddate > st.modifieddate 
			THEN 
				enrl.modifieduser
			ELSE 
				st.modifieduser
		END) as modifieduser,
		
		(CASE 
			WHEN enrl.modifieddate > st.modifieddate 
			THEN 
				CONCAT(au_enrl.firstname, ' ', au_enrl.surname) 
			ELSE  
			    CONCAT(au_st.firstname, ' ', au_st.surname) 
			END) as lastmodifiedenrlusername,
			
		(CASE 
			WHEN enrl.modifieddate > st.modifieddate 
			THEN 
				enrl.sourcetype
			ELSE
				st.source
		END) as sourcetype
		,array_to_string(ARRAY(select distinct abbreviatedname from assessmentprogram ap 
			inner join studentassessmentprogram sap on ap.id = sap.assessmentprogramid and  sap.studentid = st.id and sap.activeflag = true),', ')
                  AS studentassessmentprogram
		from student st
		join enrollment enrl on enrl.studentid = st.id
		<if test="isTeacher">
		  inner join enrollmentsrosters er on enrl.id = er.enrollmentid
		  inner join roster r on er.rosterid = r.id and r.teacherid = #{educatorId,jdbcType=BIGINT}
		</if>
		inner join organizationtreedetail otd on enrl.attendanceschoolid=otd.schoolid
		left join aartuser au_enrl ON au_enrl.id = enrl.modifieduser
		left join aartuser au_st ON au_st.id = st.modifieduser
		LEFT OUTER JOIN gradecourse gc ON enrl.currentgradelevel = gc.id
		inner join studentassessmentprogram sap on sap.studentid = st.id and sap.activeflag = true
<!-- 		where enrl.attendanceschoolid in (select id from organization_children(#{orgChildrenById, jdbcType=BIGINT}) union select #{orgChildrenById, jdbcType=BIGINT}) -->
		where (otd.schoolid = #{orgChildrenById,jdbcType=BIGINT}
			  	OR otd.districtid = #{orgChildrenById,jdbcType=BIGINT}
			  	OR otd.stateid = #{orgChildrenById,jdbcType=BIGINT})
		 	and enrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
		 	and enrl.activeflag = true
		 	and st.activeflag = true
		 	<if test="assessmentPrograms !=null">
		 	 and sap.assessmentprogramid in
		 	 <foreach collection="assessmentPrograms" item="assessmentprogramid" open="(" close=")" separator=",">
		 	 #{assessmentprogramid}
		 	 </foreach>
		 	 </if>
		 	<if test="isTeacher">
		 	  and r.activeflag = true
		 	  and er.activeflag = true
		 	</if>
		<!-- order by statename asc, districtname asc , schoolname asc , legallastname asc-->
	</select>
	<!--Changed dlm status during US16243  -->
	<select id="getStudentDetailsByStudentId" resultMap="viewStudentInfo" >
		select 
		st.id,otd.statename
		,otd.districtname 
		,otd.districtdisplayidentifier as residencedistrictidentifiers
		,otd.schoolname 
		,otd.schooldisplayidentifier as attendanceschooldisplayidentifiers
		,(SELECT organizationname FROM organization WHERE id = enrl.aypschoolid) as aypschoolnames 
  		,(SELECT organizationname FROM organization WHERE id = enrl.accountabilitydistrictid) as accountabilitydistrictname 
  		,(SELECT displayidentifier FROM organization WHERE id = enrl.aypschoolid) as aypschoolidentifier
		,enrl.accountabilitydistrictidentifier
		,enrl.residencedistrictidentifier 
		,st.legallastname
		,st.legalfirstname
		,st.legalmiddlename
		,st.generationcode
		,st.gender
		,st.dateofbirth
		,(select gc.name from gradecourse gc where id = enrl.currentgradelevel) as gradecoursename
		,enrl.localstudentidentifier as localstudentidentifiers
		,st.statestudentidentifier
		,enrl.currentschoolyear as currentschoolyears
		,(select displayidentifier from organization where id=enrl.attendanceschoolid) as attendanceschooldisplayidentifiers
		,to_char(enrl.schoolentrydate at TIME ZONE 'US/Central','MM/dd/yyyy') as schoolentrydate
		,to_char(enrl.districtentrydate at TIME ZONE 'US/Central','MM/dd/yyyy') as districtentrydate
		,to_char(enrl.stateentrydate at TIME ZONE 'US/Central','MM/dd/yyyy') as stateentrydate
		,st.comprehensiverace
		,st.primarydisabilitycode
		,enrl.giftedstudent
		,st.hispanicethnicity
		,st.firstlanguage as firstlanguagecode
		,(CASE WHEN 'DLM' IN (SELECT ap.abbreviatedname FROM assessmentprogram ap INNER JOIN studentassessmentprogram sap ON sap.studentid = st.id AND ap.id = sap.assessmentprogramid AND sap.activeflag = TRUE) THEN true ELSE false END) as dlmstatus
		,st.esolparticipationcode
		,(CASE WHEN st.gender=1 THEN 'Male'
				WHEN st.gender=0 THEN 'Female' ELSE ''
				END) as genderString
		,(select categoryname from category where categorycode = st.firstlanguage and categorytypeid = (select id from categorytype where typecode = 'FIRST_LANGUAGE')) as firstlanguageStr
		,(select categoryname from category where categorycode = st.comprehensiverace and categorytypeid = (select id from categorytype where typecode = 'COMPREHENSIVE_RACE')) as comprehensiveraceStr
	    ,(select categoryname from category where upper(categorycode) = upper(st.primarydisabilitycode) and categorytypeid = (select id from categorytype where typecode = 'PRIMARY_DISABILITY_CODES')) as primarydisabilitycodeStr
		,st.username
		,st.password
		,CASE WHEN st.profilestatus = 'CUSTOM'
			THEN 'Custom'
			ELSE 'No Settings'
	    END as accessprofilestatus
	    ,CASE WHEN 'DLM' NOT IN (SELECT ap.abbreviatedname FROM assessmentprogram ap INNER JOIN studentassessmentprogram sap ON sap.studentid = st.id AND ap.id = sap.assessmentprogramid AND sap.activeflag = TRUE)
			THEN 'Not Applicable'
	    	WHEN survey.studentid IS NULL
			THEN 'NOT STARTED'
			WHEN survey.status IS NULL
			THEN 'NOT STARTED'
			ELSE surveystatuscategory.categoryname
	    END as status
	    
		,(select name from contentarea where id=r.statesubjectareaid) as subjectname
	    ,(select name from gradecourse where course is true and id=r.statecoursesid) as coursename
		,(select firstname || ' ' || surname from aartuser where id=r.teacherid) as educatorname
		,r.coursesectionname as rostername
		,CASE WHEN st.esolparticipationcode is null
			THEN 'Not Eligible'
	    	WHEN st.esolparticipationcode='0'
			THEN 'Not Eligible'
			WHEN st.esolparticipationcode='1'
			THEN 'Title III Funded'
			WHEN st.esolparticipationcode='2'
			THEN 'State ESOL/Bilingual Funded'
			WHEN st.esolparticipationcode='3'
			THEN 'Title III and State ESOL/Bilingual Funded'
			WHEN st.esolparticipationcode='4'
			THEN 'Monitored ESOL Student'
			WHEN st.esolparticipationcode='5'
			THEN 'Eligible but not supported'
			WHEN st.esolparticipationcode='6'
			THEN 'ESOL but not funded'
			ELSE ''
	    END as esolparticipationcodestr
	    ,st.usaentrydate at TIME ZONE 'US/Central' as usaentrydate
	    ,st.esolprogramentrydate at TIME ZONE 'US/Central' as esolprogramentrydate
	    ,array_to_string(ARRAY(select abbreviatedname|| ' - ' || programname from assessmentprogram ap inner join studentassessmentprogram sap on ap.id = sap.assessmentprogramid and  sap.studentid = st.id and sap.activeflag = true),', ')  as abbreviatedname
	    ,array_to_string(ARRAY(select programname from assessmentprogram ap inner join studentassessmentprogram sap on ap.id = sap.assessmentprogramid and  sap.studentid = st.id and sap.activeflag = true),', ')  as studentassessmentprogram
		from student st 
		join enrollment enrl on enrl.studentid = st.id 
		inner join organizationtreedetail otd on enrl.attendanceschoolid=otd.schoolid
		LEFT JOIN survey survey ON (survey.studentid = st.id and survey.activeflag = true)
		LEFT JOIN Category surveystatuscategory ON (survey.status = surveystatuscategory.id)	
		left join enrollmentsrosters er on enrl.id = er.enrollmentid and er.activeflag IS TRUE
		left join roster r on er.rosterid = r.id and r.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and r.activeflag is true
		where enrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true
		<if test="isTeacher">
		 	  and r.teacherid=#{studentInformationRecordCriteriaMap.userId}
		</if> 
		and st.id = #{studentInformationRecordCriteriaMap.studentId} 
<!-- 		and enrl.attendanceschoolid in (select id from organization_children(#{studentInformationRecordCriteriaMap.orgChildrenById}) union select #{studentInformationRecordCriteriaMap.orgChildrenById}) -->
		and (otd.schoolid = #{studentInformationRecordCriteriaMap.orgChildrenById}
			  	OR otd.districtid = #{studentInformationRecordCriteriaMap.orgChildrenById}
			  	OR otd.stateid = #{studentInformationRecordCriteriaMap.orgChildrenById})
		order by statename asc, districtname asc , schoolname asc , legallastname asc, subjectname asc
	</select>
	
	<select id="getInactiveStudentDetailsByStudentId" resultMap="viewStudentInfo" >
		select 
		st.id,otd.statename
		,otd.districtname 
		,otd.schoolname 
		,enrl.aypschoolidentifier
		,enrl.residencedistrictidentifier 
		,st.legallastname
		,st.legalfirstname
		,st.legalmiddlename
		,st.generationcode
		,st.gender
		,st.dateofbirth
		,(select gc.name from gradecourse gc where id = enrl.currentgradelevel) as gradecoursename
		,enrl.localstudentidentifier as localstudentidentifiers
		,st.statestudentidentifier
		,enrl.currentschoolyear as currentschoolyears
		,(select displayidentifier from organization where id=enrl.attendanceschoolid) as attendanceschooldisplayidentifiers
		,to_char(enrl.schoolentrydate,'MM/dd/yyyy') as schoolentrydate
		,to_char(enrl.districtentrydate,'MM/dd/yyyy') as districtentrydate
		,to_char(enrl.stateentrydate,'MM/dd/yyyy') as stateentrydate
		,st.comprehensiverace
		,st.primarydisabilitycode
		,enrl.giftedstudent
		,st.hispanicethnicity
		,st.firstlanguage as firstlanguagecode
		,(CASE WHEN 'DLM' IN (SELECT ap.abbreviatedname FROM assessmentprogram ap INNER JOIN studentassessmentprogram sap ON sap.studentid = st.id AND ap.id = sap.assessmentprogramid AND sap.activeflag = TRUE) THEN true ELSE false END) as dlmstatus
		,st.esolparticipationcode
		,(CASE WHEN st.gender=1 THEN 'Male'
				WHEN st.gender=0 THEN 'Female' ELSE ''
				END) as genderString
		,(select categoryname from category where categorycode = st.firstlanguage and categorytypeid = (select id from categorytype where typecode = 'FIRST_LANGUAGE')) as firstlanguageStr
		,(select categoryname from category where categorycode = st.comprehensiverace and categorytypeid = (select id from categorytype where typecode = 'COMPREHENSIVE_RACE')) as comprehensiveraceStr
	    ,(select categoryname from category where upper(categorycode) = upper(st.primarydisabilitycode) and categorytypeid = (select id from categorytype where typecode = 'PRIMARY_DISABILITY_CODES')) as primarydisabilitycodeStr
		,st.username
		,st.password
		,CASE WHEN st.profilestatus = 'CUSTOM'
			THEN 'Custom'
			ELSE 'No Settings'
	    END as accessprofilestatus
	    ,CASE WHEN 'DLM' NOT IN (SELECT ap.abbreviatedname FROM assessmentprogram ap INNER JOIN studentassessmentprogram sap ON sap.studentid = st.id AND ap.id = sap.assessmentprogramid AND sap.activeflag = TRUE)
			THEN 'Not Applicable'
	    	WHEN survey.studentid IS NULL
			THEN 'NOT STARTED'
			WHEN survey.status IS NULL
			THEN 'NOT STARTED'
			ELSE surveystatuscategory.categoryname
	    END as status
	    
		,(select name from contentarea where id=r.statesubjectareaid) as subjectname
	    ,(select name from gradecourse where course is true and id=r.statecoursesid) as coursename
		,(select firstname || ' ' || surname from aartuser where id=r.teacherid) as educatorname
		,r.coursesectionname as rostername
		,CASE WHEN st.esolparticipationcode is null
			THEN 'Not Eligible'
	    	WHEN st.esolparticipationcode='0'
			THEN 'Not Eligible'
			WHEN st.esolparticipationcode='1'
			THEN 'Title III Funded'
			WHEN st.esolparticipationcode='2'
			THEN 'State ESOL/Bilingual Funded'
			WHEN st.esolparticipationcode='3'
			THEN 'Title III and State ESOL/Bilingual Funded'
			WHEN st.esolparticipationcode='4'
			THEN 'Monitored ESOL Student'
			WHEN st.esolparticipationcode='5'
			THEN 'Eligible but not supported'
			WHEN st.esolparticipationcode='6'
			THEN 'ESOL but not funded'
			ELSE ''
	    END as esolparticipationcodestr
	    ,st.usaentrydate as usaentrydate
	    ,st.esolprogramentrydate as esolprogramentrydate
	    ,array_to_string(ARRAY(select distinct abbreviatedname|| ' - ' || programname from assessmentprogram ap inner join studentassessmentprogram sap on ap.id = sap.assessmentprogramid and  sap.studentid = st.id and sap.activeflag = true),', ')  as abbreviatedname
	    ,array_to_string(ARRAY(select distinct programname from assessmentprogram ap inner join studentassessmentprogram sap on ap.id = sap.assessmentprogramid and  sap.studentid = st.id and sap.activeflag = true),', ')  as studentassessmentprogram
		from student st 
		join enrollment enrl on enrl.studentid = st.id 
		inner join organizationtreedetail otd on enrl.attendanceschoolid=otd.schoolid
		LEFT JOIN survey survey ON (survey.studentid = st.id and survey.activeflag = true)
		LEFT JOIN Category surveystatuscategory ON (survey.status = surveystatuscategory.id)	
		left join enrollmentsrosters er on enrl.id = er.enrollmentid and er.activeflag IS TRUE
		left join roster r on er.rosterid = r.id and r.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and r.activeflag is true
		where enrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
		<if test="isTeacher">
		 	  and r.teacherid=#{studentInformationRecordCriteriaMap.userId}
		 </if> 
		and st.id = #{studentInformationRecordCriteriaMap.studentId} 
<!-- 		and enrl.attendanceschoolid in (select id from organization_children(#{studentInformationRecordCriteriaMap.orgChildrenById}) union select #{studentInformationRecordCriteriaMap.orgChildrenById}) -->
		and (otd.schoolid = #{studentInformationRecordCriteriaMap.orgChildrenById}
			  	OR otd.districtid = #{studentInformationRecordCriteriaMap.orgChildrenById}
			  	OR otd.stateid = #{studentInformationRecordCriteriaMap.orgChildrenById})
		order by statename asc, districtname asc , schoolname asc , legallastname asc, subjectname asc
	</select>
	
	<update id="updateIgnoreFinalBands" parameterType="Student">
	UPDATE student SET
		id=#{id}, stateStudentIdentifier=#{stateStudentIdentifier},
		legalFirstName=#{legalFirstName},
		legalMiddleName=#{legalMiddleName}, legalLastName=#{legalLastName},
		generationCode=#{generationCode},
		comprehensiveRace=#{comprehensiveRace},
		primaryDisabilityCode=#{primaryDisabilityCode},
		firstLanguage=#{firstLanguage},
		dateOfBirth=#{dateOfBirth},
		gender=#{gender},
		synced=#{synced},
		source=#{sourceType},
		createdDate=#{createdDate}, modifiedDate=#{modifiedDate}, username=#{username}, password=#{password},
	    modifieduser = #{modifiedUser},
	    activeflag = #{activeFlag},
	    hispanicethnicity = #{hispanicEthnicity},
	    esolparticipationcode = #{esolParticipationCode},
	    esolprogramentrydate = #{esolProgramEntryDate},
	    esolprogramendingdate = #{esolProgramEndingDate},
	    usaentrydate = #{usaEntryDate} 
	WHERE id = #{id}
  </update>
  
  <update id="updateNullableFieldsForEditStudent" parameterType="Student">
    UPDATE student
    SET legalmiddlename = #{legalMiddleName},
      generationcode = #{generationCode},
      dateofbirth = #{dateOfBirth},
      gender = #{gender},
      comprehensiverace = #{comprehensiveRace},
      primarydisabilitycode = #{primaryDisabilityCode},
      esolprogramentrydate = #{esolProgramEntryDate},
      usaentrydate = #{usaEntryDate}
    WHERE id = #{id,jdbcType=BIGINT}
  </update>
  <select id="findMappedComprehensiveRaceCode" resultType="String">
	select catnew.categorycode 
	from category catksde
	join category catnew on catksde.categoryname = catnew.categorycode
	where catksde.activeflag is true and catnew.activeflag is true and catksde.categorycode=#{ksdeCompRaceCode}
	and catnew.categorytypeid=(select id from categorytype where typecode = 'COMPREHENSIVE_RACE' and activeflag is true)
	and catksde.categorytypeid=(select id from categorytype where typecode = 'KSDE_COMPREHENSIVE_RACE' and activeflag is true)
	union
	select catnew.categorycode 
	from category catnew 
	where catnew.activeflag is true and catnew.categorycode=#{ksdeCompRaceCode}
	and catnew.categorytypeid=(select id from categorytype where typecode = 'COMPREHENSIVE_RACE' and activeflag is true)
  </select>  
  
  <!--
  Biyatpragyan Mohanty : bmohanty_sta@ku.edu : US15500 : DLM Class Roster Report - online report	 
  Get student ids by passing state identifiers
   -->
  <select id="getStudentIdsByStateIdentifiers" resultType="String" parameterType="java.util.List">
		select id || ',' || statestudentidentifier from student where stateid is not null and statestudentidentifier in 		
		<foreach close=")" collection="studentStateIds" item="studentStateId" open="(" separator=",">
		       #{studentStateId}
		</foreach>
	</select>

	<select id="getStudentByStateStuIdAndStateId" resultType="Student" parameterType="map">
		select * 
		from student stu
		where stu.statestudentidentifier = #{stateStudentIdentifier}
		and stateId = #{stateId}
		and activeflag = true
	</select>
	
	<select id="getNonDLMStudentIdsInOrg" resultType="java.lang.Long" parameterType="map">
		select distinct st.id
		from
<!-- 			(select id -->
<!-- 			from organization_children(#{organizationId, jdbcType=BIGINT}) -->
<!-- 			union select #{organizationId, jdbcType=BIGINT}) orglist -->
			organizationtreedetail orglist
			inner join enrollment enrl
				on enrl.attendanceschoolid = orglist.schoolid 
				and enrl.activeflag is true
				and enrl.currentschoolyear = #{currentSchoolYear,jdbcType=INTEGER}
			inner join student st
				on enrl.studentid = st.id
				and st.profilestatus = 'CUSTOM'
				and st.activeflag = true	
			inner join studentassessmentprogram stap
				on stap.studentid = st.id
				and stap.assessmentprogramid != (select id from assessmentprogram where abbreviatedname = 'DLM' and activeflag is true limit 1)
				and stap.activeflag = true
			<if test="isTeacher">
				inner join enrollmentsrosters enrlr on (enrlr.enrollmentid = enrl.id and enrlr.activeflag is true)
				inner join roster rs on (enrlr.rosterid=rs.id and rs.teacherid = #{educatorId})
			</if> 
		where (orglist.schoolid = #{organizationId,jdbcType=BIGINT}
			  	OR orglist.districtid = #{organizationId,jdbcType=BIGINT}
			  	OR orglist.stateid = #{organizationId,jdbcType=BIGINT})
			  	<if test="assessmentPrograms !=null">
			  	and stap.assessmentprogramid in 
			  	<foreach collection="assessmentPrograms" item="assessmentprogramid" open="(" close=")" separator=",">
			  	#{assessmentprogramid}
			  	</foreach>
			  	</if>
		order by st.id		
		offset #{offset,jdbcType=INTEGER}
		limit #{limit,jdbcType=INTEGER}
	</select>
	
	<select id="getDLMStudentIdsInOrg" resultType="java.lang.Long" parameterType="map">
		select distinct st.id
		from
<!-- 			(select id -->
<!-- 			from organization_children(#{organizationId, jdbcType=BIGINT}) -->
<!-- 			union select #{organizationId, jdbcType=BIGINT}) orglist -->
			organizationtreedetail orglist
			inner join enrollment enrl
				on enrl.attendanceschoolid = orglist.schoolid
				and enrl.activeflag is true
				and enrl.currentschoolyear = #{currentSchoolYear,jdbcType=INTEGER}
			inner join student st
				on enrl.studentid = st.id
				and st.profilestatus = 'CUSTOM'
				and st.activeflag = true
			inner join studentassessmentprogram stap
				on stap.studentid = st.id
				and stap.assessmentprogramid = (select id from assessmentprogram where abbreviatedname = 'DLM' and activeflag is true limit 1)
				and stap.activeflag = true
			<if test="isTeacher">
				inner join enrollmentsrosters enrlr on (enrlr.enrollmentid = enrl.id and enrlr.activeflag is true)
				inner join roster rs on (enrlr.rosterid=rs.id and rs.teacherid = #{educatorId})
			</if>
		where (orglist.schoolid = #{organizationId,jdbcType=BIGINT}
			  	OR orglist.districtid = #{organizationId,jdbcType=BIGINT}
			  	OR orglist.stateid = #{organizationId,jdbcType=BIGINT})
		order by st.id		
		offset #{offset,jdbcType=INTEGER}
		limit #{limit,jdbcType=INTEGER}
	</select> 
	
	<!-- this query is very similar to the previous ones (getDLMStudentIdsInOrg/getNonDLMStudentIdsInOrg),
	but without any assessmentprogramid filters -->
	<select id="getActiveStudentIdsWithPNPInOrg" resultType="java.lang.Long" parameterType="map">
		select distinct st.id
		from
<!-- 			(select id -->
<!-- 			from organization_children(#{organizationId, jdbcType=BIGINT}) -->
<!-- 			union select #{organizationId, jdbcType=BIGINT}) orglist -->
			organizationtreedetail orglist
			inner join enrollment enrl
				on enrl.attendanceschoolid = orglist.schoolid
				and enrl.activeflag is true
				and enrl.currentschoolyear = #{currentSchoolYear,jdbcType=INTEGER}
			inner join student st
				on enrl.studentid = st.id
				and st.profilestatus = 'CUSTOM'
				and st.activeflag = true
		    inner join studentassessmentprogram sap on sap.studentid = st.id and sap.activeflag = true
			<if test="isTeacher">
				inner join enrollmentsrosters enrlr on (enrlr.enrollmentid = enrl.id and enrlr.activeflag is true)
				inner join roster rs on (enrlr.rosterid=rs.id and rs.teacherid = #{educatorId})
			</if>
			where (orglist.schoolid = #{organizationId,jdbcType=BIGINT}
			  	OR orglist.districtid = #{organizationId,jdbcType=BIGINT}
			  	OR orglist.stateid = #{organizationId,jdbcType=BIGINT})
			  	<if test="assessmentPrograms !=null">
			  		and sap.assessmentprogramid in 
			  		<foreach collection="assessmentPrograms" item="assessmentprogramid" open="(" close=")" separator=",">
			  			#{assessmentprogramid}
			  		</foreach>
			  	</if>
			order by st.id
			limit #{limit,jdbcType=INTEGER}
			offset #{offset,jdbcType=INTEGER}
	</select>
	
	<update id="updateProfileStatusByStudentId" parameterType="map">
		UPDATE student
		SET
			profilestatus = #{profileStatus,jdbcType=VARCHAR},
			modifieddate = #{modifiedDate,jdbcType=TIMESTAMP},
			modifieduser = #{modifiedUser,jdbcType=BIGINT}
		WHERE id = #{studentId,jdbcType=BIGINT}
	</update>
	
	<resultMap id="studentReportMap" type="edu.ku.cete.domain.report.StudentReport">
		<id column="id" property="id" jdbcType="BIGINT" />
		<id column="studentid" property="studentId" jdbcType="BIGINT" />
		<result column="studentfirstname" property="studentFirstName" jdbcType="BIGINT" />
		<result column="statestudentidentifier" property="stateStudentIdentifier" jdbcType="BIGINT" />
		<result column="studentlastname" property="studentLastName" jdbcType="BIGINT" />
<!-- 	 	<result column="enrollmentid" property="enrollmentId" jdbcType="BIGINT" /> -->
	 	<result column="gradecourseid" property="gradeId" jdbcType="BIGINT" />
	 	<result column="gradename" property="gradeName" jdbcType="BIGINT" />
	 	<result column="contentareacode" property="contentAreaCode" jdbcType="VARCHAR" />
	 	<result column="contentareaname" property="contentAreaName" jdbcType="BIGINT" />
	 	<result column="contentareaid" property="contentAreaId" jdbcType="BIGINT" />
	 	<result column="districtid" property="districtId" jdbcType="BIGINT" />
	 	<result column="stateid" property="stateId" jdbcType="BIGINT" />
	 	<result column="studenttest1id" property="studentTest1Id" jdbcType="BIGINT" />
	 	<result column="studenttest2id" property="studentTest2Id" jdbcType="BIGINT" />
	 	<result column="externaltest1id" property="externalTest1Id" jdbcType="BIGINT" />
	 	<result column="externaltest2id" property="externalTest2Id" jdbcType="BIGINT" />
	 	<result column="levelid" property="levelId" jdbcType="BIGINT" />
	 	<result column="rawscore" property="rawScore" jdbcType="NUMERIC" />
	 	<result column="subscore" property="subScore" jdbcType="NUMERIC" />
	 	<result column="assessmentprogramid" property="assessmentProgramId" jdbcType="BIGINT" />
	 	<result column="currentschoolyear" property="currentSchoolYear" jdbcType="BIGINT" />
	 	<result column="batchreportprocessid" property="batchReportProcessId" jdbcType="BIGINT" />
<!-- 	 	<result column="exitwithdrawaldate" property="exitWithDrawalDate" /> -->
<!-- 	 	<result column="enrollmentactive" property="enrollmentActive" /> -->
	 	<result column="status" property="status" />
	 	<result column="exitstatus" property="exitStatus" />
	 	<result column="incompletestatus" property="incompleteStatus" />
	 	<result column="previousyearlevelid" property="previousYearLevelId" jdbcType="BIGINT" />
	 	<result column="performance_rawscore_include_flag" property="performanceRawscoreIncludeFlag"/>
	 	<result column="transferred" property="transferred" jdbcType="BOOLEAN"/>
	 	<result column="standarderror" property="standardError" jdbcType="NUMERIC" />
   </resultMap> 
	
   <select id="getStudentsForReportProcess" resultMap="studentReportMap">
	SELECT distinct st.id AS studentid, st.legalfirstname as studentfirstname, st.legallastname as studentlastname,
		ts.gradecourseid, tc.contentareaid,
		st.stateid,
		st.statestudentidentifier,
		gc.name as gradename,
		ca.name as contentareaname, ca.abbreviatedname as contentareacode,
		#{currentSchoolYear} as currentschoolyear,
		#{assessmentProgramId,jdbcType=BIGINT} as assessmentprogramid
	FROM student st
		JOIN studentstests sts ON sts.studentid = st.id
		JOIN enrollment en ON en.studentid = st.id and sts.enrollmentid=en.id
		<if test="assessmentProgramCode == 'KAP'">
			join organization org on org.id = en.aypschoolid
		</if>
		<if test="assessmentProgramCode == 'KELPA2'">
			JOIN studentassessmentprogram sap ON sap.studentid = st.id and sap.assessmentprogramid = (select id from assessmentprogram where programname = 'KELPA2' and activeflag is true LIMIT 1)
			join organization org on org.id = en.attendanceschoolid
		</if>
		<if test="assessmentProgramCode != 'KAP' and assessmentProgramCode != 'KELPA2'">
			join organization org on org.id = en.attendanceschoolid
		</if>
		JOIN testsession ts ON ts.id = sts.testsessionid
		JOIN testcollection tc ON tc.id = ts.testcollectionid
		JOIN test t ON t.id = sts.testid
		join gradecourse gc on gc.id = ts.gradecourseid
		join contentarea ca on ca.id = tc.contentareaid
	WHERE st.stateid = #{contractOrgId,jdbcType=BIGINT}  
	 	AND (en.activeflag OR ((NOT en.activeflag) AND (en.exitwithdrawaltype IS NOT NULL)))
		AND en.currentschoolyear = #{currentSchoolYear}
		AND ts.gradecourseid = #{gradeId,jdbcType=BIGINT} AND ts.source = 'BATCHAUTO' AND ts.activeflag = TRUE
		AND tc.contentareaid = #{contentAreaId,jdbcType=BIGINT}
		AND (sts.status = ANY(ARRAY
		<foreach close="]" collection="testsStatusIds" item="testsStatusId" open="[" separator=",">
			#{testsStatusId}
		</foreach>
		) AND sts.activeflag)
		AND org.reportprocess = true
		<if test="rawScaleExternalTestIds != null">
			AND t.externalid = ANY(ARRAY
			<foreach close="]" collection="rawScaleExternalTestIds" item="externalTestId" open="[" separator=",">
				#{externalTestId}
			</foreach>
			)
		</if>
		<if test="studentIdList != null and studentIdList.size > 0 ">
			AND st.id = ANY(ARRAY
			<foreach close="]" collection="studentIdList" item="studId" open="[" separator=",">
				#{studId}
			</foreach>
			)
		</if>
		<if test="studentId != null">
			and st.id = #{studentId}
		</if>
		ORDER BY st.id
		<if test="pageSize != null">LIMIT #{pageSize}</if>
		<if test="offset != null">OFFSET #{offset}</if>
	</select>
	
	<select id="getStudentsForReportGeneration" resultMap="studentReportPDFMap">
		SELECT sr.id, sr.studentid, enrollmentid,st.statestudentidentifier, sr.gradeid as gradecourseid, sr.contentareaid, attendanceschoolid as attendanceschoolid, sr.districtid, sr.stateid, 
		sr.studenttest1id, sr.studenttest2id, sr.externaltest1id, sr.externaltest2id, sr.levelid, sr.rawscore, sr.subscore, 
		sr.batchreportprocessid, sr.scalescore, sr.standarderror, sr.assessmentprogramid, sr.status, sr.exitstatus, 
		sr.incompletestatus, sr.previousyearlevelid, st.legalfirstname as studentfirstname,sr.studentperformancetestid, 
		st.legallastname as studentlastname, st.statestudentidentifier, sch.organizationname as attendanceschoolname, 
		dist.organizationname as districtname, dist.displayidentifier as districtdisplayidentifier, state.organizationname as statename, 
		ap.programname as assessmentprogramname, ap.abbreviatedname as assessmentprogramcodesr,transferred,combinedlevel,
		combinedlevelid,mdptscore,mdptlevelid,ld.level as mdptlevel,sr.suppressmdptscore,sr.suppressmainscalescoreprfrmlevel,
		suppresscombinedscore,mdptscorableflag,(Select distinct performance_rawscore_include_flag from rawtoscalescores 
		where schoolyear = sr.schoolyear and assessmentprogramid = assessmentprogramid and subjectid = sr.contentareaid and gradeid = sr.gradeid 
		and performance_rawscore_include_flag is not null) 
		as  performance_rawscore_include_flag,
		smc.reportedmeasure
		<if test="processByStudentId == 'TRUE' ">
		,rp.id as studentreportreprocessid
		</if>
		FROM studentreport sr 
		inner join student st on st.id=sr.studentid 
		inner join organization sch on sch.id=sr.attendanceschoolid 
		inner join organization dist on dist.id=sr.districtid 
		inner join organization state on state.id=sr.stateid 
		inner join assessmentprogram ap on ap.id=sr.assessmentprogramid
		left join leveldescription ld on sr.mdptlevelid = ld.id
		 <if test="processByStudentId == 'TRUE' and reprocessEntireDistrict=='FALSE'">		
		inner  join studentreportreprocess rp on rp.studentId=sr.studentid  and rp.isrcomplete is false and rp.generatespecificstudentreport is true
		</if> 
		<if test="processByStudentId == 'TRUE' and reprocessEntireDistrict=='TRUE'">
		inner  join studentreportreprocess rp on rp.districtid=sr.districtid  and isrcomplete  is false and rp.generatereportsindistrict is true
		</if>
		left join studentmetametricsmeasuresscore smc on smc.assessmentprogramid = sr.assessmentprogramid 
		and smc.schoolyear = sr.schoolyear and smc.gradeid = sr.gradeid	and smc.subjectid = sr.contentareaid and smc.scalescore = sr.scalescore and smc.activeflag is true
		WHERE sr.stateid = #{contractOrgId,jdbcType=BIGINT} 
			and sr.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			and sr.contentareaid = #{contentAreaId,jdbcType=BIGINT}
			and sr.gradeid = #{gradeId,jdbcType=BIGINT}
			<!-- and sr.status is true -->
			and sr.schoolYear = #{schoolYear,jdbcType=BIGINT}
			  <if test="studentId != null">
  				and sr.studentid =  #{studentId}
   			</if>
   			 <if test="processByStudentId == 'TRUE'">
   			 and rp.contentareaid=sr.contentareaid
   			 and rp.assessmentprogramid=sr.assessmentprogramid
   			 and rp.gradeid=sr.gradeid
   			 </if>
		order by sr.id asc LIMIT #{pageSize} OFFSET #{offset}
	</select>
	
	<!-- added during US16966 - To add alert message to upload -->
	<select id="getOrganizationsByStateStudentId" resultMap="EnrollmentsOrganizationInfo">
	   select e.id as enrollmentid,
	   	 otd.schoolid as attendanceschoolid,
		 otd.schoolname as schoolname,
		 otd.districtname as districtname
		 from organizationtreedetail otd
		 join enrollment e on otd.schoolid =  e.attendanceschoolid
		 join student s on s.id = e.studentid
		 where s.statestudentidentifier = #{stateStudentId}  
		 and otd.stateid=#{stateId,jdbcType=BIGINT}
		 and e.currentschoolyear = #{currentSchoolYear,jdbcType=BIGINT}
		 and e.activeflag = true and s.activeflag = true
		<!--and e.attendanceschoolid in (select id from organization_children_oftype(#{stateId,jdbcType=BIGINT}, 'SCH')) -->
	</select>
	
	<resultMap id="EnrollmentsOrganizationInfo" type="edu.ku.cete.domain.enrollment.EnrollmentsOrganizationInfo">
		<result column="enrollmentid" property="enrollmentId" jdbcType="BIGINT" />
		<result column="schoolname" property="schoolName" jdbcType="VARCHAR" />
		<result column="districtname" property="districtName" jdbcType="VARCHAR" />
		<result column="attendanceschoolid" property="attendanceSchoolId" jdbcType="BIGINT" />
	</resultMap> 	
	
	
	<resultMap id="studentReportPDFMap" type="edu.ku.cete.domain.report.StudentReport" extends="studentReportMap">
		<result column="attendanceschoolid" property="attendanceSchoolId" jdbcType="BIGINT" />
		<result column="scalescore" property="scaleScore" jdbcType="BIGINT" />
		<result column="assessmentprogramname" property="assessmentProgramName" jdbcType="VARCHAR" />
		<result column="assessmentprogramcode" property="assessmentProgramCode" jdbcType="VARCHAR" />
		<result column="studentfirstname" property="studentFirstName" jdbcType="VARCHAR" />
		<result column="studentlastname" property="studentLastName" jdbcType="VARCHAR" />
		<result column="statestudentidentifier" property="stateStudentIdentifier" jdbcType="VARCHAR" />
		<result column="attendanceschoolname" property="attendanceSchoolName" jdbcType="VARCHAR" />
		<result column="districtname" property="districtName" jdbcType="VARCHAR" />
		<result column="districtdisplayidentifier" property="districtDisplayIdentifier" jdbcType="VARCHAR" />
		<result column="combinedlevel" property="combinedLevel" jdbcType="BIGINT" />
		<result column="combinedlevelid" property="combinedLevelId" jdbcType="BIGINT" />
		<result column="mdptscore" property="mdptScore" jdbcType="BIGINT" />
		<result column="mdptlevelid" property="mdptLevelId" jdbcType="BIGINT" />
		<result column="suppressmdptscore" property="suppressMdptScore" jdbcType="BOOLEAN" />
		<result column="mdptLevel" property="mdptLevel" jdbcType="BIGINT" />
		<result column="suppressmainscalescoreprfrmlevel" property="suppressMainScalescorePrfrmLevel" jdbcType="BOOLEAN" />
		<result column="suppresscombinedscore" property="suppressCombinedScore" jdbcType="BOOLEAN" />
		<result column="mdptscorableflag" property="mdptScorableFlag" jdbcType="BOOLEAN" />
		<result column="studentperformancetestid" property="studentPerformanceTestId" jdbcType="VARCHAR" />
		<result column="studentreportreprocessid" property="studentReportReprocessId" jdbcType="BIGINT" />
		<result column="reportedmeasure" property="metametricsMeasure" jdbcType="VARCHAR" />
	</resultMap>

   <select id="findStudentsByIds" resultType="Student">
	select
	st.id, st.stateStudentIdentifier,  st.legalFirstName, 
    st.legalMiddleName, st.legalLastName, st.generationCode,
    st.comprehensiveRace,st.primaryDisabilityCode,
    st.firstLanguage, st.dateOfBirth, st.gender,
    st.createdDate, st.synced,
    st.modifiedDate, st.username, st.password
    from student st 
	where
    st.id in 
	<foreach collection="studentIds" item="studentId" open="(" close=")" separator="," >
		#{studentId}
	</foreach>
	</select>
	
	<select id="getStudentUserNamePasswordExtract" resultMap="viewStudentInfo" > 
	with enrolledrosters as(select  rs.coursesectionname , enrlr.enrollmentid,au.surname,rs.statesubjectareaid from
									roster rs     
									inner  join enrollmentsrosters enrlr on enrlr.rosterid=rs.id and enrlr.activeflag = true 
									inner  join aartuser au on au.id=rs.teacherid and au.activeflag is true
									inner  join enrollment en on enrlr.enrollmentid =en.id and en.activeflag is true
									join organizationtreedetail orglist on orglist.schoolid = en.attendanceschoolid 									 
									join student st on (st.id = en.studentid and st.activeflag is true) 
									inner join studentassessmentprogram sap on (sap.studentid = st.id and sap.activeflag is true) 
									inner join assessmentprogram ap on (ap.id = sap.assessmentprogramid and ap.activeflag is true) 	
									where rs.activeflag = true
									AND (orglist.schoolid = #{orgChildrenById,jdbcType=BIGINT} OR orglist.districtid = #{orgChildrenById,jdbcType=BIGINT}
   											 OR orglist.stateid = #{orgChildrenById,jdbcType=BIGINT})
									and en.activeflag is true and en.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
								<if test="contentAreaAssessment != null and contentAreaAssessment.size > 0">  
									  and (rs.statesubjectareaid, ap.id) in 
									  <foreach item="entries" index="index" collection="contentAreaAssessment" open="(" separator="," close=")">
									   <foreach item="value" index="key" collection="entries" open="(" separator="),(" close=")">
									    #{value},#{key}
									   </foreach>
									  </foreach> 
									  </if>
	 		 					<if test="contentAreaAssessment == null">   
	 								 and 
	 								 ap.id in
	  							<foreach collection="assessmentProgramIds" item="assessmentProgramId" open="(" close=")" separator="," >
   									#{assessmentProgramId}
    								 </foreach>
    							 </if>  
							)
 select distinct 
  st.id, orglist.statename, orglist.districtname, orglist.schoolname, gc.abbreviatedname as gradecoursename, 
  enr.coursesectionname as rostername, ca.name as subjectname, st.legallastname, st.legalfirstname,st.legalmiddlename, st.statestudentidentifier, 
  st.username, st.password, enttsa.groupingindicator1,enttsa.groupingindicator2, ca.id as subjectid, ap.abbreviatedname as abbreviatedName, 
  ap.programname as programname ,enr.surname
  from enrollment en 
  join organizationtreedetail orglist on orglist.schoolid = en.attendanceschoolid 
  join organization org on org.id = en.attendanceschoolid and org.activeflag is true 
  join gradecourse gc on (gc.id = en.currentgradelevel and gc.activeflag is true) 
  join student st on (st.id = en.studentid and st.activeflag is true) 
  inner join studentassessmentprogram sap on (sap.studentid = st.id and sap.activeflag is true) 
  inner join assessmentprogram ap on (ap.id = sap.assessmentprogramid and ap.activeflag is true) 
  
  inner join enrollmenttesttypesubjectarea enttsa on (en.id=enttsa.enrollmentid and enttsa.activeflag is true)
  inner join testtype tt on enttsa.testtypeid = tt.id and tt.activeflag is true
  inner join assessment ass on tt.assessmentid = ass.id and ass.activeflag is true
  inner join testingprogram tp on tp.id = ass.testingprogramid 
  inner join testtypesubjectarea ttsa on ttsa.testtypeid = tt.id and ttsa.activeflag is true
  inner join contentareatesttypesubjectarea cattsa on cattsa.testtypesubjectareaid = ttsa.id and cattsa.activeflag is true
  inner join subjectarea sa on (enttsa.subjectareaid = sa.id and ttsa.subjectareaid = sa.id) and sa.activeflag is true
  inner join contentarea ca on (ca.id = cattsa.contentareaid)
  <if test="isTeacher == false">
  left outer
  </if>
  join enrolledrosters enr on ca.id=enr.statesubjectareaid and en.id=enr.enrollmentid
  where en.activeflag is true and en.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} 
  <if test="grade != null and grade!='' ">
    and gc.abbreviatedname = #{grade,jdbcType=VARCHAR}
   </if>
   <if test="isTeacher == true">
     and enr.teacherid = #{educatorId,jdbcType=BIGINT}
   </if>
  AND (orglist.schoolid = #{orgChildrenById,jdbcType=BIGINT}
    OR orglist.districtid = #{orgChildrenById,jdbcType=BIGINT}
    OR orglist.stateid = #{orgChildrenById,jdbcType=BIGINT})
    
  <if test="contentAreaAssessment != null and contentAreaAssessment.size > 0">  
  and (ca.id, ap.id) in 
  <foreach item="entries" index="index" collection="contentAreaAssessment" open="(" separator="," close=")">
   <foreach item="value" index="key" collection="entries" open="(" separator="),(" close=")">
    #{value},#{key}
   </foreach>
  </foreach> 
  </if>
  <if test="contentAreaAssessment == null">   
  and 
  ap.id in
  <foreach collection="assessmentProgramIds" item="assessmentProgramId" open="(" close=")" separator="," >
   #{assessmentProgramId}
     </foreach>
     </if> 
     
   Union
   
   select distinct 
  st.id, orglist.statename, orglist.districtname, orglist.schoolname, gc.abbreviatedname as gradecoursename, 
  enr.coursesectionname as rostername, ca.name as subjectname, st.legallastname, st.legalfirstname,st.legalmiddlename, st.statestudentidentifier, 
  st.username, st.password, enttsa.groupingindicator1,enttsa.groupingindicator2, ca.id as subjectid, ap.abbreviatedname as abbreviatedName, 
  ap.programname as programname ,enr.surname
  from enrollment en 
  join organizationtreedetail orglist on orglist.schoolid = en.attendanceschoolid 
  join organization org on org.id = en.attendanceschoolid and org.activeflag is true 
  join gradecourse gc on (gc.id = en.currentgradelevel and gc.activeflag is true) 
  join student st on (st.id = en.studentid and st.activeflag is true) 
  inner join studentassessmentprogram sap on (sap.studentid = st.id and sap.activeflag is true) 
  inner join assessmentprogram ap on (ap.id = sap.assessmentprogramid and ap.activeflag is true) 
  
  left join enrollmenttesttypesubjectarea enttsa on (en.id=enttsa.enrollmentid and enttsa.activeflag is true)
  left join testtype tt on enttsa.testtypeid = tt.id and tt.activeflag is true
  left join assessment ass on tt.assessmentid = ass.id and ass.activeflag is true
  left join testingprogram tp on tp.id = ass.testingprogramid 
  left join testtypesubjectarea ttsa on ttsa.testtypeid = tt.id and ttsa.activeflag is true
  left join contentareatesttypesubjectarea cattsa on cattsa.testtypesubjectareaid = ttsa.id and cattsa.activeflag is true
  left join subjectarea sa on (enttsa.subjectareaid = sa.id and ttsa.subjectareaid = sa.id) and sa.activeflag is true
  left join contentarea ca on (ca.id = cattsa.contentareaid)
  <if test="isTeacher == false">
  left outer
  </if>
  join enrolledrosters enr on ca.id=enr.statesubjectareaid and en.id=enr.enrollmentid
  where en.activeflag is true and en.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} 
  <if test="grade != null and grade!='' ">
    and gc.abbreviatedname = #{grade,jdbcType=VARCHAR}
   </if>
   <if test="isTeacher == true">
     and enr.teacherid = #{educatorId,jdbcType=BIGINT}
   </if>
  AND (orglist.schoolid = #{orgChildrenById,jdbcType=BIGINT}
    OR orglist.districtid = #{orgChildrenById,jdbcType=BIGINT}
    OR orglist.stateid = #{orgChildrenById,jdbcType=BIGINT})
    
  <if test="contentAreaAssessment != null and contentAreaAssessment.size > 0">  
  and (ca.id, ap.id) in 
  <foreach item="entries" index="index" collection="contentAreaAssessment" open="(" separator="," close=")">
   <foreach item="value" index="key" collection="entries" open="(" separator="),(" close=")">
    #{value},#{key}
   </foreach>
  </foreach> 
  </if>
  <if test="contentAreaAssessment == null">   
  and 
  ap.id in
  <foreach collection="assessmentProgramIds" item="assessmentProgramId" open="(" close=")" separator="," >
   #{assessmentProgramId}
     </foreach>
     </if>
  and enttsa.enrollmentid is null   
       
  order by statename asc, districtname asc , schoolname asc , groupingindicator1 asc, groupingindicator2 asc, 
  legallastname asc, legalfirstname asc,  subjectname asc, surname asc; 
 </select>
 
	
	<select id="getStudentjsonData" resultMap="studentJsonMap" >	
		select 
     st.id                     as  studentid         ,
     st.username			   as  username			 ,
     st.legalfirstname         as  firstname         ,
     st.legallastname          as  lastname          ,
     st.legalmiddlename        as  middlename        ,
     st.statestudentidentifier as  studentstateid    ,
     st.generationcode         as  generation        ,
     st.dateofbirth            as  dateofbirth       ,
     st.hispanicethnicity      as  hispanicethnicity ,
     ass.abbreviatedname       as  assessmentprogram ,
     otd.schoolid              as  so_id             ,
     otd.statename             as  state             ,
     otd.districtname          as  district          ,
     otd.schoolname            as  schoolname        ,
     e.localstudentidentifier  as  localId           ,
     otdayp.schoolname         as  aypSchoolName     ,
     (CASE WHEN st.gender = 1 THEN 'Male' WHEN st.gender = 0 THEN 'Female' END) as gender ,
     (select categoryname from category where categorycode = st.firstlanguage and categorytypeid = (select id from categorytype where typecode = 'FIRST_LANGUAGE') and activeflag = true) as firstlanguage, 
     (select categoryname from category where categorycode = st.comprehensiverace and categorytypeid = (select id from categorytype where typecode = 'COMPREHENSIVE_RACE') and activeflag = true) as comprehensiverace, 
     (select categoryname from category where categorycode = st.primarydisabilitycode and categorytypeid = (select id from categorytype where typecode = 'PRIMARY_DISABILITY_CODES') and activeflag = true) as primarydisabilitycode,
     (CASE WHEN st.esolparticipationcode = '0' THEN 'Not Eligible [0]'
           WHEN st.esolparticipationcode = '1' THEN 'Title III Funded [1]'
           WHEN st.esolparticipationcode = '2' THEN 'State ESOL/Bilingual Funded [2]'
           WHEN st.esolparticipationcode = '3' THEN 'Title III and State ESOL/Bilingual Funded [3]'
           WHEN st.esolparticipationcode = '4' THEN 'Monitored ESOL Student [4]'
           WHEN st.esolparticipationcode = '5' THEN 'Eligible but not supported [5]'
           WHEN st.esolparticipationcode = '6' THEN 'ESOL but not funded [6]' END) as eSOLParticipation
         
	from student st
	left join enrollment e on e.studentid = st.id and e.activeflag = true 
	left join organizationtreedetail otd on otd.schoolid = e.attendanceschoolid
	left join organizationtreedetail otdayp on otdayp.schoolid = e.aypschoolid
	left join studentassessmentprogram sas on sas.studentid = st.id
	left join assessmentprogram ass on ass.id = sas.assessmentprogramid
	where st.id = #{studentId,jdbcType=BIGINT}
	and st.activeflag = true
	and ass.activeflag = true		
	</select>
	
	<select id="getStateStudentIdFromELPAPreId" resultType="Student">
        Select * from student where id::varchar in (Select studentid from kelpastudentpreid 
        where studentid = #{studentId,jdbcType=VARCHAR} )
    </select>
    
    <select id="getStateStudentIdfrompSeudoId" resultType="String">
        Select studentstateid from kelpastudentpseudoid 
        where kite_pseudoid  = #{pSeudoId,jdbcType=VARCHAR} limit 1
    </select>	
	
	<select id="getPasswordByStudentId" resultType="String" parameterType="map">
		select password from student where id = #{studentId,jdbcType=BIGINT}
	</select>
	
	<select id="checkStudentUsername" resultType="String" >
		select username from student where username =#{newUsername,jdbcType=VARCHAR} and id != #{id,jdbcType=BIGINT} 
	</select>
	
	<select id="updateStudentUsername" parameterType="map">
		update student SET username =#{newUsername} ,modifieduser=#{userId,jdbcType=BIGINT}, modifieddate=now() 
	where id=#{studentId,jdbcType=BIGINT}
	</select>
	
	<select id="updateStudentPassword">
	update student SET password =#{newPassword,jdbcType=VARCHAR},modifieduser=#{userId,jdbcType=BIGINT}, modifieddate=now() 
	where id=#{studentId,jdbcType=BIGINT}
	</select>
		
	<select id="getViewDuplicateStudentInformationRecords" resultMap="viewStudentInfo" >
	 	select count(*) OVER() AS totalrecords, * from (<include refid="viewDuplicateStudentInformationRecordsSql"/>) as std
	 	where 1=1 
 		<include refid="DuplicateStudents_Info_Where_Clause" />	
 		
 		<if test="sortByColumn != null">
    	ORDER BY
    		<choose>
	    		<when test="sortByColumn == 'id'">id</when>
	      		<when test="sortByColumn == 'stateStudentIdentifier'">statestudentidentifier</when>
	      		<when test="sortByColumn == 'legalFirstName'">legalfirstname</when>
	      		<when test="sortByColumn == 'legalMiddleName'">legalMiddleName</when>
	      		<when test="sortByColumn == 'legalLastName'">legallastname</when>
	      		<when test="sortByColumn == 'generationCode'">generationcode</when>
	      		<when test="sortByColumn == 'dateOfBirthStr'">dateofbirth</when>
	      		<when test="sortByColumn == 'dateOfBirth'">dateofbirth</when>
	      		<when test="sortByColumn == 'genderString'">genderString</when>
	      		<when test="sortByColumn == 'accessProfileStatus'">accessprofilestatus</when>
	      		<when test="sortByColumn == 'status'">status</when> 
	      		<when test="sortByColumn == 'firstLanguage'">firstlanguage</when>
	      		<when test="sortByColumn == 'comprehensiveRace'">comprehensiverace</when>
	      		<when test="sortByColumn == 'primaryDisabilityCode'">primarydisabilitycode</when> 
	      		<when test="sortByColumn == 'gradeCourseId'">gradecourseid</when>
	      		<when test="sortByColumn == 'gradeCourseName'">gradecoursename</when> 
	      		<when test="sortByColumn == 'currentSchoolYears'">currentschoolyears</when>
	      		<when test="sortByColumn == 'localStudentIdentifiers'">localstudentidentifiers</when> 
	      		<when test="sortByColumn == 'residenceDistrictIdentifiers'">residencedistrictidentifiers</when>
	      		<when test="sortByColumn == 'attendanceSchoolDisplayIdentifiers'">attendanceschooldisplayidentifiers</when>
	      		<when test="sortByColumn == 'attendanceSchoolNames'">attendanceschoolnames</when>
	      		<when test="sortByColumn == 'programName'">programname</when>
	      		<when test="sortByColumn == 'giftedStudent'">giftedStudent</when>
	      		<when test="sortByColumn == 'hispanicEthnicity'">hispanicEthnicity</when>
	      		<when test="sortByColumn == 'esolParticipationCode'">esolParticipationCode</when>
	      		<when test="sortByColumn == 'rosterIds'">rosterids</when>
	      		<when test="sortByColumn == 'educatorName'">educatorname</when>
	      		<when test="sortByColumn == 'aypSchoolNames'">aypschoolnames</when> 
	      	</choose>
    	 	<if test="sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
		</if> 
			
		<if test="limit != null and limit != 0 ">
			limit #{limit} 
		</if>
		<if test="offset!=null">
			offset #{offset};
		</if>
		
	</select>
	
	<sql id="viewDuplicateStudentInformationRecordsSql">
	  	with std_list as (
		select 
		ARRAY_AGG(distinct s.id) ids
		,count(distinct s.id) cnt
		,array_to_string(array_agg(distinct e.currentgradelevel), ',') gradecourseid
		,array_to_string(array_agg(distinct gc.name), ',') gradecoursename
		,array_to_string(array_agg(distinct e.localstudentidentifier), ',') localstudentidentifiers
		,currentschoolyear as currentSchoolYears
		,array_to_string(array_agg(distinct ot.districtdisplayidentifier), ',') residencedistrictidentifiers
		,array_to_string(array_agg(distinct ot.schooldisplayidentifier), ',') attendanceschooldisplayidentifiers
		,array_to_string(array_agg(distinct ot.schoolname), ',') attendanceschoolnames
		,array_to_string(array_agg(distinct o.organizationname), ',') aypschoolnames
		,array_to_string(array_agg(distinct ot.schoolid), ',') schoolid,
		<!-- ,array_to_string(array_agg(distinct e.giftedstudent), ',') giftedstudent -->
		 case when
array_to_string(array_agg(distinct e.giftedstudent), ',') = '' then null else 
array_to_string(array_agg(distinct e.giftedstudent), ',')
END as giftedstudent 
		from student s 
		inner join enrollment e ON e.studentid = s.id and e.activeflag is true 
		inner join studentassessmentprogram sap ON  sap.studentid = s.id AND sap.activeflag is TRUE 
		inner join organizationtreedetail ot on e.attendanceschoolid = ot.schoolid AND s.stateid=ot.stateid
		left outer join organization o on e.aypschoolid = o.id
		inner join gradecourse gc ON e.currentgradelevel = gc.id
		where e.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and sap.assessmentprogramid = #{userCurrentAssessmentProgramId,jdbcType=BIGINT} and 
		(ot.schoolid = #{orgChildrenById,jdbcType=BIGINT} OR 
		ot.districtid = #{orgChildrenById,jdbcType=BIGINT} OR 
		ot.stateid = #{orgChildrenById,jdbcType=BIGINT})
		group by ot.stateid,trim(upper(legalfirstname)),trim(upper(legallastname)),dateofbirth,e.currentschoolyear
		having count(distinct s.id)&gt;1)
		select  
		 s.id
		,s.statestudentidentifier
		,s.legalfirstname
		,s.legalmiddlename 
		,s.legallastname
		,s.generationcode 
		,s.dateofbirth
		,s.gender
		,array_length(tmp.ids,1) duplicatecount
		,CASE WHEN s.gender=1 THEN 'Male' WHEN s.gender=0 THEN 'Female' ELSE '' END genderstring
		,s.profilestatus AS accessprofilestatus
		,CASE WHEN sap.studentid is null  THEN 'Not Applicable'
		      WHEN sap.studentid is not null and sv.studentid is not null THEN c.categoryname       
		      else 'NOT STARTED'  END status
		,(SELECT categoryname FROM category WHERE  categorycode = s.firstlanguage 
		  AND categorytypeid =(SELECT id FROM categorytype WHERE typecode ='FIRST_LANGUAGE')) firstlanguage
		,(SELECT categoryname FROM category WHERE categorycode = s.comprehensiverace 
		  AND  categorytypeid =(SELECT id FROM categorytype WHERE  typecode = 'COMPREHENSIVE_RACE')) comprehensiverace
		,(SELECT categoryname FROM category WHERE upper(categorycode) = upper(s.primarydisabilitycode)
		  AND  categorytypeid = (SELECT id FROM categorytype WHERE  typecode = 'PRIMARY_DISABILITY_CODES')) primarydisabilitycode
		,s.hispanicethnicity
		,s.esolparticipationcode 
		,tmp.gradecourseid
		,tmp.gradecoursename
		,tmp.localstudentidentifiers
		,tmp.currentSchoolYears
		,tmp.residencedistrictidentifiers
		,tmp.attendanceschooldisplayidentifiers
		,tmp.attendanceschoolnames
		,tmp.aypschoolnames
		,array_to_string(ARRAY ( SELECT rosterid FROM  enrollmentsrosters er
		   inner join enrollment e on e.id=er.enrollmentid 
		   where e.studentid = s.id AND currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} AND er.activeflag IS TRUE AND e.activeflag IS TRUE),',') AS rosterids
		,array_to_string(ARRAY (select distinct r.coursesectionname ||' ('||c.name||')' from roster r,enrollmentsrosters er ,contentarea c 
		       where r.id=er.rosterid and c.id=r.statesubjectareaid and er.enrollmentid in 
		       (select distinct id from enrollment enrl where enrl.studentid = s.id and currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and enrl.activeflag is true) 
		       and er.activeflag is true),',') AS rostername
		,s.activeflag 
		,array_to_string(ARRAY (SELECT DISTINCT ap.abbreviatedname FROM assessmentprogram ap 
		  inner join studentassessmentprogram sap ON ap.id = sap.assessmentprogramid
		  AND sap.studentid = s.id AND sap.activeflag = TRUE),', ') AS programname
		,giftedstudent
		,tmp.schoolid
		, array_to_string(ARRAY (SELECT displayname FROM aartuser WHERE id IN
	( SELECT teacherid FROM roster WHERE id in (SELECT rosterid  FROM enrollmentsrosters er inner join enrollment e on e.id=er.enrollmentid 
	where e.studentid = s.id AND currentschoolyear =  #{currentSchoolYear, jdbcType=INTEGER} AND er.activeflag IS TRUE AND e.activeflag IS TRUE))),',') AS educatorname
		from std_list tmp 
		inner join student s on s.id= any(array[tmp.ids])
		left outer join (select studentid from studentassessmentprogram sap
		 inner join assessmentprogram ap ON  ap.id = sap.assessmentprogramid 
		 where sap.activeflag  is true and ap.abbreviatedname='DLM'group by studentid) sap  ON  sap.studentid = s.id 
		left outer join (select studentid,max(status) status from survey sv  
		 where sv.activeflag is TRUE group by studentid) sv ON sv.studentid = s.id
		 left outer join category c ON c.id = sv.status
		order by s.legalfirstname,s.legallastname,s.dateofbirth
	  </sql>
	  
	  <sql id="DuplicateStudents_Info_Where_Clause">
		<if test="studentInformationRecordCriteriaMap.stateStudentIdentifier != null">
			AND statestudentidentifier ilike #{studentInformationRecordCriteriaMap.stateStudentIdentifier}
		</if>
		<if test="studentInformationRecordCriteriaMap.legalFirstName != null">
			AND legalfirstname ilike #{studentInformationRecordCriteriaMap.legalFirstName}
		</if>
		<if test="studentInformationRecordCriteriaMap.legalMiddleName != null">
			AND legalmiddlename ilike #{studentInformationRecordCriteriaMap.legalMiddleName}
		</if>   	
		<if test="studentInformationRecordCriteriaMap.legalLastName != null">
			AND legallastname ilike #{studentInformationRecordCriteriaMap.legalLastName}
		</if>	
		<if test="studentInformationRecordCriteriaMap.generationCode != null">
			AND generationcode ilike #{studentInformationRecordCriteriaMap.generationCode}
		</if>
		<if test="studentInformationRecordCriteriaMap.genderString != null">
			AND CAST(gender AS TEXT) ilike #{studentInformationRecordCriteriaMap.genderString}
		</if>
		<if test="studentInformationRecordCriteriaMap.dateOfBirth != null">
			AND to_char(dateofbirth, 'MM/DD/YYYY') ilike #{studentInformationRecordCriteriaMap.dateOfBirth} 
		</if>
		<if test="studentInformationRecordCriteriaMap.dateOfBirthStr != null">
			AND to_char(dateofbirth, 'MM/DD/YYYY') ilike #{studentInformationRecordCriteriaMap.dateOfBirthStr} 
		</if>
		<if test="studentInformationRecordCriteriaMap.firstLanguage != null">
			AND firstlanguage ilike #{studentInformationRecordCriteriaMap.firstLanguage}
		</if>  
		<if test="studentInformationRecordCriteriaMap.comprehensiveRace != null">
			AND comprehensiverace ilike #{studentInformationRecordCriteriaMap.comprehensiveRace}
		</if>
		<if test="studentInformationRecordCriteriaMap.primaryDisabilityCode != null">
			AND primarydisabilitycode ilike #{studentInformationRecordCriteriaMap.primaryDisabilityCode}
		</if>
		<if test="studentInformationRecordCriteriaMap.hispanicethnicity != null">
			AND hispanicethnicity ilike #{studentInformationRecordCriteriaMap.hispanicEthnicity}
		</if>
		<if test="studentInformationRecordCriteriaMap.studentId != null">
			AND (id || '') ilike #{studentInformationRecordCriteriaMap.studentId}
		</if>
		<if test="studentInformationRecordCriteriaMap.programName != null">
			AND programname ilike #{studentInformationRecordCriteriaMap.programName}
		</if>
		<if test="studentInformationRecordCriteriaMap.localStudentIdentifiers != null">
			AND localstudentidentifiers ilike #{studentInformationRecordCriteriaMap.localStudentIdentifiers}
   		</if>
	   	<if test="studentInformationRecordCriteriaMap.currentSchoolYears != null">
				AND currentschoolyears ilike #{studentInformationRecordCriteriaMap.currentSchoolYears}
	   	</if>
	 	<if test="studentInformationRecordCriteriaMap.residenceDistrictIdentifiers != null">
				AND residencedistrictidentifiers ilike #{studentInformationRecordCriteriaMap.residenceDistrictIdentifiers}
		</if>			
		<if test="studentInformationRecordCriteriaMap.attendanceSchoolNames != null">
				AND attendanceschoolnames ilike #{studentInformationRecordCriteriaMap.attendanceSchoolNames}
		</if>
		<if test="studentInformationRecordCriteriaMap.rosterIds != null">
				AND rosterids ilike #{studentInformationRecordCriteriaMap.rosterIds}
		</if>
		<if test="studentInformationRecordCriteriaMap.rosterName != null">
				AND rostername ilike #{studentInformationRecordCriteriaMap.rosterName}
		</if>
		<if test="studentInformationRecordCriteriaMap.attendanceSchoolDisplayIdentifiers != null">
				AND attendanceschooldisplayidentifiers ilike #{studentInformationRecordCriteriaMap.attendanceSchoolDisplayIdentifiers}
		</if>
		<if test="studentInformationRecordCriteriaMap.gradeCourseName != null">
				AND gradecoursename ilike #{studentInformationRecordCriteriaMap.gradeCourseName}
		</if>
		<if test="studentInformationRecordCriteriaMap.gradeCourseId != null">
				AND gradecourseid ilike #{studentInformationRecordCriteriaMap.gradeCourseId}
		</if>
		<if test="studentInformationRecordCriteriaMap.accessProfileStatus != null">
				AND accessprofilestatus ilike #{studentInformationRecordCriteriaMap.accessProfileStatus}
		</if>
		<if test="studentInformationRecordCriteriaMap.status != null">
				AND status ilike #{studentInformationRecordCriteriaMap.status}
		</if>
		<if test="studentInformationRecordCriteriaMap.esolParticipationCode != null">
				AND esolparticipationcode ilike #{studentInformationRecordCriteriaMap.esolParticipationCode}
		</if>
		<!-- Changed for - US16942  -->
		<if test="studentInformationRecordCriteriaMap.aypSchoolNames != null">
				AND aypschoolnames ilike #{studentInformationRecordCriteriaMap.aypSchoolNames}
		</if>
		<if test="studentInformationRecordCriteriaMap.stateStudentIdentifier != null">
			AND statestudentidentifier ilike #{studentInformationRecordCriteriaMap.stateStudentIdentifier}
		</if>
		<if test="studentInformationRecordCriteriaMap.testTypeName != null">
			AND testtypename ilike #{studentInformationRecordCriteriaMap.testTypeName}
		</if>	
	</sql>
	  
	  <update id="removeDestPnpSettings"  parameterType="map">
	  	   update studentprofileitemattributevalue set activeflag=false,
				modifieddate = #{modifiedDate},
				modifieduser = #{modifiedUser}
				where studentid=#{studentPnpRemove};
	  </update>
	  
	  <update id="removeSourcePnpSettings"  parameterType="map">
	  		--DE18292 swap the student ids
	   		with retainPnp as (select id 
	   									from studentprofileitemattributevalue 
	   									where studentid=#{studentPnpToRetain}),
				 updatePnp as (update studentprofileitemattributevalue 
				 						set activeflag=false, studentid=#{studentPnpToRetain}, 
				 						modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
										where id in (select id from studentprofileitemattributevalue where studentid=#{studentPnpRemove}))

	   		update studentprofileitemattributevalue s 
	   		set activeflag=true, studentid=#{studentPnpRemove}, 
	   		modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
			FROM retainPnp rp
	   		where s.id=rp.id;
			
			update studentpnpjson set jsontext =(select jsontext from studentpnpjson where studentid =#{studentPnpToRetain} and activeflag is true),
			modifieddate = #{modifiedDate},
			modifieduser = #{modifiedUser}
			where studentid=#{studentPnpRemove} and activeflag is true;
			
			update student set profilestatus =(select profilestatus from student where id=#{studentPnpToRetain}),
			modifieddate = #{modifiedDate},
			modifieduser = #{modifiedUser}
			where id=#{studentPnpRemove};
	  </update>
	  
	   <update id="removeSourceFcsSettings"  parameterType="map">
	   		--DE18292 swap the student ids
	   		with retainFCS as (select id 
	   									from survey 
	   									where studentid=#{studentFcsToRetain}),
				 updateFCS as (update survey 
				 						set activeflag=false, studentid=#{studentFcsToRetain}, 
				 						modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
										where id in (select id from survey where studentid=#{studentFcsRemove}))

	   		update survey s 
	   		set activeflag=true, studentid=#{studentFcsRemove}, 
	   		modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
			FROM retainFCS rf
	   		where s.id=rf.id;
			
			update student
			set elabandid = (select elabandid from student where id = #{studentFcsToRetain}),
			finalelabandid = (select finalelabandid from student where id = #{studentFcsToRetain}),
			mathbandid = (select mathbandid from student where id = #{studentFcsToRetain}),
			finalmathbandid = (select finalmathbandid from student where id = #{studentFcsToRetain}),
			scibandid = (select scibandid from student where id = #{studentFcsToRetain}),
			finalscibandid = (select finalscibandid from student where id = #{studentFcsToRetain}),
			commbandid = (select commbandid from student where id = #{studentFcsToRetain}),
			writingbandid = (select writingbandid from student where id = #{studentFcsToRetain}),
			modifieddate = #{modifiedDate},
			modifieduser = #{modifiedUser}
			where id = #{studentFcsRemove};
	   </update>
	   
	   <update id="removeDestinationRosters"  parameterType="map">
	   		update enrollment set activeflag=false,
	   		modifieddate = #{modifiedDate},
			modifieduser = #{modifiedUser}
	   		where studentid=#{studentRostersRemove};
	   </update>
	   
	   <update id="removeSourceRosters"  parameterType="map">
	   		--DE18292 swap the student ids
	   		with retainEnrollment as (select id 
	   									from enrollment 
	   									where studentid=#{studentRosterToRetain}),
				 updateEnrollment as (update enrollment 
				 						set activeflag=false, studentid=#{studentRosterToRetain}, 
				 						modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
										where id in (select id from enrollment where studentid=#{studentRostersRemove}))

	   		update enrollment e 
	   		set activeflag=true, studentid=#{studentRostersRemove}, 
	   		modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
			FROM retainEnrollment re
	   		where e.id=re.id;
	   </update>
	   
	  <update id="mergeStudents"  parameterType="map">
	  	update studentsassessments source
		SET activeflag = false,
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		FROM studentsassessments dest where 
		source.contentareaid=dest.contentareaid and source.assessmentid=dest.assessmentid 
		and source.studentid=#{studentToRemove} and dest.studentid=#{studentToRetain};
		
		update studentsassessments  set studentid=#{studentToRetain},
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		where studentid=#{studentToRemove} and activeflag=true;
		
		update operationaltestwindowstudent source  set activeflag = false,
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		from operationaltestwindowstudent dest where
		source.contentareaid=dest.contentareaid and ((source.courseid=dest.courseid) or (source.courseid is null and dest.courseid is null))  
		and source.operationaltestwindowid=dest.operationaltestwindowid
		and source.studentid=#{studentToRemove} and dest.studentid=#{studentToRetain};
		
		update operationaltestwindowstudent  set studentid=#{studentToRetain},
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		where studentid=#{studentToRemove} and activeflag=true;
		
		update studentsresponses source set activeflag=false,
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		from studentsresponses dest where
		source.studentstestsectionsid=dest.studentstestsectionsid and source.taskvariantid=dest.taskvariantid
		and source.studentid=#{studentToRemove} and dest.studentid=#{studentToRetain};
		
		update studentsresponses  set studentid=#{studentToRetain},
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		where studentid=#{studentToRemove} and activeflag=true;
		
		update studentassessmentprogram source set activeflag=false
		from studentassessmentprogram dest where
		source.assessmentprogramid=dest.assessmentprogramid
		and source.studentid=#{studentToRemove} and dest.studentid=#{studentToRetain} ;
				
		update studentassessmentprogram  set studentid=#{studentToRetain}  where studentid=#{studentToRemove} and activeflag=true;
				
		update interimgroupstudent source set activeflag=false
		from interimgroupstudent dest where
		source.interimgroupid=dest.interimgroupid
		and source.studentid=#{studentToRemove} and dest.studentid=#{studentToRetain};
		
		update interimgroupstudent  set studentid=#{studentToRetain}  where studentid=#{studentToRemove} and activeflag=true;	
			
		update studentstests source  set activeflag = false,
		modifieddate = now(),
		modifieduser = #{modifiedUser}
		from studentstests dest where
		((source.enrollmentid=dest.enrollmentid) or (source.enrollmentid is null and dest.enrollmentid is null)) 
		and ((source.testcollectionid=dest.testcollectionid) or (source.testcollectionid is null and dest.testcollectionid is null)) 
		and source.status=dest.status 
		and ((source.testid=dest.testid) or (source.testid is null and dest.testid is null))
		and ((source.testsessionid=dest.testsessionid) or (source.testsessionid is null and dest.testsessionid is null))
		and source.studentid=#{studentToRemove} and dest.studentid=#{studentToRetain};
		
		update studentstests set studentid=#{studentToRetain},
		modifieddate = now(),
		modifieduser = #{modifiedUser}
		where studentid=#{studentToRemove} and activeflag=true;		
		
		<if test="unSelectedStudentTestIds!=null and unSelectedStudentTestIds.size > 0">
			UPDATE  studentstests
			SET activeflag = false,
			modifieddate = now(),modifieduser = #{modifiedUser}
			WHERE id in
			<foreach collection="unSelectedStudentTestIds" item="studentTestId" open="(" close=")" separator=",">
				#{studentTestId}
			</foreach>; 
		</if>
		
		<if test="selectedStudentTestIds!=null and selectedStudentTestIds.size > 0">
			UPDATE studentstests 
			SET studentid =  #{studentToRetain}, modifieddate = now(),
		    modifieduser = #{modifiedUser}
			WHERE id in
				<foreach collection="selectedStudentTestIds" item="studentTestId" open="(" close=")" separator=",">
					#{studentTestId}
				</foreach>;
		</if>
		
		<if test="unSelectedStudentTestIds!=null and unSelectedStudentTestIds.size > 0">
		update studentstestscore set activeflag = false, modifieddate = now(), modifieduser = #{modifiedUser}
		where studenttestid in 
				<foreach collection="unSelectedStudentTestIds" item="studentTestId" open="(" close=")" separator=",">
					#{studentTestId}
				</foreach>;
		</if>
		
		update externalstudentreports set studentid=#{studentToRetain},
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		where studentid=#{studentToRemove};
		
		update ititestsessionhistory source  set activeflag = false,
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		from ititestsessionhistory dest where
		((source.rosterid=dest.rosterid) or (source.rosterid is null and dest.rosterid is null)) and
		((source.status=dest.status) or (source.status is null and dest.status is null)) 
		and source.testcollectionid=dest.testcollectionid
		and source.studentid=#{studentToRemove} and dest.studentid=#{studentToRetain};
		
		update ititestsessionhistory set studentid=#{studentToRetain},
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		where studentid=#{studentToRemove} and activeflag=true;

		update reportprocessreason set studentid=#{studentToRetain} where studentid=#{studentToRemove};
		
		update reportsubscores set studentid=#{studentToRetain} where studentid=#{studentToRemove};
		
		update reporttestlevelsubscores set studentid=#{studentToRetain} where studentid=#{studentToRemove};
		
		update scoringassignmentstudent source set activeflag=false,modifieddate = #{modifiedDate},modifieduser = #{modifiedUser} 
		from scoringassignmentstudent dest where
		source.studentstestsid=dest.studentstestsid and source.scoringassignmentid=dest.scoringassignmentid
		and source.studentid=#{studentToRemove} and dest.studentid=#{studentToRetain};
		
		update scoringassignmentstudent  set studentid=#{studentToRetain},modifieddate = #{modifiedDate},modifieduser = #{modifiedUser}  where studentid=#{studentToRemove} and activeflag=true;
		
		update studentbandrecommendation source set active = false,
		modifieddate = #{modifiedDate}
		from studentbandrecommendation dest where
		((source.contentareaid=dest.contentareaid) or (source.contentareaid is null and dest.contentareaid is null)) 
		and ((source.testcollectionid=dest.testcollectionid) or (source.testcollectionid is null and dest.testcollectionid is null)) 
		and ((source.recofinalband=dest.recofinalband) or (source.recofinalband is null and dest.recofinalband is null))
		and ((source.testid=dest.testid) or (source.testid is null and dest.testid is null))
		and ((source.usedbandid=dest.usedbandid) or (source.usedbandid is null and dest.usedbandid is null))
		and ((source.usedessentialelementid=dest.usedessentialelementid) or (source.usedessentialelementid is null and dest.usedessentialelementid is null))
		and source.studentid=#{studentToRemove} and dest.studentid=#{studentToRetain};
		
		update studentbandrecommendation set studentid=#{studentToRetain},
		modifieddate = #{modifiedDate}
		where studentid=#{studentToRemove} and active=true;

		update studentnodeprobability  set studentid=#{studentToRetain} where studentid=#{studentToRemove}
		and exists 
		(select studentid from studentnodeprobability where
		studentid=#{studentToRemove}) and nodeid not in
		(select source.nodeid from studentnodeprobability dest join studentnodeprobability source
		on source.nodeid=dest.nodeid
		and dest.studentid=#{studentToRetain} and source.studentid=#{studentToRemove});		
		
		update studentreport set studentid=#{studentToRetain} where studentid=#{studentToRemove};
		
		update studenttracker source set activeflag=false,
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		from studenttracker dest where
		source.contentareaid=dest.contentareaid
		and source.studentid=#{studentToRemove} and dest.studentid=#{studentToRetain};
		
		update studenttracker  set studentid=#{studentToRetain},
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		where studentid=#{studentToRemove} and activeflag=true;
		
		update student set activeflag=true,
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		where id=#{studentToRetain} and activeflag=false;

		update student set activeflag=false,
		statestudentidentifier=statestudentidentifier || '-MERGED',
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser}
		where id=#{studentToRemove};
			  
	  </update>
	<select id="getStudentsForAutoAssign" resultType="java.lang.Long">
		SELECT distinct st.id 
		from student st
		join studentassessmentprogram sap on sap.studentid = st.id and sap.activeflag is true 
		and sap.assessmentprogramid = #{assessmentProgramId}
		JOIN enrollment enrl ON enrl.studentid = st.id
		JOIN enrollmentsrosters er ON enrl.id =er.enrollmentid
		JOIN roster ro ON ro.id = er.rosterid
		JOIN Organization attendanceSchool ON attendanceSchool.id = enrl.attendanceschoolid
		<if test="gradeCourseIds!=null">
			LEFT JOIN gradecourse gc ON gc.id=enrl.currentgradelevel
		</if>
		where
		enrl.activeflag = true
		AND er.activeflag= true
		AND st.activeflag = true
		and ro.activeflag is true
		<if test="rosterIds!=null">
			AND ro.id= ANY(ARRAY
			<foreach collection="rosterIds" item="rosterId" open="[" close="]" separator=",">
				#{rosterId}
			</foreach>
			)
		</if>
		<if test="gradeCourseIds!=null">
			AND gc.id= ANY(ARRAY
			<foreach collection="gradeCourseIds" item="gradeCourseId" open="[" close="]" separator=",">
				#{gradeCourseId}
			</foreach>
			)
		</if>
		<if test="contentAreaIds!=null">
			AND ro.statesubjectareaid= ANY(ARRAY
			<foreach collection="contentAreaIds" item="contentAreaId" open="[" close="]" separator=",">
				#{contentAreaId}
			</foreach>
			)
		</if>
		<if test="orgIds != null">
		AND attendanceSchool.id = ANY(ARRAY 
		<foreach collection="orgIds" item="orgId" open="[" close="]" separator=",">
				#{orgId}
			</foreach>
			)
		</if>
		<if test="userIds != null">
			AND ro.teacherid = ANY(ARRAY
			<foreach collection="userIds" item="userId" open="[" close="]"
				separator=",">
				#{userId}
			</foreach>
			)
		</if>
		<if test="schoolYear != null">
			AND ro.currentschoolyear= #{schoolYear,jdbcType=BIGINT}
			AND enrl.currentschoolyear= #{schoolYear,jdbcType=BIGINT}
		</if>
	</select>
	<update id="resetStudentPasswordOnAnnualReset">
	UPDATE ONLY student SET modifieddate=now(), password = generate_student_password(#{passwordLength,jdbcType=INTEGER})
	WHERE 	
	id in (select Id from student where stateid=#{stateId,jdbcType=BIGINT} order by id
	<if test="limit != null">
			LIMIT #{limit}
	</if>
	<if test="offset != null">
			OFFSET #{offset}
	</if>
	)
	
	</update>
	<select id="getStudentCountForPasswordReset" resultType="java.lang.Integer">
	select count(id) from student where stateid=#{stateId,jdbcType=BIGINT} 
	</select>
	
	<resultMap id="predictiveStudentReportMap" type="edu.ku.cete.domain.report.InterimStudentReport">
		<id column="id" property="id" jdbcType="BIGINT" />
		<id column="studentid" property="studentId" jdbcType="BIGINT" />
		<result column="studentfirstname" property="studentFirstName" jdbcType="BIGINT" />
		<result column="statestudentidentifier" property="stateStudentIdentifier" jdbcType="VARCHAR" />
		<result column="studentlastname" property="studentLastName" jdbcType="VARCHAR" />
		<result column="studentmiddlename" property="studentMiddleName" jdbcType="VARCHAR" />
		<result column="enrollmentid" property="enrollmentId" jdbcType="BIGINT" /> 
	 	<result column="gradecourseid" property="gradeId" jdbcType="BIGINT" />
	 	<result column="contentareaid" property="contentAreaId" jdbcType="BIGINT" />
	 	<result column="stateid" property="stateId" jdbcType="BIGINT" />
	 	<result column="assessmentprogramid" property="assessmentProgramId" jdbcType="BIGINT" />
	 	<result column="currentschoolyear" property="currentSchoolYear" jdbcType="BIGINT" />
	 	<result column="attendanceschoolid" property="attendanceSchoolId" jdbcType="BIGINT" />
	 	<result column="districtid" property="districtId" jdbcType="BIGINT" />
	 	<result column="schoolname" property="schoolName" jdbcType="VARCHAR" />	
	 	<result column="districtname" property="districtName" jdbcType="VARCHAR" />		 
   </resultMap>
   
	<select id="getStudentsForPredictiveReportProcess" resultMap="predictiveStudentReportMap">
	WITH students_exclude_list AS (select distinct studentid 
			from interimstudentreport
			where schoolyear = #{currentSchoolYear}
			and assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			and testingprogramid = #{testingProgramId,jdbcType=BIGINT}
			and reportcycle = #{reportCycle,jdbcType=VARCHAR}
			and gradeid = #{gradeId,jdbcType=BIGINT}
			and contentareaid = #{contentAreaId,jdbcType=BIGINT}
			
			<if test="jobStartTime != null">
				and createddate &lt; #{jobStartTime,jdbcType=TIMESTAMP}
			</if>
		)
	
	SELECT distinct st.id AS studentid,
		st.statestudentidentifier, 
		st.legalfirstname as studentfirstname, 
		st.legallastname as studentlastname,
		st.legalmiddlename as studentmiddlename,
		ts.gradecourseid, tc.contentareaid,
		st.stateid,
		st.statestudentidentifier,
		en.attendanceschoolid,
		otd.districtid,
		otd.schoolname,
		otd.districtname,
		gc.name as gradename,
		ca.name as contentareaname, ca.abbreviatedname as contentareacode,
		#{currentSchoolYear} as currentschoolyear,
		#{assessmentProgramId,jdbcType=BIGINT} as assessmentprogramid
	FROM student st
		JOIN studentstests sts ON sts.studentid = st.id
		JOIN enrollment en ON en.studentid = st.id and sts.enrollmentid=en.id
			join organization org on org.id = en.aypschoolid		
		JOIN testsession ts ON ts.id = sts.testsessionid
		JOIN testcollection tc ON tc.id = ts.testcollectionid
		JOIN test t ON t.id = sts.testid
		join gradecourse gc ON gc.id = ts.gradecourseid
		join contentarea ca ON ca.id = tc.contentareaid
		join organizationtreedetail otd ON otd.schoolid = en.attendanceschoolid AND otd.stateid = st.stateid
	WHERE st.stateid = #{contractOrgId,jdbcType=BIGINT}  
	 	AND (en.activeflag OR ((NOT en.activeflag) AND (en.exitwithdrawaltype IS NOT NULL)))
		AND en.currentschoolyear = #{currentSchoolYear}
		AND st.id NOT IN(select ex.studentid from students_exclude_list ex)
		AND ts.gradecourseid = #{gradeId,jdbcType=BIGINT} AND ts.source = 'BATCHAUTO' AND ts.activeflag is true
		AND tc.contentareaid = #{contentAreaId,jdbcType=BIGINT}
		AND (sts.status = ANY(ARRAY
		<foreach close="]" collection="testsStatusIds" item="testsStatusId" open="[" separator=",">
			#{testsStatusId}
		</foreach>
		) AND sts.activeflag)
		AND org.reportprocess is true
		<if test="rawScaleExternalTestIds != null">
			AND t.externalid = ANY(ARRAY
			<foreach close="]" collection="rawScaleExternalTestIds" item="externalTestId" open="[" separator=",">
				#{externalTestId}
			</foreach>
			)
		</if>
		<if test="studentIdList != null and studentIdList.size > 0 ">
			AND st.id = ANY(ARRAY
			<foreach close="]" collection="studentIdList" item="studId" open="[" separator=",">
				#{studId}
			</foreach>
			)
		</if>
		<if test="studentId != null">
			and st.id = #{studentId}
		</if>
		ORDER BY st.id
		<if test="pageSize != null">LIMIT #{pageSize}</if>
		<if test="offset != null">OFFSET #{offset}</if>
	</select>
	
	<update id="updateOnEditOrActivate" parameterType="map" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Fri Jun 08 14:38:13 CDT 2012.
    -->
    update public.student st
    <set >      
        legalfirstname = #{record.legalFirstName,jdbcType=VARCHAR},
        legalmiddlename = #{record.legalMiddleName,jdbcType=VARCHAR},
        legallastname = #{record.legalLastName,jdbcType=VARCHAR},
        generationcode = #{record.generationCode,jdbcType=VARCHAR},
        dateofbirth = #{record.dateOfBirth,jdbcType=DATE},
      <if test="record.stateStudentIdentifier != null">
        statestudentidentifier = #{record.stateStudentIdentifier,jdbcType=VARCHAR},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
        modifiedDate = now(),
      	modifieduser = #{record.modifiedUser},
        gender = #{record.gender,jdbcType=INTEGER},
        firstlanguage = #{record.firstLanguage,jdbcType=VARCHAR},
        comprehensiverace = #{record.comprehensiveRace,jdbcType=INTEGER},
        primarydisabilitycode = #{record.primaryDisabilityCode,jdbcType=VARCHAR},     
         hispanicethnicity = #{record.hispanicEthnicity, jdbcType=BOOLEAN},
         esolparticipationcode = #{record.esolParticipationCode, jdbcType=VARCHAR},
         esolprogramentrydate = #{record.esolProgramEntryDate, jdbcType=TIMESTAMP},
         esolprogramendingdate = #{record.esolProgramEndingDate, jdbcType=TIMESTAMP},             
         usaentrydate = #{record.usaEntryDate, jdbcType=TIMESTAMP},
      <if test="record.profileStatus != null" >
        profilestatus = #{record.profileStatus,jdbcType=VARCHAR},
      </if>       
	   activeflag = #{record.activeFlag}
    </set>
    where id = #{record.id}
  </update>	
  
  <select id="getByExternalId" parameterType="String" resultType="edu.ku.cete.domain.student.Student">
    SELECT
      id, statestudentidentifier, legalfirstname, legalmiddlename, legallastname, generationcode,
      comprehensiverace,primarydisabilitycode, firstlanguage, dateofbirth, gender, createddate, synced,
      modifieddate, username, password, externalid, activeflag
    FROM student 
    WHERE externalid = #{externalId,jdbcType=VARCHAR}
  </select>
  
  <select id="getStudentUserNamePasswordExtractForDlmAndPltw" resultMap="viewStudentInfo" >	
	
select distinct st.id, orglist.statename, orglist.districtname, orglist.schoolname, gc.abbreviatedname as gradecoursename,
  rs.coursesectionname as rostername, ca.name as subjectname, 
  st.legallastname, st.legalfirstname,st.legalmiddlename, st.statestudentidentifier, st.username, 
  st.password, ca.id as subjectid,  ap.abbreviatedname as abbreviatedName, ap.programname as programname, au.surname
  from enrollment en 
  join organizationtreedetail orglist on orglist.schoolid = en.attendanceschoolid
  join organization org on org.id = en.attendanceschoolid and org.activeflag is true
  join gradecourse gc on (gc.id = en.currentgradelevel and gc.activeflag is true)
  join student st on (st.id = en.studentid and st.activeflag is true)
  inner join studentassessmentprogram sap on (sap.studentid = st.id and sap.activeflag is true)
  inner join assessmentprogram ap on (ap.id = sap.assessmentprogramid and ap.activeflag is true) 
  inner join enrollmentsrosters enrlr on (en.id = enrlr.enrollmentid and enrlr.activeflag = true)
  inner join roster rs on (enrlr.rosterid=rs.id and rs.activeflag = true)
  inner join aartuser au on au.id=rs.teacherid and au.activeflag is true
  inner join contentarea ca on ca.id = rs.statesubjectareaid 
  where en.activeflag is true and en.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} 
<if test="grade != null and grade!='' ">
    and gc.abbreviatedname = #{grade,jdbcType=VARCHAR}
   </if>
   <if test="isTeacher == true">
     and rs.teacherid = #{educatorId,jdbcType=BIGINT}
   </if>
  AND (orglist.schoolid = #{orgChildrenById,jdbcType=BIGINT}
    OR orglist.districtid = #{orgChildrenById,jdbcType=BIGINT}
    OR orglist.stateid = #{orgChildrenById,jdbcType=BIGINT})
    
  <if test="contentAreaAssessmentForDlmAndPltw != null and contentAreaAssessmentForDlmAndPltw.size > 0">  
  and (ca.id, ap.id) in 
  <foreach item="entries" index="index" collection="contentAreaAssessmentForDlmAndPltw" open="(" separator="," close=")">
   <foreach index="key" item="value" collection="entries" open="(" separator="),(" close=")">
    #{value},#{key}
   </foreach>
  </foreach> 
  </if>
  <if test="contentAreaAssessmentForDlmAndPltw == null">   
  and 
  ap.id in
  <foreach collection="assessmentProgramIds" item="assessmentProgramId" open="(" close=")" separator="," >
   #{assessmentProgramId}
     </foreach>
     </if>   
  order by statename asc, districtname asc , schoolname asc , 
  legallastname asc, legalfirstname asc,  subjectname asc , surname asc 
 </select>
 
  <select id="getActScoreDescriptionByOrgIdsAssessmentContentGradeSchoolYear" resultMap="actScoringDescriptionLevelMap" >
  select ad.description from actdescription ad
     where ad.gradeid = #{gradeId} and ad.subjectid = #{contentAreaId} and ad.assessmentprogramid = #{assessmentProgramId} and ad.schoolyear = #{currentSchoolYear}
     order by ad.descriptionorder
     </select>
  
    <select id="getActScoreByOrgIdsAssessmentContentGradeSchoolYear" resultMap="actScoringDescriptionLevelMap" >
select al.levelid, ald.actdescriptionid, ad.description, ald.maxvalue, ald.minvalue from actlevel al
    join  actdescriptionlevelscore ald on al.id=ald.actlevelid
    join actdescription ad on ald.actdescriptionid=ad.id
    where ad.gradeid = #{gradeId} and ad.subjectid = #{contentAreaId} 
    and ad.assessmentprogramid = #{assessmentProgramId} and ad.schoolyear = #{currentSchoolYear} and ald.actlevelid = #{levelId}
    order by al.levelid, ad.descriptionorder
     </select>
  
  <select id="isAddStudentDemographicValueExists" resultType="Boolean" parameterType="map">
    select
      case when exists (
        select 1
        from student
        where legalfirstname ilike #{legalFirstName}
		and legallastname ilike #{legalLastName}
		and gender = #{gender}
		and dateofbirth = #{dobDates}
		and stateid = #{stateId}
      )
      then true
      else false end;
  </select>
  
  <select id="isEditStudentDemographicValueExists" resultType="Boolean" parameterType="map">
    select
      case when exists (
        select 1
        from student
        where 
        statestudentidentifier != #{stateStudentId}
        and legalfirstname ilike #{legalFirstName}
		and legallastname ilike #{legalLastName}
		and gender = #{gender}
		and dateofbirth = #{dobDates}
		and stateid = #{stateId}
      )
      then true
      else false end;
  </select>
  	
  	<select id="getStudentStateIdBySchoolId" resultType="Long" parameterType="map">
    select stateid from organizationtreedetail where schoolId = #{schoolId}
  	</select>

	
  	<select id="getActLevelsForActScoring" resultType="Long" >
    select distinct levelid from actlevel order by levelid
  	</select>
  	
  	 <update id="updateStudentsTestSectionsByRosterId" parameterType="java.lang.Long">
	  update studentstestsections 
  	  set activeflag = false, 
      modifieddate = now(), 
      modifieduser = #{modifiedUserId} 
      where studentstestsections.studentstestid in (
      select st.id
      from studentstests st
      join testsession ts on ts.id = st.testsessionid
      join roster r on r.id = ts.rosterid
      where ts.rosterid = #{rosterId} );
  	 </update>
   
   	<resultMap id="exitCodesByState" type="edu.ku.cete.domain.student.StudentExitCodesDTO">
        <id property="id" column="id" jdbcType="BIGINT" />
    	<result property="code" column="code" jdbcType="INTEGER" />
    	<result property="description" column="description" jdbcType="VARCHAR" />
        <result property="stateId" column="stateid" jdbcType="BIGINT" />
    	<result property="assessmentProgramId" column="assessmentprogramid" jdbcType="INTEGER" />
    	<result property="activeFlag" column="activeflag" jdbcType="BIT" /> 
    	<result property="schoolYear" column="schoolyear" jdbcType="INTEGER" />
     </resultMap>
     
	<select id="getExitCodesByState" parameterType="map" resultMap="exitCodesByState">
		select id, code, description, stateid, assessmentprogramid, activeflag, schoolyear 
		from studentexitcodes where assessmentprogramid = #{assessmentProgramId}
		<if test="organizationId &gt; 0">
			<if test="isState==true">
				and stateid = #{organizationId}
			</if> 
			<if test="isState!=true">
				and stateid = (select stateid from organizationtreedetail where schoolid = #{organizationId} or districtid = #{organizationId} limit 1)
			</if> 
			and schoolyear = #{schoolYear}
		</if>  		
		<if test="organizationId == 0"> 
			and stateid is null
			and schoolyear is null
		</if>
		and isvalidforui = true
		order by code
  	</select>
  	 	
  	<select id="getStateStudentIdentifierLength" resultType="String" parameterType="map">
	select statestudentidlength from statestudentidentifierlength where
	<choose>
		<when test="userStateId != null">
			state = #{userStateId}
		</when>
		<otherwise>
			state is null
		</otherwise>
	</choose>
	</select>

  	<select id="countStateStudentIdentifierLength" resultType="Long" parameterType="map">
	select count(statestudentidlength) from statestudentidentifierlength where
	<choose>
		<when test="userStateId != null">
			state = #{userStateId}
		</when>
		<otherwise>
			state is null
		</otherwise>
	</choose>
	</select>	

	<select id="getStudentBySchoolIDandGradeIDandSchoolyear" resultType="Student" parameterType="map">
		SELECT distinct
	   		<include refid="Base_Column_List" />
		FROM organizationtreedetail otd
	    inner join roster ros on ros.attendanceschoolid = otd.schoolid and ros.activeflag=true
	    <if test="teacherID != null">
    		AND ros.teacherid= #{teacherID,jdbcType=BIGINT}
    	</if>
    	inner join enrollmentsrosters enros on enros.rosterid = ros.id and enros.activeflag = true
	    JOIN enrollment e ON e.attendanceschoolid = otd.schoolid and enros.enrollmentid = e.id
	    JOIN studentassessmentprogram sap ON e.studentid = sap.studentid
	    JOIN student st on st.id =  sap.studentid and st.activeflag=true
	    JOIN assessmentprogram ap ON sap.assessmentprogramid = ap.id and ap.id = #{assesmentProgramID}
	    inner join gradecourse gc1 on gc1.id=e.currentgradelevel 
	    <if test="grades != null">
		    and gc1.abbreviatedname = ANY 
		    (select distinct gc.abbreviatedname from gradecourse gc where gc.id = ANY(VALUES
	        <foreach collection="grades" item="grade" open="" separator="," close="">
	            (#{grade,jdbcType=BIGINT})
	        </foreach>
	        ) ) 
	    </if>
	    WHERE e.activeflag = TRUE
	    AND sap.activeflag = TRUE
	    <if test="schoolYear != null">
		    AND e.currentschoolyear = #{schoolYear}
		    AND ros.currentschoolyear= #{schoolYear}
	    </if>
	    <if test="schoolId != null">
	    	AND otd.schoolid = #{schoolId}
	    </if>
			order by st.legallastname , st.legalfirstname , st.legalmiddlename
	</select>

<select id="getTeacherByStudentIDandSchoolIDandGradeID" resultType="educator" parameterType="map">
		SELECT distinct
	   		au.id as educatorId, au.firstname as educatorFirstName, au.surname as educatorLastName, au.middlename as educatorMiddleName from aartuser au 
		INNER JOIN roster ros on ros.teacherid = au.id AND ros.activeflag=true
		INNER JOIN enrollmentsrosters enros on enros.rosterid=ros.id AND enros.activeflag=true
		INNER JOIN enrollment en on en.id = enros.enrollmentid AND en.activeflag = true 
		<if test="studentIds != null">
	        AND en.studentid = ANY(VALUES
	        <foreach collection="studentIds" item="studentID" open="" separator="," close="">
	            (#{studentID,jdbcType=BIGINT})
	        </foreach>
	        )
	    </if>
		INNER JOIN studentassessmentprogram sap ON en.studentid = sap.studentid and sap.activeflag = true
		INNER JOIN assessmentprogram ap ON sap.assessmentprogramid = ap.id and ap.id = #{assesmentProgramID}
		INNER join gradecourse gc1 on gc1.id=en.currentgradelevel 
		<if test="grades != null">
		    AND gc1.abbreviatedname = ANY 
		    (SELECT distinct gc.abbreviatedname from gradecourse gc where gc.id = ANY(VALUES
	        <foreach collection="grades" item="grade" open="" separator="," close="">
	            (#{grade,jdbcType=BIGINT})
	        </foreach>
	        ) ) 
	    </if> 
		where au.activeflag = true
		<if test="schoolYear != null">
		    AND en.currentschoolyear = #{schoolYear}
		    AND ros.currentschoolyear = #{schoolYear}
	    </if>
	    <if test="schoolId != null">
	    	AND ros.attendanceschoolid = #{schoolId}
	    </if>
		order by au.surname , au.firstname, au.middlename	
	</select>
	
	
	<resultMap type="edu.ku.cete.web.IAPStudentTestStatusDTO" id="IAPStudentTestStatusMap">
     <result property="studentId" column="studentid"/>
     <result property="subjectId" column="subjectid"/> 
  	 <result property="subjectName" column="subject"/> 
  	 <result property="stateName" column="state"/>
  	 <result property="districtId" column="districtid"/> 
  	 <result property="districtName" column="district"/>
  	 <result property="districtIdentifier" column="districtdisplayidentifier"/>
  	 <result property="attendanceSchoolId" column="attendanceschoolid"/>
  	 <result property="schoolName" column="schoolName"/>
  	 <result property="schoolIdentifier" column="schooldisplayidentifier"/> 
  	 <result property="educatorId" column="educatorId"/>
  	 <result property="educatorLastName" column="educatorLastName"/>
  	 <result property="educatorFirstName" column="educatorFirstName"/>
  	 <result property="grade" column="grade"/>
  	 <result property="gradeId" column="gradeid"/>
  	 <result property="gradeLevel" column="gradelevel"/>
  	 <result property="studentLaststName" column="studentLastName"/>
  	 <result property="studentFirstName" column="studentFirstName"/>
  	 <result property="stateStudentId" column="statestudentidentifier"/>
  	 <result property="localStudentId" column="localstudentidentifier"/>
  	 <result property="stateModel" column="stateModel"/>
  	 <result property="numofEEs" column="numofEEs"/>
  	 <result property="instTestscompleted" column="numOfInstructTestsCompleted"/>
  	 <result property="instTestsNotStarted" column="numOfInstructTestsNotStarted"/>
  	 <result property="instTestsInProgress" column="numOfInstructTestsInProgress"/>
  	 <result property="eoytTestscompleted" column="numOfEoyTestsCompleted"/>
  	 <result property="eoyTestsNotStarted" column="numOfEoyTestsNotStarted"/>
  	 <result property="eoyTestsInProgress" column="numOfEoyTestsInProgress"/>
  	 <result property="attendanceSchoolId" column="attendanceschoolid"/>
  	 <result property="fieldTestsCompleted" column="numOfFieldTestsCompleted"/>
  	 <result property="itiContentAvailable" column="isiticontentavailable"/>
  	 <result property="teacherID" column="teacherID"/>
  	 <result property="teacherLastName" column="teacherLastName"/>
  	 <result property="teacherFirstName" column="teacherFirstName"/>
  	 <result property="rosterid" column="rosterid"/>
  	 <result property="enrollmentrosterid" column="enrollmentrosterid"/>
  	 <result property="subjectAbbreviatedName" column="subjectAbbreviatedName"/>
  	 <result property="recordCount" column="recordCount"/>
  	 <result property="numofEEsCompleted" column="numberOfCompletedEE"/>
   </resultMap> 
    


	<select id="getStateOrAssesPgmSpecificExitCodes" parameterType="map" resultType="Integer" >
		select code
		from studentexitcodes where assessmentprogramid = #{assessmentProgramId}
		<if test="organizationId &gt; 0">
			and stateid = #{organizationId}
			and schoolyear = #{schoolYear}
		</if>  		
		<if test="organizationId == 0"> 
			and stateid is null
			and schoolyear is null
		</if>
		order by code
	</select>
	
	
	<select id="checkStateHaveSpecificExitCodes" parameterType="map" resultType="Boolean" >
		
		select exists (select code
		from studentexitcodes 
		where assessmentprogramid = #{assessmentProgramId}
			and stateid = #{organizationId}
			and schoolyear = #{schoolYear}
		order by code);
		
		
	</select>
	
	<select id="getStateSpecificExitCodesForKids" parameterType="map" resultType="Integer" >
		select code
		from studentexitcodes where assessmentprogramid in
  			<foreach collection="assessmentProgramIds" item="assessmentProgramId" open="(" close=")" separator="," >
   				#{assessmentProgramId}
     		</foreach>
		
		<if test="organizationId &gt; 0">
			and stateid = #{organizationId}
			and schoolyear = #{schoolYear}
		</if>  		
		<if test="organizationId == 0"> 
			and stateid is null
			and schoolyear is null
		</if>
		order by code
		
	</select>
	
  	<select id="hasCompletedTestByExtId" resultType="Boolean" parameterType="map">
  	  select
      case when exists (
        select 1
        from student s 
        JOIN studentstests st ON s.id= st.studentid
        JOIN category c ON c.id= st.status        
        WHERE 
        s.externalid = #{externalId} AND
        LOWER(c.categoryname) = LOWER('complete') 
      )
      then true
      else false end;
  	</select>

  	<select id="isEnrolledInSameSchoolBefore" resultType="Boolean" parameterType="map">
  	  select
      case when exists (
        select 1
        from student s 
        JOIN enrollment e ON s.id= e.studentid       
        WHERE 
        s.activeflag IS TRUE AND
        s.externalid = #{externalId} AND
        e.attendanceschoolid = #{schoolId} AND
        e.currentschoolyear = #{schoolYear}
      )
      then true
      else false end;
  	</select>
  	
  <select id="iapHomeStudentsTestStatusRecords" resultMap="IAPStudentTestStatusMap" parameterType="map">
    WITH schoolswithdlmkids AS (
				SELECT distinct e.attendanceschoolid schoolid
				FROM enrollment e 
					INNER JOIN  studentassessmentprogram sap ON e.studentid = sap.studentid
					INNER JOIN  assessmentprogram ap         ON sap.assessmentprogramid = ap.id
				WHERE e.activeflag = TRUE
					AND sap.activeflag = TRUE
					AND ap.abbreviatedname = 'DLM'
					AND e.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
					    <if test="stateId != null"> 
					        AND e.attendanceschoolid in (SELECT schoolid FROM organizationtreedetail where stateid = #{stateId,jdbcType=BIGINT} )
					    </if>
					    <if test="schoolID != null"> 
							AND e.attendanceschoolid = #{schoolID,jdbcType=BIGINT}
					    </if>
	),
	 enrolledKids AS (
				SELECT distinct s.id AS studentid,
					e.id AS enrollmentid, gc.id AS gradecourseid, gc.gradelevel AS gradelevel, gc.abbreviatedname AS gradeabbreviatedname,
					e.currentschoolyear AS schoolyear , r.teacherid as teacherID, usr.surname teacherLastName, usr.firstname teacherFirstName,
					s.legallastname as studentLastName, s.legalfirstname as studentFirstName, s.username as studentusername, s.statestudentidentifier , s."password" as studentpassword
				FROM student s
					INNER JOIN  studentassessmentprogram sap ON s.id = sap.studentid AND sap.activeflag IS TRUE
					INNER JOIN  assessmentprogram ap ON sap.assessmentprogramid = ap.id
					INNER JOIN  enrollment e ON s.id = e.studentid AND e.activeflag IS TRUE
					INNER JOIN  schoolswithdlmkids sch ON e.attendanceschoolid = sch.schoolid
					INNER JOIN  enrollmentsrosters er ON e.id = er.enrollmentid AND er.activeflag IS TRUE
					INNER JOIN  roster r ON er.rosterid = r.id AND e.currentschoolyear = r.currentschoolyear AND r.activeflag IS TRUE
					INNER JOIN  contentarea ca ON r.statesubjectareaid = ca.id
					INNER JOIN  gradecourse gc ON e.currentgradelevel = gc.id
					INNER JOIN  aartuser usr on usr.id = r.teacherid and usr.activeflag = true
				WHERE ap.abbreviatedname = 'DLM'
					AND e.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
					    <if test="educatorIds != null">
					        AND r.teacherid  = ANY(VALUES
					        <foreach collection="educatorIds" item="educatorID" open="" separator="," close="">
					            (#{educatorID,jdbcType=BIGINT})
					        </foreach>
					        )
					    </if>
					    <if test="studentIDs != null">
					        AND s.id = ANY(VALUES
					        <foreach collection="studentIDs" item="studentID" open="" separator="," close="">
					            (#{studentID,jdbcType=BIGINT})
					        </foreach>
					        )
					    </if>
					    <if test="stateStudentID != null">
					        AND s.statestudentidentifier = #{stateStudentID,jdbcType=VARCHAR }
					    </if>
				    	<if test="grades != null">
					        AND gc.abbreviatedname = ANY
					        (SELECT distinct gc.abbreviatedname FROM gradecourse gc where gc.id = ANY(VALUES
					        <foreach collection="grades" item="grade" open="" separator="," close="">
					            (#{grade,jdbcType=BIGINT})
					        </foreach>
					        ) )
					    </if>
					    <choose>
					        <when test="contentareaid != null">
					        	AND ca.id = #{contentareaid,jdbcType=BIGINT}
					        </when>
					        <otherwise>
								AND ca.abbreviatedname IN ('M', 'ELA', 'Sci')
					        </otherwise>
				        </choose>
					 ORDER BY usr.surname, usr.firstname, gc.gradelevel,  s.legallastname, s.legalfirstname
	),
	pagination AS( SELECT enrollmentid,studentid,statestudentidentifier,studentusername,studentpassword,studentlastname,studentfirstname, teacherID,  count (studentid) over() as recordCount FROM enrolledKids limit #{paginationLimit,jdbcType=BIGINT} offset #{paginationLimit,jdbcType=BIGINT} * #{offSet,jdbcType=BIGINT} ),
	rosteredkids AS (
					SELECT page.studentid,
						e.id AS enrollmentid, gc.id AS gradecourseid, gc.name AS gradename, gc.abbreviatedname AS gradeabbreviatedname,
						r.id AS rosterid, ca.id AS contentareaid, ca.name AS contentareaname, ca.abbreviatedname AS contentareaabbreviatedname,
						r.attendanceschoolid, e.currentschoolyear AS schoolyear , r.teacherid as teacherID, au.surname teacherLastName, au.firstname teacherFirstName,
						page.statestudentidentifier, page.studentusername, page.studentpassword, er.id as enrollmentrosterid, page.recordCount,
						page.studentLastName, page.studentFirstName
					FROM enrollment e --and e.id=pagination.enrollmentid
					        INNER JOIN pagination page on page.enrollmentid =  e.id
						INNER JOIN enrollmentsrosters er ON e.id = er.enrollmentid AND er.activeflag IS TRUE
						INNER JOIN roster r ON er.rosterid = r.id AND e.currentschoolyear = r.currentschoolyear AND r.activeflag IS true
							    AND r.teacherid = page.teacherID
						INNER JOIN contentarea ca ON r.statesubjectareaid = ca.id
						INNER JOIN gradecourse gc ON e.currentgradelevel = gc.id
						INNER JOIN aartuser au on au.id = r.teacherid and au.activeflag = true					
	),
	ITICompletedEE as (SELECT st.studentid,bp.contentareaid, gc.abbreviatedname, rk.teacherID, count(distinct ee.id) as numberOfCompletedEE
						  FROM ititestsessionhistory iti
							  INNER JOIN blueprintessentialelements bpee on bpee.essentialelementid = iti.essentialelementid
							  INNER JOIN contentframeworkdetail ee on bpee.essentialelementid = ee.id
							  INNER JOIN blueprint bp on bp.id = bpee.blueprintid
							  LEFT  JOIN testsession ts on ts.id = iti.testsessionid and ts.rosterid = iti.rosterid and ts.activeflag = true 
							  LEFT  JOIN studentstests st on st.testsessionid = ts.id and st.studentid = iti.studentid and st.activeflag = true
							  INNER JOIN category c on st.status = c.id and c.categorycode like 'complete'
							  INNER JOIN rosteredkids rk on rk.studentid = st.studentid
							  INNER JOIN gradecourse gc on gc.id = bp.gradecourseid and gc.abbreviatedname = rk.gradeabbreviatedname
							  INNER JOIN roster r on iti.rosterid = r.id and r.teacherid = rk.teacherID and rk.attendanceschoolid = r.attendanceschoolid
								  <if test="educatorIds != null">
									        AND r.teacherid  = ANY(VALUES
									        <foreach collection="educatorIds" item="educatorID" open="" separator="," close="">
									            (#{educatorID,jdbcType=BIGINT})
									        </foreach>
									        )
									    </if>
						  where iti.activeflag = true
								  and r.activeflag = true
								  and bp.activeflag = true
								  and r.currentschoolyear = rk.schoolyear
								  group by st.studentid, bp.contentareaid, gc.abbreviatedname, rk.teacherID
	  ),
	itiContentAvailabileByGrade AS (
							SELECT distinct gc.abbreviatedname, tc.contentareaid 
							FROM testcollection tc 
								INNER JOIN  gradecourse gc on gc.id = tc.gradecourseid
								where tc.phasetype = 'INSTRUCTIONAL' and tc.activeflag is true
							union
							SELECT distinct gc.abbreviatedname, tc.contentareaid 
							FROM testcollection tc 
								INNER JOIN  gradebandgradecourse gbgc on gbgc.gradebandid = tc.gradebandid
								INNER JOIN  gradecourse gc on gc.id = gbgc.gradecourseid
								where tc.phasetype = 'INSTRUCTIONAL' and tc.activeflag is true
	),
	iti AS (
			SELECT rk.contentareaname AS subject, rk.contentareaid AS subjectid,
						rk.attendanceschoolid, rk.gradename AS grade, rk.gradecourseid AS gradeid, rk.gradeabbreviatedname AS gradelevel, rk.studentid, NULL::INTEGER AS numofEEs,
						'ITI' AS type,
						COUNT(itiav.*) > 0 AS isiticontentavailable,
						COUNT(
							CASE WHEN tc.phasetype = 'INSTRUCTIONAL' AND ststatus.categorycode = 'unused' THEN 1 
							ELSE NULL END
						) AS numOfInstructTestsNotStarted,
						COUNT(
							CASE 
								 WHEN  itistatus.categorycode = 'STARTED' THEN 1
							ELSE NULL END
						) AS numOfInstructTestsInProgress,
						COUNT(
							CASE WHEN tc.phasetype = 'INSTRUCTIONAL' AND ststatus.categorycode = 'complete' THEN 1 ELSE NULL END
						) AS numOfInstructTestsCompleted,
						0 AS numOfEoyTestsNotStarted,
						0 AS numOfEoyTestsInProgress,
						0 AS numOfEoyTestsCompleted, rk.teacherID, rk.teacherLastName, rk.teacherFirstName, rk.contentareaabbreviatedname, rk.rosterid, rk.enrollmentrosterid,
						 rk.recordCount, rk.studentLastName , rk.studentFirstName, itiComplete.numberOfCompletedEE
					FROM rosteredkids rk
						LEFT JOIN itiContentAvailabileByGrade itiav on itiav.contentareaid = rk.contentareaid AND itiav.abbreviatedname = rk.gradeabbreviatedname
						LEFT JOIN ititestsessionhistory iti ON rk.studentid = iti.studentid AND rk.rosterid = iti.rosterid AND iti.activeflag IS TRUE
						LEFT JOIN testsession ts
							ON iti.testsessionid = ts.id
							AND rk.schoolyear = ts.schoolyear
							AND ts.source = 'ITI'
							AND ts.activeflag IS TRUE
						        <if test="operationalTestWindowID != null">
						    		AND ts.operationaltestwindowid = #{operationalTestWindowID,jdbcType=BIGINT}
						    	</if>
						LEFT JOIN studentstests st ON ts.id = st.testsessionid AND rk.studentid = st.studentid AND rk.enrollmentid = st.enrollmentid AND st.activeflag = TRUE
						LEFT JOIN testcollection tc ON st.testcollectionid = tc.id AND tc.phasetype IN ('INSTRUCTIONAL') AND tc.contentareaid = rk.contentareaid
						LEFT JOIN category ststatus ON st.status = ststatus.id
						LEFT JOIN category itistatus ON iti.status = itistatus.id
						LEFT JOIN ITICompletedEE itiComplete on itiComplete.studentid = rk.studentid and itiComplete.contentareaid = rk.contentareaid and itiComplete.abbreviatedname = rk.gradeabbreviatedname and itiComplete.teacherID = rk.teacherID
						where 
						    <choose>
						        <when test="contentareaid != null">
						        	rk.contentareaid = #{contentareaid,jdbcType=BIGINT}
						        </when>
						        <otherwise>
									rk.contentareaabbreviatedname IN ('M', 'ELA', 'Sci')
						        </otherwise>
					        </choose>
						   <if test="grades != null">
						        AND rk.gradeabbreviatedname = ANY
						        (SELECT distinct gc.abbreviatedname FROM gradecourse gc where gc.id = ANY(VALUES
						        <foreach collection="grades" item="grade" open="" separator="," close="">
						            (#{grade,jdbcType=BIGINT})
						        </foreach>
						        ) )
						    </if>
						GROUP BY rk.contentareaname, rk.contentareaid,
							rk.attendanceschoolid, 
							rk.gradename, rk.gradecourseid, rk.gradeabbreviatedname, rk.studentid, rk.teacherID, rk.teacherLastName, rk.teacherFirstName,
							rk.contentareaabbreviatedname,rk.rosterid, rk.enrollmentrosterid, rk.recordCount, rk.studentLastName , rk.studentFirstName,
							itiComplete.numberOfCompletedEE
	),
	eoy AS (
			SELECT DISTINCT rk.contentareaname AS subject, rk.contentareaid AS subjectid,
				rk.attendanceschoolid, rk.gradename AS grade, rk.gradecourseid AS gradeid, rk.gradeabbreviatedname AS gradelevel, rk.studentid,
				CASE WHEN tem.methodcode = 'MLTASGN' THEN otwmad.numberoftests ELSE tspec.minimumnumberofees END AS numofEEs,
				'EOY' AS type,
				NULL::BOOLEAN AS isiticontentavailable,
				0 AS numOfInstructTestsNotStarted,
				0 AS numOfInstructTestsInProgress,
				0 AS numOfInstructTestsCompleted,
				COUNT(
					CASE WHEN tc.phasetype = 'EOY' AND ststatus.categorycode = 'unused' THEN 1 ELSE NULL END
				) AS numOfEoyTestsNotStarted,
				COUNT(
					CASE WHEN tc.phasetype = 'EOY' AND ststatus.categorycode = 'inprogress' THEN 1 ELSE NULL END
				) AS numOfEoyTestsInProgress,
				COUNT(
					CASE WHEN tc.phasetype = 'EOY' AND ststatus.categorycode = 'complete' THEN 1 ELSE NULL END
				) AS numOfEoyTestsCompleted
			FROM rosteredkids rk
			LEFT JOIN testsession ts
				ON rk.rosterid = ts.rosterid
				AND rk.schoolyear = ts.schoolyear
				AND ts.operationaltestwindowid IN (
					SELECT otw.id
					FROM operationaltestwindow otw
					INNER JOIN  testenrollmentmethod tem ON otw.testenrollmentmethodid = tem.id AND otw.assessmentprogramid = tem.assessmentprogramid
					WHERE otw.assessmentprogramid = (SELECT id FROM assessmentprogram WHERE abbreviatedname = 'DLM')
					AND otw.testenrollmentflag IS TRUE
					AND tem.methodcode IN ('STDNTTRKR', 'FXD', 'MLTASGN')
				)
				AND ts.activeflag IS TRUE
			LEFT JOIN operationaltestwindow otw ON ts.operationaltestwindowid = otw.id
			LEFT JOIN testenrollmentmethod tem ON otw.testenrollmentmethodid = tem.id
			LEFT JOIN operationaltestwindowmultiassigndetail otwmad ON otw.id = otwmad.operationaltestwindowid AND rk.contentareaid = otwmad.contentareaid
			LEFT JOIN studentstests st ON ts.id = st.testsessionid AND rk.studentid = st.studentid AND rk.enrollmentid = st.enrollmentid AND st.activeflag = TRUE
			LEFT JOIN category ststatus ON st.status = ststatus.id
			LEFT JOIN testcollection tc ON st.testcollectionid = tc.id AND tc.phasetype IN ('EOY') AND tc.contentareaid = rk.contentareaid
			LEFT JOIN test t ON st.testid = t.id AND rk.contentareaid = t.contentareaid
			LEFT JOIN testspecification tspec ON t.testspecificationid = tspec.id
			WHERE 
			    <choose>
			        <when test="contentareaid != null">
			        	rk.contentareaid = #{contentareaid,jdbcType=BIGINT}
			        </when>
			        <otherwise>
							rk.contentareaabbreviatedname IN ('M', 'ELA', 'Sci')
			        </otherwise>
		        </choose>
			    <if test="operationalTestWindowID != null">
			    	AND otw.id = #{operationalTestWindowID,jdbcType=BIGINT}
			    </if>
			AND CASE WHEN ts.id IS NOT NULL THEN tspec.id IS NOT NULL ELSE TRUE END
			GROUP BY rk.contentareaname, rk.contentareaid,
				rk.attendanceschoolid, rk.gradename, rk.gradecourseid, rk.gradeabbreviatedname, rk.studentid, tspec.minimumnumberofees, otwmad.numberoftests, tem.methodcode
	),
	blueprintees as (
					SELECT bp.contentareaid,gc.abbreviatedname ,essentialelementid,groupnumber,numberrequired
					FROM blueprint bp
					INNER JOIN  blueprintessentialelements bpee on bp.id = bpee.blueprintid
					INNER JOIN gradecourse gc on gc.id=bp.gradecourseid
					LEFT JOIN blueprintcriteriadescription bpcd on bp.criteria = bpcd.criteria
					),
					blueprinteecounts as (SELECT DISTINCT ON (essentialelementid||abbreviatedname) contentareaid,abbreviatedname,essentialelementid,groupnumber,numberrequired
						FROM blueprintees
						ORDER BY essentialelementid||abbreviatedname, numberrequired desc
					),
   requiredBlueprintEE as (SELECT contentareaid,abbreviatedname, sum(numberrequired) as noEEs
					FROM (SELECT distinct groupnumber, numberrequired,contentareaid,abbreviatedname FROM blueprinteecounts) as blueprinteeContentAreaIDGradeCount
					      GROUP BY contentareaid,abbreviatedname)
					SELECT distinct
							iti.subject, iti.subjectid,
							otd.districtname, otd.districtid, otd.districtdisplayidentifier,
							otd.schoolname, iti.attendanceschoolid, otd.schooldisplayidentifier,
							iti.grade, iti.gradeid, iti.gradelevel,
							iti.studentid,
							iti.isiticontentavailable,
							iti.numOfInstructTestsNotStarted, iti.numOfInstructTestsInProgress, iti.numOfInstructTestsCompleted,
							case when eoy.numOfEoyTestsNotStarted is not null then eoy.numOfEoyTestsNotStarted else 0 end as numOfEoyTestsNotStarted,
							case when eoy.numOfEoyTestsInProgress is not null then eoy.numOfEoyTestsInProgress else 0 end as numOfEoyTestsInProgress,
							case when eoy.numOfEoyTestsCompleted is not null then eoy.numOfEoyTestsCompleted else 0 end as numOfEoyTestsCompleted,
							case when iti.numberOfCompletedEE is not null then iti.numberOfCompletedEE else 0 end numberOfCompletedEE,
							rEE.noEEs as numofEEs, iti.teacherID, iti.teacherLastName, iti.teacherFirstName,iti.contentareaabbreviatedname as subjectAbbreviatedName, iti.rosterid,
							iti.enrollmentrosterid, iti.recordCount, iti.studentLastName , iti.studentFirstName
						FROM iti
						INNER JOIN organizationtreedetail otd on iti.attendanceschoolid=otd.schoolid
						LEFT  JOIN eoy
								on eoy.studentid IS NOT DISTINCT FROM iti.studentid
								and eoy.attendanceschoolid IS NOT DISTINCT FROM iti.attendanceschoolid
								and eoy.subjectid IS NOT DISTINCT FROM iti.subjectid
								and eoy.gradelevel IS NOT DISTINCT FROM iti.gradelevel
						LEFT JOIN requiredBlueprintEE as rEE  on rEE.contentareaid= iti.subjectid  and rEE.abbreviatedname = iti.gradelevel
								<if test="educatorIds != null">
								   where iti.teacherID  = ANY(VALUES
								        <foreach collection="educatorIds" item="educatorID" open="" separator="," close="">
								            (#{educatorID,jdbcType=BIGINT})
								        </foreach>
								        )
								 </if>
	    ORDER BY iti.teacherLastName, iti.teacherFirstName, iti.gradelevel, iti.studentLastName , iti.studentFirstName
	</select>

</mapper>
