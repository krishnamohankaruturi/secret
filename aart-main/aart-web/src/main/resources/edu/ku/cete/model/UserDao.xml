<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="edu.ku.cete.model.UserDao">

      <resultMap id="BaseResultMap" type="edu.ku.cete.domain.user.User">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:22 CST 2012.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="username" jdbcType="VARCHAR" property="userName" />
    <result column="firstname" jdbcType="VARCHAR" property="firstName" />
    <result column="middlename" jdbcType="VARCHAR" property="middleName" />
    <result column="surname" jdbcType="VARCHAR" property="surName" />
    <result column="displayname" jdbcType="VARCHAR" property="displayName" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="uniquecommonidentifier" jdbcType="VARCHAR" property="uniqueCommonIdentifier" />
    <result column="defaultusergroupsid" jdbcType="BIGINT" property="defaultUserGroupsId" />
    <result column="ukey" jdbcType="VARCHAR" property="ukey" />
    <result column="createddate" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="createduser" jdbcType="INTEGER" property="createdUser" />
    <result column="activeflag" jdbcType="BIT" property="activeFlag" />
    <result column="modifieddate" jdbcType="TIMESTAMP" property="modifiedDate" />
    <result column="modifieduser" jdbcType="INTEGER" property="modifiedUser" />
  </resultMap>
  
  <resultMap id="ExtendedResultMap" type="edu.ku.cete.domain.user.User">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="username" jdbcType="VARCHAR" property="userName" />
    <result column="firstname" jdbcType="VARCHAR" property="firstName" />
    <result column="middlename" jdbcType="VARCHAR" property="middleName" />
    <result column="surname" jdbcType="VARCHAR" property="surName" />
    <result column="displayname" jdbcType="VARCHAR" property="displayName" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="uniquecommonidentifier" jdbcType="VARCHAR" property="uniqueCommonIdentifier" />
    <result column="defaultusergroupsid" jdbcType="BIGINT" property="defaultUserGroupsId" />
    <result column="ukey" jdbcType="VARCHAR" property="ukey" />
    <result column="createddate" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="createduser" jdbcType="INTEGER" property="createdUser" />
    <result column="activeflag" jdbcType="BIT" property="activeFlag" />
    <result column="modifieddate" jdbcType="TIMESTAMP" property="modifiedDate" />
    <result column="modifieduser" jdbcType="INTEGER" property="modifiedUser" />
    <result column="programnames" jdbcType="VARCHAR" property="programNames" />
    <collection property="organizations" ofType="edu.ku.cete.domain.common.Organization">
		<id column="organization.id" property="id" jdbcType="BIGINT" />
		<id column="organization.displayidentifier" property="displayIdentifier" jdbcType="VARCHAR" />
		<id column="organization.name" property="organizationName" jdbcType="VARCHAR" />
	</collection>
  </resultMap>
  
  <resultMap id="UserDetailsRolesMap" type="edu.ku.cete.web.UserDetailsAndRolesDTO">
    <id column="organizationId" property="organizationId" />    
    <result column="state" property="state" />  
    <result column="userStatus" property="userStatus" /> 
    <result column="educatorIdentifier" property="educatorIdentifier" />
    <result column="firstName" property="legalFirstName" /> 
    <result column="lastName" property="legalLasttName" />    
    <result column="email" property="email" />     
    <result column="organizationLevel" property="organizationLevel" /> 
    <result column="organizationName" property="organizationName" /> 
	<result column="districtdisplayidentifier" property="districtOrgId"/>    
    <result column="userRoles" property="roles" />
    <result column="assessmentProgram" property="assessmentProgram" />
    <result column="createdDate" property="createdDate" /> 
    <result column="activeFlag" property="activeFlag"/>  
  </resultMap>
  
  <resultMap id="userJsonObjectMap" type="edu.ku.cete.domain.user.User">
         <id property="id" column="id" />
         <result property="uniqueCommonIdentifier" column="uniqueCommonIdentifier"/>
         <result property="email" column="email"/>
         <result property="firstName" column="firstName" />
         <result property="surName" column="surName" />         
		 <result property="sourceType" column="sourceType" />
		 <result property="createdDate" column="createdDate" />
		 <result property="modifiedDate" column="modifiedDate" />
		 <result property="createdUser" column="createdUser" />
		 <result property="modifiedUser" column="modifiedUser" />
		 		 
		 <collection property="assessmentProgramCodes" ofType="java.lang.String" javaType="list">
           <result column="assessmentProgramCode" />
         </collection>         
          <collection property="userOrganizations" column="o_id" ofType="edu.ku.cete.domain.user.UserOrganization" javaType="list" >
            <id property="id" column="o_id" />
            <result property="organizationId" column="o_organizationId" />
            <result property="organizationName" column="o_organizationName" />
            <result property="isDefault" column="o_isdefault" />
            <result property="createdDate" column="o_createdDate" />
		    <result property="modifiedDate" column="o_modifiedDate" />
		    <result property="createdUser" column="o_createdUser" />
		    <result property="modifiedUser" column="o_modifiedUser" />		    
            <collection property="roles" column="o_r_id"  ofType="edu.ku.cete.domain.user.UserRoles"  javaType="list">
                <id property="id" column="o_r_id" />
                <result property="groupName" column="o_r_groupName" />
                <result property="groupId" column="o_r_groupId" />
                <result property="isDefault" column="o_r_isDefault" />
                <result property="createdDate" column="o_r_createdDate" />
		        <result property="modifiedDate" column="o_r_modifiedDate" />
		        <result property="createdUser" column="o_r_createdUser" />
		        <result property="modifiedUser" column="o_r_modifiedUser" />
            </collection>  
         </collection>
    </resultMap>
    
   <resultMap id="UsertrainingMap" type="edu.ku.cete.web.DLMPDTrainingDTO">
    <id column="id" property="id" />    
    <result column="trainingcompleted" property="rtComplete" /> 
    <result column="trainingcompletiondate" property="rtCompleteDate" />
  </resultMap>

  
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:22 CST 2012.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:22 CST 2012.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:22 CST 2012.
    -->
    id, username, firstname, middlename, surname, displayname, email, uniquecommonidentifier, 
    defaultusergroupsid, createddate, createduser, activeflag, modifieddate, modifieduser
  </sql>
  <select id="selectByExample" parameterType="edu.ku.cete.domain.user.UserExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:22 CST 2012.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.aartuser
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="edu.ku.cete.domain.user.UserExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:22 CST 2012.
    -->
    delete from public.aartuser
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>

  <insert id="insertSelective" parameterType="edu.ku.cete.domain.user.User">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:23 CST 2012.
    -->
    insert into public.aartuser
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="firstName != null">
        firstname,
      </if>
      <if test="middleName != null">
        middlename,
      </if>
      <if test="surName != null">
        surname,
      </if>
      <if test="displayName != null">
        displayname,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="uniqueCommonIdentifier != null">
        uniquecommonidentifier,
      </if>
      <if test="defaultUserGroupsId != null">
        defaultusergroupsid,
      </if>
      <if test="ukey != null">
        ukey,
      </if>
      <if test="createddate != null">
        createddate,
      </if>
      <if test="createduser != null">
        createduser,
      </if>
      <if test="activeflag != null">
        activeflag,
      </if>
      <if test="modifieddate != null">
        modifieddate,
      </if>
      <if test="modifieduser != null">
        modifieduser,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="firstName != null">
        #{firstName,jdbcType=VARCHAR},
      </if>
      <if test="middleName != null">
        #{middleName,jdbcType=VARCHAR},
      </if>
      <if test="surName != null">
        #{surName,jdbcType=VARCHAR},
      </if>
       <if test="displayName != null">
        #{displayName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="uniqueCommonIdentifier != null">
        #{uniqueCommonIdentifier,jdbcType=VARCHAR},
      </if>
      <if test="defaultUserGroupsId != null">
        #{defaultUserGroupsId,jdbcType=BIGINT},
      </if>
      <if test="ukey != null">
        #{ukey,jdbcType=VARCHAR},
      </if>
      <if test="createddate != null">
        #{createddate,jdbcType=TIMESTAMP},
      </if>
      <if test="createduser != null">
        #{createduser,jdbcType=INTEGER},
      </if>
      <if test="activeflag != null">
        #{activeflag,jdbcType=BIT},
      </if>
      <if test="modifieddate != null">
        #{modifieddate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifieduser != null">
        #{modifieduser,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.ku.cete.domain.user.UserExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:23 CST 2012.
    -->
    select count(*) from public.aartuser
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:23 CST 2012.
    -->
    update public.aartuser
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.username != null">
        username = #{record.username,jdbcType=VARCHAR},
      </if>
      <if test="record.firstName != null">
        firstname = #{record.firstName,jdbcType=VARCHAR},
      </if>
      <if test="record.middleName != null">
        middlename = #{record.middleName,jdbcType=VARCHAR},
      </if>
      <if test="record.surName != null">
        surname = #{record.surName,jdbcType=VARCHAR},
      </if>
       <if test="record.displayName != null">
        displayname = #{record.displayName,jdbcType=VARCHAR},
      </if>
      <if test="record.password != null">
        password = #{record.password,jdbcType=VARCHAR},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.uniqueCommonIdentifier != null">
        uniquecommonidentifier = #{record.uniqueCommonIdentifier,jdbcType=VARCHAR},
      </if>
      <if test="record.defaultUserGroupsId != null">
        defaultusergroupsid = #{record.defaultUserGroupsId,jdbcType=BIGINT},
      </if>
      <if test="record.ukey != null">
        ukey = #{record.ukey,jdbcType=VARCHAR},
      </if>
      <if test="record.createddate != null">
        createddate = #{record.createddate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createduser != null">
        createduser = #{record.createduser,jdbcType=INTEGER},
      </if>
      <if test="record.activeflag != null">
        activeflag = #{record.activeflag,jdbcType=BIT},
      </if>
      <if test="record.modifieddate != null">
        modifieddate = #{record.modifieddate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifieduser != null">
        modifieduser = #{record.modifieduser,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:23 CST 2012.
    -->
    update public.aartuser
    set id = #{record.id,jdbcType=BIGINT},
      username = #{record.username,jdbcType=VARCHAR},
      firstname = #{record.firstName,jdbcType=VARCHAR},
      middlename = #{record.middleName,jdbcType=VARCHAR},
      surname = #{record.surName,jdbcType=VARCHAR},
      displayname = #{record.displayName,jdbcType=VARCHAR},
      password = #{record.password,jdbcType=VARCHAR},
      email = #{record.email,jdbcType=VARCHAR},
      uniquecommonidentifier = #{record.uniqueCommonIdentifier,jdbcType=VARCHAR},
      defaultusergroupsid = #{record.defaultUserGroupsId,jdbcType=BIGINT},
      ukey = #{record.ukey,jdbcType=VARCHAR},
      createddate = #{record.createddate,jdbcType=TIMESTAMP},
      createduser = #{record.createduser,jdbcType=INTEGER},
      activeflag = #{record.activeflag,jdbcType=BIT},
      modifieddate = #{record.modifieddate,jdbcType=TIMESTAMP},
      modifieduser = #{record.modifieduser,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.user.User">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:23 CST 2012.
    -->
    update public.aartuser
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="firstName != null">
        firstname = #{firstName,jdbcType=VARCHAR},
      </if>
      <if test="middleName != null">
        middlename = #{middleName,jdbcType=VARCHAR},
      </if>
      <if test="surName != null">
        surname = #{surName,jdbcType=VARCHAR},
      </if>
      <if test="displayName != null">
        displayname = #{displayName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="uniqueCommonIdentifier != null">
        uniquecommonidentifier = #{uniqueCommonIdentifier,jdbcType=VARCHAR},
      </if>
      <if test="defaultUserGroupsId != null">
        defaultusergroupsid = #{defaultUserGroupsId,jdbcType=BIGINT},
      </if>
      <if test="ukey != null">
        ukey = #{ukey,jdbcType=VARCHAR},
      </if>
      <if test="createddate != null">
        createddate = #{createddate,jdbcType=TIMESTAMP},
      </if>
      <if test="createduser != null">
        createduser = #{createduser,jdbcType=INTEGER},
      </if>
      <if test="activeflag != null">
        activeflag = #{activeflag,jdbcType=BIT},
      </if>
      <if test="modifieddate != null">
        modifieddate = #{modifieddate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifieduser != null">
        modifieduser = #{modifieduser,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.user.User">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 21 11:46:23 CST 2012.
    -->
    update public.aartuser
    set username = #{username,jdbcType=VARCHAR},
      firstname = #{firstName,jdbcType=VARCHAR},
      middlename = #{middleName,jdbcType=VARCHAR},
      surname = #{surName,jdbcType=VARCHAR},
      displayname = #{displayName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      uniquecommonidentifier = #{uniqueCommonIdentifier,jdbcType=VARCHAR},
      defaultusergroupsid = #{defaultUserGroupsId,jdbcType=BIGINT},
      ukey = #{ukey,jdbcType=VARCHAR},
      createddate = #{createddate,jdbcType=TIMESTAMP},
      createduser = #{createduser,jdbcType=INTEGER},
      activeflag = #{activeflag,jdbcType=BIT},
      modifieddate = #{modifieddate,jdbcType=TIMESTAMP},
      modifieduser = #{modifieduser,jdbcType=INTEGER}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
 <!-- Manoj Kumar O : Added for US_16244(provide UI TO merge Users) -->
   <update id="moveUserRoster" parameterType="edu.ku.cete.domain.enrollment.Roster">
	 update public.roster
	 set teacherid = #{rosterMoveuserIdParam},
	 modifieddate = now(),
	 modifieduser = #{modifiedUser}
	 where teacherid = #{deleteUserRosterId} 
	</update>
	
	<update id="purgeUser" parameterType="edu.ku.cete.domain.user.User" >
	 update public.aartuser
	  set activeflag=false,
	  modifieddate = #{modifiedDate},
      modifieduser = #{modifiedUser}
	  where id = #{id} 
	</update>

	<insert id="add" parameterType="User" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		INSERT INTO aartuser(username, uniqueCommonIdentifier, firstname, middlename, surname, displayname, password,
		 defaultUserGroupsId, email, ukey, createddate, createduser, activeflag, modifieddate, modifieduser, sourcetype, internaluserindicator, externalid)
		  values(#{userName}, #{uniqueCommonIdentifier}, #{firstName}, #{middleName}, #{surName}, #{displayName}, #{password}, 
		  #{defaultUserGroupsId}, #{email}, #{salt}, #{createdDate}, #{createdUser}, #{activeFlag},
		  #{modifiedDate},#{modifiedUser},#{sourceType},#{internaluserindicator},#{externalId})
	</insert>
<!--  Added for US-14985 -->
	<insert id="setUserPasswordHistory" parameterType="UserPasswordReset" useGeneratedKeys="true">
				INSERT INTO userpasswordreset(aart_user_id, password, requesttype)
		         values( #{aartUserId}, #{password},#{requestType})
	</insert>
<!--  Added for US-14985 -->
	<select id="getPastYearPasswordHistory" resultType="User">
		SELECT aart_user_id, password 
		FROM userpasswordreset 
		WHERE aart_user_id = #{id} 
		and createddate > CURRENT_DATE - #{days} and requesttype='HISTORY'
	</select>
<!--  Added for US-14985 -->
	<select id="lastUserPasswordUpdate" resultType="User" parameterType="Long">
		Select * from userpasswordreset where createddate > current_Date - 180
		and aart_user_id = #{id} and requesttype='HISTORY'
	</select>
<!--  Added for US-14985 -->	
	<select id="getPasswordPolicyRules" resultType="Category">
		Select * from category where categorytypeid
		IN (Select  id from categorytype where typecode= #{categorycode}) and activeflag='true'
	</select>
<!--  Added for US-14985 -->
<!--  DE18787 : Only active user(uog.status = 2) will be receiving the password expiring email -->
	<select id="getPasswordExpirationAlertUsers" resultType="User">
		select distinct au.* from aartuser au
		inner join usersorganizations uo on uo.aartuserid = au.id and uo.activeflag is true
		inner join userorganizationsgroups uog on uog.userorganizationid = uo.id and uog.activeflag is true and uog.status = 2
 		where au.id in
			( Select aart_user_id from (select aart_user_id,max(createddate) as latestcreateddate  from userpasswordreset 
			where password is not null group by aart_user_id) as passwordreset 
		where date(latestcreateddate) = CURRENT_DATE - #{noOfDays}) and au.activeflag is true
	</select>
	
	<!-- java.util.ArrayList -->
 	<select id="getUserRolesByUserId" resultType="java.util.ArrayList" parameterType="Long">
		SELECT DISTINCT
  		grinner.groupname                                  AS roles,
  		uoinner.organizationid                             AS orgid
		FROM aartuser AS auuinner
  		LEFT JOIN usersorganizations AS uoinner
  	 	 ON auuinner.id = uoinner.aartuserid
  		LEFT JOIN userorganizationsgroups uoginner
  	 	ON uoginner.userorganizationid = uoinner.id
  		LEFT JOIN groups grinner
   		ON grinner.id = uoginner.groupid
		WHERE auuinner.id = #{userIdParam}
		AND uoinner.activeflag = true 
		AND uoginner.activeflag = true
	
	</select>
	
	<select id="lastid" resultType="java.lang.Long">
		SELECT lastval() AS id
	</select>

	<delete id="delete">
		DELETE FROM aartuser WHERE id = #{id}
	</delete>
	
	<select id="get" resultType="User" parameterType="Long">
		SELECT
			id, username, uniqueCommonIdentifier, firstname, middlename, surname, displayname, password,
			 defaultUserGroupsId, email, ukey as salt,activeFlag, internaluserindicator
		FROM aartuser 
		WHERE id = #{id} 
		and activeFlag is true		
	</select>
	
	<select id="getAllDetails" resultType="User" parameterType="Long">
		SELECT au.id, username, uniqueCommonIdentifier, firstname, middlename, surname, displayname, password,
			 defaultUserGroupsId, email, ukey as salt, au.activeFlag, uo.organizationid as userorganizationid, ug.groupid as usergroupid      
			 FROM aartuser au 
				left join usersorganizations as uo on au.id = uo.aartuserid 
				left join userorganizationsgroups as ug on uo.id = ug.userorganizationid 
				left join organization o on uo.organizationid = o.id 
				left join groups as g on ug.groupid = g.id 
			 WHERE au.id = #{id}
			 and au.activeFlag is true
			 and uo.activeflag = true
			 and ug.activeflag = true
	</select>
	
	<select id="getOrganizationHierarchy" resultType="Organization" parameterType="Long">
        select t.id, t.organizationname, t.displayidentifier, t.organizationtypeid, ot.typecode, ot.typelevel from organizationtype ot 
        inner join (select * from organization_parent_tree(#{id},0)) t on ot.id=t.organizationtypeid where ot.typecode != 'CONS'  
    </select>

	<select id="getOrganizations" resultType="Organization" parameterType="Long">
        SELECT
            o.id, organizationName, displayIdentifier,
             organizationTypeId, 
            welcomeMessage, orgtype.typename, orgtype.typecode,
             orgtype.typelevel, uo.isdefault as defaultOrg, o.activeflag 
        FROM organization AS o, usersorganizations as uo, aartuser as au, organizationtype as orgtype
        WHERE
            o.organizationtypeid = orgtype.id AND
            o.id = uo.organizationid AND
            uo.aartuserid = au.id AND
            au.id = #{userId} AND
			au.activeFlag is true AND
			uo.activeFlag is true
    </select>

	<select id="getGroups" resultType="Groups" parameterType="Long">
	   SELECT gr.id as groupId, uo.organizationId, groupname, uog.isdefault as defaultGroup
	   FROM groups as gr, usersorganizations as uo,userorganizationsgroups uog
	   WHERE uog.userorganizationid = uo.id and gr.id = uog.groupId
	    AND uo.aartuserid = #{userId} AND gr.defaultrole = false AND uo.activeFlag is true AND uog.activeFlag is true
	</select>
	
	<select id="getAllGroups" resultType="Groups" parameterType="Long">
	   SELECT gr.id as groupId, uo.organizationId, groupname, uog.isdefault as defaultGroup
	   FROM groups as gr, usersorganizations as uo,userorganizationsgroups uog
	   WHERE uog.userorganizationid = uo.id and gr.id = uog.groupId
	    AND uo.aartuserid = #{userId} AND gr.defaultrole = false AND uo.activeflag = true AND uog.activeflag = true
	</select>

	<select id="getTeacherCount" resultType="java.lang.Integer">
	  SELECT count(*) 
	  FROM aartuser au
	  JOIN usersorganizations uo ON au.id = uo.aartuserid
	  JOIN userorganizationsgroups uog ON uog.userorganizationid=uo.id
	  JOIN groups gr ON gr.id = uog.groupId
	  JOIN organization org ON org.id=uo.organizationid
	  WHERE au.id = #{userId} AND org.id=#{schoolId}
	  AND au.activeflag = true AND uo.activeflag = true AND uog.activeflag = true AND org.activeflag = true AND gr.groupcode= #{teacherCode}
	</select>
	
	<select id="getByUserIdForUploadResuts" resultType="User">	
	with state as
    (select op.id from
			(  select id,organizationtypeid from organization_parent((select id from organization
			 where id = #{orgId} ))
			union
			select id,organizationtypeid from organization where id = #{orgId} ) op 
			join organizationtype ot  on  ot.id = op.organizationtypeid
			where typecode = 'ST'
   )
	select distinct au.id, au.username, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
        au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser
	from aartuser au join usersorganizations uo on au.id = uo.aartuserid and uo.activeflag = true
	where au.id = #{userId} and uo.organizationid in ( 
	select id from organization_children( (select id from state))
		union
		select id from organization where id = #{orgId}
		union
		select id from state
		)			
	</select> 
	
	<!-- Changed during US16245 : to retrieve user with statusCode -->
 	<select id="getByUserName" resultType="User">
		SELECT au.id, au.username AS userName, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
		au.defaultusergroupsid, au.activeflag, au.password, au.ukey AS salt, au.systemindicator,
		 (select ( CASE WHEN max ( uog.status ) = '1' THEN 'Pending' WHEN max ( uog.status ) = '2' THEN 'Active' 
				WHEN max ( uog.status ) = '3' THEN 'Inactive' ELSE 'Inactive' END ) from 
				usersorganizations uo JOIN userorganizationsgroups uog ON uog.userorganizationid = uo.id
				where uo.aartuserid = au.id) AS statuscode 
		 FROM aartuser AS au 
		WHERE au.activeFlag IS TRUE AND au.username = lower ( #{userName} )
	</select>
	
	<select id="getByEmail" resultType="User">
	   SELECT au.id, username AS userName, uniqueCommonIdentifier, firstname, middlename, activeFlag, surname, displayname, password, 
		defaultUserGroupsId, email, ukey AS salt, 
		(select ( CASE WHEN max ( uog.status ) = '1' THEN 'Pending' WHEN max ( uog.status ) = '2' THEN 'Active' 
				WHEN max ( uog.status ) = '3' THEN 'Inactive' ELSE 'Inactive' END ) from 
				usersorganizations uo JOIN userorganizationsgroups uog ON uog.userorganizationid = uo.id
				where uo.aartuserid = au.id) AS statuscode 
		 FROM aartuser AS au 
		WHERE  (lower(email) = lower(#{email}) or lower(username) = lower(#{email}))
	</select>
	
	<select id="getByEmailorUserName" resultType="User">
	   SELECT id, username as userName, uniqueCommonIdentifier, firstname, middlename,activeFlag,
	    surname, displayname, password, defaultUserGroupsId, email, ukey as salt
	   FROM aartuser
	   WHERE  (lower(email) = lower(#{email}) or lower(username) = lower(#{email}) ) order by modifieddate desc limit 1
	</select>
	
	<select id="getByUniqueCommonIdentifierAndTree" resultType="User">
	   SELECT au.id as id, username, uniqueCommonIdentifier,
	    firstname, middlename,
	    au.activeFlag, surname, displayname, password,
	     defaultUserGroupsId, email, ukey as salt
	   FROM
	    aartuser au,usersorganizations as uo
	   WHERE uo.aartuserid = au.id
       AND uniqueCommonIdentifier = #{uniqueCommonIdentifier}
       <if test="activeFlag != null" >
       AND au.activeFlag = #{activeFlag}
       AND uo.activeflag = true
       </if>
        <if test="organizationIds != null" >
		AND	uo.organizationid = ANY(ARRAY 
	        <foreach collection="organizationIds" item="organizationId" open="[" close="]" separator="," >
	        	#{organizationId}
	        </foreach>)
        </if>     
	</select>
	
	<select id="getByUniqueCommonIdentifierAndOrgList" resultType="User">
	   SELECT au.id as id, username, uniqueCommonIdentifier, 
	    firstname, middlename,
	    au.activeFlag, surname, displayname, 
	     defaultUserGroupsId, email, o.organizationname as orgName
	   FROM 
	    aartuser au left join usersorganizations as uo on au.id = uo.aartuserid 
	    left join organization o on uo.organizationid=o.id 
	   WHERE au.activeFlag = true 
       AND uniqueCommonIdentifier = #{uniqueCommonIdentifier}   
       AND uo.activeflag = true    
        <if test="organizationIds != null" >
		AND	uo.organizationid = ANY(ARRAY 
	        <foreach collection="organizationIds" item="organizationId" open="[" close="]" separator="," >
	        	#{organizationId}
	        </foreach>)
        </if>     
	</select>
	
	<select id="getByOrganizationAndUniqueCommonIdentifier" resultType="User">
	   SELECT au.id, au.username as userName, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
        au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser
	   FROM usersorganizations as uo, aartuser as au
       WHERE 
        uo.aartuserid = au.id 
       AND uo.organizationid = #{organizationId} 
       AND au.uniqueCommonIdentifier = #{uniqueCommonIdentifier}
       AND au.activeFlag is true
       AND uo.activeflag = true
	</select>
	
	<select id="getByUniqueCommonIdentifierAndState" resultType="User">
	   SELECT au.id as id, username, uniqueCommonIdentifier, 
	    firstname, middlename,
	    au.activeFlag, surname, displayname, 
	     defaultUserGroupsId, email
	   FROM 
	    aartuser au join usersorganizations as uo on au.id = uo.aartuserid 
	   WHERE uniqueCommonIdentifier = #{uniqueCommonIdentifier}   
       AND au.activeFlag = #{activeFlag} 
       AND uo.activeflag = true   
        AND	uo.organizationid = ANY(select id from organization_children(#{stateId})) limit 1
	</select>
	
	<!-- Changed during the US16351-to add Assessment Programs to user Edit grid -->
	<sql id="getByOrganizationSelect">
		select distinct au.id, au.username as userName, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier,
			au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser,
			(
				CASE
					WHEN max(uog.status) = '1' THEN 'Pending'
					WHEN max(uog.status) = '2' THEN 'Active'
					ELSE 'Inactive'
				END
			) as statuscode,
			array_to_string(ARRAY(
				select distinct abbreviatedname
				from assessmentprogram ap
				inner join userassessmentprogram uap on ap.id = uap.assessmentprogramid and uap.aartuserid = au.id and uap.activeflag is true
			),', ') as programnames,
				array_to_string(ARRAY(
				select distinct groupname
				from groups ig
				inner join usersorganizations iuo on iuo.aartuserid = au.id and iuo.activeflag is true
				inner join userorganizationsgroups iuog on iuog.userorganizationid = iuo.id and ig.id = iuog.groupid and iuog.activeflag is true
			),', ') as userRoles
		from aartuser au
		inner join usersorganizations uo on uo.aartuserid = au.id and au.activeflag is true and uo.activeflag is true
		inner join userorganizationsgroups uog on uog.userorganizationid = uo.id and uog.activeflag is true
		<!-- "au.id = uap.aartuserid" in this join is NEEDED to keep performance up for an index on uap -->
		inner join userassessmentprogram uap on uap.userorganizationsgroupsid = uog.id and au.id = uap.aartuserid and uap.activeflag is true
		inner join organization o on o.id = uo.organizationid and o.activeflag is true
		inner join groups g on g.id = uog.groupid and g.activeflag is true
		where au.systemindicator is false
		and o.id = ANY(ARRAY(select id from organization_children(#{organizationId}) union select #{organizationId}))
		and g.id in (select id from groups where roleorgtypeid >= (select roleorgtypeid from groups where id = #{currentGroupId}))
		and uap.assessmentprogramid = #{assessmenProgramId}
		<if test="showInactiveUsers != true">and uog.status in (1,2)</if>
		<if test="showInactiveUsers == true">and uog.status in (1,2,3)</if>
		group by au.id
	</sql>
	<sql id="getByOrganizationWhere">
		<if test="requestFor != 'move' ">
			 WHERE 1=1
		</if>
		 <if test="requestFor == 'move' ">
		 WHERE id  = ANY(ARRAY(select muo.aartuserid 
			from usersorganizations muo
			inner join userorganizationsgroups muog on muog.userorganizationid = muo.id and muog.activeflag is true and muo.activeflag is true
			inner join userassessmentprogram muap on muap.userorganizationsgroupsid = muog.id and muap.activeflag is true
			and muo.organizationid in (select id from organization_children(#{organizationId}) union select #{organizationId}))) 
		 </if>				 
    		<if test="isTeacher == true">AND id=#{educatorId}</if>	       	
			<if test="id != null">AND cast(id as varchar) = #{id}</if>
			
            <!-- <if test="statusCode != null and statusCode=='Active'">AND statusCode=2</if>
			<if test="statusCode != null and statusCode=='Pending'">AND statusCode=1</if>
			<if test="statusCode != null and statusCode=='New'">AND statusCode is null</if> -->
			
			<!-- Changed During US16247  -->
			<if test="statusCode != null and statusCode=='Active'">AND statusCode='Active'</if>
			<if test="statusCode != null and statusCode=='Pending'">AND statusCode='Pending'</if>
			<if test="statusCode != null and statusCode=='Inactive'">AND statusCode='Inactive'</if>
			<if test="statusCode != null and statusCode=='New'">AND statusCode='New'</if>
			
			
			<if test="uniqueCommonIdentifier != null">AND upper(uniquecommonidentifier) like upper('%' || #{uniqueCommonIdentifier} || '%')</if>
			<if test="firstName != null">AND upper(firstname) like upper('%' || #{firstName} || '%')</if>
			<if test="statusCode != null">AND upper(statusCode) like upper('%' || #{statusCode} || '%')</if>
			<if test="surName != null">AND upper(surname) like upper('%' || #{surName} || '%')</if>
			<if test="email != null">AND upper(email) like upper('%' || trim(#{email}) || '%')</if>
			<if test="programNames != null">AND upper(programnames) like upper('%' || #{programNames} || '%')</if>
			<if test="userRoles != null">AND upper(userRoles) like upper('%' || #{userRoles} || '%')</if>
			
	</sql>
	
	<select id="getByOrganization" resultType="User">
		select * from (<include refid="getByOrganizationSelect"/>) as u
		<include refid="getByOrganizationWhere"/>

		<if test="sortByColumn != null">
	      ORDER BY 
	      	<choose>
	      		<when test="sortByColumn == 'statusCode'">statusCode</when>
	      		<when test="sortByColumn == 'surName,firstName'">surName, firstName</when>
	      		<when test="sortByColumn == 'uniqueCommonIdentifier'">uniqueCommonIdentifier</when>
	      		<when test="sortByColumn == 'firstName'">firstName</when>
	      		<when test="sortByColumn == 'surName'">surName</when>
	      		<when test="sortByColumn == 'email'">email</when>
	      		<when test="sortByColumn == 'id'">id</when>
	      		<when test="sortByColumn == 'userRoles'">userRoles</when>
	      		<otherwise>id</otherwise>
	      	</choose> 
	      	<if test="sortType!=null and sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
	    </if>
    	LIMIT #{limitCount}
    	OFFSET #{offset}
	</select>
	
	<select id="getUsersByUserType" resultType="edu.ku.cete.domain.user.User">
		select * from (<include refid="getInternalUsersByOrganizationSelect"/>) as u
		<include refid="getInternalUsersByOrganizationWhere"/>

		<if test="sortByColumn != null">
	      ORDER BY 
	      	<choose>
	      		<when test="sortByColumn == 'firstName'">firstName</when>
	      		<when test="sortByColumn == 'surName'">surName</when>
	      		<when test="sortByColumn == 'email'">email</when>
	      		<when test="sortByColumn == 'internaluserindicator'">internaluserindicator</when>
	      		<when test="sortByColumn == 'id'">id</when>
	      		<otherwise>id</otherwise>
	      	</choose> 
	      	<if test="sortType!=null and sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
	    </if>
    	LIMIT #{limitCount}
    	OFFSET #{offset}
	</select>
	
		<sql id="getInternalUsersByOrganizationSelect">
		select distinct au.id, au.username as userName, au.firstname, au.middlename, 
		au.surname, au.email, au.internaluserindicator, au.activeflag
		from aartuser au 
		inner join usersorganizations uo on uo.aartuserid = au.id and au.activeflag is true and uo.activeflag is true 
		inner join userorganizationsgroups uog on uog.userorganizationid = uo.id and uog.activeflag is true 
		inner join userassessmentprogram uap on uap.userorganizationsgroupsid = uog.id and uap.activeflag is true 
		inner join organization o on o.id = uo.organizationid and o.activeflag is true 
		and o.id = ANY(ARRAY(select id from organization_children(#{organizationId}) union select #{organizationId}))
		inner join assessmentprogram ap on ap.id = uap.assessmentprogramid and uap.activeflag is true and ap.id = #{assessmenProgramId}
		where au.systemindicator is false and au.activeflag is true
	</sql>
	
	<sql id="getInternalUsersByOrganizationWhere">
			 WHERE 1=1
			 
		 	<if test="id != null">AND cast(id as varchar) = #{id}</if>			 
			<if test="firstName != null">AND upper(firstname) like upper('%' || #{firstName} || '%')</if>
			<if test="surName != null">AND upper(surname) like upper('%' || #{surName} || '%')</if>
			<if test="email != null">AND upper(email) like upper('%' || trim(#{email}) || '%')</if>
			<!-- <if test="internaluserindicator != null">AND internaluserindicator = #{internaluserindicator}</if> -->
	</sql>
	
	<select id="countAllInternalUsersToView" resultType="java.lang.Integer">
		SELECT count(*) from (<include refid="getInternalUsersByOrganizationSelect"/>) as u
		<include refid="getInternalUsersByOrganizationWhere"/> 
  	</select>
  	
	<select id="countAllTeacherToView" resultType="java.lang.Integer">
		select count( distinct email) as count from 
         ( WITH roster_attendanceschool AS(select attendanceschoolid from roster where id =  #{rosterId})
         SELECT 
          au.id, 
          au.username as userName, 
          au.firstname, 
          au.middlename, 
          au.surname, 
          au.displayname, 
          au.email, 
          au.uniquecommonidentifier, 
          au.defaultusergroupsid, 
          au.createddate, 
          au.createduser, 
          au.activeflag, 
          au.modifieddate, 
          au.modifieduser,
         (CASE WHEN ug.status = '1' THEN 'Pending' WHEN ug.status = '2' THEN 'Active' WHEN ug.status = '3' THEN 'Inactive' ELSE 'Inactive' END) as statusCode, 
         ro.activeflag as rosterassigned 
         FROM aartuser as au 
         left join roster ro on au.id = ro.teacherid and ro.id = #{rosterId} 
         inner join usersorganizations uo on au.id=uo.aartuserid and uo.activeflag = true
         inner join userorganizationsgroups ug on uo.id=userorganizationid  and ug.activeflag = true 
		 inner join userassessmentprogram uaps on au.id = uaps.aartuserid and uaps.assessmentprogramid = #{assessmenProgramId} and uaps.activeflag = true
		 and ug.id = uaps.userorganizationsgroupsid		 
         inner join groups g on ug.groupid = g.id 
         WHERE au.activeFlag is true and au.systemindicator is false
         and CASE WHEN (SELECT attendanceschoolid from roster_attendanceschool) is not null THEN
		   		uo.organizationid  = (SELECT attendanceschoolid FROM roster_attendanceschool)
		 	 ELSE
		   		uo.organizationid  = ANY(ARRAY(select id from organization_children(#{organizationId}) union select #{organizationId}))
		 	 END
         and g.id in(select id from groups where  groupcode in('TEA','TEAR')) and (ug.status in ('1','2') or ro.activeflag is true) ) 
         as u
		<include refid="getByOrganizationWhere"/> 
  	</select>
	
	<select id="getByOrganizationWithRosterAssigned" resultType="User">
		WITH roster_attendanceschool AS(select attendanceschoolid from roster where id = #{rosterId})
		select distinct * from (SELECT au.id, au.username as userName, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
        	au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser,(CASE WHEN ug.status = '1' THEN 'Pending'
		WHEN ug.status = '2' THEN 'Active' WHEN ug.status = '3' THEN 'Inactive' ELSE 'Inactive' END) as statusCode, ro.activeflag as rosterassigned
		FROM aartuser as au 
			left join roster ro on au.id = ro.teacherid and ro.id = #{rosterId} 
			
			inner join usersorganizations uo on au.id=uo.aartuserid and uo.activeflag = true
			inner join userorganizationsgroups ug on uo.id=userorganizationid and ug.activeflag = true
			and uo.organizationid  = ANY(ARRAY(select id from organization_children(#{organizationId}) union select #{organizationId}))
			
			inner join userassessmentprogram uaps on au.id = uaps.aartuserid 
			and uaps.assessmentprogramid = #{assessmenProgramId} 
			and uaps.activeflag is true and ug.id = uaps.userorganizationsgroupsid
			
			inner join groups g on ug.groupid = g.id 
		
		WHERE au.activeFlag is true and au.systemindicator is false
		 and (ug.status in ('1','2') or ro.activeflag is true)
		and g.id in (select id from groups where groupcode in('TEA','TEAR'))
		and CASE WHEN (SELECT attendanceschoolid from roster_attendanceschool) is not null THEN
		   		uo.organizationid  = (SELECT attendanceschoolid FROM roster_attendanceschool)
		    ELSE
		    	uo.organizationid  = ANY(ARRAY(select id from organization_children(#{organizationId}) union select #{organizationId}))
		    END
		) as u
	    <include refid="getByOrganizationWhere"/>
        <if test="sortByColumn != null">
    	ORDER BY
    		<choose>
	    	<when test="sortByColumn.contains('rosterAssigned')">
	    		<choose>
	    			<when test="sortByColumn.contains('surName,firstName')">rosterAssigned asc, surName,firstName</when>
	    			<when test="sortByColumn.contains('id')">rosterAssigned asc, id</when>
		      		<when test="sortByColumn.contains('statusCode')">rosterAssigned asc, statusCode</when>
		      		<when test="sortByColumn.contains('uniqueCommonIdentifier')">rosterAssigned asc, uniqueCommonIdentifier</when>
		      		<when test="sortByColumn.contains('firstName')">rosterAssigned asc, firstName</when>
		      		<when test="sortByColumn.contains('surName')">rosterAssigned asc, surName</when>
		      		<when test="sortByColumn.contains('email')">rosterAssigned asc, email</when> 
		      	</choose>
		     </when>
		     <otherwise>
		     	<choose>
	    			<when test="sortByColumn == 'id'">id</when>
	    			<when test="sortByColumn == 'surName,firstName'">surName, firstName</when> 
		      		<when test="sortByColumn == 'statusCode'">statusCode</when>
		      		<when test="sortByColumn == 'uniqueCommonIdentifier'">uniqueCommonIdentifier</when>
		      		<when test="sortByColumn == 'firstName'">firstName</when>
		      		<when test="sortByColumn == 'surName'">surName</when>
		      		<when test="sortByColumn == 'email'">email</when> 
		      		<otherwise>id</otherwise>
		      	</choose>
		      </otherwise>
		     </choose>
    	 	<if test="sortType!=null and sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
	    </if>
    	LIMIT #{limitCount}
    	OFFSET #{offset}
	</select>
	
	<select id="countAllUsersToView" resultType="java.lang.Integer">
		SELECT count(*) from (<include refid="getByOrganizationSelect"/>) as u
		<include refid="getByOrganizationWhere"/> 
  	</select>
	
	
	<!--Added during US16243 for checking wheather user PD training is completed or not -->
  	<select id="isPdTrainingCompleted" resultType="java.lang.Boolean">
		select trainingcompleted from userpdtrainingdetail where userid = #{id}  
			and currentschoolyear::INT = #{currentSchoolYear} 
			order by modifieddate desc LIMIT 1
  	</select>
  	
  	<!--Added during US16243 for checking wheather user signed security agreement or not -->
  	<select id="isSecurityAgreementSigned" resultType="java.lang.Boolean">
  		select usa.agreementelection FROM usersecurityagreement usa 
		JOIN assessmentprogram agrap on agrap.id = usa.assessmentprogramid 
		WHERE agrap.activeflag is true and agrap.abbreviatedname='DLM'
		and usa.aartuserid = #{id} and to_date(usa.expiredate,'MM/DD/YYYY') > date(current_timestamp)
  	</select>
  	
	<update id="update" parameterType="User">
		UPDATE aartuser SET
			username = #{userName}, uniqueCommonIdentifier = #{uniqueCommonIdentifier}, firstname = #{firstName}, middlename = #{middleName}, 
			surname = #{surName}, displayname = #{displayName}, password = #{password}, defaultUserGroupsId = #{defaultUserGroupsId}, email = #{email},
			modifieddate = #{modifiedDate},
			modifieduser = #{modifiedUser},
			activeflag = #{activeFlag}
		WHERE id = #{id}
	</update>
	
	<update id="updateSelectiveByPrimaryKey" parameterType="User">
	   UPDATE aartuser
	   <set>
	       <if test="userName != null">
	           username = #{userName},
	       </if>
	       <if test="uniqueCommonIdentifier != null">
	         uniquecommonidentifier = #{uniqueCommonIdentifier},
	       </if>  
	       <if test="firstName != null">
	           firstname = #{firstName},
	       </if>
	       <if test="middleName != null">
	           middlename = #{middleName},
	       </if>
	       <if test="surName != null">
	           surname = #{surName},
	       </if>
	       <if test="displayName != null">
	           displayname = #{displayName},
	       </if>
	       <if test="password != null">
	           password = #{password},
	       </if>
	       <if test="defaultUserGroupsId != null">
	           defaultusergroupsid = #{defaultUserGroupsId},
	       </if>
	       <if test="email != null">
	           email = #{email},
	       </if>
	       <if test="modifiedDate != null">
	           modifieddate = #{modifiedDate},
	       </if>
	       <if test="modifiedUser != null">
	           modifieduser = #{modifiedUser},
	       </if>
	       <if test="activeFlag != null">
	           activeFlag = #{activeFlag},
	       </if>
	       <if test="internaluserindicator != null">
	           internaluserindicator = #{internaluserindicator},
	       </if>
	       <if test="externalId != null">
	           externalid = #{externalId}
	       </if>
	   </set>
	   where id = #{id}
	</update>

	<!-- TODO Use getByUniqueCommonIdentifierAndTree -->
	<select id="findShellUserByIdentifierAndOrganization" resultMap="BaseResultMap" parameterType="map">
	   select au.id, au.username, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
        au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser
	   from aartuser au join usersorganizations uo on au.id = uo.aartuserid left join userorganizationsgroups uog on uo.id = uog.userorganizationid
	   where uog.id is null and au.uniquecommonidentifier = #{uniqueCommonIdentifier} and uo.activeflag = true and uog.activeflag = true
	   <if test="organizations != null" >
        AND uo.organizationid  = ANY(ARRAY 
            <foreach collection="organizations" item="organization" open="[" close="]" separator="," >
                #{organization.id}
            </foreach>)
        </if>
	</select>
	
	<select id="getByUniqueCommonIdentifierAndOrgIdsWithNoStatus" resultMap="ExtendedResultMap">
		 SELECT    au.id                        ,
		           au.username                  ,
		           au.firstname                 ,
		           au.middlename                ,
		           au.surname                   ,
		           au.displayname               ,
		           au.email                     ,
		           au.uniquecommonidentifier    ,
		           uog.id AS defaultusergroupsid,
		           au.createddate               ,
		           au.createduser               ,
		           au.activeflag                ,
		           au.modifieddate              ,
		           au.modifieduser				,
		           o.id as "organization.id"		, 
		           o.displayidentifier as "organization.displayidentifier",
		           o.organizationname as "organization.name"
		 FROM      aartuser au
		           JOIN usersorganizations uo ON au.id = uo.aartuserid
		           JOIN organization o on uo.organizationid = o.id
		           LEFT JOIN userorganizationsgroups uog ON uo.id = uog.userorganizationid
		 WHERE     au.uniquecommonidentifier = #{uniqueCommonIdentifier} 
		 	and au.activeflag is true
		 	and uo.activeflag = true
		 	and uog.activeflag = true
        <if test="organizationIds != null" >
			AND	uo.organizationid = ANY(ARRAY 
		        <foreach collection="organizationIds" item="orgid" open="[" close="]" separator="," >
		        	#{orgid}
		        </foreach>)
        </if>     
	</select>
	
	<select id="getByUniqueCommonIdentifiersAndOrgIdsWithNoStatus" resultMap="BaseResultMap">
		 SELECT    au.id                        ,
		           au.username                  ,
		           au.firstname                 ,
		           au.middlename                ,
		           au.surname                   ,
		           au.displayname               ,
		           au.email                     ,
		           au.uniquecommonidentifier    ,
		           0 AS defaultusergroupsid,
		           au.createddate               ,
		           au.createduser               ,
		           au.activeflag                ,
		           au.modifieddate              ,
		           au.modifieduser
		 FROM      aartuser au
		           JOIN usersorganizations uo
		           ON        au.id = uo.aartuserid
		 WHERE          
		 <!-- unique common identifiers cannot be null It basically means nothing to verify-->
        <if test="uniqueCommonIdentifiers != null" >
        		      au.uniquecommonidentifier = ANY(ARRAY 
		        <foreach collection="uniqueCommonIdentifiers" item="uniqueCommonIdentifier" open="[" close="]" separator="," >
		        	#{uniqueCommonIdentifier}
		        </foreach>)
        </if>  
        AND uo.activeflag = true
        <if test="organizationIds != null" >
			AND	uo.organizationid = ANY(ARRAY
		        <foreach collection="organizationIds" item="orgid" open="[" close="]" separator="," >
		        	#{orgid}
		        </foreach>)
        </if>     
	</select>
	
	<select id="getByUniqueCommonIdentifierAndDisplayId" resultType="User">
	   SELECT au.id as id, username, uniqueCommonIdentifier,
	    firstname, middlename,
	    au.activeFlag, surname, displayname, password,
	     defaultUserGroupsId, email, ukey as salt
	   FROM
	    aartuser au,usersorganizations as uo, organization o
	   WHERE uo.aartuserid = au.id
	   AND o.id = uo.organizationid
	   AND uo.activeflag = true
       AND uniqueCommonIdentifier = #{uniqueCommonIdentifier}
       <if test="activeFlag != null" >
       AND au.activeFlag = #{activeFlag}
       </if>
        <if test="organizationDisplayId != null" >
			AND o.displayidentifier = #{organizationDisplayId}
        </if>     
	</select> 
    	
	<select id="getByIdentifierAndFirstLastName" resultType="User">
	   SELECT id, username, uniqueCommonIdentifier,
	    firstname, middlename,
	    activeFlag, surname, displayname, password,
	     email, ukey as salt
	   FROM aartuser 
	   WHERE id = #{userId}
	   AND surname = #{lastName}
	   AND firstname = #{firstName} and activeflag is true order by id desc limit 1
	</select>
	
	<!-- <select id="getUsersByOrgId" resultType="User">
	   SELECT au.id, au.username as userName, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
        au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser
	   FROM usersorganizations as uo, aartuser as au
       WHERE 
        uo.aartuserid = au.id 
       AND uo.organizationid = #{organizationId}
       AND au.activeFlag is true
	</select> -->
	
	
  <select id="getUsersByOrgId" resultMap="BaseResultMap">
   	SELECT au.id, au.username as userName, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
        au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser
	FROM usersorganizations as uo, aartuser as au
    WHERE uo.aartuserid = au.id 
    	AND uo.organizationid = #{organizationId}
    	AND uo.activeflag = true
       	AND au.activeFlag is true
	<if test="sortByColumn != null">
    	ORDER BY #{sortByColumn}
    		<if test="sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
	</if>
    LIMIT #{limitCount}
    OFFSET #{offset}
  </select>
    <select id="getUsersByOrgIdForInterim" resultType="java.lang.Long" parameterType="long">
   SELECT distinct au.id
	FROM usersorganizations as uo, aartuser as au
	Join userassessmentprogram uap on au.id=uap.aartuserid
	Join assessmentprogram ap on uap.assessmentprogramid=ap.id
    WHERE uo.aartuserid = au.id 
    	AND uo.activeflag = true
       	AND au.activeFlag is true
       	AND ap.id =#{assessmentProgramId}
       	AND ap.activeflag is true
       	AND uap.activeflag is true
       	AND uo.organizationid = #{organizationId}
  </select>

  <select id="countUsersByOrgId" resultType="java.lang.Integer" parameterType="long">
   	SELECT count(1)
	FROM usersorganizations as uo, aartuser as au
    WHERE uo.aartuserid = au.id 
    	AND uo.organizationid = #{organizationId}
       	AND au.activeFlag is true
       	AND uo.activeflag = true
  </select>
  
  <select id="selectLastExpiredPasswordResetDateById" resultType="java.util.Date" parameterType="long">
  	select lastexpiredpasswordresetdate from aartuser where id=#{userId}
  </select>
  
  <update id="updateLastExpiredPasswordResetDate" parameterType="Long">
  	update aartuser set lastexpiredpasswordresetdate=now(),
  	modifieddate = #{modifiedDate},
	modifieduser = #{modifiedUser}
  	 where id=#{userId}
  </update>
	
	
	<!-- 
	 @author Venkata Krishna Jagarlamudi
	 US15251: User data extract
	 -->
	<select id="getUserDetailsAndRolesByOrgId" resultMap="UserDetailsRolesMap">
	/*NO LOAD BALANCE*/
   	select au.firstname as firstName, 
	au.surname as lastName, 
	au.email, 	
	au.UniqueCommonidentifier as educatorIdentifier,
	aartuserRoles.roles as userRoles,
	aartuserRoles.programname as assessmentProgram,
	au.createdDate as createdDate,
	au.activeflag as activeFlag,	
	(select (CASE WHEN suo.statuscode = '1' THEN 'Pending'
		WHEN suo.statuscode = '2' THEN 'Active' WHEN suo.statuscode = '3' THEN 'Inactive' ELSE 'Inactive' END) as userstatus 
				FROM aartuser as auinner 
				left join (select max(uog.status) as statuscode, uo.aartuserid from userorganizationsgroups uog 
					inner join usersorganizations uo on uog.userorganizationid = uo.id where uo.activeflag = true and uog.activeflag = true
					group by uo.aartuserid) suo on suo.aartuserid=au.id 
				WHERE auinner.activeFlag is true and auinner.id = au.id),
	org.displayidentifier as organizationId,
	org.organizationname as organizationname,
	CASE (select contractingorganization from organization where id=#{organizationId}) WHEN TRUE THEN 
    	(select organizationname as state from organization where id = #{organizationId})
	ELSE 
     	(select organizationname as state from organization_parent(#{organizationId}) where contractingorganization is true) 
	END,
    (CASE WHEN orgt.typecode = 'DT' THEN 
		(select distinct districtdisplayidentifier from organizationtreedetail where districtid=org.id) 
        ELSE 
		(select districtdisplayidentifier from organizationtreedetail where schoolid=org.id) 
	END) as districtdisplayidentifier,		
	orgt.typecode as organizationLevel
	from aartuser au
	inner join usersorganizations as uo 
	ON uo.aartuserid = au.id and uo.activeflag = true
	inner join
		(select distinct(auuinner.id) as arrtid, array_to_string(array_agg(grinner.groupname), ',') as roles, array_to_string(array_agg(ap.programname), ',') as programname, uoinner.organizationid as orgid	
		from aartuser as auuinner
		join userassessmentprogram uap 
		on uap.aartuserid = auuinner.id 
		<if test="assessmentPrograms !=null">
			and uap.activeflag is true and uap.assessmentprogramid in
			<foreach collection="assessmentPrograms" item="assessmentprogramid" open="(" close=")" separator="," >
				#{assessmentprogramid}
			</foreach>
		</if>
		inner join userorganizationsgroups uoginner on uap.userorganizationsgroupsid = uoginner.id and uoginner.activeflag is true 
		inner join usersorganizations as uoinner ON uoginner.userorganizationid = uoinner.id and uoinner.activeflag is true 
		inner join assessmentprogram ap on ap.id = uap.assessmentprogramid and ap.activeflag is true
		inner join groups grinner on grinner.id = uoginner.groupid and grinner.activeflag is true
		where (uoinner.organizationid in (select id from organization_children(#{organizationId})) or uoinner.organizationid = #{organizationId})
		 <if test="!includeInternalUsers">
   			and auuinner.internaluserindicator is false
   		</if>
		group by auuinner.id, orgid) as aartuserRoles 
		ON aartuserRoles.arrtid = au.id and aartuserroles.orgid = uo.organizationid
	inner join organization as org
	ON uo.organizationid = org.id
	inner join organizationtype as orgt
	ON orgt.id = org.organizationtypeid
	where au.activeflag is true 
	  <if test="!includeInternalUsers">
   	and au.internaluserindicator is false
   	</if>
	order by firstname, lastname
  </select>
  <select id="getActiveOrInactiveUser" resultType="User" parameterType="Long">
		SELECT
			id, username, uniqueCommonIdentifier, firstname, middlename, surname, displayname, password,
			defaultUserGroupsId, email, ukey as salt, activeflag
		FROM aartuser
		WHERE id = #{id}
  </select>
  
   <insert id="insertUserPDTrainingDetail" parameterType="edu.ku.cete.domain.user.User">
       INSERT INTO userpdtrainingdetail(
            userid, trainingcompleted, trainingcompletiondate, currentschoolyear, 
            createduser, createddate, modifieduser, modifieddate)
        VALUES (#{id,jdbcType=BIGINT}, #{rtComplete}, #{rtCompleteDate}, #{contractingOrganization.currentSchoolYear}, 
            #{createdUser,jdbcType=BIGINT}, now(), #{modifiedUser,jdbcType=BIGINT}, now());
  </insert>
<!--    <sql id="selectScorersByAssessmentProgramId">
  	select au.id as id, au.surname as lastname, au.middlename as MI, au.firstname, au.email,
			array_to_string(ARRAY_AGG(distinct org.organizationname),',') as schoolName,
		array_to_string(ARRAY_AGG(distinct parent.organizationname),',') as districtName,
		array_to_string(ARRAY_AGG(distinct tp.programname),',') as testingProgramName
	from
		aartuser au join usersorganizations uo on au.id = uo.aartuserid and uo.activeflag = true
		join userorganizationsgroups uog on  uo.id = uog.userorganizationid and uog.activeflag = true
		join groups g on g.id = uog.groupid
		join userassessmentprogram uasp on uasp.aartuserid = au.id
		join organization org on org.id = uo.organizationid
		join organizationrelation orgrel ON org.id = orgrel.organizationid
		join organization parent ON orgrel.parentorganizationid = parent.id
		join testingprogram tp on tp.assessmentprogramid = uasp.assessmentprogramid
	where groupcode = #{scorerRoleCode}
		and uasp.assessmentprogramid = #{assessmentProgramId} 
		and uo.organizationid in ( select id from organization_children(#{stateId}) ) 
		and au.activeflag is true
		and au.systemindicator is false
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId}		</if>
		
		<if test="scorerRecordCriteriaMap.firstName != null">
			AND (au.firstname) ilike #{scorerRecordCriteriaMap.firstName}
		</if>
		<if test="scorerRecordCriteriaMap.lastName != null">
			AND (au.surname) ilike #{scorerRecordCriteriaMap.lastName}
		</if>
		<if test="scorerRecordCriteriaMap.email != null">
			AND (au.email) ilike #{scorerRecordCriteriaMap.email}
		</if>
		<if test="scorerRecordCriteriaMap.schoolName != null">
  			 AND (org.organizationname) ilike #{scorerRecordCriteriaMap.schoolName}
		</if> 
		<if test="scorerRecordCriteriaMap.districtName != null">
   			AND ( parent.organizationname) ilike #{scorerRecordCriteriaMap.districtName}
		</if>
		<if test="districtId != null">
			AND parent.id = #{districtId}
		</if>
		<if test="schoolId != null">
			AND org.id = #{schoolId}
		</if>
		<if test="scorerRecordCriteriaMap.testingProgramName != null">
			AND (tp.programname) ilike #{scorerRecordCriteriaMap.testingProgramName}
		</if>	
		group by au.id,  au.surname , au.middlename , au.firstname, au.email
		<if test="sidx != null">
	     		ORDER BY 
	      	<choose>
	      		<when test="sidx == 'lastName'">lastName</when>
	      		<when test="sidx == 'mi'">mi</when>
	      		<when test="sidx == 'firstName'">firstName</when>
				<when test="sidx == 'email'">email</when>
				<when test="sidx == 'districtName'">districtName</when>
				<when test="sidx == 'schoolName'">schoolName</when>
				<when test="sidx == 'testingProgramName'">testingProgramName</when>
				<otherwise>id</otherwise>
			</choose> 
	      <if test="sord!=null and sord=='desc'">
	    		desc
    	  </if>
    	  <if test="sord=='asc' or sord==null">
    	 		asc
    	  </if>
	    </if>
  
  </sql> -->
   <sql id="selectScorersByAssessmentProgramId">
	  select * from(select distinct on (au.id) au.id,au.surname as lastname, au.middlename as MI, au.firstname, au.email,
			array_to_string(ARRAY_AGG(distinct tp.programname),',') as testingProgramName,
	
			(CASE WHEN orgt.typecode = 'SCH' THEN 
			    (select distinct schoolname from organizationtreedetail where schoolid=org.id) 
	                ELSE 
			'' 	
		END) as schoolName,
	
		(CASE WHEN orgt.typecode = 'SCH' THEN 
			    (select distinct districtname from organizationtreedetail where schoolid=org.id)
			    
			WHEN orgt.typecode = 'DT' THEN 
			(select distinct districtname from organizationtreedetail where districtid=org.id limit 1)
			
	                ELSE 
			'' 
		END) as districtName,g.id as groupid,g.groupcode as groupcode			
         from aartuser au
         join userassessmentprogram uasp on uasp.aartuserid = au.id and uasp.activeflag is true
         join userorganizationsgroups uog on  uog.id = uasp.userorganizationsgroupsid and uog.activeflag = true
         join usersorganizations uo on uo.id = uog.userorganizationid and uo.activeflag = true 
         join groups g on g.id = uog.groupid and g.activeflag is true
         join organization org on org.id = uo.organizationid and org.activeflag is true
         join organizationrelation orgrel ON org.id = orgrel.organizationid
         join organization parent ON orgrel.parentorganizationid = parent.id
         join organizationtype orgt ON orgt.id = org.organizationtypeid and orgt.activeflag is true
		 join testingprogram tp on tp.assessmentprogramid = uasp.assessmentprogramid
		 join groupauthorities ga on ga.groupid = g.id 
		 and ga.assessmentprogramid = uasp.assessmentprogramid 
		 and (ga.organizationid in (select id from organization_parent(#{stateId}) where organizationtypeid in (select id from organizationtype where typecode = 'ST')) or ga.organizationid = #{stateId})
		 and ga.activeflag is true
		 join authorities aut on aut.id = ga.authorityid and aut.activeflag is true
         where aut.authority in ('PERM_SCORE_ALL_TEST','PERM_SCORE_CCQ_TESTS')
		and uasp.assessmentprogramid = #{assessmentProgramId}
		and uo.organizationid in ( select id from organization_children(#{stateId}) UNION SELECT #{stateId}) 
		and au.activeflag is true
		and au.systemindicator is false
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId}		</if>
		
		<if test="scorerRecordCriteriaMap.firstName != null">
			AND (au.firstname) ilike #{scorerRecordCriteriaMap.firstName}
		</if>
		<if test="scorerRecordCriteriaMap.lastName != null">
			AND (au.surname) ilike #{scorerRecordCriteriaMap.lastName}
		</if>
		<if test="scorerRecordCriteriaMap.email != null">
			AND (au.email) ilike #{scorerRecordCriteriaMap.email}
		</if>
		<if test="scorerRecordCriteriaMap.testingProgramName != null">
			AND (tp.programname) ilike #{scorerRecordCriteriaMap.testingProgramName}
		</if>	
	
		group by au.id,  au.surname , au.middlename , au.firstname, au.email,orgt.typecode,org.id,g.id,g.groupname
		order by au.id,groupname = 'Teacher', groupname = 'Test Proctor' asc
		) scorers
		
		WHERE 1=1
		<if test="scorerRecordCriteriaMap.schoolName != null">
  		 	 AND (schoolName) ilike #{scorerRecordCriteriaMap.schoolName}
		</if> 
		<if test="scorerRecordCriteriaMap.districtName != null">
   			AND (districtName) ilike #{scorerRecordCriteriaMap.districtName}
		</if>
		<if test="sidx != null">
	     		ORDER BY 
	      	<choose>
	      		<when test="sidx == 'lastName'">lastName</when>
	      		<when test="sidx == 'mi'">mi</when>
	      		<when test="sidx == 'firstName'">firstName</when>
				<when test="sidx == 'email'">email</when>
				<when test="sidx == 'districtName'">districtName</when>
				<when test="sidx == 'schoolName'">schoolName</when>
				<when test="sidx == 'testingProgramName'">testingProgramName</when>
				<otherwise>au.id</otherwise>
			</choose> 
	      <if test="sord!=null and sord=='desc'">
	    		desc
    	  </if>
    	  <if test="sord=='asc' or sord==null">
    	 		asc
    	  </if>
	    </if>
   </sql>   		
    		
  <select id="getScorersByAssessmentProgramId" resultType="edu.ku.cete.web.ScorersAssignScorerDTO">
	select * from(select distinct on (au.id) au.id as scorerid, max(uog.status) status, au.surname as scorerLastName,au.middlename as MI,au.firstname as scorerFirstName,au.email as email, 
	(CASE WHEN orgt.typecode = 'SCH' THEN (select distinct schoolname from organizationtreedetail where schoolid=org.id) ELSE '' END) as schoolName, 
	(CASE WHEN orgt.typecode = 'SCH' THEN (select distinct districtname from organizationtreedetail where schoolid=org.id) WHEN orgt.typecode = 'DT' 
	THEN (select distinct districtname from organizationtreedetail where districtid=org.id limit 1) ELSE '' END) as districtName,
	
	 g.id as groupid,
	 g.groupname as groupcode
	 from aartuser au 
	 join userassessmentprogram uasp on uasp.aartuserid = au.id and uasp.activeflag is true 
	 join userorganizationsgroups uog on uog.id = uasp.userorganizationsgroupsid and uog.activeflag = true 
	 join usersorganizations uo on uo.id = uog.userorganizationid and uo.activeflag = true 
	 join groups g on g.id = uog.groupid and g.activeflag is true 
	 join organization org on org.id = uo.organizationid and org.activeflag is true 
	 join organizationrelation orgrel ON org.id = orgrel.organizationid 
	 join organization parent ON orgrel.parentorganizationid = parent.id 
	 join organizationtype orgt ON orgt.id = org.organizationtypeid and orgt.activeflag is true 
	 join groupauthorities ga on ga.groupid = g.id and ga.assessmentprogramid = uasp.assessmentprogramid and 
	                        ga.organizationid  in (select stateid from organizationtreedetail where  schoolid = #{schoolId} limit 1)
	 and ga.activeflag is true 
	 join authorities aut on aut.id = ga.authorityid and aut.activeflag is true where aut.authority in ('PERM_SCORE_CCQ_TESTS') and uasp.assessmentprogramid = #{assessmentPrgId} 
	 and uo.organizationid in ((#{stateId}), (#{districtId}) ,#{schoolId} ) 
	 and au.activeflag is true and au.systemindicator is false  group by au.id, au.surname , au.middlename , au.firstname, au.email,orgt.typecode,org.id,g.id,g.groupname order by au.id,groupname = 'Teacher', groupname = 'Test Proctor' asc ) scorers 
	 WHERE 1=1 and status not in (3) ORDER BY scorerLastName, scorerFirstName, MI asc	
</select>
		 
  <select id="getCountScorersByAssessmentProgramId" resultType="java.lang.Integer">
	 	select count(*) from (
		<include refid="selectScorersByAssessmentProgramId" />
		) baseq
  </select>
  
   <select id="getByUniqueCommonIdentifierAndDisplayIdForStateLevel" resultType="User">
    with state as
   ( select op.id from
			(  select id,organizationtypeid from organization_parent((select id from organization
			 where id = #{orgId}))
			union
			select id,organizationtypeid from organization where id = #{orgId} ) op 
			join organizationtype ot  on  ot.id = op.organizationtypeid
			where typecode = 'ST'
   )
	select au.id, au.username, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
        au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser,o.organizationname as orgName 
	from aartuser au join usersorganizations uo on au.id = uo.aartuserid and uo.activeflag = true and au.activeflag = true
	inner join organization o on uo.organizationid=o.id
	where au.uniquecommonidentifier = #{uniqueCommonIdentifier} and uo.organizationid in ( 
	select id from organization_children( (select id from state))
		union
		select id from organization where id = #{orgId}
		union
		select id from state
		)
	</select>
	
	<select id="getByEducatorIdentifierAndDisplayIdForStateLevel" resultType="User">
     with state as
    (select op.id from
			(  select id,organizationtypeid from organization_parent((select id from organization
			 where id = #{orgId} ))
			union
			select id,organizationtypeid from organization where id = #{orgId} ) op 
			join organizationtype ot  on  ot.id = op.organizationtypeid
			where typecode = 'ST'
   )
	select distinct au.id, au.username, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
        au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser
	from aartuser au join usersorganizations uo on au.id = uo.aartuserid and uo.activeflag = true
	where au.uniquecommonidentifier = #{uniqueCommonIdentifier} and uo.organizationid in ( 
	select id from organization_children( (select id from state))
		union
		select id from organization where id = #{orgId}
		union
		select id from state
		)
	</select>	
	
	<select id="getMonitorCCQScoresDetails" resultType="edu.ku.cete.web.UserDTO" parameterType="Long">
		SELECT
			id, firstname, middlename, surname as lastname, email
		FROM aartuser 
		WHERE id = #{id} 
		and activeFlag is true		
	</select>
	
	<select id="getJsonFormatData" resultMap="userJsonObjectMap">
		SELECT        
		au.id                       as id						,
		au.firstname                as firstName				,
		au.surname                  as surName					,
		au.email                    as email					,
		au.uniquecommonidentifier   as uniqueCommonIdentifier	,
		au.createddate              as createdDate				,
		au.createduser              as createdUser				,
		au.modifieddate             as modifiedDate				,
		au.modifieduser				as modifiedUser				,
		au.sourcetype				as sourceType				,
		ap.abbreviatedname          as assessmentProgramCode	,
		uorg.id                     as o_id						,
		org.id                      as o_organizationId			,
		org.organizationname        as o_organizationName		,
		uorg.isdefault              as o_isdefault				,
		uorg.createddate            as o_createdDate			,
		uorg.modifieddate           as o_modifiedDate			,
		uorg.createduser            as o_createdUser			,
		uorg.modifieduser           as o_modifiedUser			,
		uorgrp.id                   as o_r_id					,
		grp.groupname               as o_r_groupName			,
		grp.id                      as o_r_groupId				,
		uorgrp.isdefault            as o_r_isDefault			,
		uorgrp.createddate          as o_r_createdDate			,
		uorgrp.modifieddate         as o_r_modifiedDate			,
		uorgrp.createduser          as o_r_createdUser			,
		uorgrp.modifieduser         as o_r_modifiedUser 
		FROM  aartuser au
		left join usersorganizations uorg on uorg.aartuserid = au.id and uorg.activeflag = true
		left join userorganizationsgroups uorgrp on uorgrp.userorganizationid = uorg.id and uorgrp.activeflag = true
		left join userassessmentprogram uap on uap.aartuserid = au.id and uap.activeflag = true
		left join assessmentprogram ap on ap.id = uap.assessmentprogramid
		inner join organization org on org.id = uorg.organizationid
		inner join groups grp on grp.id = uorgrp.groupid
		where au.id = #{id}
	</select> 
	
	<select id="getIsSingleUserExists" resultType="java.lang.Boolean">
		select count(1) &gt;= 1
            from aartuser au
            join usersorganizations uorg on uorg.aartuserid = au.id and uorg.activeflag = true
            join userorganizationsgroups uorgrp on uorgrp.userorganizationid = uorg.id and uorgrp.activeflag = true
            join userassessmentprogram uap on uap.aartuserid = au.id and uap.activeflag = true
			where au.activeflag is true
			and uorgrp.groupid = (select id from groups where groupcode = #{groupCode} and activeflag is true)
			and uorgrp.status != 3 <!-- 3 is inactive -->
			and uorg.organizationid = #{organizationId} 
			and uap.assessmentprogramid = #{assessmentProgramId}
			<if test="userId != null">
				and au.id != #{userId}
			</if>
	</select>
	
	<select id="getIsRestrictedToSingleUser" resultType="java.lang.Boolean">
		select gr.singleuser from grouprestrictions gr inner join groups g on g.id = gr.groupid
			where g.groupcode = #{groupCode} and gr.organizationid = #{stateId} 
			and gr.assessmentprogramid = #{assessmentProgramId} and gr.activeflag is true
			and g.activeflag is true
	</select>
	
	<select id="getUserSecurityAgreementDetails" resultType="edu.ku.cete.web.UserSecurityAgreemntDTO" parameterType="long">
	select * from (
	select id as userId, state, district, array_to_string(ARRAY_AGG(distinct building),';') as building, 
	lastName, firstName, middleName, securityAgreementStatus, securityAgreementSignatureStatus, securityAgreementSignedOn from (
	   	select distinct on (au.id) au.id,
	case when ot.typecode = 'ST' then org.organizationname else (select organizationname from organization_parent(org.id) op
	join organizationtype ot on op.organizationtypeid=ot.id and op.organizationtypeid = (select id from organizationtype where typecode='ST')) end as state,
	case when ot.typecode = 'DT' then org.organizationname else (select organizationname from organization_parent(org.id) op
	join organizationtype ot on op.organizationtypeid=ot.id and op.organizationtypeid = (select id from organizationtype where typecode='DT')) end as district,
	case when ot.typecode = 'BLDG' or  ot.typecode = 'SCH' then org.organizationname end as building,
	au.surname as lastName, 
	au.firstname as firstName,
	au.middlename as middleName,
	case when usa.agreementelection is true then 'Accepted' when usa.agreementelection is false then 'Rejected' else '' end as securityAgreementStatus,
	usa.signername as securityAgreementSignatureStatus,
	usa.agreementsigneddate as securityAgreementSignedOn
	from aartuser au
	inner join usersorganizations as uo 
	ON uo.aartuserid = au.id and uo.activeflag = true
	inner join
		(select distinct(auuinner.id) as arrtid, auuinner.surname, auuinner.firstname, uap.assessmentprogramid as apid
		from aartuser as auuinner
		inner join usersorganizations as uoinner ON auuinner.id = uoinner.aartuserid and auuinner.activeflag is true and uoinner.activeflag = true
		inner join userorganizationsgroups uoginner on uoginner.userorganizationid = uoinner.id and uoginner.activeflag = true
			and uoginner.status in (1, 2)
		inner join userassessmentprogram uap on uap.aartuserid = uoinner.aartuserid and uap.activeflag is true
		<if test="assessmentPrograms !=null">
		and uap.assessmentprogramid in
		<foreach collection="assessmentPrograms" item="assessmentprogramid" open="(" close=")" separator="," >
		#{assessmentprogramid}
		</foreach>
		</if>
		inner join assessmentprogram ap 
		on ap.id = uap.assessmentprogramid
		where uoinner.organizationid in 
		<foreach collection="organizationIds" item="organizationId" open="(" close=")" separator="," >
		#{organizationId}
		</foreach>
		order by auuinner.firstname, auuinner.surname) as aartuserRoles 
		ON aartuserRoles.arrtid = au.id
	inner join organization as org
	ON uo.organizationid = org.id
	inner join organizationtype ot on ot.id = org.organizationtypeid
	left join usersecurityagreement usa
		on usa.aartuserid = au.id and usa.expiredate like '%' ||#{currentSchoolYear}
	where au.activeflag is true 
	<if test="!includeInternalUsers">
   	and au.internaluserindicator is false
   	</if>
	and uo.organizationid in 
		<foreach collection="organizationIds" item="organizationId" open="(" close=")" separator="," >
		#{organizationId}
		</foreach>
		<if test="assessmentPrograms !=null">
		and aartuserRoles.apid in
	 	<foreach collection="assessmentPrograms" item="id" open="(" close=")" separator=",">
	 	#{id}
		</foreach>
		</if>
		order by au.id, usa.agreementsigneddate desc) as results
	group by results.id, results.state, results.district, results.lastname,
	firstName, middleName, securityAgreementStatus, securityAgreementSignatureStatus, securityAgreementSignedOn ) as rowData
	order by firstname, lastname, state, district, building, securityagreementsignedon 
  </select>
	
	<!-- US19073: Emails Related to Processing KIDS for 2017 -->
	<!-- Used by US19158: [Unfinished] KIDS 2017 TEST, EXIT and TASC Processing for US19073 -->
	<!-- Returns the userIds of the BTCs and DTCs of the aypSchoolId and attendanceSchoolId (The school ids are passed as parameters and can be null) -->
	<select id="getKIDSEmailUsersPerSchoolIds" resultType="java.lang.Long">
		SELECT distinct uo.aartuserid
		FROM userorganizationsgroups uog
			JOIN usersorganizations uo on uo.id = uog.userorganizationid and uo.activeflag is true
			JOIN organization org on org.id = uo.organizationid and org.activeflag is true
			JOIN groups g on uog.groupid = g.id and g.activeflag is true and g.activeflag is true and (g.groupcode = 'DTC' or g.groupcode = 'BTC') and g.systemindicator is false
			JOIN organizationtype ot on g.organizationtypeid = ot.id and ot.activeflag is true and (ot.typecode = 'DT' or ot.typecode = 'SCH')
			<!--  JOIN aartuser au on au.id = uo.aartuserid and au.activeflag is true  -->
			JOIN userassessmentprogram uaps on uo.aartuserid = uaps.aartuserid and uaps.activeflag is true
			JOIN assessmentprogram ap on ap.id = uaps.assessmentprogramid and ap.activeflag is true and ap.abbreviatedname in ('KAP','KELPA2')
		WHERE uog.activeflag is true
			AND org.id IN (
				select distinct schoolid from organizationtreedetail where schooldisplayidentifier in (#{aypSchoolId,jdbcType=VARCHAR}, #{attendanceSchoolId,jdbcType=VARCHAR}) 
					and stateid in (select id from organization where displayidentifier = 'KS' and organizationtypeid = (select id from organizationtype where typecode = 'ST'))
				UNION
				select distinct districtid from organizationtreedetail where schooldisplayidentifier in (#{aypSchoolId,jdbcType=VARCHAR}, #{attendanceSchoolId,jdbcType=VARCHAR}) 
					and stateid in (select id from organization where displayidentifier = 'KS' and organizationtypeid = (select id from organizationtype where typecode = 'ST'))
			)
			and uog.status = '2'
		ORDER BY uo.aartuserid
	</select>

  
  <select id="getUserOrganizationsByOrgId" resultType="edu.ku.cete.domain.user.UserOrganization" parameterType="java.lang.Long">
  select uo.id as id,uo.aartuserid as userId ,au.username as userName,uo.organizationid as organizationId ,uo.isdefault as isDefault ,
  uo.createddate as createdDate ,uo.modifieddate as modifiedDate ,uo.createduser as createdUser ,
  uo.modifieduser as modifiedUser ,uo.activeflag as activeFlag from aartuser au 
  inner join usersorganizations uo on au.id=uo.aartuserid and uo.activeflag is true and au.activeflag is true
  where uo.organizationid=#{sourceSchoolId,jdbcType=BIGINT};
  </select>
  <update id="transferUserOrganization" parameterType="edu.ku.cete.domain.user.UserOrganization">
  	update usersorganizations set organizationid=#{organizationId},
  	modifieddate = #{modifiedDate},
	modifieduser = #{modifiedUser}
	where id = #{id}
  </update>
  
  <update id="disableUserOrganization">
  	update usersorganizations set activeflag = false,
  	modifieddate = #{modifiedDate},
	modifieduser = #{modifiedUser}
	where id = #{id}
  </update>
  
  <select id="checkUserOrganizationCount" resultType="java.lang.Long" parameterType="java.lang.Long">
  	select count(distinct organizationid) from usersorganizations  uo inner join
	userorganizationsgroups uog on uog.userorganizationid=uo.id and uog.activeflag is true and uo.activeflag is true
	inner join userassessmentprogram uap on uap.userorganizationsgroupsid= uog.id and uap.activeflag is true
	where uo.aartuserid  = #{userId};
  </select>
  
  <update id="deactivateUser">
  	update aartuser set activeflag=false,
    modifieddate = now(),
    modifieduser = #{modifiedUserId}
    where id=#{userId}
  </update>
  
  <update id="activateUser">
  	update aartuser set activeflag=true,
    modifieddate = now(),
    modifieduser = #{modifiedUserId}
    where id=#{userId}
  </update>
  
  <select id="getCountByOrganizationId" resultType="java.lang.Long" parameterType="java.lang.Long">
  select count(distinct au.id) from aartuser au inner 
  	join usersorganizations uo on au.id=uo.aartuserid and uo.activeflag is true and au.activeflag is true
  where uo.organizationid=#{organizationId,jdbcType=BIGINT};
  </select>
  
  <select id="getDestUserOrganizationsByOrgId" resultType="edu.ku.cete.domain.user.UserOrganization" parameterType="java.lang.Long">
  select uo.aartuserid as userid from usersorganizations uo  where organizationid =#{destinationSchoolId,jdbcType=BIGINT} and aartuserid=#{aartUserId,jdbcType=BIGINT};
  </select>
  
  <select id="getTeachersWithRosteredDLMKidsInSchoolSubjectsAndGrades" parameterType="map" resultMap="BaseResultMap">
    select distinct au.id, au.firstname, au.surname, au.displayname
    from aartuser au
    join roster r
      on au.id = r.teacherid
      and r.activeflag = true
    join enrollmentsrosters er
      on r.id = er.rosterid
      and er.activeflag = true
    join enrollment e
      on er.enrollmentid = e.id
      and r.currentschoolyear = e.currentschoolyear
      and r.attendanceschoolid = e.attendanceschoolid
      and e.activeflag = true
    join student s
      on e.studentid = s.id
      and s.activeflag = true
    join studentassessmentprogram sap
      on s.id = sap.studentid
      and sap.activeflag = true
    join assessmentprogram ap
      on sap.assessmentprogramid = ap.id
      and ap.activeflag = true
    where au.activeflag = true
    and r.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
    and r.attendanceschoolid = #{schoolId,jdbcType=BIGINT}
    and r.statesubjectareaid = any(values
      <foreach collection="contentAreaIds" item="caId" open="" separator="," close="">
        (#{caId,jdbcType=BIGINT})
      </foreach>
    )
    and e.currentgradelevel in (select id from gradecourse where abbreviatedname in (select abbreviatedname from gradecourse where id = any(values
      <foreach collection="gradeIds" item="gradeId" open="" separator="," close="">
        (#{gradeId,jdbcType=BIGINT})
      </foreach>
    )))
    and ap.abbreviatedname = 'DLM'
    order by au.surname, au.firstname
  </select>
  
   <select id="getDeactiveUserOrganizationsByOrgId" resultType="edu.ku.cete.domain.user.UserOrganization" parameterType="java.lang.Long">
  select uo.id as id,uo.aartuserid as userId ,au.username as userName,uo.organizationid as organizationId ,uo.isdefault as isDefault ,
  uo.createddate as createdDate ,uo.modifieddate as modifiedDate ,uo.createduser as createdUser ,
  uo.modifieduser as modifiedUser ,uo.activeflag as activeFlag from aartuser au 
  inner join usersorganizations uo on au.id=uo.aartuserid and uo.activeflag is false
  where uo.organizationid=#{sourceSchoolId,jdbcType=BIGINT};
  </select>
  
  <update id="enableUserOrganization">
  	update usersorganizations set activeflag = true,
  	modifieddate = #{modifiedDate},
	modifieduser = #{modifiedUser}
	where id = #{id}
  </update>
  
  <update id="setStatusToInactive">
  	update userorganizationsgroups  SET status = '3',
  	modifieddate = #{modifiedDate},
	modifieduser = #{modifiedUser}
	where userorganizationid = #{userOrganizationId}
  </update>
  
  <select id="getDeactivateCountByOrganizationId" resultType="java.lang.Long" parameterType="java.lang.Long">
  select count(distinct au.id) from aartuser au inner 
  	join usersorganizations uo on au.id=uo.aartuserid and uo.activeflag is false
  where uo.organizationid=#{organizationId,jdbcType=BIGINT};
  </select>
  
  <sql id="getInactiveUsersForAdminSelect">
		select distinct au.id, au.username as userName, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
		au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser, 
		(CASE WHEN suo.statuscode = '1' THEN 'Pending' WHEN suo.statuscode = '2' THEN 'Active' WHEN suo.statuscode = '3' THEN 'Inactive' ELSE 'Inactive' END) as statuscode, 
		array_to_string(ARRAY(select distinct abbreviatedname 
			from aartuser pau
			left join userassessmentprogram uap on pau.id = uap.aartuserid and pau.id = au.id and pau.activeflag is false
			inner join assessmentprogram ap on ap.id = uap.assessmentprogramid 
			),', ') as programnames, 
		array_to_string(ARRAY(select distinct groupname 
			from aartuser gau
			left join usersorganizations iuo on iuo.aartuserid = gau.id and gau.id = au.id and gau.activeflag is false
			left join userorganizationsgroups iuog on iuog.userorganizationid = iuo.id
			inner join groups ig on ig.id = iuog.groupid  ),', ') as userRoles 
		from aartuser au 
		left join usersorganizations uo on uo.aartuserid = au.id and au.activeflag is false
		left join userorganizationsgroups uog on uog.userorganizationid = uo.id
		left join userassessmentprogram uap on uap.userorganizationsgroupsid = uog.id
		left join organization o on o.id = uo.organizationid and o.activeflag is true 
		left join groups g on g.id = uog.groupid and g.activeflag is true 
		left join assessmentprogram ap on ap.id = uap.assessmentprogramid and uap.activeflag is true 
		inner join (select max(iuog.status) as statuscode, iuo.aartuserid 
			from aartuser iau
			left join usersorganizations iuo on iau.id = iuo.aartuserid and iau.activeflag is false
			left join userorganizationsgroups iuog on iuog.userorganizationid = iuo.id
			where iuog.status in (1,2,3) group by iuo.aartuserid) suo on suo.aartuserid = au.id 
		where au.systemindicator is false 
		group by au.id,suo.statuscode
	</sql>
	<sql id="getInactiveUsersForAdminWhere">
			WHERE 1=1		
			<if test="criteria.statusCode != null and criteria.statusCode=='Active'">AND statusCode='Active'</if>
			<if test="criteria.statusCode != null and criteria.statusCode=='Pending'">AND statusCode='Pending'</if>
			<if test="criteria.statusCode != null and criteria.statusCode=='Inactive'">AND statusCode='Inactive'</if>
			<if test="criteria.statusCode != null and criteria.statusCode=='New'">AND statusCode='New'</if>
			
			<if test="criteria.uniqueCommonIdentifier != null">AND upper(uniquecommonidentifier) like upper('%' || #{criteria.uniqueCommonIdentifier} || '%')</if>
			<if test="criteria.firstName != null">AND upper(firstname) like upper('%' || #{criteria.firstName} || '%')</if>
			<if test="criteria.statusCode != null">AND upper(statusCode) like upper('%' || #{criteria.statusCode} || '%')</if>
			<if test="criteria.surName != null">AND upper(surname) like upper('%' || #{criteria.surName} || '%')</if>
			<if test="criteria.email != null">AND upper(email) like upper('%' || trim(#{criteria.email}) || '%')</if>
			<if test="criteria.programNames != null">AND upper(programnames) like upper('%' || #{criteria.programNames} || '%')</if>
			<if test="criteria.userRoles != null">AND upper(userRoles) like upper('%' || #{criteria.userRoles} || '%')</if>
	</sql>
	
  <select id="getInactiveUsersForAdmin" resultType="User">
		select * from (<include refid="getInactiveUsersForAdminSelect"/>) as u
		<include refid="getInactiveUsersForAdminWhere"/>
		<if test="sortByColumn != null">
	      ORDER BY 
	      	<choose>
	      		<when test="sortByColumn == 'statusCode'">statusCode</when>
	      		<when test="sortByColumn == 'uniqueCommonIdentifier'">uniqueCommonIdentifier</when>
	      		<when test="sortByColumn == 'firstName'">firstName</when>
	      		<when test="sortByColumn == 'surName'">surName</when>
	      		<when test="sortByColumn == 'surName, firstName, middleName'">surName, firstName, middlename</when>
	      		<when test="sortByColumn == 'email'">email</when>
	      		<when test="sortByColumn == 'id'">id</when>
	      		<when test="sortByColumn == 'userRoles'">userRoles</when>
	      		<otherwise>id</otherwise>
	      	</choose> 
	      	<if test="sortType!=null and sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
	    </if>
    	LIMIT #{limitCount}
    	OFFSET #{offset}
	</select>
  
  	<select id="getInactiveUsersCountForAdmin" resultType="java.lang.Integer">
		SELECT count(1) from (<include refid="getInactiveUsersForAdminSelect"/>) as u
		<include refid="getInactiveUsersForAdminWhere"/> 
  	</select>
  	
  	<select id="getForAdmin" resultType="User" parameterType="Long">
		SELECT
			id, username, uniqueCommonIdentifier, firstname, middlename, surname, displayname, password,
			 defaultUserGroupsId, email, ukey as salt,activeFlag
		FROM aartuser 
		WHERE id = #{userId} 
	</select>
	
	<select id="getOrganizationsForAdmin" resultType="Organization" parameterType="java.lang.Long">
        SELECT
            o.id, organizationName, displayIdentifier,
             organizationTypeId, 
            welcomeMessage, orgtype.typename, orgtype.typecode,
             orgtype.typelevel, uo.isdefault as defaultOrg 
        FROM aartuser au
		left join usersorganizations uo on au.id=uo.aartuserid
		left join organization o on o.id = uo.organizationid
		inner join organizationtype orgtype on orgtype.id = o.organizationtypeid
        WHERE au.id = #{userId}
    </select>
    
    <select id="getGroupsForAdmin" resultType="Groups" parameterType="java.lang.Long">
	   SELECT gr.id as groupId, uo.organizationId, groupname, uog.isdefault as defaultGroup
	   FROM groups as gr
	   left join userorganizationsgroups uog on gr.id = uog.groupid
	   left join usersorganizations uo on uo.id = uog.userorganizationid
	   WHERE uo.aartuserid = #{userId}
	</select>
	
	<delete id="deleteInvalidUserContext" parameterType="java.lang.Long">
		delete from userassessmentprogram where aartuserid  = #{userId};
		delete from userorganizationsgroups where userorganizationid in 
			(select id from usersorganizations where aartuserid  = #{userId});
		delete from usersorganizations where aartuserid  = #{userId};
	</delete>
	
	<update id="updateInvalidUserContext" parameterType="java.lang.Long">
		update userassessmentprogram set activeflag=false,
		modifieddate = now(),
		modifieduser = #{modifiedUser} 
		where aartuserid  = #{claimUserId};
		
		update userorganizationsgroups set activeflag=false,
		status=1,
		modifieddate = now(),
		modifieduser = #{modifiedUser}
		where userorganizationid in 
			(select id from usersorganizations where aartuserid  = #{claimUserId});
			
		update usersorganizations set activeflag=false,
		modifieddate = now(),
		modifieduser = #{modifiedUser}
		where aartuserid  = #{claimUserId};
	</update>
	
	<select id="doesUserHaveHighRoles" resultType="java.lang.Boolean" parameterType="java.lang.Long">
	select count(1) > 0 from usersorganizations uo
		inner join userorganizationsgroups uog on uog.userorganizationid = uo.id
		inner join userassessmentprogram uap on uap.userorganizationsgroupsid = uog.id
		inner join groups g on g.id = uog.groupid
		where uo.aartuserid= #{userId}
		and g.hierarchy &lt;(select hierarchy from groups where id = #{currentGroupsId})
	</select>
	
	<select id="updateInternalUserFlag">
		update aartuser set internaluserindicator = #{internalUserFlag},
		modifieddate = now(),
		modifieduser = #{modifiedUser}
		where id = #{userId};
	</select>
	
	
	  <sql id="getFindUsersBySearchSelect">
		select distinct au.id, au.username as userName, au.firstname, au.middlename, au.surname, au.displayname, au.email,au.activeflag as activeFlag,  
		au.uniquecommonidentifier,au.defaultusergroupsid, au.createddate, au.createduser, au.modifieddate, au.modifieduser, 
		(CASE
			WHEN count(uogactive.status) &gt;= count(uogpending.status) and count(uogactive.status) != 0 THEN 'Active'
			WHEN count(uogpending.status) &gt;= count(uogactive.status) and count(uogpending.status) !=0 THEN 'Pending'
			WHEN count(uoginactive.status) &gt;0 and count(uogpending.status)=0 and count(uogactive.status)=0 THEN 'Inactive'
		END
		) as statuscode, 
		array_to_string(ARRAY(select distinct abbreviatedname 
			from aartuser pau
			left join userassessmentprogram uap on pau.id = uap.aartuserid and pau.id = au.id and uap.activeflag is true
			inner join assessmentprogram ap on ap.id = uap.assessmentprogramid and ap.activeflag is true
			),', ') as programnames, 
		array_to_string(ARRAY(select distinct groupname 
			from aartuser gau
			left join usersorganizations iuo on iuo.aartuserid = gau.id and gau.id = au.id and iuo.activeflag is true
			left join userorganizationsgroups iuog on iuog.userorganizationid = iuo.id and iuog.activeflag is true
			inner join groups ig on ig.id = iuog.groupid  ),', ') as userRoles 
		from aartuser au 
		left join usersorganizations uo on uo.aartuserid = au.id
		left join userorganizationsgroups uog on uog.userorganizationid = uo.id and uog.activeflag is true
		left join userorganizationsgroups uogactive on uogactive.userorganizationid = uo.id and uogactive.status='2' and uogactive.activeflag is true
		left join userorganizationsgroups uoginactive on uoginactive.userorganizationid = uo.id and uoginactive.status='3' and uoginactive.activeflag is true
		left join userorganizationsgroups uogpending on uogpending.userorganizationid = uo.id and uogpending.status='1' and uogpending.activeflag is true
		left join userassessmentprogram uap on uap.userorganizationsgroupsid = uog.id
		left join organization o on o.id = uo.organizationid
		left join groups g on g.id = uog.groupid and g.activeflag is true 
		left join assessmentprogram ap on ap.id = uap.assessmentprogramid and uap.activeflag is true 
		where au.systemindicator is false 
		and o.id = ANY(ARRAY(select id from organization_children_active_or_inactive(#{criteria.organizationId}) union select #{criteria.organizationId}))
		and g.id in (select id from groups where roleorgtypeid >= (select roleorgtypeid from groups where id = #{criteria.currentGroupId}))
		<if test="criteria.educatorId == null">
			and au.firstname ilike ('%' || #{criteria.userFirstName} || '%') and au.surname ilike ('%' || #{criteria.userLastName} || '%')
		</if>
		<if test="criteria.educatorId != ''">
			and au.firstname ilike ('%' || #{criteria.userFirstName} || '%') and au.surname ilike ('%' || #{criteria.userLastName} || '%') 
				and au.uniquecommonidentifier ilike ('%' || #{criteria.educatorId} || '%')
		</if>
		group by au.id
	</sql>
	
	<sql id="getFindUsersBySearchWhere">
		where 1=1			
			<if test="criteria.statusCode != null and criteria.statusCode=='Active'">AND statusCode='Active'</if>
			<if test="criteria.statusCode != null and criteria.statusCode=='Pending'">AND statusCode='Pending'</if>
			<if test="criteria.statusCode != null and criteria.statusCode=='Inactive'">AND statusCode='Inactive'</if>
			<if test="criteria.statusCode != null and criteria.statusCode=='New'">AND statusCode='New'</if>
			
			<if test="criteria.uniqueCommonIdentifier != null">AND upper(uniquecommonidentifier) like upper('%' || #{criteria.uniqueCommonIdentifier} || '%')</if>
			<if test="criteria.firstName != null">AND upper(firstname) like upper('%' || #{criteria.firstName} || '%')</if>
			<if test="criteria.statusCode != null">AND upper(statusCode) like upper('%' || #{criteria.statusCode} || '%')</if>
			<if test="criteria.surName != null">AND upper(surname) like upper('%' || #{criteria.surName} || '%')</if>
			<if test="criteria.email != null">AND upper(email) like upper('%' || trim(#{criteria.email}) || '%')</if>
			<if test="criteria.programNames != null">AND upper(programnames) like upper('%' || #{criteria.programNames} || '%')</if>
			<if test="criteria.userRoles != null">AND upper(userRoles) like upper('%' || #{criteria.userRoles} || '%')</if>
			<if test="criteria.userFirstName != null">AND upper(firstname) like upper('%' || #{criteria.userFirstName} || '%')</if>
			<if test="criteria.userLastName != null">AND upper(surname) like upper('%' || #{criteria.userLastName} || '%')</if>
			<if test="criteria.educatorId != null">AND upper(uniquecommonidentifier) like upper('%' || #{criteria.educatorId} || '%')</if>
	</sql>
	
	<select id="getAllUsersBySearch" resultType="User">
		select * from (<include refid="getFindUsersBySearchSelect"/>) as u
		<include refid="getFindUsersBySearchWhere"/>
		<if test="sortByColumn != null">
	      ORDER BY 
	      	<choose>
	      		<when test="sortByColumn == 'surName,firstName'">surName, firstName</when>
	      		<when test="sortByColumn == 'statusCode'">statusCode</when>
	      		<when test="sortByColumn == 'uniqueCommonIdentifier'">uniqueCommonIdentifier</when>
	      		<when test="sortByColumn == 'firstName'">firstName</when>
	      		<when test="sortByColumn == 'surName'">surName</when>
	      		<when test="sortByColumn == 'email'">email</when>
	      		<when test="sortByColumn == 'id'">id</when>
	      		<when test="sortByColumn == 'userRoles'">userRoles</when>
	      		<when test="sortByColumn == 'userRoles'">activeFlag</when>
	      		<otherwise>id</otherwise>
	      	</choose> 
	      	<if test="sortType!=null and sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="sortType=='asc' or sortType==null">
    	 		asc
    	 	</if>
	    </if>
    	LIMIT #{limitCount}
    	OFFSET #{offset}
	</select>
	
	<select id="getCountForFindUsers" resultType="java.lang.Integer">
		SELECT count(1) from (<include refid="getFindUsersBySearchSelect"/>) as u
		<include refid="getFindUsersBySearchWhere"/> 
  	</select>
  	  	
  	<select id="getDistrictNames" resultType="java.lang.String" parameterType="java.lang.Long">
  		select districtname from organizationtreedetail where schoolid=#{districtId};
  	</select>
  	
  	<select id="getDTCUserIdsByOrganizationName" resultType="java.lang.Long" parameterType="java.lang.String">
  	  select distinct uo.aartuserid from aartuser au 
	  inner join usersorganizations uo on au.id=uo.aartuserid and uo.activeflag is true and au.activeflag is true
	  inner join userorganizationsgroups uog on uog.userorganizationid=uo.id and uog.activeflag is true 
	  and uog.groupId=(select id from groups where groupcode='DTC') and uog.status = 2
	  inner join userassessmentprogram as uap on uap.userorganizationsgroupsid=uog.id and uap.activeflag is true
	  where  uo.organizationid=(select id from organization where organizationname=#{districtName} 
	  and organizationtypeid=(select id from organizationtype where typecode ='DT'));
  	</select>
  	
  	<select id="getUsersOrganizationsByUserId" resultType="Organization" parameterType="Long">
        SELECT
            o.id, organizationName, displayIdentifier,
             organizationTypeId, 
            welcomeMessage, orgtype.typename, orgtype.typecode,
             orgtype.typelevel, uo.isdefault as defaultOrg 
        FROM organization AS o, usersorganizations as uo, aartuser as au, organizationtype as orgtype,userorganizationsgroups as uog,
        userassessmentprogram as uap
        WHERE
            o.organizationtypeid = orgtype.id AND
            o.id = uo.organizationid AND
            uo.aartuserid = au.id AND
            uog.userorganizationid=uo.id AND
            uap.userorganizationsgroupsid=uog.id AND
            au.id = #{userId} AND
            au.activeFlag is true AND
            uo.activeFlag is true and uog.activeflag is true and uap.activeflag is true;
    </select>
    
    <select id="getAllUsersByAssessmentProgramAndOrgId" resultType="User" >
    	select distinct  au.id, au.username, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
    au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser 
        from aartuser au
        inner join usersorganizations  uo on uo.aartuserid = au.id and uo.activeflag is true
        inner join userorganizationsgroups uog on uog.userorganizationid=uo.id and uog.activeflag is true and uo.activeflag is true
	    inner join userassessmentprogram uap on uap.userorganizationsgroupsid= uog.id and uap.activeflag is true
	    where  uo.organizationid in (select id from organization_children_active_or_inactive(#{organizationId}) union select #{organizationId}) 
	    and uap.assessmentprogramid = #{assessmentProgramId} and au.activeflag is true
    </select>
    
    <update id="removeRolesfromUsersByOrgAndAssessment">
    	<!-- remove assessment program from the user -->    	
		update userassessmentprogram set activeflag = false, isdefault = false, modifieduser = #{modifiedUserId}, modifieddate = now()
		 where id in (
		  select uap.id from usersorganizations uo 
		 inner join userorganizationsgroups uog on uog.userorganizationid = uo.id and uog.activeflag is true 
		 inner join userassessmentprogram uap on uap.userorganizationsgroupsid = uog.id and uap.activeflag is true 
		 where uo.organizationid in (select id from organization_children_active_or_inactive(#{organizationId}) union select #{organizationId}) 
		 and uap.assessmentprogramid = #{assessmentProgramId}
		 and uo.activeflag is true ) and activeflag is true;
		 
		<!-- remove the user roles which are not mapped to any assessment program --> 
		update userorganizationsgroups set activeflag = false, isdefault = false, modifieduser = #{modifiedUserId}, modifieddate = now()
		where id in (
		select distinct uog.id from userorganizationsgroups uog
		inner join usersorganizations uo on uog.userorganizationid = uo.id and uo.activeflag is true 
		left join userassessmentprogram uap on uap.userorganizationsgroupsid = uog.id and uap.activeflag is true
		where uap.id is null and 
		uog.activeflag is true 
		and uo.organizationid in (select id from organization_children_active_or_inactive(#{organizationId}) union select #{organizationId})) 
		and activeflag is true;
		
		<!-- remove user organizations which are not mapped to any role-->
		update usersorganizations set activeflag = false, isdefault = false, modifieduser = #{modifiedUserId}, modifieddate = now() 
		where id in (
		select distinct uo.id from usersorganizations uo 
		left join userorganizationsgroups uog on uog.userorganizationid = uo.id and uog.activeflag is true 
		where uog.id is null and 
		uo.organizationid in (select id from organization_children_active_or_inactive(#{organizationId}) union select #{organizationId}) and uo.activeflag is true) 
		and activeflag is true;    
    </update>
    
     <update id="resetDefaultOrganization">     	
		 update usersorganizations set isdefault = true, modifieddate = now(), modifieduser = #{userId}
		 where activeflag is true and id in (select userorganizationid from userorganizationsgroups where activeflag is true 
		 and id in (select userorganizationsgroupsid from userassessmentprogram where isdefault is false and aartuserid = #{id} and activeflag is true order by id limit 1) and 
		(select count(id) from userassessmentprogram where isdefault is true and activeflag is true and aartuserid = #{id}) = 0);
		
		update userorganizationsgroups set isdefault = true, modifieddate = now(), modifieduser = #{userId} where activeflag is true 
		and id in (select userorganizationsgroupsid from userassessmentprogram where isdefault is false and aartuserid = #{id} and activeflag is true order by id limit 1) and 
		(select count(id) from userassessmentprogram where isdefault is true and activeflag is true and aartuserid = #{id}) = 0;

		update userassessmentprogram set isdefault = true, modifieddate = now(), modifieduser = #{userId} where aartuserid= #{id} and activeflag is true 
        and id in (select id from userassessmentprogram where isdefault is false and aartuserid = #{id} and activeflag is true order by id limit 1) and 
        (select count(id) from userassessmentprogram where isdefault is true and activeflag is true and aartuserid = #{id}) = 0
     </update>
     <select id="getDistrictLevelUserIdsByOrgIdAndAP" resultType="java.lang.Long">
     select distinct au.id
      from userorganizationsgroups uog 
      inner join usersorganizations uo on uo.id=uog.userorganizationid and uo.activeflag is true and uog.activeflag is true
      inner join userassessmentprogram uap on uap.userorganizationsgroupsid=uog.id and uap.activeflag is true
      inner join assessmentprogram ap on ap.id=uap.assessmentprogramid and ap.abbreviatedname=#{assessmentCode,jdbcType=VARCHAR}
      inner join groups g on g.id=uog.groupid and g.activeflag is true and g.organizationtypeid=(select id from organizationtype where typecode='DT')
      inner join aartuser au on au.id=uo.aartuserid and au.activeflag is true
      inner join organization o on o.id=uo.organizationid and o.activeflag is true 
      where o.id=(select districtid from organizationtreedetail where schoolid =#{orgId,jdbcType=BIGINT})
	</select>
	
	<select id="getByEducatorIdentifierForGRF" resultType="User">		
		select distinct au.id, au.username, au.firstname, au.middlename, au.surname, au.displayname, au.email, au.uniquecommonidentifier, 
        au.defaultusergroupsid, au.createddate, au.createduser, au.activeflag, au.modifieddate, au.modifieduser
	from aartuser au 
	join usersorganizations uo on au.id = uo.aartuserid and uo.activeflag = true
	join userorganizationsgroups uog on uog.userorganizationid=uo.id and groupid=(select id from groups  where groupcode ='TEA')
	where lower(BTRIM(au.uniquecommonidentifier)) = lower(#{uniqueCommonIdentifier}) 
	and uo.organizationid in (select id from organization_children_active_or_inactive(#{orgId}) union select #{orgId})
	order by  au.activeflag desc limit 1;		
	</select>
	
	<select id="getByExternalId" resultType="User">		
		SELECT
			id, username, uniqueCommonIdentifier, firstname, middlename, surname, displayname, password,
			 defaultUserGroupsId, email, ukey as salt,activeFlag, externalid
		FROM aartuser 
		WHERE externalid = #{externalId}
		limit 1
	</select>

	<select id="getUserStateId" resultType="Long">		
		SELECT stateid FROM organizationtreedetail WHERE schoolid = #{organizationId} OR districtid = #{organizationId} limit 1
	</select>
	
	<select id="getUserByExternalIdAndOrgId" resultType="User">		
	  	SELECT
			au.id, au.username, au.uniqueCommonIdentifier, au.firstname, au.middlename, au.surname, au.displayname, au.password,
			 au.defaultUserGroupsId, au.email, ukey as salt, au.activeFlag, au.externalid
		FROM aartuser au
		 join usersorganizations uo on au.id=uo.aartuserid and uo.activeflag is true and au.activeflag is true
		WHERE au.externalid = #{externalId}
		and uo.organizationid = #{orgid}
		limit 1
	</select>
	<select id="getTrainingDetails" resultMap="UsertrainingMap" parameterType="long">
	 	SELECT  trainingcompleted,trainingcompletiondate from userpdtrainingdetail where userid=#{userId} order by currentschoolyear desc limit 1
	</select>
	<select id='getEmailById' resultType="java.lang.String" parameterType="long">
	select email from aartuser where id=#{emailId} 
	</select>
	<select id='getEducatorIdentifierById' resultType="java.lang.String" parameterType="long">
	select uniquecommonidentifier from aartuser where id=#{educatorId} 
	</select>
	<update id='updateEmailById'>
	update aartuser set email=#{emailname,jdbcType=VARCHAR} where id=#{id,jdbcType=BIGINT}
	</update>
	<update id='updateEducatorById'>
	update aartuser set uniquecommonidentifier=#{educatorid,jdbcType=VARCHAR} where id=#{id,jdbcType=BIGINT}
	</update>
	
	
	
</mapper>