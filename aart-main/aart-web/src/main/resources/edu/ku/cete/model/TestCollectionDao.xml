<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.ku.cete.model.TestCollectionDao">
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.content.TestCollection">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="randomizationtype" jdbcType="VARCHAR" property="randomizationType" />
    <result column="gradecourseid" jdbcType="BIGINT" property="gradeCourseId" />
    <result column="contentareaid" jdbcType="BIGINT" property="contentAreaId" />
    <result column="minimumNumberOfItems" jdbcType="INTEGER" property="minimumNumberOfItems" />
    <result column="maximumNumberOfItems" jdbcType="INTEGER" property="maximumNumberOfItems" />
    <result column="createdate" jdbcType="TIMESTAMP" property="createDate" />
    <result column="modifieddate" jdbcType="TIMESTAMP" property="modifiedDate" />
    <result column="originationcode" jdbcType="VARCHAR" property="originationCode" />
    <result column="operationaltestwindowid" jdbcType="BIGINT" property="operationalTestWindowId" />
    <result column="systemselectoptionid" jdbcType="BIGINT" property="systemSelectoptionId"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    id, name, randomizationtype, gradecourseid, contentareaid, createdate, modifieddate, 
    originationcode
  </sql>
  <select id="selectByExample" parameterType="edu.ku.cete.domain.content.TestCollectionExample" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from public.testcollection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    select 
    <include refid="Base_Column_List" />
    from public.testcollection
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    delete from public.testcollection
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="edu.ku.cete.domain.content.TestCollectionExample">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    delete from public.testcollection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="edu.ku.cete.domain.content.TestCollection" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    insert into public.testcollection (name, randomizationtype, 
      gradecourseid, contentareaid, createdate, 
      modifieddate, originationcode)
    values (#{name,jdbcType=VARCHAR}, #{randomizationType,jdbcType=VARCHAR}, 
      #{gradeCourseId,jdbcType=BIGINT}, #{contentAreaId,jdbcType=BIGINT}, #{createdDate,jdbcType=TIMESTAMP}, 
      #{modifiedDate,jdbcType=TIMESTAMP}, #{originationCode,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="edu.ku.cete.domain.content.TestCollection" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    insert into public.testcollection
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="randomizationType != null">
        randomizationtype,
      </if>
      <if test="gradecourseid != null">
        gradecourseid,
      </if>
      <if test="contentareaid != null">
        contentareaid,
      </if>
      <if test="createdate != null">
        createdate,
      </if>
      <if test="modifieddate != null">
        modifieddate,
      </if>
      <if test="originationCode != null">
        originationcode,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="randomizationType != null">
        #{randomizationType,jdbcType=VARCHAR},
      </if>
      <if test="gradecourseid != null">
        #{gradecourseid,jdbcType=BIGINT},
      </if>
      <if test="contentareaid != null">
        #{contentareaid,jdbcType=BIGINT},
      </if>
      <if test="createdate != null">
        #{createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifieddate != null">
        #{modifieddate,jdbcType=TIMESTAMP},
      </if>
      <if test="originationCode != null">
        #{originationCode,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="edu.ku.cete.domain.content.TestCollectionExample" resultType="java.lang.Integer">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    select count(*) from public.testcollection
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    update public.testcollection
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.randomizationType != null">
        randomizationtype = #{record.randomizationType,jdbcType=VARCHAR},
      </if>
      <if test="record.gradecourseid != null">
        gradecourseid = #{record.gradecourseid,jdbcType=BIGINT},
      </if>
      <if test="record.contentareaid != null">
        contentareaid = #{record.contentareaid,jdbcType=BIGINT},
      </if>
      <if test="record.createdate != null">
        createdate = #{record.createdate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.modifieddate != null">
        modifieddate = #{record.modifieddate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.originationCode != null">
        originationcode = #{record.originationCode,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    update public.testcollection
    set id = #{record.id,jdbcType=BIGINT},
      name = #{record.name,jdbcType=VARCHAR},
      randomizationtype = #{record.randomizationType,jdbcType=VARCHAR},
      gradecourseid = #{record.gradecourseid,jdbcType=BIGINT},
      contentareaid = #{record.contentareaid,jdbcType=BIGINT},
      createdate = #{record.createdate,jdbcType=TIMESTAMP},
      modifieddate = #{record.modifieddate,jdbcType=TIMESTAMP},
      originationcode = #{record.originationCode,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.content.TestCollection">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    update public.testcollection
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="randomizationType != null">
        randomizationtype = #{randomizationType,jdbcType=VARCHAR},
      </if>
      <if test="gradecourseid != null">
        gradecourseid = #{gradeCourseId,jdbcType=BIGINT},
      </if>
      <if test="contentareaid != null">
        contentareaid = #{contentAreaId,jdbcType=BIGINT},
      </if>
      <if test="createdate != null">
        createdate = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifieddate != null">
        modifieddate = #{modifiedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="originationCode != null">
        originationcode = #{originationCode,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.content.TestCollection">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    update public.testcollection
    set name = #{name,jdbcType=VARCHAR},
      randomizationtype = #{randomizationType,jdbcType=VARCHAR},
      gradecourseid = #{gradeCourseId,jdbcType=BIGINT},
      contentareaid = #{contentAreaId,jdbcType=BIGINT},
      createdate = #{createDate,jdbcType=TIMESTAMP},
      modifieddate = #{modifiedDate,jdbcType=TIMESTAMP},
      originationcode = #{originationCode,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <resultMap type="edu.ku.cete.domain.content.TestCollection" id="Expanded_Result_Map" extends="BaseResultMap">
    <result column="testCollectionId" jdbcType="INTEGER" property="testCollectionId" />
    <result column="testId" jdbcType="INTEGER" property="testId" />
    <result column="operationaltestwindowid" property="operationalTestWindowId" />
    <result column="panelid" property="panelId" jdbcType="BIGINT"/>
    <result column="panelname" property="panelName" jdbcType="VARCHAR"/>
    <association property="gradeCourse" javaType="edu.ku.cete.domain.content.GradeCourse">
        <id column="gradecourse.id" property="id"/>
	    <result column="gradecourse.name" jdbcType="VARCHAR" property="name" />
	    <result column="gradecourse.gradelevel" jdbcType="INTEGER" property="gradeLevel" />
	    <result column="gradecourse.originationcode" property="originationCode" jdbcType="VARCHAR"/>
    </association>
    <association property="contentArea" javaType="edu.ku.cete.domain.content.ContentArea">
        <id column="contentarea.id" property="id"/>
        <result column="contentarea.name" property="name" jdbcType="VARCHAR"/>
	    <result column="contentarea.originationcode" property="originationCode" jdbcType="VARCHAR" />
    </association>
    <association property="assessment" javaType="edu.ku.cete.domain.common.Assessment" >
		    <id column="assessmentId" property="id" jdbcType="BIGINT" />
		    <result column="testingProgramid" property="testingProgramId" jdbcType="BIGINT" />
		    <result column="assessmentname" property="assessmentName" jdbcType="VARCHAR" />
		    <result column="assessmentCode" property="assessmentCode" jdbcType="VARCHAR" />
		    <result column="assessmentDescription" property="assessmentDescription" jdbcType="VARCHAR" />
	  </association>
    <association property="testingProgram" javaType="edu.ku.cete.domain.security.TestingProgram" >
		    <id column="testingProgramId" property="id" jdbcType="BIGINT" />
		    <result column="programName" property="programName" jdbcType="VARCHAR" />
		    <result column="programDescription" property="programDescription" jdbcType="VARCHAR" />
		    <result column="programAbbr" property="programAbbr" jdbcType="VARCHAR" />
		    <result column="qccomplete" property="qcComplete"  jdbcType="BOOLEAN" />
	  </association>	
	  <association property="assessmentProgram" javaType="edu.ku.cete.domain.content.AssessmentProgram" >
		    <id column="assessmentProgramId" property="id" jdbcType="BIGINT" />
		    <result column="assessmentProgramName" property="programName" jdbcType="VARCHAR" />
	  </association>		  
  </resultMap>
  <resultMap type="edu.ku.cete.domain.content.TestCollection" id="Auto_Expanded_Result_Map" extends="Expanded_Result_Map">
  	<association property="stage" javaType="edu.ku.cete.domain.content.Stage">
        <id column="stage.id" property="id"/>
	    <result column="stage.name" jdbcType="VARCHAR" property="name" />
	    <result column="stage.sortorder" jdbcType="INTEGER" property="sortOrder" />
	    <result column="stage.code" property="code" jdbcType="VARCHAR"/>
	    <result column="stage.predecessorid" property="predecessorId" jdbcType="BIGINT" />
    </association>
  </resultMap>
 <resultMap type="edu.ku.cete.domain.QCTestCollectionDTO" id="Expanded_QC_Result_Map">
 	<result column="id" jdbcType="VARCHAR" property="id" /> 
	<result column="qccomplete" property="qcComplete"  jdbcType="BOOLEAN" />
	<result column="testCollectionId" jdbcType="BIGINT" property="testCollectionId" />
	<result column="testid" jdbcType="BIGINT" property="testId" />
	<result column="externalid" jdbcType="BIGINT" property="externalId" />
    <result column="collectionname" jdbcType="VARCHAR" property="collectionName" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="testinternalname" jdbcType="VARCHAR" property="testInternalName" />
    <result column="gradecourseid" jdbcType="BIGINT" property="gradeCourseId" />
    <result column="gradecoursename" jdbcType="VARCHAR" property="gradeCourseName" />
    <result column="gradecourseabbreviatedname" jdbcType="VARCHAR" property="gradeCourseAbbreviatedName" />
    <result column="gradecoursegradelevel" jdbcType="INTEGER" property="gradeCourseGradeLevel" />
    <result column="contentareaid" jdbcType="BIGINT" property="contentAreaId" />
    <result column="contentareaname" property="contentAreaName" jdbcType="VARCHAR"/>
    <result column="assessmentprogramname" property="assessmentProgramName" jdbcType="VARCHAR" />
    <result column="testingprogramname" property="testingProgramName" jdbcType="VARCHAR" />
    <result column="assessmentname" property="assessmentName" jdbcType="VARCHAR" />
  </resultMap>
     
  <sql id="Expanded_Column_List">
      tc.id, tc.id as testCollectionId, t.id as testId, tc.name as collectionname, t.testname as name, tc.randomizationtype, tc.gradecourseid, tc.contentareaid, tc.createdate, tc.modifieddate, 
    tc.originationcode,
       -1                 								 AS "minimumNumberOfItems"       ,
       item_test_tc.maximumNumberOfItems                 AS "maximumNumberOfItems"       ,
       gc.id as "gradecourse.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", gc.ordinality as "gradecourse.ordinality", gc.gradelevel as "gradecourse.gradelevel",
    gc.originationcode as "gradecourse.originationcode", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",
    ca.sortorder as "contentarea.sortorder", ca.name as "contentarea.name", ca.originationcode as "contentarea.originationcode", 
    ap.programName as "assessmentProgramName", tp.programName as "programName", asm.assessmentName as "assessmentname"
  </sql>
  <sql id="Expanded_Test_Column_List">
      t.id, tc.id as testCollectionId, t.id as testId, '' as collectionname, t.testname as name, tc.randomizationtype, tc.gradecourseid, tc.contentareaid, tc.createdate, tc.modifieddate, 
    tc.originationcode,
       item_test_tc.minimumNumberOfItems                 AS "minimumNumberOfItems"       ,
       item_test_tc.maximumNumberOfItems                 AS "maximumNumberOfItems"       ,
       gc.id as "gradecourse.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", gc.ordinality as "gradecourse.ordinality", gc.gradelevel as "gradecourse.gradelevel",
    gc.originationcode as "gradecourse.originationcode", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",
    ca.sortorder as "contentarea.sortorder", ca.name as "contentarea.name", ca.originationcode as "contentarea.originationcode",
    ap.programName as "assessmentProgramName", tp.programName as "programName", asm.assessmentName as "assessmentname"
  </sql>

  <sql id="Expanded_QC_Column_List">
      	t.id || '-' ||  tp.id || '' || asm.id || '' || ap.id || '' || tc.id as id, t.qccomplete,tc.id as testCollectionId, t.id as testId, t.externalid as externalid, tc.name as collectionname, t.testname as name, t.testinternalname, 
      	case when tc.gradecourseid is not null then tc.gradeCourseId 
		     when tc.courseid is not null then tc.courseId 
		     when tc.gradebandid is not null then tc.gradebandid end as gradecourseid, 
		case when tc.gradecourseid is not null then gc.name 
		     when tc.courseid is not null then gc.name 
		     when tc.gradebandid is not null then gb.name end as gradecoursename,
		case when tc.gradecourseid is not null then gc.abbreviatedname
		     when tc.courseid is not null then gc.abbreviatedname 
		     when tc.gradebandid is not null then gb.abbreviatedname end as gradecourseabbreviatedname, 
      	gc.gradelevel as gradecoursegradelevel,
    	 ca.id as contentareaid, ca.name as contentareaname,ap.programname as assessmentprogramname, tp.programname as testingprogramname, asm.assessmentname as assessmentname
  </sql>
  
   <sql id="Extended_QCControl_Where_Clause">
		<if test="criteria.qcComplete != null">
			AND (t.qccomplete || '') ilike #{criteria.qcComplete}
		</if> 
		<if test="criteria.assessmentName != null">
			AND asm.assessmentName ilike #{criteria.assessmentName}
		</if> 
		<if test="criteria.testingProgramName != null">
			AND tp.programName ilike #{criteria.testingProgramName}
		</if> 
		<if test="criteria.assessmentProgramName != null">
			AND ap.programName ilike #{criteria.assessmentProgramName}
		</if> 
		<if test="criteria.gradeCourseName != null">
			AND gc.name ilike #{criteria.gradeCourseName}
		</if> 
		<if test="criteria.contentAreaName != null">
			AND ca.name ilike #{criteria.contentAreaName}
		</if>  
		<if test="criteria.collectionName != null">
			AND tc.name ilike #{criteria.collectionName}
		</if>
		<if test="criteria.name != null">
			AND t.testname ilike #{criteria.name}
		</if> 
		<if test="criteria.testInternalName != null">
			AND t.testinternalname ilike #{criteria.testInternalName}
		</if> 
		<if test="criteria.testId != null">
			AND cast(t.id as varchar) =  #{criteria.testId}
		</if> 
		<if test="criteria.externalId != null">		
			AND (t.externalId || '') ilike #{criteria.externalId}
 		</if> 
	</sql>
    
  <sql id="Select_Assess_Column_List">
   	<!-- Select Assessments page column list to pull test collection names which are managed by system along with some additional columns -->
  		tc.id AS testCollectionId, 0 AS testId, tc.name AS collectionname, '' AS name, '' AS testinternalname, t.qccomplete AS qcComplete, tc.randomizationtype AS randomizationType, 
      	gc.id AS gradeCourseId,  gc.name AS gradeCourseName, ca.id AS contentareaid, ca.name AS contentareaName,    
      	-1 AS minimumNumberOfItems, item_test_tc.maximumNumberOfItems AS "maximumNumberOfItems",       	          
    	ap.id AS assessmentProgramId, ap.programName AS assessmentProgramName, tp.id AS testingProgramId, tp.programName AS testingProgramName,tp.highstake AS highStake, 
    	asm.id AS assessmentId, asm.assessmentName AS assessmentName, case when ap.abbreviatedname='DLM' then true else false end as dlmAssociation, t.externalid as externalid
  </sql>
  <sql id="Select_Assess_Test_Column_List">
  	<!-- Select Assessments page column list to pull test names which are managed by manual along with some additional columns -->
  		tc.id AS testCollectionId, t.id AS testId, t.testname AS collectionname, t.testname AS name, t.testinternalname, t.qccomplete AS qcComplete, tc.randomizationtype AS randomizationType,
       	gc.id AS gradeCourseId,  gc.name AS gradeCourseName, ca.id AS contentareaid, ca.name AS contentareaName,
       	item_test_tc.minimumNumberOfItems AS minimumNumberOfItems, item_test_tc.maximumNumberOfItems AS maximumNumberOfItems,
       	ap.id AS assessmentProgramId, ap.programName AS assessmentProgramName, tp.id AS testingProgramId, tp.programName AS testingProgramName, tp.highstake AS highStake,
    	asm.id AS assessmentId, asm.assessmentName AS assessmentName, case when ap.abbreviatedname='DLM' then true else false end as dlmAssociation, t.externalid as externalid
  </sql>

  <sql id="Select_Assess_QC_Column_List">
  	<!-- Select Assessments page column list to pull test names which are managed by system and manual along with some additional columns for QC Admin-->
      	t.id AS id, tc.id AS testCollectionId, t.id AS testId,t.externalid as externalid, tc.name AS collectionname, t.testname AS name, t.testinternalname, t.qccomplete AS qcComplete, tc.randomizationtype AS randomizationType,
       	gc.id AS gradeCourseId,  gc.name AS gradeCourseName, ca.id AS contentAreaid, ca.name AS contentAreaName,
       	item_test_tc.minimumNumberOfItems AS minimumNumberOfItems, item_test_tc.maximumNumberOfItems AS maximumNumberOfItems,
       	ap.id AS assessmentProgramId, ap.programName AS assessmentProgramName, tp.id AS testingProgramId, tp.programName AS testingProgramName, tp.highstake AS highStake,
    	asm.id AS assessmentId, asm.assessmentName AS assessmentName, tc_gb.name AS gradeBandName, case when ap.abbreviatedname='DLM' then true else false end as dlmAssociation
  </sql>  
  
  <sql id="Extended_Select_Assess_Where_Clause">
  		<if test="testsAndTestCollectionsCriteriaMap.testId != null">
			AND (testId || '') ilike #{testsAndTestCollectionsCriteriaMap.testId}
		</if>
		<if test="testsAndTestCollectionsCriteriaMap.externalId != null">
			AND (t.externalId || '') ilike #{testsAndTestCollectionsCriteriaMap.externalId}
		</if>
		<if test="testsAndTestCollectionsCriteriaMap.name != null">
			AND (t.testname) ilike #{testsAndTestCollectionsCriteriaMap.name}
		</if>
		<if test="testsAndTestCollectionsCriteriaMap.assessmentProgramName!= null">
			AND (ap.programName || '') ilike TRIM(#{testsAndTestCollectionsCriteriaMap.assessmentProgramName}, '%')
		</if>
		<if test="testsAndTestCollectionsCriteriaMap.testingProgramName != null">
			AND tp.programName ilike TRIM(#{testsAndTestCollectionsCriteriaMap.testingProgramName}, '%')
		</if>	    	
		<if test="testsAndTestCollectionsCriteriaMap.assessmentName != null">
			AND (asm.assessmentName || '') ilike TRIM(#{testsAndTestCollectionsCriteriaMap.assessmentName}, '%')
		</if>
		<if test="testsAndTestCollectionsCriteriaMap.contentAreaName != null">
			AND ca.name ilike TRIM(#{testsAndTestCollectionsCriteriaMap.contentAreaName}, '%')
		</if>	
		<if test="testsAndTestCollectionsCriteriaMap.gradeCourseName != null">
			AND gc.name ilike TRIM(#{testsAndTestCollectionsCriteriaMap.gradeCourseName}, '%')
		</if>
		<if test="testsAndTestCollectionsCriteriaMap.qcComplete != null">
			AND (t.qccomplete || '') = TRIM(#{testsAndTestCollectionsCriteriaMap.qcComplete}, '%')
		</if>
		<if test="testsAndTestCollectionsCriteriaMap.highStake != null">
			AND (tp.highstake || '') = TRIM(#{testsAndTestCollectionsCriteriaMap.highStake}, '%')
		</if>
		<if test="testsAndTestCollectionsCriteriaMap.testInternalName != null">
			AND t.testinternalname ilike TRIM(#{testsAndTestCollectionsCriteriaMap.testInternalName})
		</if>
		<if test="testsAndTestCollectionsCriteriaMap.assessmentProgramCode!= null">
			AND (ap.abbreviatedname || '') ilike TRIM(#{testsAndTestCollectionsCriteriaMap.assessmentProgramCode}, '%')
		</if>	    	
   </sql>
   
  <sql id="Expanded_AutoRegistration_Column_List">
    tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, tc.gradecourseid, tc.contentareaid, tc.gradebandid, 
    gc.id as "gradecourse.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",  ca.name as "contentarea.name",
    otw.id as operationaltestwindowid
  </sql>
  <sql id="Update_By_Example_Where_Clause_Extended">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Sep 12 16:14:17 CDT 2012.
    -->
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and tc.${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and tc.${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and tc.${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and tc.${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Associations_Column_list">
    tc.id, tc.name, tc.randomizationtype, tc.gradecourseid, tc.contentareaid, tc.createdate, tc.modifieddate, 
    tc.originationcode, gc.id as "gradecourse.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", gc.ordinality as "gradecourse.ordinality", gc.gradelevel as "gradecourse.gradelevel",
    gc.originationcode as "gradecourse.originationcode", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",
    ca.sortorder as "contentarea.sortorder", ca.name as "contentarea.name", ca.originationcode as "contentarea.originationcode"
    
  </sql>
  
  
  
    <select id="getTestCollectionsByTestId" parameterType="Long" resultMap="Expanded_Result_Map">
    select distinct tc.*
    from testcollection tc
    join testcollectionstests tct on tc.id=tct.testcollectionid
    join test t on t.id=tct.testid and t.activeflag is true 
    where t.activeflag is true and tc.activeflag is true 
    and t.id = #{testId}
  </select>
  
  <select id="selectByTestSession" parameterType="Long" resultMap="Expanded_Result_Map">
    select <include refid="Associations_Column_list"/>
    from testcollection tc 
    join studentstests st on tc.id = st.testcollectionid
    join testsession ts on  tc.id = st.testcollectionid
    left join gradeband gb on tc.gradebandid = gb.id
	left join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
    left join gradecourse gc on tc.gradecourseid = gc.id
    join contentarea ca on tc.contentareaid = ca.id
    where st.testsessionid = ts.id
    and ts.id = #{testSessionId}
  </select>
  
  <select id="selectTestsAndTestCollections" parameterType="edu.ku.cete.domain.content.TestCollectionExample" resultType="TestCollectionDTO">
	SELECT (row_number() over()) AS id,* FROM (
		SELECT			
			distinct			
		    <include refid="Select_Assess_Column_List" />
		FROM
			assessmentprogram ap
			JOIN testingprogram tp ON tp.assessmentprogramid = ap.id
			JOIN assessment asm ON asm.testingprogramid = tp.id
			JOIN assessmentstestcollections atc ON atc.assessmentid = asm.id
			JOIN testcollection tc ON  tc.id = atc.testcollectionid
			LEFT JOIN gradeband gb on tc.gradebandid = gb.id
			LEFT JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
			LEFT JOIN gradecourse gc ON gc.id = tc.gradecourseid
			JOIN contentarea ca ON ca.id = tc.contentareaid
			LEFT JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			LEFT JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
			LEFT JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
			JOIN testcollectionstests tct2 ON tct2.testcollectionid = tc.id
			JOIN test t ON t.id = tct2.testid
			LEFT JOIN
			(
				SELECT testcollectionid, min(numitems) as minimumNumberOfItems, max(numitems) as maximumNumberOfItems
				FROM testcollectionstests tct JOIN test t ON t.id = tct.testid
				WHERE numitems is not null AND t.status =#{testStatusId}
				GROUP BY tct.testcollectionid
			) item_test_tc on item_test_tc.testcollectionid=tc.id
		WHERE t.status = #{testStatusId}
	    	AND otwsr.sessionruleid= #{systemEnrollmentRuleId}
	    	AND (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	    	AND tp.programabbr not in ('PD')
	       	AND exists (
	       					SELECT 1 FROM test t3, testcollectionstests tct3 
	       					WHERE t3.id=tct3.testid AND tct3.testcollectionid = tc.id AND t3.qccomplete = true AND t3.status = #{testStatusId}
	       				  )
	       	AND ap.id in (
	       					SELECT assessmentprogramid FROM orgassessmentprogram oap 
	       					WHERE (oap.organizationid = #{organizationId} OR oap.organizationid in (SELECT id FROM organization_parent(#{organizationId})))
	       					and oap.activeflag is true
	         			 )
	       	<if test="qcComplete != null" >
	       		AND t.qccomplete = #{qcComplete}
	       	</if>
	       	<if test="! hasHighStakesPermission" >
	       		AND tp.highstake = false
	       	</if>
	       	<include refid="Extended_Select_Assess_Where_Clause" />
	       	
	    UNION ALL
		
		SELECT
			
			distinct			
			<include refid="Select_Assess_Test_Column_List" />
		FROM assessmentprogram ap
			JOIN testingprogram tp ON tp.assessmentprogramid = ap.id
			JOIN assessment asm ON asm.testingprogramid = tp.id
			JOIN assessmentstestcollections atc ON atc.assessmentid = asm.id
			JOIN testcollection tc ON tc.id = atc.testcollectionid
			LEFT JOIN gradeband gb on tc.gradebandid = gb.id
			LEFT JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
			LEFT JOIN gradecourse gc ON gc.id = tc.gradecourseid
			JOIN contentarea ca ON ca.id = tc.contentareaid
			JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
			JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
			JOIN testcollectionstests tct2 ON tct2.testcollectionid = tc.id
			JOIN test t ON t.id = tct2.testid
			LEFT JOIN 
			(
				SELECT testcollectionid, min(numitems) as minimumNumberOfItems, max(numitems) as maximumNumberOfItems
				FROM testcollectionstests tct JOIN test t ON t.id = tct.testid
				WHERE numitems is not null AND t.status =#{testStatusId}
				GROUP BY tct.testcollectionid
		    ) item_test_tc ON item_test_tc.testcollectionid=tc.id
		WHERE t.status = #{testStatusId}
	    	AND otwsr.sessionruleid= #{manualEnrollmentRuleId}
	    	AND tp.programabbr not in ('PD')
	    	AND (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	    	AND ap.id in (
	        				SELECT assessmentprogramid FROM orgassessmentprogram oap 
	       					WHERE (oap.organizationid = #{organizationId} OR oap.organizationid in (SELECT id FROM organization_parent(#{organizationId})))
	       					and oap.activeflag is true
	       				 )
	       	<if test="qcComplete != null" >
	       		AND t.qccomplete = #{qcComplete}
	        </if> 
	        <if test="! hasHighStakesPermission" >
	        	AND tp.highstake = false
	        </if>
	        <include refid="Extended_Select_Assess_Where_Clause" />
	) testsAndTestCollectionsCount
	<if test="orderByClause != null">
		ORDER BY ${orderByClause}
	</if>
	<if test="limit != null" >
		limit #{limit}
	</if>
	
	<if test="offset != null" >
		offset #{offset}
	</if>
	
  </select>
  
  <select id="selectTestsAndManualTestCollections" parameterType="edu.ku.cete.domain.content.TestCollectionExample" resultType="TestCollectionDTO">
	SELECT (row_number() over()) AS id,* FROM (
		SELECT
			
			distinct			
			<include refid="Select_Assess_Test_Column_List" />
		FROM assessmentprogram ap
			JOIN testingprogram tp ON tp.assessmentprogramid = ap.id
			JOIN assessment asm ON asm.testingprogramid = tp.id
			JOIN assessmentstestcollections atc ON atc.assessmentid = asm.id
			JOIN testcollection tc ON tc.id = atc.testcollectionid
       		LEFT JOIN gradeband gb on tc.gradebandid = gb.id
	   		LEFT JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	   		LEFT JOIN gradecourse gc ON gc.id = tc.gradecourseid
			JOIN contentarea ca ON ca.id = tc.contentareaid
			LEFT JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			LEFT JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
			LEFT JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
			JOIN testcollectionstests tct2 ON tct2.testcollectionid = tc.id
			JOIN test t ON t.id = tct2.testid
			LEFT JOIN 
			(
				SELECT testcollectionid, min(numitems) as minimumNumberOfItems, max(numitems) as maximumNumberOfItems
				FROM testcollectionstests tct JOIN test t ON t.id = tct.testid
				WHERE numitems is not null AND t.status =#{testStatusId}
				GROUP BY tct.testcollectionid
		    ) item_test_tc ON item_test_tc.testcollectionid=tc.id
		WHERE t.status = #{testStatusId}
	    	AND otwsr.sessionruleid= #{manualEnrollmentRuleId}
	    	AND tp.programabbr not in ('PD')
	    	AND (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	        AND ap.id in (
	        				SELECT assessmentprogramid FROM orgassessmentprogram oap 
	       					WHERE (oap.organizationid = #{organizationId} OR oap.organizationid in (SELECT id FROM organization_parent(#{organizationId})))
	       					and oap.activeflag is true
	       				 )
	       	<if test="qcComplete != null" >
	       		AND t.qccomplete = #{qcComplete}
	        </if> 
	        <if test="! hasHighStakesPermission" >
	        	AND tp.highstake = false
	        </if>
	        <include refid="Extended_Select_Assess_Where_Clause" />
	) testsAndTestCollectionsCount
	<if test="orderByClause != null">
		ORDER BY ${orderByClause}
	</if>
	<if test="limit != null" >
		limit #{limit}
	</if>
	
	<if test="offset != null" >
		offset #{offset}
	</if>
	
  </select>
    
  <select id="countTestsAndTestCollections" parameterType="edu.ku.cete.domain.content.TestCollectionExample" resultType="java.lang.Integer">
	SELECT COUNT(1)
	FROM (
		SELECT
			distinct
		    <include refid="Select_Assess_Column_List" />
		FROM
			assessmentprogram ap
			JOIN testingprogram tp ON tp.assessmentprogramid = ap.id
			JOIN assessment asm ON asm.testingprogramid = tp.id
			JOIN assessmentstestcollections atc ON atc.assessmentid = asm.id
			JOIN testcollection tc ON  tc.id = atc.testcollectionid
			LEFT JOIN gradeband gb on tc.gradebandid = gb.id
			LEFT JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
			LEFT JOIN gradecourse gc ON gc.id = tc.gradecourseid			
			JOIN contentarea ca ON ca.id = tc.contentareaid
			LEFT JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			LEFT JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
			LEFT JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
			JOIN testcollectionstests tct2 ON tct2.testcollectionid = tc.id
			JOIN test t ON t.id = tct2.testid
			LEFT JOIN
			(
				SELECT testcollectionid, min(numitems) as minimumNumberOfItems, max(numitems) as maximumNumberOfItems
				FROM testcollectionstests tct JOIN test t ON t.id = tct.testid
				WHERE numitems is not null AND t.status =#{testStatusId}
				GROUP BY tct.testcollectionid
			) item_test_tc on item_test_tc.testcollectionid=tc.id
		WHERE t.status = #{testStatusId}
	    	AND otwsr.sessionruleid= #{systemEnrollmentRuleId}
	    	AND  tp.programabbr not in ('PD')
	    	AND (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	       	AND exists (
	       					SELECT 1 FROM test t3, testcollectionstests tct3 
	       					WHERE t3.id=tct3.testid AND tct3.testcollectionid = tc.id AND t3.qccomplete = true AND t3.status = #{testStatusId}
	       				  )
	       	AND ap.id in (
	       					SELECT assessmentprogramid FROM orgassessmentprogram oap 
	       					WHERE (oap.organizationid = #{organizationId} OR oap.organizationid in (SELECT id FROM organization_parent(#{organizationId})))
	       					and oap.activeflag is true
	       				 )
	       	<if test="qcComplete != null" >
	       		AND t.qccomplete = #{qcComplete}
	       	</if>
	       	<if test="! hasHighStakesPermission" >
	       		AND tp.highstake = false
	       	</if>
	       	<include refid="Extended_Select_Assess_Where_Clause" />
	       	
	    UNION ALL
		
		SELECT
			distinct
			<include refid="Select_Assess_Test_Column_List" />
		FROM assessmentprogram ap
			JOIN testingprogram tp ON tp.assessmentprogramid = ap.id
			JOIN assessment asm ON asm.testingprogramid = tp.id
			JOIN assessmentstestcollections atc ON atc.assessmentid = asm.id
			JOIN testcollection tc ON tc.id = atc.testcollectionid
			LEFT JOIN gradeband gb on tc.gradebandid = gb.id
			LEFT JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
			LEFT JOIN gradecourse gc ON gc.id = tc.gradecourseid
			JOIN contentarea ca ON ca.id = tc.contentareaid
			JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
			JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
			JOIN testcollectionstests tct2 ON tct2.testcollectionid = tc.id
			JOIN test t ON t.id = tct2.testid
			LEFT JOIN 
			(
				SELECT testcollectionid, min(numitems) as minimumNumberOfItems, max(numitems) as maximumNumberOfItems
				FROM testcollectionstests tct JOIN test t ON t.id=tct.testid
				WHERE numitems is not null AND t.status =#{testStatusId}
				GROUP BY tct.testcollectionid
		    ) item_test_tc ON item_test_tc.testcollectionid=tc.id
		WHERE t.status = #{testStatusId}
	    	AND otwsr.sessionruleid= #{manualEnrollmentRuleId}
	    	AND tp.programabbr not in ('PD')
	    	AND (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	        AND ap.id in (
	        				SELECT assessmentprogramid FROM orgassessmentprogram oap 
	       					WHERE (oap.organizationid = #{organizationId} OR oap.organizationid in (SELECT id FROM organization_parent(#{organizationId})))
	       					and oap.activeflag is true
	       				 )
	       	<if test="qcComplete != null" >
	       		AND t.qccomplete = #{qcComplete}
	        </if>
	        <if test="! hasHighStakesPermission" >
	        	AND tp.highstake = false
	        </if>
	          
	        <include refid="Extended_Select_Assess_Where_Clause" />
    ) testsAndTestCollectionsCount
  </select>
  
  <select id="countTestsAndManualTestCollections" parameterType="edu.ku.cete.domain.content.TestCollectionExample" resultType="java.lang.Integer">
	SELECT COUNT(1)
	FROM (
		SELECT
			distinct
			<include refid="Select_Assess_Test_Column_List" />
		FROM assessmentprogram ap
			JOIN testingprogram tp ON tp.assessmentprogramid = ap.id
			JOIN assessment asm ON asm.testingprogramid = tp.id
			JOIN assessmentstestcollections atc ON atc.assessmentid = asm.id
			JOIN testcollection tc ON tc.id = atc.testcollectionid
			LEFT JOIN gradeband gb on tc.gradebandid = gb.id
			LEFT JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
			LEFT JOIN gradecourse gc ON gc.id = tc.gradecourseid
			JOIN contentarea ca ON ca.id = tc.contentareaid
			JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
			JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
			JOIN testcollectionstests tct2 ON tct2.testcollectionid = tc.id
			JOIN test t ON t.id = tct2.testid
			LEFT JOIN 
			(
				SELECT testcollectionid, min(numitems) as minimumNumberOfItems, max(numitems) as maximumNumberOfItems
				FROM testcollectionstests tct JOIN test t ON t.id=tct.testid
				WHERE numitems is not null AND t.status =#{testStatusId}
				GROUP BY tct.testcollectionid
		    ) item_test_tc ON item_test_tc.testcollectionid=tc.id
		WHERE t.status = #{testStatusId}
	    	AND otwsr.sessionruleid= #{manualEnrollmentRuleId}
	    	AND tp.programabbr not in ('PD')
	    	AND (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	        AND ap.id in (
	        				SELECT assessmentprogramid FROM orgassessmentprogram oap 
	       					WHERE (oap.organizationid = #{organizationId} OR oap.organizationid in (SELECT id FROM organization_parent(#{organizationId})))
	       					and oap.activeflag is true
	       				 )
	       	<if test="qcComplete != null" >
	       		AND t.qccomplete = #{qcComplete}
	        </if>
	        <if test="! hasHighStakesPermission" >
	        	AND tp.highstake = false
	        </if>
	        <include refid="Extended_Select_Assess_Where_Clause" />
    ) testsAndTestCollectionsCount
  </select>
    
  <select id="selectTestsAndTestCollectionsForQCAdmin" parameterType="edu.ku.cete.domain.content.TestCollectionExample" resultType="TestCollectionDTO">
   	SELECT		
		distinct	    
	    <include refid="Select_Assess_QC_Column_List" />
	FROM
       assessmentprogram ap
       JOIN testingprogram tp ON tp.assessmentprogramid = ap.id
       JOIN assessment asm ON asm.testingprogramid = tp.id
       JOIN assessmentstestcollections atc ON atc.assessmentid = asm.id
       JOIN testcollection tc ON tc.id = atc.testcollectionid
       LEFT JOIN gradeband gb on tc.gradebandid = gb.id
	   LEFT JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	   LEFT JOIN gradecourse gc ON gc.id = tc.gradecourseid
       JOIN contentarea ca ON ca.id = tc.contentareaid 
       JOIN testcollectionstests tct2 ON tct2.testcollectionid = tc.id
       JOIN test t ON t.id = tct2.testid
       LEFT JOIN
       (
       		SELECT testcollectionid, min(numitems) as minimumNumberOfItems, max(numitems) as maximumNumberOfItems
			FROM testcollectionstests tct JOIN test t ON t.id = tct.testid  
	  		WHERE numitems is not null AND t.status = #{testStatusId}
	   		GROUP BY tct.testcollectionid
       ) item_test_tc on item_test_tc.testcollectionid=tc.id
      LEFT JOIN
       (    SELECT distinct testcollectionstests.testcollectionid,test.gradebandid,gradeband.name 
			FROM testcollectionstests join test on testcollectionstests.testid = test.id join gradeband on test.gradebandid=gradeband.id
			WHERE test.gradebandid is not null
       ) tc_gb on tc_gb.testcollectionid = tc.id
	WHERE
		t.status = #{testStatusId}
		AND tp.programabbr not in ('PD')
       	AND ap.id in (
       					SELECT assessmentprogramid FROM orgassessmentprogram oap 
	       					WHERE (oap.organizationid = #{organizationId} OR oap.organizationid in (SELECT id FROM organization_parent(#{organizationId})))
	       					and oap.activeflag is true
	       			 )
       	<if test="qcComplete != null" >
			AND t.qccomplete = #{qcComplete}
       	</if> 
       	<if test="! hasHighStakesPermission" >
			AND tp.highstake = false
       	</if>
       	<include refid="Extended_Select_Assess_Where_Clause" />
    	<if test="orderByClause != null">
			ORDER BY ${orderByClause}
		</if>
		<if test="limit != null" >
			limit #{limit}        	
		</if>	
		<if test="offset != null" >
			offset #{offset}
		</if>
  </select>
  
  <select id="countTestsAndTestCollectionsForQCAdmin" parameterType="edu.ku.cete.domain.content.TestCollectionExample" resultType="java.lang.Integer">
  	SELECT COUNT(1)
  	FROM (
		   	SELECT			
				distinct
		    	<include refid="Select_Assess_QC_Column_List" />	
			FROM
		       assessmentprogram ap
		       JOIN testingprogram tp ON tp.assessmentprogramid = ap.id
		       JOIN assessment asm ON asm.testingprogramid = tp.id
		       JOIN assessmentstestcollections atc ON atc.assessmentid = asm.id
		       JOIN testcollection tc ON tc.id = atc.testcollectionid
			   LEFT JOIN gradeband gb on tc.gradebandid = gb.id
			   LEFT JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
			   LEFT JOIN gradecourse gc ON gc.id = tc.gradecourseid
		       JOIN contentarea ca ON ca.id = tc.contentareaid       
 		       JOIN testcollectionstests tct2 ON tct2.testcollectionid = tc.id
		       JOIN test t ON t.id = tct2.testid
		       LEFT JOIN
		       (
		       		SELECT testcollectionid, min(numitems) as minimumNumberOfItems, max(numitems) as maximumNumberOfItems
					FROM testcollectionstests tct JOIN test t ON t.id = tct.testid 
			  		WHERE numitems is not null AND t.status = #{testStatusId}
			   		GROUP BY tct.testcollectionid
		       ) item_test_tc on item_test_tc.testcollectionid=tc.id
		       LEFT JOIN
		       (    SELECT distinct testcollectionstests.testcollectionid,test.gradebandid,gradeband.name 
					FROM testcollectionstests join test on testcollectionstests.testid = test.id join gradeband on test.gradebandid=gradeband.id
					WHERE test.gradebandid is not null
       		   ) tc_gb on tc_gb.testcollectionid = tc.id
			WHERE
				t.status = #{testStatusId}
				AND  tp.programabbr not in ('PD')
 		       	AND ap.id in (
		       					SELECT assessmentprogramid FROM orgassessmentprogram oap 
	       					WHERE (oap.organizationid = #{organizationId} OR oap.organizationid in (SELECT id FROM organization_parent(#{organizationId})))
	       					and oap.activeflag is true
	       					 )
		       	<if test="qcComplete != null" >
					AND t.qccomplete = #{qcComplete}
		       	</if> 
		       	<if test="! hasHighStakesPermission" >
					AND tp.highstake = false
		       	</if>
		       	<include refid="Extended_Select_Assess_Where_Clause" />    	         
	    ) testsAndTestCollectionsCount
  </select>
  
  <select id="selectTestsAndTestCollectionsForQCControl" parameterType="edu.ku.cete.domain.content.TestCollectionExample" resultMap="Expanded_QC_Result_Map">
   	SELECT
		distinct
	    <include refid="Expanded_QC_Column_List" />	
	FROM
       assessmentprogram ap
       JOIN testingprogram tp ON tp.assessmentprogramid = ap.id
       JOIN assessment asm ON asm.testingprogramid = tp.id
       JOIN assessmentstestcollections atc ON atc.assessmentid = asm.id
       JOIN testcollection tc ON tc.id = atc.testcollectionid
       LEFT JOIN gradeband gb on tc.gradebandid = gb.id
	   LEFT JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	   LEFT JOIN gradecourse gc ON gc.id = tc.gradecourseid or gc.id = tc.courseid
       JOIN contentarea ca ON ca.id = tc.contentareaid       
       JOIN testcollectionstests tct2 ON tct2.testcollectionid = tc.id
       JOIN test t ON t.id = tct2.testid
	WHERE
		t.status = #{testStatusId}
		AND tp.programabbr not in ('PD')
       	AND ap.id = #{currentAssessmentProgramId}
	 	<include refid="Extended_QCControl_Where_Clause" />			 
       	<if test="! hasHighStakesPermission" >
			AND tp.highstake = false
       	</if>         
    	<if test="criteria.sortByColumn != null">
    	ORDER BY
    		<choose>
	      		<when test="criteria.sortByColumn == 'collectionName'">collectionname</when>
	      		<when test="criteria.sortByColumn == 'name'">name</when>
	      		<when test="criteria.sortByColumn == 'testId'">testId</when>
	      		<when test="criteria.sortByColumn == 'externalId'">externalId</when>
	      		<when test="criteria.sortByColumn == 'testInternalName'">testInternalName</when>
	      		<when test="criteria.sortByColumn == 'contentAreaName'">contentAreaName</when>
	      		<when test="criteria.sortByColumn == 'gradeCourseName'">gradeCourseName</when> 
	      		<when test="criteria.sortByColumn == 'assessmentProgramName'">assessmentProgramName</when>
	      		<when test="criteria.sortByColumn == 'testingProgramName'">testingProgramName</when>
	      		<when test="criteria.sortByColumn == 'assessmentName'">assessmentName</when>
	      		<when test="criteria.sortByColumn == 'testInternalName'">testInternalName</when>
	      		<when test="criteria.sortByColumn == 'qcComplete'">qcComplete</when>
	      		<otherwise>testId</otherwise>
	      	</choose>
    	 	<if test="criteria.sortType!=null and criteria.sortType=='desc'">
	    		desc
    	 	</if>
    	 	<if test="criteria.sortType=='asc' or criteria.sortType==null">
    	 		asc
    	 	</if>
		</if>
    	limit #{limitCount} offset #{offset};
  </select>
    
   <select id="countTestsAndTestCollectionsForQCControl" parameterType="edu.ku.cete.domain.content.TestCollectionExample" resultType="java.lang.Integer" >
   	SELECT 
		 count(1) from (
	SELECT
		distinct
	    <include refid="Expanded_QC_Column_List" />	
	FROM
       assessmentprogram ap
       JOIN testingprogram tp ON tp.assessmentprogramid = ap.id
       JOIN assessment asm ON asm.testingprogramid = tp.id
       JOIN assessmentstestcollections atc ON atc.assessmentid = asm.id
       JOIN testcollection tc ON tc.id = atc.testcollectionid
       LEFT JOIN gradeband gb on tc.gradebandid = gb.id
	   LEFT JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	   LEFT JOIN gradecourse gc ON gc.id = tc.gradecourseid or gc.id = tc.courseid
       JOIN contentarea ca ON ca.id = tc.contentareaid       
       JOIN testcollectionstests tct2 ON tct2.testcollectionid = tc.id
       JOIN test t ON t.id = tct2.testid
	WHERE
		t.status = #{testStatusId}
		AND tp.programabbr not in ('PD')
       	AND ap.id = #{currentAssessmentProgramId}
	 	<include refid="Extended_QCControl_Where_Clause" />			 
       	<if test="! hasHighStakesPermission" >
			AND tp.highstake = false
       	</if> ) as qccontrolcount
  </select>  
  
  <select id="selectForAutoGradeBand" resultMap="Auto_Expanded_Result_Map">
	SELECT distinct tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, tc.gradecourseid, tc.gradebandid, tc.contentareaid, 
    gc.id as "gc.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",  ca.name as "contentarea.name", otw.id as operationaltestwindowid
    <if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP' or assessmentProgramCode == 'CPASS'" >
   	   <choose>
       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
       	</when>
       	<otherwise>
         ,stg.id as "stage.id", stg.code as "stage.code", stg.name as "stage.name", stg.sortorder as "stage.sortorder",stg.predecessorid as "stage.predecessorid"
       	</otherwise>
       </choose>
    </if>
	  FROM testcollection tc 
	   JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
	   JOIN assessment asm ON atc.assessmentid = asm.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradeband gb on tc.gradebandid = gb.id
	   JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	   JOIN gradecourse gc ON tc.gradecourseid = gc.id
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON ttsa.id=cattsa.testtypesubjectareaid and ttsa.assessmentid = asm.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	
	   <if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP' or assessmentProgramCode == 'CPASS'" >
	   	   <choose>
	       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
	       	</when>
	       	<otherwise>
		    	JOIN stage stg on tc.stageid=stg.id <if test="stageId != null">and stg.id = #{stageId}</if>
	       	</otherwise>
	       </choose>
		</if>
	WHERE tt.activeflag is true AND t.activeflag is true AND t.qccomplete is true
		AND tc.gradebandid is not null AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
		AND tc.randomizationtype = #{randomizationTypeCode} AND ttsa.assessmentid = #{assessmentId}
		AND cattsa.contentareaid = #{contentAreaId} AND ttsa.testtypeid = #{testTypeId} 
		AND t.status = #{testStatusId} AND gc.id in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id=#{gradeCourseId}))
		AND otw.id = #{operationalTestWindowId} 
		<if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP' or assessmentProgramCode == 'CPASS'" >
	   	   <choose>
	       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
	       	</when>
	       	<otherwise>
				AND tc.stageid is not null
				order by stg.sortorder
	       	</otherwise>
	       </choose>
		</if>
	</select>
	<select id="selectForAutoGradeCourse" resultMap="Auto_Expanded_Result_Map">
	SELECT distinct tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, tc.gradecourseid, tc.gradebandid, tc.contentareaid, 
    gc.id as "gc.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",  ca.name as "contentarea.name", otw.id as operationaltestwindowid
	<if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP' or assessmentProgramCode == 'CPASS'" >
   	   <choose>
       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
       	</when>
       	<otherwise>
         ,stg.id as "stage.id", stg.code as "stage.code", stg.name as "stage.name", stg.sortorder as "stage.sortorder",stg.predecessorid as "stage.predecessorid"
       	</otherwise>
       </choose>
    </if>
	  FROM testcollection tc 
	   JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
	   JOIN assessment asm ON atc.assessmentid = asm.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradecourse gc ON tc.gradecourseid = gc.id
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON ttsa.id=cattsa.testtypesubjectareaid and ttsa.assessmentid = asm.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	 
	    <if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP' or assessmentProgramCode == 'CPASS'" >
	   	   <choose>
	       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
	       	</when>
	       	<otherwise>
		    	JOIN stage stg on tc.stageid=stg.id <if test="stageId != null">and stg.id = #{stageId}</if>
	       	</otherwise>
	       </choose>
		</if> 
	WHERE tt.activeflag is true AND t.activeflag is true AND t.qccomplete is true
		AND tc.gradebandid is null AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
		AND tc.randomizationtype = #{randomizationTypeCode} AND ttsa.assessmentid = #{assessmentId}
		AND cattsa.contentareaid = #{contentAreaId} AND ttsa.testtypeid = #{testTypeId} 
		AND t.status = #{testStatusId} AND gc.id in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id=#{gradeCourseId}))
		AND otw.id = #{operationalTestWindowId} 
		<if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP' or assessmentProgramCode == 'CPASS'" >
	   	   <choose>
	       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
	       	</when>
	       	<otherwise>
				AND tc.stageid is not null
				order by stg.sortorder
	       	</otherwise>
	       </choose>
		</if>
  </select> 
      
  <select id="selectTestCollectionForAutoRegistrationById" resultMap="Expanded_Result_Map">
	SELECT
	   distinct 
	   <include refid="Expanded_AutoRegistration_Column_List"/>
    FROM
	   assessmentprogram ap 
	   JOIN autoregistrationcriteria arc ON arc.assessmentprogramid = ap.id
	   JOIN testingprogram tp ON arc.testingprogramid = tp.id 
	   JOIN assessment asm ON arc.assessmentid = asm.id
	   JOIN assessmentstestcollections atc ON arc.assessmentid = atc.assessmentid
	   JOIN testcollection tc ON atc.testcollectionid = tc.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradecourse gc ON gc.id = tc.gradecourseid
	   JOIN gradecourse igc ON  gc.abbreviatedname = igc.abbreviatedname and igc.contentareaid is null
	   JOIN assessmentprogramgrades apg ON igc.assessmentprogramgradesid = apg.id
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON cattsa.testtypesubjectareaid = ttsa.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	   
    WHERE
		arc.assessmentprogramid = #{assessmentProgramId}
		   and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate) 
		   <!-- and (suspendwindow is null or suspendwindow=false) -->
		   AND arc.testingprogramid = #{testingProgramId}
		   AND arc.assessmentid = #{assessmentId}
		   AND arc.contentareatesttypesubjectareaid = cattsa.id
		   AND arc.contentareatesttypesubjectareaid = 
		   	(select cattsa.id from contentareatesttypesubjectarea cattsa JOIN testtypesubjectarea ttsa ON cattsa.testtypesubjectareaid = ttsa.id where ttsa.testtypeid IN 
		   	(select id from testtype where testtypecode = #{testTypeCode} and activeflag is true ) and ttsa.subjectareaid = (select id from subjectarea where subjectareacode = #{subjectAreaCode})
		   	<if test="assessmentId != null"> and ttsa.assessmentId=#{assessmentId}</if>) 
		   AND apg.gradecode = #{grade}
		   AND t.status = #{testStatusId} and t.qccomplete = true
		   AND tc.gradebandid is null
		   AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
	UNION
	
	SELECT
	   distinct 
	   <include refid="Expanded_AutoRegistration_Column_List"/>
    FROM
	   assessmentprogram ap 
	   JOIN autoregistrationcriteria arc ON arc.assessmentprogramid = ap.id
	   JOIN testingprogram tp ON arc.testingprogramid = tp.id 
	   JOIN assessment asm ON arc.assessmentid = asm.id
	   JOIN assessmentstestcollections atc ON arc.assessmentid = atc.assessmentid
	   JOIN testcollection tc ON atc.testcollectionid = tc.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradeband gb on tc.gradebandid = gb.id
	   JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	   JOIN gradecourse gc on gbgc.gradecourseid = gc.id 
	   JOIN gradecourse igc ON  gc.abbreviatedname = igc.abbreviatedname and igc.contentareaid is null
	   JOIN assessmentprogramgrades apg ON igc.assessmentprogramgradesid = apg.id
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON cattsa.testtypesubjectareaid = ttsa.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	   
    WHERE
		arc.assessmentprogramid = #{assessmentProgramId}
		   and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate) 
		   <!-- and (suspendwindow is null or suspendwindow=false) -->
		   AND arc.testingprogramid = #{testingProgramId}
		   AND arc.assessmentid = #{assessmentId}
		   AND arc.contentareatesttypesubjectareaid = cattsa.id
		   AND arc.contentareatesttypesubjectareaid = 
		   	(select cattsa.id from contentareatesttypesubjectarea cattsa JOIN testtypesubjectarea ttsa ON cattsa.testtypesubjectareaid = ttsa.id where ttsa.testtypeid IN 
		   	(select id from testtype where testtypecode = #{testTypeCode} and activeflag is true) and ttsa.subjectareaid = (select id from subjectarea where subjectareacode = #{subjectAreaCode})
		   	<if test="assessmentId != null"> and ttsa.assessmentId=#{assessmentId}</if>) 
		   AND apg.gradecode = #{grade}
		   AND t.status = #{testStatusId} and t.qccomplete = true
		   AND tc.gradebandid is not null
		   AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
  </select>
  
  <select id="selectTestCollectionForAutoRegistrationByCourse" resultMap="Expanded_Result_Map">
	SELECT
	   distinct 
	   	<include refid="Expanded_AutoRegistration_Column_List"/>
   FROM
	   assessmentprogram ap 
	   JOIN autoregistrationcriteria arc ON arc.assessmentprogramid = ap.id
	   JOIN testingprogram tp ON arc.testingprogramid = tp.id 
	   JOIN assessment asm ON arc.assessmentid = asm.id
	   JOIN assessmentstestcollections atc ON arc.assessmentid = atc.assessmentid
	   JOIN testcollection tc ON atc.testcollectionid = tc.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradecourse gc ON gc.id = tc.gradecourseid
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON cattsa.testtypesubjectareaid = ttsa.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id
	   JOIN operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
     WHERE
		arc.assessmentprogramid = #{assessmentProgramId}
		   and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate) 
		   <!-- and (suspendwindow is null or suspendwindow=false) -->
		   AND arc.testingprogramid = #{testingProgramId}
		   AND arc.assessmentid = #{assessmentId}
		   AND arc.contentareatesttypesubjectareaid = cattsa.id
		   AND arc.contentareatesttypesubjectareaid = 
		   	(select cattsa.id from contentareatesttypesubjectarea cattsa JOIN testtypesubjectarea ttsa ON cattsa.testtypesubjectareaid = ttsa.id where ttsa.testtypeid = 
		   	(select id from testtype where testtypecode = #{testTypeCode}) and ttsa.subjectareaid = (select id from subjectarea where subjectareacode = #{subjectAreaCode})) 
		   AND gc.abbreviatedname = #{gradeName}
		   AND t.status = #{testStatusId} and t.qccomplete = true
		   AND tc.gradebandid is null
		   
	UNION
	
	SELECT
	   distinct 
	   	<include refid="Expanded_AutoRegistration_Column_List"/>
   FROM
	   assessmentprogram ap 
	   JOIN autoregistrationcriteria arc ON arc.assessmentprogramid = ap.id
	   JOIN testingprogram tp ON arc.testingprogramid = tp.id 
	   JOIN assessment asm ON arc.assessmentid = asm.id
	   JOIN assessmentstestcollections atc ON arc.assessmentid = atc.assessmentid
	   JOIN testcollection tc ON atc.testcollectionid = tc.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradeband gb on tc.gradebandid = gb.id
	   JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	   JOIN gradecourse gc on gbgc.gradecourseid = gc.id    
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON cattsa.testtypesubjectareaid = ttsa.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id
	   JOIN operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
     WHERE
		arc.assessmentprogramid = #{assessmentProgramId}
		   and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate) 
		   <!-- and (suspendwindow is null or suspendwindow=false) -->
		   AND arc.testingprogramid = #{testingProgramId}
		   AND arc.assessmentid = #{assessmentId}
		   AND arc.contentareatesttypesubjectareaid = cattsa.id
		   AND arc.contentareatesttypesubjectareaid = 
		   	(select cattsa.id from contentareatesttypesubjectarea cattsa JOIN testtypesubjectarea ttsa ON cattsa.testtypesubjectareaid = ttsa.id where ttsa.testtypeid = 
		   	(select id from testtype where testtypecode = #{testTypeCode}) and ttsa.subjectareaid = (select id from subjectarea where subjectareacode = #{subjectAreaCode})) 
		   AND gc.abbreviatedname = #{gradeName}
		   AND t.status = #{testStatusId} and t.qccomplete = true
		   AND tc.gradebandid is not null		   
  </select>

  <select id="selectByAverageLinkageLevelAndContentArea" resultMap="Expanded_Result_Map">
  	select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradecourse gc on tc.gradecourseid = gc.id
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	where t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and tc.randomizationtype='login' and tc.pooltype = #{poolType} and tc.phasetype = 'EOY'
	 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound} 
	 and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
     and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.abbreviatedname=#{contentAreaCode} 
        <if test="excludeCollections != null" >
        		      and not(tc.name like ANY(ARRAY 
		        <foreach collection="excludeCollections" item="excludeCollection" open="[" close="]" separator="," >
		        	#{excludeCollection}
		        </foreach>))
        </if>
  </select>
  <select id="selectByAverageLinkageLevelAndContentAreaWithGradeBand" resultMap="Expanded_Result_Map">
  	select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradeband gb on tc.gradebandid = gb.id
	join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	join gradecourse gc on gbgc.gradecourseid = gc.id
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	where  t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and tc.randomizationtype='login' and tc.pooltype = #{poolType} and tc.phasetype = 'EOY'
	 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound} 
	 and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
	 and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.abbreviatedname=#{contentAreaCode} 
	   <if test="excludeCollections != null" >
        		      and not(tc.name like ANY(ARRAY 
		        <foreach collection="excludeCollections" item="excludeCollection" open="[" close="]" separator="," >
		        	#{excludeCollection}
		        </foreach>))
       </if>
  </select>
  
  <select id="selectByAverageLinkageLevelAndContentAreaForDLMMultiAssign" resultMap="Expanded_Result_Map">
  	select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	<if test="poolType != null and poolType == 'MULTIEEOFC'" >
        join gradecourse gc on tc.courseid = gc.id
    </if>
    <if test="poolType != null and poolType != 'MULTIEEOFC'" >
        join gradecourse gc on tc.gradecourseid = gc.id
    </if>
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	where t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and tc.randomizationtype='enrollment' and tc.pooltype = #{poolType} and tc.phasetype = 'EOY'
	 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound} 
	 and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.abbreviatedname=#{contentAreaCode} 
	 and otw.id = #{operationalTestWindowId}
         <if test="excludeCollections != null" >
        		      and tc.id not in 
		        <foreach collection="excludeCollections" item="excludeCollection" open="(" close=")" separator="," >
		        	#{excludeCollection}
		        </foreach>
         </if>
  </select>
  <select id="selectByAverageLinkageLevelAndContentAreaWithGradeBandForDLMMultiAssign" resultMap="Expanded_Result_Map">
  	select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradeband gb on tc.gradebandid = gb.id
	join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	join gradecourse gc on gbgc.gradecourseid = gc.id
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	where  t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and tc.randomizationtype='enrollment' and tc.pooltype = #{poolType} and tc.phasetype = 'EOY'
	 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound} 
	 and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.abbreviatedname=#{contentAreaCode} 
	 and otw.id = #{operationalTestWindowId}
	   <if test="excludeCollections != null" >
        		      and tc.id not in 
		        <foreach collection="excludeCollections" item="excludeCollection" open="(" close=")" separator="," >
		        	#{excludeCollection}
		        </foreach>
       </if>
  </select>
  
  <select id="itiSelectByAverageLinkageLevelAndContentArea" resultMap="Expanded_Result_Map">
  	select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradecourse gc on tc.gradecourseid = gc.id
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	join testsection ts on ts.testid = tct.testid
	join testsectionstaskvariants tstv on tstv.testsectionid = ts.id and (tstv.taskvariantid = (select taskvariantid from testsectionstaskvariants where testsectionid = ts.id limit 1 ))
 	join taskvariantcontentframeworkdetail tvcfd on tvcfd.taskvariantid = tstv.taskvariantid
	join contentframeworkdetail cfd on cfd.id = tvcfd.contentframeworkdetailid
	<if test="pnpAttributeName != null" >
      join testaccessibilityflag taf on (taf.testid = t.id and taf.accessibilityflagcode = #{pnpAttributeName}) 
    </if>
    <if test="pnpAttributeName == null" >
      left join testaccessibilityflag taf on taf.testid = t.id
    </if>
	where tc.phasetype = 'INSTRUCTIONAL' 
	 <if test="pnpAttributeName == null" >
       and taf.accessibilityflagcode is null
      </if>
	 and t.qccomplete = true and t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound} 
	 and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.id=#{contentAreaId} and tc.randomizationtype = 'enrollment' and cfd.contentcode in
	 <foreach close=")" collection="eElement" item="eElementItem" open="(" separator=",">
				       #{eElementItem}
				</foreach>
	 and t.id not in (
	   select st.testid
	   from studentstests st
	   join testsession ts on ts.testcollectionid = st.testcollectionid and ts.source = #{sourceCode}
       where st.studentid = #{studentId}
       and st.activeflag = true 
       and st.status in (
         select c.id
         from category c
         join categorytype ct on ct.id = c.categorytypeid 
         where categorycode in ('unused', 'inprogress','complete')
         and ct.typecode = 'STUDENT_TEST_STATUS'
       )
     )
     and tstv.testletid not in (
       --testlets that have a sensitivity tag that the student is set not to get
	   select testletid
	   from studentsensitivitytag sst
	   join testletsensitivitytag tst on sst.sensitivitytagid = tst.sensitivitytagid
	   where sst.activeflag is true
	   and sst.studentid = #{studentId}
     )
  </select>
  
  <select id="itiSelectByAverageLinkageLevelAndContentAreaWithGradeBand" resultMap="Expanded_Result_Map">
  	select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradeband gb on tc.gradebandid = gb.id
	join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	join gradecourse gc on gbgc.gradecourseid = gc.id
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	join testsection ts on ts.testid = tct.testid
	join testsectionstaskvariants tstv on tstv.testsectionid = ts.id and (tstv.taskvariantid = (select taskvariantid from testsectionstaskvariants where testsectionid = ts.id limit 1 ))
 	 join taskvariantcontentframeworkdetail tvcfd on tvcfd.taskvariantid = tstv.taskvariantid
	 join contentframeworkdetail cfd on cfd.id = tvcfd.contentframeworkdetailid
	<if test="pnpAttributeName != null" >
      join testaccessibilityflag taf on (taf.testid = t.id and taf.accessibilityflagcode = #{pnpAttributeName}) 
    </if>
    <if test="pnpAttributeName == null" >
      left join testaccessibilityflag taf on taf.testid = t.id
    </if>
	where tc.phasetype = 'INSTRUCTIONAL'
	 <if test="pnpAttributeName == null" >
       and taf.accessibilityflagcode is null
      </if>
	 and t.qccomplete = true and t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound} 
	 and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.id=#{contentAreaId} and tc.randomizationtype = 'enrollment' and cfd.contentcode in
	 <foreach close=")" collection="eElement" item="eElementItem" open="(" separator=",">
				       #{eElementItem}
				</foreach>
	and t.id not in (
	   select st.testid
	   from studentstests st
	   join testsession ts on ts.testcollectionid = st.testcollectionid and ts.source = #{sourceCode}
       where st.studentid = #{studentId}
       and st.activeflag = true 
       and st.status in (
         select c.id
         from category c
         join categorytype ct on ct.id = c.categorytypeid 
         where categorycode in ('unused', 'inprogress','complete')
         and ct.typecode = 'STUDENT_TEST_STATUS'
       )
     )
     and tstv.testletid not in (
       --testlets that have a sensitivity tag that the student is set not to get
	   select testletid
	   from studentsensitivitytag sst
	   join testletsensitivitytag tst on sst.sensitivitytagid = tst.sensitivitytagid
	   where sst.activeflag is true
	   and sst.studentid = #{studentId}
     )
  </select>
  
   <select id="itiNoTestCollectionReason" resultType="java.lang.Long">
  	select distinct tc.id
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradeband gb on tc.gradebandid = gb.id
	join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	join gradecourse gc on gbgc.gradecourseid = gc.id
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	join testsection ts on ts.testid = tct.testid
	join testsectionstaskvariants tstv on tstv.testsectionid = ts.id and (tstv.taskvariantid = (select taskvariantid from testsectionstaskvariants where testsectionid = ts.id limit 1 ))
 	left join taskvariantcontentframeworkdetail tvcfd on tvcfd.taskvariantid = tstv.taskvariantid
	left join contentframeworkdetail cfd on cfd.id = tvcfd.contentframeworkdetailid
	<if test="pnpAttributeName != null" >
      join testaccessibilityflag taf on taf.testid = t.id and taf.accessibilityflagcode = #{pnpAttributeName} 
    </if>
	where tc.phasetype = 'INSTRUCTIONAL' and t.qccomplete = true and t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound} 
	 and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
	 and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.id=#{contentAreaId} and tc.randomizationtype = 'enrollment' and cfd.contentcode = #{eElement} 
	union 
	select distinct tc.id 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradecourse gc on tc.gradecourseid = gc.id
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	join testsection ts on ts.testid = tct.testid
	join testsectionstaskvariants tstv on tstv.testsectionid = ts.id and (tstv.taskvariantid = (select taskvariantid from testsectionstaskvariants where testsectionid = ts.id limit 1 ))
 	left join taskvariantcontentframeworkdetail tvcfd on tvcfd.taskvariantid = tstv.taskvariantid
	left join contentframeworkdetail cfd on cfd.id = tvcfd.contentframeworkdetailid
	<if test="pnpAttributeName != null" >
      join testaccessibilityflag taf on taf.testid = t.id and taf.accessibilityflagcode = #{pnpAttributeName} 
    </if>
	where tc.phasetype = 'INSTRUCTIONAL' and t.qccomplete = true and t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound} 
	 and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
     and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.id=#{contentAreaId} and tc.randomizationtype = 'enrollment' and cfd.contentcode = #{eElement}
	limit 1
  </select>
  
 <resultMap type="edu.ku.cete.domain.test.ContentFrameworkDetail" id="Contentcode_Result"> 
  	 <result property="contentCode" column="contentcode"/> 
  	 <result property="description" column="description"/>
  	 <result property="enableEEFlag" column="enableEEFlag"/> 
  	 <result property="testSepcificationId" column="testspecificationid"/>
  	 <result property="id" column="id"/> 
  	 <result property="studentTestFlagExists" column="studenttestflag"/>
  	 <result property="criteriaNumber" column="criteria"/>
  	 <result property="eeInBluePrint" column="eeinblueprint"/>
  	 <collection property="groupsNumbers" ofType="java.lang.Long" javaType="list">
  	 	<result column="groupnumber"/>
  	 </collection>  	 
 </resultMap>
  
 <select id="itiSelectContentCodeUsedInElgibleTestCollections" resultMap="Contentcode_Result">
    WITH task_cfd AS (select distinct on (cfd.contentcode) cfd.contentcode
	    from testspecification tspec
	    join test t on tspec.id = t.testspecificationid
	    join testcollectionstests tct on t.id = tct.testid
	    join testcollection tc on tc.id = tct.testcollectionid
	    join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tct.testcollectionid
	    join operationaltestwindowstate otws on otws.operationaltestwindowid = otwtc.operationaltestwindowid
	    join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	    join testsection ts on ts.testid = t.id
	    join testsectionstaskvariants tstv on ts.id=tstv.testsectionid
	    join taskvariantcontentframeworkdetail tvcfd on tvcfd.taskvariantid = tstv.taskvariantid 
	    join contentframeworkdetail cfd on cfd.id = tvcfd.contentframeworkdetailid
	    where tspec.externalid = #{testSpecExternalId}
		and t.status = (select id from category where categorycode='DEPLOYED')
		and t.activeflag = true and t.qccomplete = true
	    and tc.phasetype = 'INSTRUCTIONAL' and tc.randomizationtype = 'enrollment' 
	    and otws.stateid = #{stateId}
	  	and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate))
	   select distinct on (cfd.contentcode) cfd.contentcode, cfd.description, cfd.id, 
		case when (select count(contentcode) from task_cfd where contentcode=cfd.contentcode) &gt; 0 then
			true
		else
			false
		end as enableEEFlag, false as studentTestFlagExists, null as criteria, null as groupnumber, false as eeinblueprint
	    from lmassessmentmodelrule lmamr
	    join contentframeworkdetail cfd on cfd.id = lmamr.contentframeworkdetailid
	    join testspecification tspec on tspec.id = lmamr.testspecificationid 
	  where tspec.externalid = #{testSpecExternalId}
	 order by cfd.contentcode, enableeeflag desc
  </select>    
  
 <select id="itiSelectContentCodeUsedInElgibleTestCollectionsForSingleEE" resultMap="Contentcode_Result">
    WITH task_cfd AS (select distinct on (cfd.contentcode) cfd.contentcode
	    from testspecification tspec
	    join test t on tspec.id = t.testspecificationid 
	    join testcollectionstests tct on t.id = tct.testid
	    join testcollection tc on tc.id = tct.testcollectionid
	    join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tct.testcollectionid
	    join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	    join operationaltestwindowstate otws on otws.operationaltestwindowid = otwtc.operationaltestwindowid
	    join testsection ts on ts.testid = t.id
	    join testsectionstaskvariants tstv on ts.id=tstv.testsectionid
	    join taskvariantcontentframeworkdetail tvcfd on tvcfd.taskvariantid = tstv.taskvariantid 
	    join contentframeworkdetail cfd on cfd.id = tvcfd.contentframeworkdetailid
	    where tspec.externalid = #{testSpecExternalId}
	    and t.status = (select id from category where categorycode='DEPLOYED')
	    and t.activeflag = true and t.qccomplete = true
	    and tc.phasetype = 'INSTRUCTIONAL'
		and tc.randomizationtype = 'enrollment'
		and otws.stateid = #{stateId}
	  	and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate))
	    select * from (select cfd.contentcode, cfd.description, cfd.id, bp.criteria, bp.groupnumber,
		case when (select count(contentcode) from task_cfd where contentcode=cfd.contentcode) &gt; 0 then
			true
		else
			false
		end as enableEEFlag,
		case when itihis.totaltests > 0 THEN
			true
		else 
			false
		end as studenttestflag,
		case when bp.id &gt; 0 then
			true
		else
			false
		end as  eeinblueprint		
	    from lmassessmentmodelrule lmamr
	    join contentframeworkdetail cfd on cfd.id = lmamr.contentframeworkdetailid
	    join testspecification tspec on tspec.id = lmamr.testspecificationid
	    left join (select bpr.id, bpr.criteria, bpr.groupnumber, bpee.essentialelementid from blueprint bpr 
	            join blueprintessentialelements bpee on bpr.id = bpee.blueprintid 
	            where bpr.contentareaid = #{contentAreaId} and bpr.activeflag is true
	            and bpr.gradecourseid in (select id from gradecourse where abbreviatedname = #{gradeCourseCode} 
	            and contentareaid = #{contentAreaId})
	     	)bp on bp.essentialelementid = lmamr.contentframeworkdetailid	    	    
	    left join (SELECT itih.essentialelementid, count(st.id) as totaltests
	    	from ititestsessionhistory itih
	    	join testsession ts on ts.id = itih.testsessionid and ts.rosterid = itih.rosterid
	    	join studentstests st on st.testsessionid = itih.testsessionid and st.studentid = itih.studentid
	    	where itih.studentid =#{studentId} and itih.rosterid = #{rosterId} and itih.activeflag is true
				and ts.activeflag IS true and st.activeflag is true 
				and st.status IN (SELECT id FROM category WHERE categorycode IN ('unused', 'inprogress', 'complete')
		    		and categorytypeid = (SELECT id FROM categorytype WHERE typecode = 'STUDENT_TEST_STATUS'))
				group by itih.essentialelementid
		)itihis on itihis.essentialelementid = lmamr.contentframeworkdetailid
	  where tspec.externalid = #{testSpecExternalId}
	  union
	  select cfd.contentcode, cfd.description, cfd.id, bp.criteria, bp.groupnumber, false as enableEEFlag, false as studenttestflag, true as  eeinblueprint		
	    from contentframeworkdetail cfd 
	    join blueprintessentialelements bpee on bpee.essentialelementid = cfd.id	    	   
	    join blueprint bp on bp.id = bpee.blueprintid 
	    join gradecourse gc on gc.id = bp.gradecourseid	    
	    where cfd.id in (select distinct bpee.essentialelementid FROM blueprintessentialelements bpee	    	   
				join blueprint bp on bp.id = bpee.blueprintid 
				join gradecourse gc on gc.id = bp.gradecourseid
				where bp.contentareaid = #{contentAreaId} and bp.activeflag is true and gc.abbreviatedname = #{gradeCourseCode}
			  except
			     select lmamr.contentframeworkdetailid 
			       from lmassessmentmodelrule lmamr 
			       join testspecification tp on tp.id = lmamr.testspecificationid 
			       where tp.externalid = #{testSpecExternalId}
			)	          
	    and bp.contentareaid = #{contentAreaId} and bp.activeflag is true
	    and gc.abbreviatedname = #{gradeCourseCode}
	  )itibpcfd order by itibpcfd.contentcode, itibpcfd.enableeeflag desc
  </select>
  
  <select id="selectForDlmAutoRegistrationGradeBand" resultMap="Expanded_Result_Map">
  	select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradeband gb on tc.gradebandid = gb.id
	join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	join gradecourse gc on gbgc.gradecourseid = gc.id
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	join testsection ts on ts.testid = tct.testid
	join testsectionstaskvariants tstv on tstv.testsectionid = ts.id 
 	left join taskvariantcontentframeworkdetail tvcfd on tvcfd.taskvariantid = tstv.taskvariantid
	left join contentframeworkdetail cfd on cfd.id = tvcfd.contentframeworkdetailid
	where tc.courseid is null and 
	 tc.phasetype = 'EOY' and tc.pooltype=#{poolType} and t.qccomplete = true and t.testspecificationid = #{testSpecId}
	 and t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound}
     and otw.id = #{operationalWindowId}
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.abbreviatedname=#{contentAreaCode} and tc.randomizationtype = 'enrollment' and cfd.contentcode in
	 <foreach close=")" collection="eElement" item="eElementItem" open="(" separator=",">
	 	#{eElementItem}
	</foreach>
  </select>
  
  <select id="selectForDlmAutoRegistrationGradeCourse" resultMap="Expanded_Result_Map">
  	select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	<if test='poolType != "MULTIEEOFC"'>
	join gradecourse gc on tc.gradecourseid = gc.id
	</if>
	<if test='poolType == "MULTIEEOFC"'>
	join gradecourse gc on tc.courseid = gc.id
	</if>
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	join testsection ts on ts.testid = tct.testid
	join testsectionstaskvariants tstv on tstv.testsectionid = ts.id 
 	left join taskvariantcontentframeworkdetail tvcfd on tvcfd.taskvariantid = tstv.taskvariantid
	left join contentframeworkdetail cfd on cfd.id = tvcfd.contentframeworkdetailid
	where tc.phasetype = 'EOY' and tc.pooltype=#{poolType} and t.qccomplete = true and t.testspecificationid = #{testSpecId}
	and t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound} 
      and otw.id = #{operationalWindowId}
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.abbreviatedname=#{contentAreaCode} and tc.randomizationtype = 'enrollment' and cfd.contentcode in
	 <foreach close=")" collection="eElement" item="eElementItem" open="(" separator=",">
				       #{eElementItem}
				</foreach>
	</select>
  
   <resultMap type="edu.ku.cete.web.DLMTestStatusExtractDTO" id="dlmTestStatusMap">
     <result property="studentId" column="studentid"/>
     <result property="subjectId" column="subjectid"/> 
  	 <result property="subjectName" column="subject"/> 
  	 <result property="stateName" column="state"/>
  	 <result property="districtId" column="districtid"/> 
  	 <result property="districtName" column="districtname"/>
  	 <result property="districtIdentifier" column="districtdisplayidentifier"/>
  	 <result property="attendanceSchoolId" column="attendanceschoolid"/>
  	 <result property="schoolName" column="schoolname"/>
  	 <result property="schoolIdentifier" column="schooldisplayidentifier"/> 
  	 <result property="educatorId" column="educatorId"/>
  	 <result property="educatorLastName" column="educatorLastName"/>
  	 <result property="educatorFirstName" column="educatorFirstName"/>
  	 <result property="grade" column="grade"/>
  	 <result property="gradeId" column="gradeid"/>
  	 <result property="gradeLevel" column="gradelevel"/>
  	 <result property="studentLaststName" column="studentLastName"/>
  	 <result property="studentFirstName" column="studentFirstName"/>
  	 <result property="stateStudentId" column="statestudentidentifier"/>
  	 <result property="localStudentId" column="localstudentidentifier"/>
  	 <result property="stateModel" column="stateModel"/>
  	 <result property="numofEEs" column="numofEEs"/>
  	 <result property="instTestscompleted" column="numOfInstructTestsCompleted"/>
  	 <result property="instTestsNotStarted" column="numOfInstructTestsNotStarted"/>
  	 <result property="instTestsInProgress" column="numOfInstructTestsInProgress"/>
  	 <result property="eoytTestscompleted" column="numOfEoyTestsCompleted"/>
  	 <result property="eoyTestsNotStarted" column="numOfEoyTestsNotStarted"/>
  	 <result property="eoyTestsInProgress" column="numOfEoyTestsInProgress"/>
  	 <result property="attendanceSchoolId" column="attendanceschoolid"/>
  	 <result property="fieldTestsCompleted" column="numOfFieldTestsCompleted"/>
  	 <result property="itiContentAvailable" column="isiticontentavailable"/>
  	 <result property="testingCycleName" column="testingcyclename"/>
   </resultMap> 
  
  <select id="dlmTestStatusReport" resultMap="dlmTestStatusMap" parameterType="map">
/*NO LOAD BALANCE*/
WITH teststatus as (select id,categorycode from category where categorytypeid=(select id from categorytype where typecode='STUDENT_TEST_STATUS')),
 statepool as (select pooltype from organization where id=#{contractOrgId})
SELECT distinct conArea.name as subject, 
       r.attendanceschoolid,
      au.uniquecommonidentifier as educatorId,
       au.surName as educatorLastName,
      au.firstName as educatorFirstName,
      gc.name as grade ,
      stu.legalLastname as studentLastName,
      stu.legalFirstName as studentFirstName,
      stu.statestudentidentifier as statestudentidentifier,
      e.localstudentidentifier as localstudentidentifier,   
      stu.id as studentid,
      (select pooltype from statepool) as stateModel,
     (select max(minimumnumberofees) from studentstests stuTestsInner
		inner join test t on stuTestsInner.testid=t.id 
		inner join testspecification tspec on tspec.id=t.testspecificationid 
		inner join testsession tsinner on stuTestsInner.testsessionid=tsinner.id
		inner join testcollection tcinner on tsinner.testcollectionid=tcinner.id
		inner join operationaltestwindow otwinner on tsinner.operationaltestwindowid = otwinner.id
		where tcinner.phasetype = 'EOY'
		and stuTestsInner.createddate &gt;=#{eoyFromDate} and stuTestsInner.modifieddate &lt;=#{eoyToDate}
		and tsinner.rosterid = r.id and stuTestsInner.studentid=stu.id
		and stuTestsInner.activeflag is true and tsinner.activeflag is true
		and otwinner.testenrollmentmethodid != (select id from testenrollmentmethod where methodcode = 'MLTASGNFT')) as numofEEs,
      (select count(stuTestsInner.testsessionid) from studentstests stuTestsInner
		inner join testcollection tcinner on stuTestsInner.testcollectionid=tcinner.id
		inner join testsession tsinner on stuTestsInner.testsessionid=tsinner.id
		where tcinner.phasetype = 'INSTRUCTIONAL'
		and stuTestsInner.createddate &gt;=#{iniFromDate} and stuTestsInner.modifieddate &lt;=#{iniToDate}
		and tsinner.rosterid = r.id and stuTestsInner.studentid=stu.id
		and stuTestsInner.status = (select id from teststatus where categorycode='complete')
		and stuTestsInner.activeflag is true and tsinner.activeflag is true) as numOfInstructTestsCompleted,
      (select count(stuTestsInner.testsessionid) from studentstests stuTestsInner
		inner join testcollection tcinner on stuTestsInner.testcollectionid=tcinner.id
		inner join testsession tsinner on stuTestsInner.testsessionid=tsinner.id
		where tcinner.phasetype = 'INSTRUCTIONAL'
		and stuTestsInner.createddate &gt;=#{iniFromDate} and stuTestsInner.modifieddate &lt;=#{iniToDate}
		and tsinner.rosterid = r.id and stuTestsInner.studentid=stu.id
		and stuTestsInner.status = (select id from teststatus where categorycode='unused')
		and stuTestsInner.activeflag is true and tsinner.activeflag is true) as numOfInstructTestsNotStarted,
      (select count(stuTestsInner.testsessionid) from studentstests stuTestsInner
		inner join testcollection tcinner on stuTestsInner.testcollectionid=tcinner.id
		inner join testsession tsinner on stuTestsInner.testsessionid=tsinner.id
		where tcinner.phasetype = 'INSTRUCTIONAL'
		and stuTestsInner.createddate &gt;=#{iniFromDate} and stuTestsInner.modifieddate &lt;=#{iniToDate}
		and tsinner.rosterid = r.id and stuTestsInner.studentid=stu.id
		and stuTestsInner.status = (select id from teststatus where categorycode='inprogress')
		and stuTestsInner.activeflag is true and tsinner.activeflag is true) as numOfInstructTestsInProgress,
      (select count(stuTestsInner.testsessionid) from studentstests stuTestsInner
		inner join testcollection tcinner on stuTestsInner.testcollectionid=tcinner.id
		inner join testsession tsinner on stuTestsInner.testsessionid=tsinner.id
		inner join operationaltestwindow otwinner on tsinner.operationaltestwindowid = otwinner.id
		where tcinner.phasetype = 'EOY'
		and stuTestsInner.createddate &gt;=#{eoyFromDate} and stuTestsInner.modifieddate &lt;=#{eoyToDate}
		and tsinner.rosterid = r.id and stuTestsInner.studentid=stu.id
		and stuTestsInner.status = (select id from teststatus where categorycode='complete')
		and stuTestsInner.activeflag is true and tsinner.activeflag is true
		and otwinner.testenrollmentmethodid != (select id from testenrollmentmethod where methodcode = 'MLTASGNFT')) as numOfEoyTestsCompleted,
      (select count(stuTestsInner.testsessionid) from studentstests stuTestsInner
		inner join testcollection tcinner on stuTestsInner.testcollectionid=tcinner.id
		inner join testsession tsinner on stuTestsInner.testsessionid=tsinner.id
		inner join operationaltestwindow otwinner on tsinner.operationaltestwindowid = otwinner.id
		where tcinner.phasetype = 'EOY'
		and stuTestsInner.createddate &gt;=#{eoyFromDate} and stuTestsInner.modifieddate &lt;=#{eoyToDate}
		and tsinner.rosterid = r.id and stuTestsInner.studentid=stu.id
		and stuTestsInner.status = (select id from teststatus where categorycode='unused')
		and stuTestsInner.activeflag is true and tsinner.activeflag is true
		and otwinner.testenrollmentmethodid != (select id from testenrollmentmethod where methodcode = 'MLTASGNFT')) as numOfEoyTestsNotStarted,
      (select count(stuTestsInner.testsessionid) from studentstests stuTestsInner
		inner join testcollection tcinner on stuTestsInner.testcollectionid=tcinner.id
		inner join testsession tsinner on stuTestsInner.testsessionid=tsinner.id
		inner join operationaltestwindow otwinner on tsinner.operationaltestwindowid = otwinner.id
		where tcinner.phasetype = 'EOY'
		and stuTestsInner.createddate &gt;=#{eoyFromDate} and stuTestsInner.modifieddate &lt;=#{eoyToDate}
		and tsinner.rosterid = r.id and stuTestsInner.studentid=stu.id
		and stuTestsInner.status = (select id from teststatus where categorycode='inprogress')
		and stuTestsInner.activeflag is true and tsinner.activeflag is true
		and otwinner.testenrollmentmethodid != (select id from testenrollmentmethod where methodcode = 'MLTASGNFT')) as numOfEoyTestsInProgress,
      (select count(stuTestsInner.testsessionid) from studentstests stuTestsInner
		inner join testcollection tcinner on stuTestsInner.testcollectionid=tcinner.id
		inner join testsession tsinner on stuTestsInner.testsessionid=tsinner.id
		inner join operationaltestwindow otwinner on tsinner.operationaltestwindowid = otwinner.id
		where tcinner.phasetype = 'EOY'
		and stuTestsInner.createddate &gt;= #{eoyFromDate} and stuTestsInner.modifieddate &lt;= #{eoyToDate}
		and tsinner.rosterid = r.id and stuTestsInner.studentid=stu.id
		and stuTestsInner.status = (select id from teststatus where categorycode = 'complete')
		and stuTestsInner.activeflag is true and tsinner.activeflag is true
		and otwinner.testenrollmentmethodid = (select id from testenrollmentmethod where methodcode = 'MLTASGNFT')) as numOfFieldTestsCompleted
    FROM student stu
    INNER JOIN studentassessmentprogram sap ON sap.studentid = stu.id
    INNER JOIN studentstests stuTests on stu.id=stuTests.studentid
	INNER JOIN testsession ts ON stuTests.testsessionid = ts.id
	INNER JOIN testcollection tc on ts.testcollectionid = tc.id
	INNER JOIN enrollment e ON e.id = stuTests.enrollmentid
	INNER JOIN enrollmentsrosters er ON (er.rosterid = ts.rosterid and e.id = er.enrollmentid)
	INNER JOIN roster r ON ts.rosterid=r.id 				
	INNER JOIN aartuser au on au.id = r.teacherid
	INNER JOIN contentarea conArea ON conArea.id = r.statesubjectareaid
	INNER JOIN gradecourse gc ON e.currentgradelevel = gc.id
    where sap.activeflag is true 
    	and stu.activeflag is true 
    	and stuTests.activeflag is true 
    	and ts.activeflag is true 
        and er.activeflag is true 
        and e.activeflag is true 
        and r.activeflag is true 
        and e.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} 
        and r.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
        and ts.schoolyear = #{currentSchoolYear, jdbcType=INTEGER}
        and r.attendanceschoolid = #{organizationId}
        and tc.phasetype = ANY(ARRAY['EOY','INSTRUCTIONAL'])
	--Instructional
	and ((stuTests.createddate &gt;= #{iniFromDate} and stuTests.modifieddate &lt;= #{iniToDate})
	--EOY 
		OR (stuTests.createddate &gt;= #{eoyFromDate} and stuTests.modifieddate &lt;= #{eoyToDate}) )
	<if test="isTeacher">
		AND r.teacherid = #{educatorId,jdbcType=BIGINT}
	</if>	
	AND sap.assessmentprogramid = (select id from assessmentprogram where abbreviatedname = 'DLM')	
    order by subject, r.attendanceschoolid, educatorLastName, studentLastName
  </select>
  
   <resultMap type="edu.ku.cete.model.ComplexityBandDao" id="complexity_Result_Map">
   		<result property="id" column="id"/>
   		<result property="bandName" column="bandname"/>
   		<result property="bandCode" column="bandcode"/>
   		<result property="minRange" column="minrange"/>
   		<result property="maxRange" column="maxrange"/>
   </resultMap> 
  
  <select id="getComplexityBandById" parameterType="Long" resultMap="complexity_Result_Map">
  	select * from complexityband
  	where id = #{id, jdbcType=BIGINT}
  </select>
  
  <select id="selectTestCollectionById" parameterType="java.lang.Long" resultMap="BaseResultMap">
    select  tc.id, tc.name, tc.randomizationtype, tc.gradecourseid, 
    	tc.contentareaid, tc.createdate, tc.modifieddate, tc.originationcode, otw.operationaltestwindowid, tc.systemselectoptionid 
    from testcollection tc
    left join 
	(select otwtc.testcollectionid, otw.id as operationaltestwindowid
	 from  operationaltestwindowstestcollections otwtc 
	     join operationaltestwindow otw ON (otw.id = otwtc.operationaltestwindowid)
	     join operationaltestwindowstate otws ON otw.id=otws.operationaltestwindowid and otws.activeflag is true
	      where otwtc.testcollectionid = #{testCollectionId,jdbcType=BIGINT}  and otw.effectivedate &lt;= now() AND now() &lt;= otw.expirydate
	      and otwtc.activeflag = true and  otw.activeflag = true
	      and otws.stateid=#{stateId,jdbcType=BIGINT}
	) as otw on otw.testcollectionid = tc.id
   where tc.id = #{testCollectionId,jdbcType=BIGINT}
  </select>
  
  <select id="selectForAutoGradeBandWithTestExternalId" resultMap="Auto_Expanded_Result_Map">
	SELECT distinct tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, tc.gradecourseid, tc.gradebandid, tc.contentareaid, 
    gc.id as "gradecourse.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",  ca.name as "contentarea.name", otw.id as operationaltestwindowid
    <if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP'" >
   	   <choose>
       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
       	</when>
       	<otherwise>
         ,stg.id as "stage.id", stg.code as "stage.code", stg.name as "stage.name", stg.sortorder as "stage.sortorder",stg.predecessorid as "stage.predecessorid"
       	</otherwise>
       </choose>
    </if>
	  FROM testcollection tc 
	   JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
	   JOIN assessment asm ON atc.assessmentid = asm.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradeband gb on tc.gradebandid = gb.id
	   JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	   JOIN gradecourse gc ON tc.gradecourseid = gc.id
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON ttsa.id=cattsa.testtypesubjectareaid and ttsa.assessmentid = asm.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	
	   <if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP'" >
	   	   <choose>
	       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
	       	</when>
	       	<otherwise>
		    	JOIN stage stg on tc.stageid=stg.id   
	       	</otherwise>
	       </choose>
		</if>
	WHERE tt.activeflag is true AND t.activeflag is true AND t.qccomplete is true
		AND tc.gradebandid is not null AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
		AND (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate) 
		<!-- AND (otw.suspendwindow is null or otw.suspendwindow=false) -->
		AND tc.randomizationtype = #{randomizationTypeCode} AND ttsa.assessmentid = #{assessmentId}
		AND cattsa.contentareaid = #{contentAreaId} AND ttsa.testtypeid = #{testTypeId} 
		AND t.status = #{testStatusId} AND gc.id in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id=#{gradeCourseId}))
		AND t.externalid = #{testExternalId,jdbcType=BIGINT}
		<if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP'" >
	   	   <choose>
	       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
	       	</when>
	       	<otherwise>
				AND tc.stageid is not null
				order by stg.sortorder
	       	</otherwise>
	       </choose>
		</if>
	</select>
	<select id="selectForAutoGradeCourseWithTestExternalId" resultMap="Auto_Expanded_Result_Map">
	SELECT distinct tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, tc.gradecourseid, tc.gradebandid, tc.contentareaid, 
    gc.id as "gradecourse.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",  ca.name as "contentarea.name", otw.id as operationaltestwindowid
	<if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP'" >
   	   <choose>
       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
       	</when>
       	<otherwise>
         ,stg.id as "stage.id", stg.code as "stage.code", stg.name as "stage.name", stg.sortorder as "stage.sortorder",stg.predecessorid as "stage.predecessorid"
       	</otherwise>
       </choose>
    </if>
	  FROM testcollection tc 
	   JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
	   JOIN assessment asm ON atc.assessmentid = asm.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradecourse gc ON tc.gradecourseid = gc.id
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON ttsa.id=cattsa.testtypesubjectareaid and ttsa.assessmentid = asm.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	 
	   <if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP'" >
	   	   <choose>
	       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
	       	</when>
	       	<otherwise>
		    	JOIN stage stg on tc.stageid=stg.id   
	       	</otherwise>
	       </choose>
		</if> 
	WHERE tt.activeflag is true AND t.activeflag is true AND t.qccomplete is true
		AND tc.gradebandid is null AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
		AND (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate) 
		<!-- AND (otw.susjava.util.ArrayListpendwindow is null or otw.suspendwindow=false) -->
		AND tc.randomizationtype = #{randomizationTypeCode} AND ttsa.assessmentid = #{assessmentId}
		AND cattsa.contentareaid = #{contentAreaId} AND ttsa.testtypeid = #{testTypeId} 
		AND t.status = #{testStatusId} AND gc.id in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id=#{gradeCourseId}))
		AND t.externalid = #{testExternalId,jdbcType=BIGINT} 
		<if test="assessmentProgramCode == 'KAP' or assessmentProgramCode == 'AMP'" >
	   	   <choose>
	       	<when test="contentAreaCode == 'SS' and assessmentCode == 'SCD'">
	       	</when>
	       	<otherwise>
				AND tc.stageid is not null
				order by stg.sortorder
	       	</otherwise>
	       </choose>
		</if>
  </select>
 <select id="selectForAMPPPGradeBandWithTestExternalId" resultMap="Auto_Expanded_Result_Map">
	SELECT distinct tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, tc.gradecourseid, tc.gradebandid, tc.contentareaid, 
    gc.id as "gradecourse.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",  ca.name as "contentarea.name", otw.id as operationaltestwindowid
	  FROM testcollection tc 
	   JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
	   JOIN assessment asm ON atc.assessmentid = asm.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradeband gb on tc.gradebandid = gb.id
	   JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	   JOIN gradecourse gc ON tc.gradecourseid = gc.id
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON ttsa.id=cattsa.testtypesubjectareaid and ttsa.assessmentid = asm.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	
	WHERE tt.activeflag is true AND t.activeflag is true AND t.qccomplete is true
		AND tc.gradebandid is not null AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
		AND tc.randomizationtype = #{randomizationTypeCode} AND ttsa.assessmentid = #{assessmentId}
		AND cattsa.contentareaid = #{contentAreaId} AND ttsa.testtypeid = #{testTypeId} 
		AND gc.id in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id=#{gradeCourseId}))
		AND t.externalid = #{testExternalId,jdbcType=BIGINT}
		AND otw.id = #{operationalTestWindowId,jdbcType=BIGINT}
	</select>	
	<select id="selectForAMPPPGradeCourseWithTestExternalId" resultMap="Auto_Expanded_Result_Map">
	SELECT distinct tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, tc.gradecourseid, tc.gradebandid, tc.contentareaid, 
    gc.id as "gradecourse.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",  ca.name as "contentarea.name", otw.id as operationaltestwindowid
	  FROM testcollection tc 
	   JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
	   JOIN assessment asm ON atc.assessmentid = asm.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradecourse gc ON tc.gradecourseid = gc.id
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON ttsa.id=cattsa.testtypesubjectareaid and ttsa.assessmentid = asm.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	 
	WHERE tt.activeflag is true AND t.activeflag is true AND t.qccomplete is true
		AND tc.gradebandid is null AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
		AND tc.randomizationtype = #{randomizationTypeCode} AND ttsa.assessmentid = #{assessmentId}
		AND cattsa.contentareaid = #{contentAreaId} AND ttsa.testtypeid = #{testTypeId} 
		AND gc.id in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id=#{gradeCourseId}))
		AND t.externalid = #{testExternalId,jdbcType=BIGINT}
		AND otw.id = #{operationalTestWindowId,jdbcType=BIGINT} 
  </select>  
  <select id="getAvailableTestOverviewsForGradeAndCourse" resultType="long">
  	select distinct ts.externalid
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradecourse gc on tc.gradecourseid = gc.id
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	join operationaltestwindowstate otws on otws.operationaltestwindowid = otwtc.operationaltestwindowid
	join testspecification ts on ts.id = t.testspecificationid	
	where tc.phasetype = 'INSTRUCTIONAL'
	and ts.activeflag = true and t.activeflag = true
	and t.qccomplete = true and t.status = (select id from category where categorycode='DEPLOYED'
  	and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
  	and otws.stateid = #{stateId}
  	and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.id=#{contentAreaId} and tc.randomizationtype = 'enrollment' 
	union
	select distinct ts.externalid
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradeband gb on tc.gradebandid = gb.id
	join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	join gradecourse gc on gbgc.gradecourseid = gc.id
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	join operationaltestwindowstate otws on otws.operationaltestwindowid = otwtc.operationaltestwindowid
	join testspecification ts on ts.id = t.testspecificationid	
	where tc.phasetype = 'INSTRUCTIONAL'
	and ts.activeflag = true and t.activeflag = true
	and t.qccomplete = true and t.status = (select id from category where categorycode='DEPLOYED'
  	and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
  	and otws.stateid = #{stateId}
  	and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
	 and gc.abbreviatedName=#{gradeCourseCode} and ca.id=#{contentAreaId} and tc.randomizationtype = 'enrollment'
  </select>
  
  <select id="selectForAutoGradeCourseForAdaptive" resultMap="Auto_Expanded_Result_Map">
	SELECT distinct tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, tc.gradecourseid, tc.gradebandid, tc.contentareaid, 
    gc.id as "gradecourse.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",  ca.name as "contentarea.name", otw.id as operationaltestwindowid
	,stg.id as "stage.id", stg.code as "stage.code", stg.name as "stage.name", stg.sortorder as "stage.sortorder",stg.predecessorid as "stage.predecessorid", tp.id as panelid, tp.panelname as panelname 
       
	FROM testcollection tc 
		JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
	   	JOIN assessment asm ON atc.assessmentid = asm.id
	   	JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   	JOIN test t ON tct.testid = t.id
	   	JOIN gradecourse gc ON tc.gradecourseid = gc.id
	   	JOIN contentarea ca ON tc.contentareaid = ca.id
	   	JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   	JOIN testtypesubjectarea ttsa ON ttsa.id=cattsa.testtypesubjectareaid and ttsa.assessmentid = asm.id
	   	JOIN testtype tt ON ttsa.testtypeid = tt.id
	   	JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   	JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   	JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   	JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid and otw.id=#{otwId}
	   	JOIN testenrollmentmethod tem on tem.id = otw.testenrollmentmethodid and tem.assessmentprogramid = otw.assessmentprogramid 
	   	JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	   
		JOIN testpanelstagetestcollection tpstc on tpstc.externaltestcollectionid = tc.externalid and tpstc.activeflag is true
		JOIN testpanelstage tps on tps.id= tpstc.testpanelstageid and tps.activeflag is true
		JOIN testpanel tp on tp.id= tps.testpanelid AND tp.assessmentprogramid = otw.assessmentprogramid and tp.activeflag is true
		JOIN stage stg on tps.stageid=stg.id and tc.stageid=stg.id and stg.activeflag is true and stg.code in('Stg1', 'Stg2')
	       	
	WHERE tt.activeflag is true AND t.activeflag is true AND t.qccomplete is true
		AND tc.gradebandid is null AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
		AND (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate) 
		<!-- AND (otw.suspendwindow is null or otw.suspendwindow=false) -->
		AND tc.randomizationtype = #{randomizationTypeCode} 
		AND ttsa.assessmentid = #{assessmentId}
		AND cattsa.contentareaid = #{contentAreaId} 
		AND tp.contentareaid = #{contentAreaId} 
		ANd tp.gradecourseid in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id=#{gradeCourseId}))
		AND ttsa.testtypeid = #{testTypeId} 
		AND otw.assessmentprogramid = (select id from assessmentprogram where abbreviatedname = #{assessmentProgramCode})
		AND tem.methodcode = #{enrollmentMethodCode}	
		AND otw.testenrollmentflag is true
		AND t.status = #{testStatusId} AND gc.id in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id=#{gradeCourseId})) 
		AND tc.stageid is not null
		order by stg.sortorder
	       
  </select>
  
  <select id="selectForAutoGradeCourseForPredictive" resultMap="Auto_Expanded_Result_Map">
		SELECT DISTINCT
			tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, tc.gradecourseid, tc.gradebANDid, tc.contentareaid, 
			gc.id as "gradecourse.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
			gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",
			ca.name as "contentarea.name", otw.id as operationaltestwindowid
		FROM testcollection tc 
		JOIN assessmentstestcollections atc ON tc.id = atc.testcollectionid
		JOIN assessment asm ON atc.assessmentid = asm.id
		JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
		JOIN test t ON tct.testid = t.id and t.activeflag
		JOIN gradecourse gc ON tc.gradecourseid = gc.id
		JOIN contentarea ca ON tc.contentareaid = ca.id
		JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
		JOIN testtypesubjectarea ttsa ON ttsa.id = cattsa.testtypesubjectareaid AND ttsa.assessmentid = asm.id
		JOIN testtype tt ON ttsa.testtypeid = tt.id 
		JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
		JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id AND otwtc.activeflag is true
		JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid AND otwsr.activeflag
		JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid AND otw.id = #{otwId}
		JOIN testenrollmentmethod tem on tem.id = otw.testenrollmentmethodid AND tem.assessmentprogramid = otw.assessmentprogramid 
		JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id
		WHERE t.qccomplete is true
		AND tc.gradebandid is null
		AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
		AND (otw.effectivedate &lt;= now() AND now() &lt;= otw.expirydate) 
		<!-- AND (otw.suspendwindow is null or otw.suspendwindow=false) -->
		AND tc.randomizationtype = #{randomizationTypeCode}
		AND ttsa.assessmentid = #{assessmentId}
		AND cattsa.contentareaid = #{contentAreaId}
		AND ttsa.testtypeid = #{testTypeId}
		AND otw.assessmentprogramid = (select id from assessmentprogram where abbreviatedname = #{assessmentProgramCode})
		AND tem.methodcode = #{enrollmentMethodCode}
		AND otw.testenrollmentflag is true
		AND t.status = #{testStatusId}
		AND gc.id in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id = #{gradeCourseId}))
	</select>
  
  <select id="countTestCollectionPanels" parameterType="java.lang.Long" resultType="java.lang.Integer">
  	SELECT Count(tp.id) 
		FROM   testpanel tp 
		       JOIN testpanelstage tps 
		         ON tp.id = tps.testpanelid 
		       JOIN testpanelstagetestcollection tpstc 
		         ON tpstc.testpanelstageid = tps.id 
		       JOIN testcollection tc 
		         ON tc.externalid = tpstc.externaltestcollectionid 
		WHERE  tc.id = #{testCollectionId}
		and tp.activeflag is true
		and tps.activeflag is true
		and tpstc.activeflag is true
  </select>
    
  <select id ="selectTestCollectionsForDLMFixedAssign" resultMap="Expanded_Result_Map">
  select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradecourse gc ON gc.id = tc.gradecourseid
	join gradecourse igc ON  gc.abbreviatedname = igc.abbreviatedname and igc.contentareaid is null   
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	where t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
 	 and tc.randomizationtype='enrollment' <!--and tc.phasetype = 'EOY' -->
	 and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
	 and gc.abbreviatedname=#{gradeCourseAbbrName} and ca.id=#{contentAreaId} 
	 and otw.id = #{operationalTestWindowId}
         <if test="excludeTestCollections != null" >
        		      and tc.id not in 
		        <foreach collection="excludeTestCollections" item="excludeCollection" open="(" close=")" separator="," >
		        	#{excludeCollection}
		        </foreach>
         </if>
    UNION ALL
    select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradeband gb on tc.gradebandid = gb.id
	join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	join gradecourse gc ON gc.id = gbgc.gradecourseid
	join gradecourse igc ON  gc.abbreviatedname = igc.abbreviatedname and igc.contentareaid is null   
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	where t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and tc.randomizationtype='enrollment' <!--and tc.phasetype = 'EOY' -->
	 and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
	 and gc.abbreviatedname=#{gradeCourseAbbrName} and ca.id=#{contentAreaId} 
	 and otw.id = #{operationalTestWindowId}
         <if test="excludeTestCollections != null" >
        		      and tc.id not in 
		        <foreach collection="excludeTestCollections" item="excludeCollection" open="(" close=")" separator="," >
		        	#{excludeCollection}
		        </foreach>
         </if>
  </select>
	<update id="softDeleteById" parameterType="Long">
		update public.testcollection
		set activeflag = FALSE
		where id = #{id,jdbcType=BIGINT}
	</update>
	
	<select id="getTestCollectionsForBatchAutoGradeBand" resultMap="Auto_Expanded_Result_Map">
	SELECT distinct tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, 
	<!-- tc.gradecourseid, --> 
	gbgc.gradecourseid,
	tc.gradebandid, tc.contentareaid, 
    gc.id as "gc.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",  ca.name as "contentarea.name", otw.id as operationaltestwindowid
    ,stg.id as "stage.id", stg.code as "stage.code", stg.name as "stage.name", stg.sortorder as "stage.sortorder",stg.predecessorid as "stage.predecessorid"
       
	  FROM testcollection tc 
	   JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
	   JOIN assessment asm ON atc.assessmentid = asm.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradeband gb on tc.gradebandid = gb.id
	   JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	  <!--  JOIN gradecourse gc ON tc.gradecourseid = gc.id -->
	   JOIN gradecourse gc ON gbgc.gradecourseid = gc.id
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON ttsa.id=cattsa.testtypesubjectareaid and ttsa.assessmentid = asm.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	   
	JOIN stage stg on tc.stageid=stg.id
	       	
	WHERE tt.activeflag is true AND t.activeflag is true AND t.qccomplete is true
		AND tc.gradebandid is not null AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
		AND tc.randomizationtype = #{randomizationTypeCode} AND ttsa.assessmentid = #{assessmentId}
		AND cattsa.contentareaid = #{contentAreaId} AND ttsa.testtypeid = #{testTypeId} 
		AND t.status = #{testStatusId} AND gc.id in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id=#{gradeCourseId}))
		AND otw.id = #{operationalTestWindowId} 		
		AND tc.stageid is not null
		order by stg.sortorder
	       
	</select>
	<select id="getTestCollectionsForBatchAutoGradeCourse" resultMap="Auto_Expanded_Result_Map">
	SELECT distinct tc.id, tc.id as testCollectionId, tc.name, tc.randomizationtype, tc.gradecourseid, tc.gradebandid, tc.contentareaid, 
    gc.id as "gc.id", gc.externalid as "gradecourse.externalid", gc.name as "gradecourse.name",
    gc.abbreviatedname as "gradecourse.abbreviatedname", ca.id as "contentarea.id", ca.externalid as "contentarea.externalid",  ca.name as "contentarea.name", otw.id as operationaltestwindowid
	,stg.id as "stage.id", stg.code as "stage.code", stg.name as "stage.name", stg.sortorder as "stage.sortorder",stg.predecessorid as "stage.predecessorid"
      
	  FROM testcollection tc 
	   JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
	   JOIN assessment asm ON atc.assessmentid = asm.id
	   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
	   JOIN test t ON tct.testid = t.id
	   JOIN gradecourse gc ON tc.gradecourseid = gc.id
	   JOIN contentarea ca ON tc.contentareaid = ca.id
	   JOIN contentareatesttypesubjectarea cattsa ON ca.id = cattsa.contentareaid
	   JOIN testtypesubjectarea ttsa ON ttsa.id=cattsa.testtypesubjectareaid and ttsa.assessmentid = asm.id
	   JOIN testtype tt ON ttsa.testtypeid = tt.id
	   JOIN subjectarea sa ON ttsa.subjectareaid = sa.id
	   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
	   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id
	   JOIN stage stg on tc.stageid=stg.id
	       
	WHERE tt.activeflag is true AND t.activeflag is true AND t.qccomplete is true
		AND tc.gradebandid is null AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
		AND tc.randomizationtype = #{randomizationTypeCode} AND ttsa.assessmentid = #{assessmentId}
		AND cattsa.contentareaid = #{contentAreaId} AND ttsa.testtypeid = #{testTypeId} 
		AND t.status = #{testStatusId} AND gc.id in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id=#{gradeCourseId}))
		AND otw.id = #{operationalTestWindowId} 		
		AND tc.stageid is not null
		order by stg.sortorder
  </select>
	
	<select id="dlmTestAdminMonitoringSummary" resultMap="dlmTestStatusMap" parameterType="map">
    WITH schoolswithdlmkids AS (
	    SELECT DISTINCT
	        otd.schoolid, otd.schoolname, otd.schooldisplayidentifier, otd.districtid, otd.districtname, otd.districtdisplayidentifier, otd.stateid, otd.statename,
	        otd.statedisplayidentifier
	    FROM organizationtreedetail otd
	    JOIN enrollment e ON e.attendanceschoolid = otd.schoolid
	    JOIN studentassessmentprogram sap ON e.studentid = sap.studentid
	    JOIN assessmentprogram ap ON sap.assessmentprogramid = ap.id
	    WHERE e.activeflag = TRUE
	    AND sap.activeflag = TRUE
	    AND ap.abbreviatedname = 'DLM'
	    AND e.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
	    <if test="summaryLevel == 'state'">
	        AND otd.stateid = #{stateId,jdbcType=BIGINT}
	    </if>
	    <if test="summaryLevel == 'district'">
	        AND otd.districtid = ANY(VALUES
	        <foreach collection="childOrgIds" item="orgId" open="" separator="," close="">
	            (#{orgId,jdbcType=BIGINT})
	        </foreach>
	        )
	    </if>
	    <if test="summaryLevel == 'school'">
	        AND otd.schoolid = ANY(VALUES
	        <foreach collection="childOrgIds" item="orgId" open="" separator="," close="">
	            (#{orgId,jdbcType=BIGINT})
	        </foreach>
	        )
	    </if>
	),
	rosteredkids AS (
	    SELECT s.id AS studentid,
	        e.id AS enrollmentid, gc.id AS gradecourseid, gc.name AS gradename, gc.abbreviatedname AS gradeabbreviatedname,
	        r.id AS rosterid, ca.id AS contentareaid, ca.name AS contentareaname, ca.abbreviatedname AS contentareaabbreviatedname,
	        r.attendanceschoolid, sch.schoolname, sch.schooldisplayidentifier, sch.districtid, sch.districtname, sch.districtdisplayidentifier,
	        e.currentschoolyear AS schoolyear
	    FROM student s
	    JOIN studentassessmentprogram sap ON s.id = sap.studentid AND sap.activeflag IS TRUE
	    JOIN assessmentprogram ap ON sap.assessmentprogramid = ap.id
	    JOIN enrollment e ON s.id = e.studentid AND e.activeflag IS TRUE
	    JOIN schoolswithdlmkids sch ON e.attendanceschoolid = sch.schoolid
	    JOIN enrollmentsrosters er ON e.id = er.enrollmentid AND er.activeflag IS TRUE
	    JOIN roster r ON er.rosterid = r.id AND e.currentschoolyear = r.currentschoolyear AND r.activeflag IS TRUE
	    JOIN contentarea ca ON r.statesubjectareaid = ca.id
	    JOIN gradecourse gc ON e.currentgradelevel = gc.id
	    WHERE ap.abbreviatedname = 'DLM'
	    AND e.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
	),
	itiContentAvailabileByGrade AS (
	    Select distinct gc.abbreviatedname, tc.contentareaid 
	    from testcollection tc 
	    join gradecourse gc on gc.id = tc.gradecourseid
	    where tc.phasetype = 'INSTRUCTIONAL' and tc.activeflag is true
	    union
	    Select distinct gc.abbreviatedname, tc.contentareaid 
	    from testcollection tc 
	    join gradebandgradecourse gbgc on gbgc.gradebandid = tc.gradebandid
	    join gradecourse gc on gc.id = gbgc.gradecourseid
	    where tc.phasetype = 'INSTRUCTIONAL' and tc.activeflag is true
	),
	iti AS (
	    SELECT DISTINCT rk.contentareaname AS subject, rk.contentareaid AS subjectid,
	        rk.attendanceschoolid, rk.schoolname, rk.schooldisplayidentifier, rk.districtid, rk.districtname, rk.districtdisplayidentifier,
	        rk.gradename AS grade, rk.gradecourseid AS gradeid, rk.gradeabbreviatedname AS gradelevel, rk.studentid, 
	        NULL::INTEGER AS numofEEs,
	        'ITI' AS type,
	        COUNT(itiav.*) > 0 AS isiticontentavailable,
	        COUNT(
	            CASE WHEN tc.phasetype = 'INSTRUCTIONAL' AND ststatus.categorycode = 'unused' THEN 1 
					 WHEN tc.phasetype = 'INSTRUCTIONAL' AND itistatus.categorycode = 'pending' THEN 1
				ELSE NULL END
	        ) AS numOfInstructTestsNotStarted,
	        COUNT(
	            CASE WHEN tc.phasetype = 'INSTRUCTIONAL' AND ststatus.categorycode = 'inprogress' THEN 1 ELSE NULL END
	        ) AS numOfInstructTestsInProgress,
	        COUNT(
	            CASE WHEN tc.phasetype = 'INSTRUCTIONAL' AND ststatus.categorycode = 'complete' THEN 1 ELSE NULL END
	        ) AS numOfInstructTestsCompleted,
	        0 AS numOfEoyTestsNotStarted,
	        0 AS numOfEoyTestsInProgress,
	        0 AS numOfEoyTestsCompleted
	    FROM rosteredkids rk
	    LEFT JOIN itiContentAvailabileByGrade itiav on itiav.contentareaid = rk.contentareaid AND itiav.abbreviatedname = rk.gradeabbreviatedname
	    LEFT JOIN ititestsessionhistory iti ON rk.studentid = iti.studentid AND rk.rosterid = iti.rosterid AND iti.activeflag IS TRUE
	    LEFT JOIN testsession ts
	        ON iti.testsessionid = ts.id
	        AND rk.schoolyear = ts.schoolyear
	        AND ts.source = 'ITI'
	        AND ts.activeflag IS TRUE
	    LEFT JOIN studentstests st ON ts.id = st.testsessionid AND rk.studentid = st.studentid AND rk.enrollmentid = st.enrollmentid AND st.activeflag = TRUE
	    LEFT JOIN testcollection tc ON iti.testcollectionid = tc.id AND tc.phasetype IN ('INSTRUCTIONAL') AND tc.contentareaid = rk.contentareaid
	    LEFT JOIN category ststatus ON st.status = ststatus.id
	    LEFT JOIN category itistatus ON iti.status = itistatus.id
	    where rk.contentareaabbreviatedname IN ('M', 'ELA', 'Sci', 'SS')
	    GROUP BY rk.contentareaname, rk.contentareaid,
	        rk.attendanceschoolid, rk.schoolname, rk.schooldisplayidentifier, rk.districtid, rk.districtname, rk.districtdisplayidentifier,
	        rk.gradename, rk.gradecourseid, rk.gradeabbreviatedname, rk.studentid
	),
	eoy AS (
	    SELECT DISTINCT rk.contentareaname AS subject, rk.contentareaid AS subjectid,
	        rk.attendanceschoolid, rk.schoolname, rk.schooldisplayidentifier, rk.districtid, rk.districtname, rk.districtdisplayidentifier,
	        rk.gradename AS grade, rk.gradecourseid AS gradeid, rk.gradeabbreviatedname AS gradelevel, rk.studentid,
	        CASE WHEN tem.methodcode = 'MLTASGN' THEN otwmad.numberoftests ELSE tspec.minimumnumberofees END AS numofEEs,
	        'EOY' AS type,
	        NULL::BOOLEAN AS isiticontentavailable,
	        0 AS numOfInstructTestsNotStarted,
	        0 AS numOfInstructTestsInProgress,
	        0 AS numOfInstructTestsCompleted,
	        COUNT(
	            CASE WHEN tc.phasetype = 'EOY' AND ststatus.categorycode = 'unused' THEN 1 ELSE NULL END
	        ) AS numOfEoyTestsNotStarted,
	        COUNT(
	            CASE WHEN tc.phasetype = 'EOY' AND ststatus.categorycode = 'inprogress' THEN 1 ELSE NULL END
	        ) AS numOfEoyTestsInProgress,
	        COUNT(
	            CASE WHEN tc.phasetype = 'EOY' AND ststatus.categorycode = 'complete' THEN 1 ELSE NULL END
	        ) AS numOfEoyTestsCompleted
	    FROM rosteredkids rk
	    LEFT JOIN testsession ts
	        ON rk.rosterid = ts.rosterid
	        AND rk.schoolyear = ts.schoolyear
	        AND ts.operationaltestwindowid IN (
	            SELECT otw.id
	            FROM operationaltestwindow otw
	            JOIN testenrollmentmethod tem ON otw.testenrollmentmethodid = tem.id AND otw.assessmentprogramid = tem.assessmentprogramid
	            WHERE otw.assessmentprogramid = (SELECT id FROM assessmentprogram WHERE abbreviatedname = 'DLM')
	            AND otw.testenrollmentflag IS TRUE
	            AND tem.methodcode IN ('STDNTTRKR', 'FXD', 'MLTASGN')
	        )
	        AND ts.activeflag IS TRUE
	    LEFT JOIN operationaltestwindow otw ON ts.operationaltestwindowid = otw.id
        LEFT JOIN testenrollmentmethod tem ON otw.testenrollmentmethodid = tem.id
        LEFT JOIN operationaltestwindowmultiassigndetail otwmad ON otw.id = otwmad.operationaltestwindowid AND rk.contentareaid = otwmad.contentareaid
	    LEFT JOIN studentstests st ON ts.id = st.testsessionid AND rk.studentid = st.studentid AND rk.enrollmentid = st.enrollmentid AND st.activeflag = TRUE
	    LEFT JOIN category ststatus ON st.status = ststatus.id
	    LEFT JOIN testcollection tc ON st.testcollectionid = tc.id AND tc.phasetype IN ('EOY') AND tc.contentareaid = rk.contentareaid
	    LEFT JOIN test t ON st.testid = t.id AND rk.contentareaid = t.contentareaid
	    LEFT JOIN testspecification tspec ON t.testspecificationid = tspec.id
	    where rk.contentareaabbreviatedname IN ('M', 'ELA', 'Sci', 'SS')
	    AND CASE WHEN ts.id IS NOT NULL THEN tspec.id IS NOT NULL ELSE TRUE END
	    GROUP BY rk.contentareaname, rk.contentareaid,
	        rk.attendanceschoolid, rk.schoolname, rk.schooldisplayidentifier, rk.districtid, rk.districtname, rk.districtdisplayidentifier,
	        rk.gradename, rk.gradecourseid, rk.gradeabbreviatedname, rk.studentid, tspec.minimumnumberofees, otwmad.numberoftests, tem.methodcode
	)
	select distinct
	    iti.subject, iti.subjectid,
	    iti.districtname, iti.districtid, iti.districtdisplayidentifier,
	    iti.schoolname, iti.attendanceschoolid, iti.schooldisplayidentifier,
	    iti.grade, iti.gradeid, iti.gradelevel,
	    iti.studentid,
	    iti.isiticontentavailable,
	    iti.numOfInstructTestsNotStarted, iti.numOfInstructTestsInProgress, iti.numOfInstructTestsCompleted,
	    case when eoy.numOfEoyTestsNotStarted is not null then eoy.numOfEoyTestsNotStarted else 0 end as numOfEoyTestsNotStarted,
	    case when eoy.numOfEoyTestsInProgress is not null then eoy.numOfEoyTestsInProgress else 0 end as numOfEoyTestsInProgress,
	    case when eoy.numOfEoyTestsCompleted is not null then eoy.numOfEoyTestsCompleted else 0 end as numOfEoyTestsCompleted,
	    eoy.numofEEs
	from iti
	left join eoy
	    on eoy.studentid is not distinct from iti.studentid
	    and eoy.attendanceschoolid is not distinct from iti.attendanceschoolid
	    and eoy.districtid is not distinct from iti.districtid
	    and eoy.subjectid is not distinct from iti.subjectid
	    and eoy.gradelevel is not distinct from iti.gradelevel
	</select>
	
	<resultMap id="studentsTestsBpCriteriaTestsMap" type="edu.ku.cete.domain.test.ContentFrameworkDetail" >
		<result column="essentialelementid" property="id"/>
		<result column="essentialelement" property="name"/>
		<result property="id" column="id"/>
  	 	<result property="criteriaNumber" column="criteria"/>
		<collection property="groupsNumbers" ofType="java.lang.Long" javaType="list">
  	 		<result column="groupnumber"/>
  	 	</collection>	
	</resultMap>
	
	<select id="getStudentITITestsForSubGradeAndCriteria" resultMap="studentsTestsBpCriteriaTestsMap">
		SELECT itih.essentialelementid, bp.criteria, bp.groupnumber, bpee.essentialelement
	    from ititestsessionhistory itih
	    	join roster r on itih.rosterid = r.id
	    	join testsession ts on ts.id = itih.testsessionid and ts.rosterid = itih.rosterid
	    	join studentstests st on st.testsessionid = itih.testsessionid and st.studentid = itih.studentid
	    	join blueprintessentialelements bpee on bpee.essentialelementid = itih.essentialelementid
	    	join blueprint bp on bp.id = bpee.blueprintid
	    where itih.studentid = #{studentId}
	    and r.currentschoolyear = #{schoolYear}
	    and bp.contentareaid = #{contentAreaId}
	    and bp.gradecourseid in (select id from gradecourse where abbreviatedname = #{gradeCourseAbbrName})
	    <if test="criteria != null">
	    	and bp.criteria = #{criteria}
	    </if>
	    and bp.activeflag is true and itih.activeflag is true and ts.activeflag is true and st.activeflag is true and r.activeflag is true
		and st.status IN (SELECT id FROM category WHERE categorycode IN ('complete')		  
		and categorytypeid = (SELECT id FROM categorytype WHERE typecode = 'STUDENT_TEST_STATUS'))
	</select>
	
	<resultMap id="contentFrameWorkDetailMap" type="edu.ku.cete.domain.test.ContentFrameworkDetail">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="contentCode" property="contentCode" jdbcType="VARCHAR" />
	</resultMap>
	
	<select id="getAllStudentITIEEsForSubGradeAndCriteriaUnderTeachers" resultMap="contentFrameWorkDetailMap">
		select distinct ee.id, ee.contentcode
	    from ititestsessionhistory iti
	    	join blueprintessentialelements bpee on bpee.essentialelementid = iti.essentialelementid
	    	join contentframeworkdetail ee on iti.essentialelementid = ee.id 
	    	join blueprint bp on bp.id = bpee.blueprintid
	    	join roster r on iti.rosterid = r.id
	    where iti.activeflag = true
	    	and bp.activeflag = true
	    	and r.activeflag = true
	    	and iti.studentid = #{studentId}
	    	and bp.contentareaid = #{contentAreaId}
	    	and bp.gradecourseid in (select id from gradecourse where abbreviatedname = #{gradeCourseAbbrName})
	    	and bp.criteria = #{criteria}
	    	and r.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
	    	and r.teacherid = any(values
			<foreach collection="teacherIds" item="teacherId" open="" separator="," close="">
			  (#{teacherId,jdbcType=BIGINT})
			</foreach>)
	</select>
	
	<select id ="selectTestCollectionsForDLMResearchSurvey" resultMap="Expanded_Result_Map">
  	select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradecourse gc ON gc.id = tc.gradecourseid
	join gradecourse igc ON  gc.abbreviatedname = igc.abbreviatedname and igc.contentareaid is null   
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	left join stage s on s.id = tc.stageid
	where t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
 	 and tc.randomizationtype='enrollment'
	 and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
	 and gc.abbreviatedname IN('OTH', #{gradeAbbrName} ) and ca.id=#{contentAreaId} 
	 and (s.code is null or upper(s.code) in 
		<foreach item="stageCode" collection="stageCodes" separator="," open="(" close=")">
	       	upper(#{stageCode})
		</foreach>
	    )
	 and otw.id = #{operationalTestWindowId}         
    UNION ALL
    select distinct
		<include refid="Expanded_AutoRegistration_Column_List"/> 
	from test t 
	join testcollectionstests tct on t.id=tct.testid 
	join testcollection tc on tc.id=tct.testcollectionid
	join gradeband gb on tc.gradebandid = gb.id
	join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
	join gradecourse gc ON gc.id = gbgc.gradecourseid
	join gradecourse igc ON  gc.abbreviatedname = igc.abbreviatedname and igc.contentareaid is null   
	join contentarea ca on tc.contentareaid = ca.id
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
	left join stage s on s.id = tc.stageid
	where t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
	 and tc.randomizationtype='enrollment'
	 and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
	 and gc.abbreviatedname IN('OTH', #{gradeAbbrName} )  and ca.id=#{contentAreaId} 
	 and (s.code is null or upper(s.code) in 
		<foreach item="stageCode" collection="stageCodes" separator="," open="(" close=")">
	       	upper(#{stageCode})
		</foreach>
	    )
	 and otw.id = #{operationalTestWindowId}         
  </select>
  
  <select id="getActualAndMappedLikageLevelsByContentArea" resultType="hashmap">
  	select actuallinkagelevel, mappinglinkagelevelname 
  	from itilinkagelevelmapping
  	where upper(contentareaabbreviatedname) = upper(#{contentAreaAbbrName}) 
  </select>
  
  <select id="getEEsTestedInStudentTracker" resultMap="studentsTestsBpCriteriaTestsMap">
  select distinct bp.criteria, bp.groupnumber, bpee.essentialelement, bpee.essentialelementid
  	from studenttrackerband stb
  	inner join studentstests st on stb.testsessionid=st.testsessionid
  	inner join blueprintessentialelements bpee on bpee.essentialelementid=stb.essentialelementid
  	inner join blueprint bp on bp.id = bpee.blueprintid
  	inner join testsession ts on ts.id=st.testsessionid and ts.activeflag=true
	where stb.activeflag is true and st.activeflag is true
		and stb.studenttrackerid=#{studentTrackerId,jdbcType=BIGINT}
		and stb.operationalwindowid = #{operationalWindowId,jdbcType=BIGINT}
  </select>
  
  <select id="getContentCodesForFieldTests" resultMap="contentFrameWorkDetailMap">
 select distinct cfd.contentcode, cfd.id 
	from contentframeworkdetail cfd
	join taskvariantcontentframeworkdetail tvcf on tvcf.contentframeworkdetailid = cfd.id
	join testsectionstaskvariants tstv on tstv.taskvariantid = tvcf.taskvariantid
	join testsection tsec on tsec.id = tstv.testsectionid
	join test t on t.id = tsec.testid
	join testcollectionstests tct on tct.testid = t.id
	join testcollection tc on tc.id = tct.testcollectionid
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tct.testcollectionid
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join gradecourse gc on gc.id = tc.gradecourseid
	join contentarea ca on ca.id = tc.contentareaid
	where otwtc.operationaltestwindowid = #{multiAssignTestWindowId}
		and t.activeflag is true and t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
		and tc.randomizationtype='enrollment' and tc.pooltype = #{orgPoolType} and tc.phasetype = 'EOY'
		and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' 
				and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
		and t.qccomplete = true
		and gc.abbreviatedname = #{gradeCode} and ca.id = #{contentAreaId}
union
select distinct cfd.contentcode, cfd.id 
	from contentframeworkdetail cfd
	join taskvariantcontentframeworkdetail tvcf on tvcf.contentframeworkdetailid = cfd.id
	join testsectionstaskvariants tstv on tstv.taskvariantid = tvcf.taskvariantid
	join testsection tsec on tsec.id = tstv.testsectionid
	join test t on t.id = tsec.testid
	join testcollectionstests tct on tct.testid = t.id
	join testcollection tc on tc.id = tct.testcollectionid
	join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tct.testcollectionid
	join operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
	join gradebandgradecourse gbgc on gbgc.gradebandid = tc.gradebandid
	join gradecourse gc on gc.id = gbgc.gradecourseid
	join contentarea ca on ca.id = tc.contentareaid
	where otwtc.operationaltestwindowid = #{multiAssignTestWindowId}
		and t.activeflag is true and t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
		and tc.randomizationtype='enrollment' and tc.pooltype = #{orgPoolType} and tc.phasetype = 'EOY'
		and otwsr.sessionruleid = (select id from category where categorycode='SYSTEM_DEFINED_ENROLLMENT_TO_TEST' 
				and categorytypeid = (select id from categorytype where typecode='SESSION_RULES'))
		and t.qccomplete = true
		and gc.abbreviatedname = #{gradeCode} and ca.id = #{contentAreaId}
  </select>
  
  <select id="getStageIdByStageCode" parameterType="java.lang.String" resultType="java.lang.Long">
  		select id from stage where code = #{stageCode, jdbcType=VARCHAR} and activeflag is true
  </select>
  
  <select id="getTestCollectionsForISmartAutoGradeBand" resultMap="Expanded_Result_Map">
	  	select distinct
			<include refid="Expanded_AutoRegistration_Column_List"/> 
		from test t 
		join testcollectionstests tct on t.id=tct.testid 
		join testcollection tc on tc.id=tct.testcollectionid
		join gradeband gb on tc.gradebandid = gb.id
		join gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
		join gradecourse gc on gbgc.gradecourseid = gc.id
		join contentarea ca on tc.contentareaid = ca.id
		join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
		join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
		join testsection ts on ts.testid = tct.testid
		join testsectionstaskvariants tstv on tstv.testsectionid = ts.id  	
		where t.qccomplete is true
		 and t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
		 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound}
	     and otw.id = #{operationalWindowId}
		 and gc.abbreviatedName=#{gradeCourseCode} 
		 and ca.id=#{contentAreaId} 
		 and tc.randomizationtype = 'enrollment'
		 and tc.courseid is null
  </select>
  
  <select id="getTestCollectionsForISmartAutoGradeCourse" resultMap="Expanded_Result_Map">
	  	select distinct
			<include refid="Expanded_AutoRegistration_Column_List"/> 
		from test t 
		join testcollectionstests tct on t.id=tct.testid 
		join testcollection tc on tc.id=tct.testcollectionid	
		join gradecourse gc on tc.gradecourseid = gc.id	
		join contentarea ca on tc.contentareaid = ca.id
		join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
		join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid
		join testsection ts on ts.testid = tct.testid
		join testsectionstaskvariants tstv on tstv.testsectionid = ts.id  
		where t.qccomplete is true
		and t.status = (select id from category where categorycode='DEPLOYED' and categorytypeid = (select id from categorytype where typecode='TESTSTATUS'))
		 and t.avglinkagelevel &gt;= #{linkageLevelLowerBound} and t.avglinkagelevel &lt;= #{linkageLevelUpperBound} 
	     and otw.id = #{operationalWindowId}
		 and gc.abbreviatedName=#{gradeCourseCode} 
		 and ca.id=#{contentAreaId} 
		 and tc.randomizationtype = 'enrollment' 
	</select>
  
  	<resultMap type="edu.ku.cete.domain.content.TestCollection" id="GradeBand_TC_Result_Map" extends="BaseResultMap">
	    <result column="testCollectionId" jdbcType="INTEGER" property="testCollectionId" />
	    <result column="testId" jdbcType="INTEGER" property="testId" />
	    <result column="operationaltestwindowid" property="operationalTestWindowId" />
	    <result column="panelid" property="panelId" jdbcType="BIGINT"/>
	    <result column="panelname" property="panelName" jdbcType="VARCHAR"/>
	    <association property="gradeCourse" javaType="edu.ku.cete.domain.content.GradeCourse">
	        <id column="gradecourse.id" property="gradeBandId"/>
	        <result column="gradecourse.externalid" jdbcType="BIGINT" property="externalId" />
		    <result column="gradecourse.name" jdbcType="VARCHAR" property="gradeBandName" />
		    <result column="gradecourse.gradebandabbrname" property="gradeBandAbbrName" jdbcType="VARCHAR"/>
	    </association>
	    <association property="contentArea" javaType="edu.ku.cete.domain.content.ContentArea">
	        <id column="contentarea.id" property="id"/>
	        <result column="contentarea.name" property="name" jdbcType="VARCHAR"/>
		    <result column="contentarea.originationcode" property="originationCode" jdbcType="VARCHAR" />
	    </association>   
		<association property="assessmentProgram" javaType="edu.ku.cete.domain.content.AssessmentProgram" >
			    <id column="assessmentprogramid" property="id" jdbcType="BIGINT" />
			    <result column="assessmentprogramname" property="programName" jdbcType="VARCHAR" />
		</association>
		<association property="stage" javaType="edu.ku.cete.domain.content.Stage">
	        <id column="stage.id" property="id"/>
		    <result column="stage.name" jdbcType="VARCHAR" property="name" />
		    <result column="stage.sortorder" jdbcType="INTEGER" property="sortOrder" />
		    <result column="stage.code" property="code" jdbcType="VARCHAR"/>
		    <result column="stage.predecessorid" property="predecessorId" jdbcType="BIGINT" />
	    </association>		  
  </resultMap>
 
	<select id="getTestCollectionsForBatchAutoByGradeBandOTWId" resultMap="GradeBand_TC_Result_Map">
		SELECT distinct tc.id, 
			tc.id as testCollectionId, 
			tc.name, 
			tc.randomizationtype,
			tc.gradebandid, tc.contentareaid, 
		    gb.id as "gradecourse.gradeBandId", 
		    gb.externalid as "gradecourse.externalid", 
		    gb.name as "gradecourse.gradebandname",
		    gb.abbreviatedname as "gradecourse.gradebandabbrname", 
		    ca.id as "contentarea.id", 
		    ca.externalid as "contentarea.externalid",  
		    ca.name as "contentarea.name", 
		    otw.id as operationaltestwindowid
		    ,stg.id as "stage.id", 
		    stg.code as "stage.code", 
		    stg.name as "stage.name", 
		    stg.sortorder as "stage.sortorder",
		    stg.predecessorid as "stage.predecessorid",
		    otw.assessmentprogramid
		       
			FROM testcollection tc 
			   JOIN testcollectionstests tct ON tc.id = tct.testcollectionid
			   JOIN test t ON tct.testid = t.id
			   JOIN gradeband gb on tc.gradebandid = gb.id and gb.contentareaid = tc.contentareaid
			   JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
			   JOIN contentarea ca ON tc.contentareaid = ca.id
			   JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id 
			   JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid 
			   JOIN operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
			   JOIN testenrollmentmethod tem on tem.id = otw.testenrollmentmethodid AND tem.assessmentprogramid = otw.assessmentprogramid
			   JOIN category tcsrcat on otwsr.sessionruleid = tcsrcat.id	   
			   JOIN stage stg on tc.stageid=stg.id
			       	
			WHERE tc.activeflag is true 
				AND t.activeflag is true 
				AND t.qccomplete is true		
				AND otwtc.activeflag is true
				AND otwsr.activeflag is true
				AND otw.testenrollmentflag is true
				AND tc.contentareaid = #{contentAreaId,jdbcType=BIGINT} 
				AND tc.gradebandid = #{gradeBandId,jdbcType=BIGINT}
				AND tcsrcat.categorycode = 'SYSTEM_DEFINED_ENROLLMENT_TO_TEST'
				AND tc.randomizationtype = #{randomizationTypeCode,jdbcType=VARCHAR} 
				AND t.status = #{testStatusId,jdbcType=BIGINT} 
				AND (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
				AND otw.id = #{operationalTestWindowId} 
				AND otw.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
				AND tem.methodcode = 'MLTSTG'		
				AND tc.stageid is not null
				<if test="stageCode != null">
					AND stg.code = #{stageCode,jdbcType=VARCHAR}
				</if>
				order by stg.sortorder
		       
	</select>
	
	<select id="getStageByCode" parameterType="java.lang.String" resultType="edu.ku.cete.domain.content.Stage">
    	SELECT *
    	FROM stage
    	WHERE activeflag IS TRUE
    	AND code = #{stageCode,jdbcType=VARCHAR}
    </select>
    
   <select id="dlmTestAdminMonitoringSummaryForIEStates" resultMap="dlmTestStatusMap" parameterType="map">
    WITH schoolswithdlmkids AS (
	    SELECT DISTINCT
	        otd.schoolid, otd.schoolname, otd.schooldisplayidentifier, otd.districtid, otd.districtname, otd.districtdisplayidentifier, otd.stateid, otd.statename,
	        otd.statedisplayidentifier
	    FROM organizationtreedetail otd
	    JOIN enrollment e ON e.attendanceschoolid = otd.schoolid
	    JOIN studentassessmentprogram sap ON e.studentid = sap.studentid
	    JOIN assessmentprogram ap ON sap.assessmentprogramid = ap.id
	    WHERE e.activeflag = TRUE
	    AND sap.activeflag = TRUE
	    AND ap.abbreviatedname = 'DLM'
	    AND e.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
	    <if test="summaryLevel == 'state'">
	        AND otd.stateid = #{stateId,jdbcType=BIGINT}
	    </if>
	    <if test="summaryLevel == 'district'">
	        AND otd.districtid = ANY(VALUES
	        <foreach collection="childOrgIds" item="orgId" open="" separator="," close="">
	            (#{orgId,jdbcType=BIGINT})
	        </foreach>
	        )
	    </if>
	    <if test="summaryLevel == 'school'">
	        AND otd.schoolid = ANY(VALUES
	        <foreach collection="childOrgIds" item="orgId" open="" separator="," close="">
	            (#{orgId,jdbcType=BIGINT})
	        </foreach>
	        )
	    </if>
	),
	rosteredkids AS (
	    SELECT s.id AS studentid,
	        e.id AS enrollmentid, gc.id AS gradecourseid, gc.name AS gradename, gc.abbreviatedname AS gradeabbreviatedname,
	        r.id AS rosterid, ca.id AS contentareaid, ca.name AS contentareaname, ca.abbreviatedname AS contentareaabbreviatedname,
	        r.attendanceschoolid, sch.schoolname, sch.schooldisplayidentifier, sch.districtid, sch.districtname, sch.districtdisplayidentifier,
	        e.currentschoolyear AS schoolyear
	    FROM student s
	    JOIN studentassessmentprogram sap ON s.id = sap.studentid AND sap.activeflag IS TRUE
	    JOIN assessmentprogram ap ON sap.assessmentprogramid = ap.id
	    JOIN enrollment e ON s.id = e.studentid AND e.activeflag IS TRUE
	    JOIN schoolswithdlmkids sch ON e.attendanceschoolid = sch.schoolid
	    JOIN enrollmentsrosters er ON e.id = er.enrollmentid AND er.activeflag IS TRUE
	    JOIN roster r ON er.rosterid = r.id AND e.currentschoolyear = r.currentschoolyear AND r.activeflag IS TRUE
	    JOIN contentarea ca ON r.statesubjectareaid = ca.id
	    JOIN gradecourse gc ON e.currentgradelevel = gc.id
	    WHERE ap.abbreviatedname = 'DLM'
	    AND e.currentschoolyear = #{schoolYear,jdbcType=BIGINT}
	),
	itiContentAvailabileByGrade AS (
	    Select distinct gc.abbreviatedname, tc.contentareaid 
	    from testcollection tc 
	    join gradecourse gc on gc.id = tc.gradecourseid
	    where tc.phasetype = 'INSTRUCTIONAL' and tc.activeflag is true
	    union
	    Select distinct gc.abbreviatedname, tc.contentareaid 
	    from testcollection tc 
	    join gradebandgradecourse gbgc on gbgc.gradebandid = tc.gradebandid
	    join gradecourse gc on gc.id = gbgc.gradecourseid
	    where tc.phasetype = 'INSTRUCTIONAL' and tc.activeflag is true
	),
	iti AS (
	    SELECT DISTINCT rk.contentareaname AS subject, rk.contentareaid AS subjectid,
	        rk.attendanceschoolid, rk.schoolname, rk.schooldisplayidentifier, rk.districtid, rk.districtname, rk.districtdisplayidentifier,
	        rk.gradename AS grade, rk.gradecourseid AS gradeid, rk.gradeabbreviatedname AS gradelevel, rk.studentid, 
	        <if test="testingCyleIDs != null">
	        	tcy.testingcyclename,
	        </if>	
	        NULL::INTEGER AS numofEEs,
	        'ITI' AS type,
	        COUNT(itiav.*) > 0 AS isiticontentavailable,
	        COUNT(
	            CASE WHEN tc.phasetype = 'INSTRUCTIONAL' AND ststatus.categorycode = 'unused' THEN 1 
				ELSE NULL END
	        ) AS numOfInstructTestsNotStarted,
	        COUNT(
	            CASE WHEN  itistatus.categorycode = 'STARTED' THEN 1 ELSE NULL END
	        ) AS numOfInstructTestsInProgress,
	        COUNT(
	            CASE WHEN tc.phasetype = 'INSTRUCTIONAL' AND ststatus.categorycode = 'complete' THEN 1 ELSE NULL END
	        ) AS numOfInstructTestsCompleted,
	        0 AS numOfEoyTestsNotStarted,
	        0 AS numOfEoyTestsInProgress,
	        0 AS numOfEoyTestsCompleted
	    FROM rosteredkids rk
	    LEFT JOIN itiContentAvailabileByGrade itiav on itiav.contentareaid = rk.contentareaid AND itiav.abbreviatedname = rk.gradeabbreviatedname
	    LEFT JOIN ititestsessionhistory iti ON rk.studentid = iti.studentid AND rk.rosterid = iti.rosterid AND iti.activeflag IS TRUE
	    LEFT JOIN testsession ts
	        ON iti.testsessionid = ts.id
	        AND rk.schoolyear = ts.schoolyear
	        AND ts.source = 'ITI'
	        AND ts.activeflag IS TRUE
	    LEFT JOIN studentstests st ON ts.id = st.testsessionid AND rk.studentid = st.studentid AND rk.enrollmentid = st.enrollmentid AND st.activeflag = TRUE
	    LEFT JOIN testcollection tc ON iti.testcollectionid = tc.id AND tc.phasetype IN ('INSTRUCTIONAL') AND tc.contentareaid = rk.contentareaid
	    LEFT JOIN category ststatus ON st.status = ststatus.id
	    LEFT JOIN category itistatus ON iti.status = itistatus.id
	    LEFT JOIN testingcycle tcy on  tcy.operationaltestwindowid = iti.operationaltestwindowid 
	    			<if test="testingCyleIDs != null">
				        AND tcy.id = ANY(VALUES
				        <foreach collection="testingCyleIDs" item="tcyID" open="" separator="," close="">
				            (#{tcyID,jdbcType=BIGINT})
				        </foreach>
				        )
				    </if>
	    where rk.contentareaabbreviatedname IN ('M', 'ELA', 'Sci')
	    GROUP BY rk.contentareaname, rk.contentareaid,
	        rk.attendanceschoolid, rk.schoolname, rk.schooldisplayidentifier, rk.districtid, rk.districtname, rk.districtdisplayidentifier,
	        rk.gradename, rk.gradecourseid, rk.gradeabbreviatedname, rk.studentid
	        <if test="testingCyleIDs != null">
	        	,tcy.testingcyclename
	        </if>
	),
	eoy AS (
	    SELECT DISTINCT rk.contentareaname AS subject, rk.contentareaid AS subjectid,
	        rk.attendanceschoolid, rk.schoolname, rk.schooldisplayidentifier, rk.districtid, rk.districtname, rk.districtdisplayidentifier,
	        rk.gradename AS grade, rk.gradecourseid AS gradeid, rk.gradeabbreviatedname AS gradelevel, rk.studentid,
	        CASE WHEN tem.methodcode = 'MLTASGN' THEN otwmad.numberoftests ELSE tspec.minimumnumberofees END AS numofEEs,
	        'EOY' AS type,
	        NULL::BOOLEAN AS isiticontentavailable,
	        0 AS numOfInstructTestsNotStarted,
	        0 AS numOfInstructTestsInProgress,
	        0 AS numOfInstructTestsCompleted,
	        COUNT(
	            CASE WHEN tc.phasetype = 'EOY' AND ststatus.categorycode = 'unused' THEN 1 ELSE NULL END
	        ) AS numOfEoyTestsNotStarted,
	        COUNT(
	            CASE WHEN tc.phasetype = 'EOY' AND ststatus.categorycode = 'inprogress' THEN 1 ELSE NULL END
	        ) AS numOfEoyTestsInProgress,
	        COUNT(
	            CASE WHEN tc.phasetype = 'EOY' AND ststatus.categorycode = 'complete' THEN 1 ELSE NULL END
	        ) AS numOfEoyTestsCompleted
	    FROM rosteredkids rk
	    LEFT JOIN testsession ts
	        ON rk.rosterid = ts.rosterid
	        AND rk.schoolyear = ts.schoolyear
	        AND ts.operationaltestwindowid IN (
	            SELECT otw.id
	            FROM operationaltestwindow otw
	            JOIN testenrollmentmethod tem ON otw.testenrollmentmethodid = tem.id AND otw.assessmentprogramid = tem.assessmentprogramid
	            WHERE otw.assessmentprogramid = (SELECT id FROM assessmentprogram WHERE abbreviatedname = 'DLM')
	            AND otw.testenrollmentflag IS TRUE
	            AND tem.methodcode IN ('STDNTTRKR', 'FXD', 'MLTASGN')
	        )
	        AND ts.activeflag IS TRUE
	    LEFT JOIN operationaltestwindow otw ON ts.operationaltestwindowid = otw.id
        LEFT JOIN testenrollmentmethod tem ON otw.testenrollmentmethodid = tem.id
        LEFT JOIN operationaltestwindowmultiassigndetail otwmad ON otw.id = otwmad.operationaltestwindowid AND rk.contentareaid = otwmad.contentareaid
	    LEFT JOIN studentstests st ON ts.id = st.testsessionid AND rk.studentid = st.studentid AND rk.enrollmentid = st.enrollmentid AND st.activeflag = TRUE
	    LEFT JOIN category ststatus ON st.status = ststatus.id
	    LEFT JOIN testcollection tc ON st.testcollectionid = tc.id AND tc.phasetype IN ('EOY') AND tc.contentareaid = rk.contentareaid
	    LEFT JOIN test t ON st.testid = t.id AND rk.contentareaid = t.contentareaid
	    LEFT JOIN testspecification tspec ON t.testspecificationid = tspec.id
	    where rk.contentareaabbreviatedname IN ('M', 'ELA', 'Sci')
	    AND CASE WHEN ts.id IS NOT NULL THEN tspec.id IS NOT NULL ELSE TRUE END
	    GROUP BY rk.contentareaname, rk.contentareaid,
	        rk.attendanceschoolid, rk.schoolname, rk.schooldisplayidentifier, rk.districtid, rk.districtname, rk.districtdisplayidentifier,
	        rk.gradename, rk.gradecourseid, rk.gradeabbreviatedname, rk.studentid, tspec.minimumnumberofees, otwmad.numberoftests, tem.methodcode
	)
	select distinct
	    iti.subject, iti.subjectid,
	    iti.districtname, iti.districtid, iti.districtdisplayidentifier,
	    iti.schoolname, iti.attendanceschoolid, iti.schooldisplayidentifier,
	    iti.grade, iti.gradeid, iti.gradelevel,
	    iti.studentid,
	    iti.isiticontentavailable,
	    iti.numOfInstructTestsNotStarted, iti.numOfInstructTestsInProgress, iti.numOfInstructTestsCompleted,
	    case when eoy.numOfEoyTestsNotStarted is not null then eoy.numOfEoyTestsNotStarted else 0 end as numOfEoyTestsNotStarted,
	    case when eoy.numOfEoyTestsInProgress is not null then eoy.numOfEoyTestsInProgress else 0 end as numOfEoyTestsInProgress,
	    case when eoy.numOfEoyTestsCompleted is not null then eoy.numOfEoyTestsCompleted else 0 end as numOfEoyTestsCompleted,
	    eoy.numofEEs
	     <if test="testingCyleIDs != null">
	        	,iti.testingcyclename
	       </if>
	from iti
	left join eoy
	    on eoy.studentid is not distinct from iti.studentid
	    and eoy.attendanceschoolid is not distinct from iti.attendanceschoolid
	    and eoy.districtid is not distinct from iti.districtid
	    and eoy.subjectid is not distinct from iti.subjectid
	    and eoy.gradelevel is not distinct from iti.gradelevel
	</select>
    
</mapper>