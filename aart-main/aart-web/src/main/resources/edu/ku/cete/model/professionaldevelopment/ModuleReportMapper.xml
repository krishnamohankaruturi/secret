<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.ku.cete.model.professionaldevelopment.ModuleReportMapper">
  <resultMap id="BaseResultMap" type="edu.ku.cete.domain.professionaldevelopment.ModuleReport">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 26 16:52:40 CST 2014.
    -->
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="groupid" jdbcType="BIGINT" property="groupId" />
    <result column="reporttype" jdbcType="VARCHAR" property="reportType" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="stateid" jdbcType="BIGINT" property="stateId" />
    <result column="statusid" jdbcType="BIGINT" property="statusId" />
    <result column="filename" jdbcType="VARCHAR" property="fileName" />
    <result column="activeflag" jdbcType="BIT" property="activeFlag" />
    <result column="createduser" jdbcType="INTEGER" property="createdUser" />
    <result column="createddate" jdbcType="TIMESTAMP" property="createdDate" />
    <result column="modifieduser" jdbcType="INTEGER" property="modifiedUser" />
    <result column="modifieddate" jdbcType="TIMESTAMP" property="modifiedDate" />
    <result column="reporttypeid" jdbcType="SMALLINT" property="reportTypeId" />
    <result column="categoryname" jdbcType="VARCHAR" property="statusName" />
    <result column="organizationid" jdbcType="BIGINT" property="organizationId" />
    <result column="organizationtypeid" jdbcType="BIGINT" property="organizationTypeId" />
    <result column="jsondata" jdbcType="VARCHAR" property="jsonData" />
    <result column="starttime" jdbcType="TIMESTAMP" property="startTime" />
  </resultMap>
  <resultMap id="BaseDataDetailResultMap" type="edu.ku.cete.domain.professionaldevelopment.DataDetailDto">
    <result column="extracttypeid" jdbcType="BIGINT" property="extractTypeId" />
 	<result column="datadetailfilelocation" jdbcType="VARCHAR" property="dataDetailFileLocation" />
    <result column="datadetailfilename" jdbcType="VARCHAR" property="dataDetailFileName" />
    <result column="specialdatadetailfilelocation" jdbcType="VARCHAR" property="specialDataDetailFileLocation" />
    <result column="specialdatadetailfilename" jdbcType="VARCHAR" property="specialDataDetailFileName" /> 
    <result column="specialdatadetailactiveflag" jdbcType="BIT" property="specialDataDetailActiveFlag" /> 
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 26 16:52:40 CST 2014.
    -->
    id, groupid, reporttype, description, stateid, statusid, filename, activeflag, createduser, 
    createddate, modifieduser, modifieddate, reporttypeid, (select categoryname from category where id=statusid),
    organizationid, organizationtypeid, jsondata, starttime, pdffilename
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 26 16:52:40 CST 2014.
    -->
    select 
    <include refid="Base_Column_List" />
    from modulereport
    where id = #{id,jdbcType=BIGINT}
  </select>
  <insert id="insert" parameterType="edu.ku.cete.domain.professionaldevelopment.ModuleReport">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 26 16:52:40 CST 2014.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT nextval('modulereport_id_seq')
    </selectKey>
    insert into modulereport (id, groupid, reporttype, 
      description, stateid, statusid, 
      filename, activeflag, createduser, 
      createddate, modifieduser, modifieddate, 
      reporttypeid, organizationid, organizationtypeid, starttime
      )
    values (#{id,jdbcType=BIGINT}, #{groupId,jdbcType=BIGINT}, #{reportType,jdbcType=VARCHAR}, 
      #{description,jdbcType=VARCHAR}, #{stateId,jdbcType=BIGINT}, #{statusId,jdbcType=BIGINT}, 
      #{fileName,jdbcType=VARCHAR}, #{activeFlag,jdbcType=BIT}, #{createdUser,jdbcType=INTEGER}, 
      #{createdDate,jdbcType=TIMESTAMP}, #{modifiedUser,jdbcType=INTEGER}, #{modifiedDate,jdbcType=TIMESTAMP}, 
      #{reportTypeId,jdbcType=SMALLINT}, #{organizationId,jdbcType=BIGINT}, #{organizationTypeId,jdbcType=BIGINT}, #{startTime,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="edu.ku.cete.domain.professionaldevelopment.ModuleReport">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 26 16:52:40 CST 2014.
    -->
    <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Long">
      SELECT nextval('modulereport_id_seq')
    </selectKey>
    insert into modulereport
    <trim prefix="(" suffix=")" suffixOverrides=",">
      id,
      <if test="groupId != null">
        groupid,
      </if>
      <if test="reportType != null">
        reporttype,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="stateId != null">
        stateid,
      </if>
      <if test="statusId != null">
        statusid,
      </if>
      <if test="fileName != null">
        filename,
      </if>
      <if test="activeFlag != null">
        activeflag,
      </if>
      <if test="createdUser != null">
        createduser,
      </if>
      <if test="createdDate != null">
        createddate,
      </if>
      <if test="modifiedUser != null">
        modifieduser,
      </if>
      <if test="modifiedDate != null">
        modifieddate,
      </if>
      <if test="reportTypeId != null">
        reporttypeid,
      </if>
      <if test="organizationId != null">
        organizationid,
      </if>
      <if test="organizationTypeId != null">
        organizationtypeid,
      </if>
      <if test="jsonData != null">
        jsondata,
      </if>
       <if test="startTime != null">
        starttime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      #{id,jdbcType=BIGINT},
      <if test="groupId != null">
        #{groupId,jdbcType=BIGINT},
      </if>
      <if test="reportType != null">
        #{reportType,jdbcType=VARCHAR},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="stateId != null">
        #{stateId,jdbcType=BIGINT},
      </if>
      <if test="statusId != null">
        #{statusId,jdbcType=BIGINT},
      </if>
      <if test="fileName != null">
        #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="activeFlag != null">
        #{activeFlag,jdbcType=BIT},
      </if>
      <if test="createdUser != null">
        #{createdUser,jdbcType=INTEGER},
      </if>
      <if test="createdDate != null">
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="modifiedUser != null">
        #{modifiedUser,jdbcType=INTEGER},
      </if>
      <if test="modifiedDate != null">
        #{modifiedDate,jdbcType=TIMESTAMP},
      </if>
      <if test="reportTypeId != null">
        #{reportTypeId,jdbcType=SMALLINT},
      </if>
      <if test="organizationId != null">
        #{organizationId,jdbcType=BIGINT},
      </if>
      <if test="organizationTypeId != null">
        #{organizationTypeId,jdbcType=BIGINT},
      </if>
       <if test="jsonData != null">
        #{jsonData,jdbcType=VARCHAR},
      </if>
       <if test="startTime != null">
        #{startTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
	<update id="updateByPrimaryKeySelective"
		parameterType="edu.ku.cete.domain.professionaldevelopment.ModuleReport">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Wed Nov 26 
			16:52:40 CST 2014. -->
		update modulereport
		<set>
			<if test="groupId != null">
				groupid = #{groupId,jdbcType=BIGINT},
			</if>
			<if test="reportType != null">
				reporttype = #{reportType,jdbcType=VARCHAR},
			</if>
			<if test="description != null">
				description = #{description,jdbcType=VARCHAR},
			</if>
			<if test="stateId != null">
				stateid = #{stateId,jdbcType=BIGINT},
			</if>
			<if test="statusId != null">
				statusid = #{statusId,jdbcType=BIGINT},
				completedtime =
				CASE WHEN (#{statusId,jdbcType=BIGINT} =
				(select distinct ct.id from category ct
				join categorytype ctype on ctype.id=ct.categorytypeid and
				ctype.activeflag is true
				where ct.categoryname ilike 'COMPLETED' and ctype.typecode ilike
				'PD_REPORT_STATUS') and completedtime is null)
				THEN #{modifiedDate,jdbcType=TIMESTAMP} ELSE completedtime END,
			</if>
			<if test="fileName != null">
				filename = #{fileName,jdbcType=VARCHAR},
			</if>
			<if test="pdfFileName != null">
				pdffilename = #{pdfFileName,jdbcType=VARCHAR},
			</if>
			<if test="activeFlag != null">
				activeflag = #{activeFlag,jdbcType=BIT},
			</if>
			<if test="createdUser != null">
				createduser = #{createdUser,jdbcType=INTEGER},
			</if>
			<if test="createdDate != null">
				createddate = #{createdDate,jdbcType=TIMESTAMP},
			</if>
			<if test="modifiedUser != null">
				modifieduser = #{modifiedUser,jdbcType=INTEGER},
			</if>
			<if test="modifiedDate != null">
				modifieddate = #{modifiedDate,jdbcType=TIMESTAMP},
			</if>
			<if test="reportTypeId != null">
				reporttypeid = #{reportTypeId,jdbcType=SMALLINT},
			</if>
			<if test="organizationId != null">
				organizationid = #{organizationId,jdbcType=BIGINT},
			</if>
			<if test="organizationTypeId != null">
				organizationtypeid = #{organizationTypeId,jdbcType=BIGINT},
			</if>
			<if test="jsonData != null">
				jsondata = #{jsonData,jdbcType=VARCHAR},
			</if>
			<if test="startTime != null">
				starttime = #{startTime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
  <update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.professionaldevelopment.ModuleReport">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
      This element was generated on Wed Nov 26 16:52:40 CST 2014.
    -->
    update modulereport
    set groupid = #{groupId,jdbcType=BIGINT},
      reporttype = #{reportType,jdbcType=VARCHAR},
      description = #{description,jdbcType=VARCHAR},
      stateid = #{stateId,jdbcType=BIGINT},
      statusid = #{statusId,jdbcType=BIGINT},
      filename = #{fileName,jdbcType=VARCHAR},
      activeflag = #{activeFlag,jdbcType=BIT},
      createduser = #{createdUser,jdbcType=INTEGER},
      createddate = #{createdDate,jdbcType=TIMESTAMP},
      modifieduser = #{modifiedUser,jdbcType=INTEGER},
      modifieddate = #{modifiedDate,jdbcType=TIMESTAMP},
      reporttypeid = #{reportTypeId,jdbcType=SMALLINT},
      organizationid = #{organizationId,jdbcType=BIGINT},
      organizationtypeid = #{organizationTypeId,jdbcType=BIGINT},
      starttime = #{startTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  
  <resultMap id="PDTrainingStatusReportMap" type="edu.ku.cete.web.PDTrainingStatusReportDTO">
    <id column="organizationid" property="organizationId" />
    <result column="stateid" property="stateId" />
    <result column="state" property="state" />
    <result column="districtname" property="districtName" />
    <result column="schoolid" property="schoolId" />
    <result column="schoolname" property="schoolName" />
    <result column="userstatus" property="userStatus" /> 
    <result column="educatorid" property="educatorId" />
    <result column="firstname" property="educatorFirstName" /> 
    <result column="lastname" property="educatorLastName" />    
    <result column="requiredpassedmodules" property="nbrOfPassedRequiredModules" />     
    <result column="requiredenrolledmodules" property="nbrOfEnrolledRequiredModules" /> 
    <result column="numberofrequiredmodules" property="nbrOfRequiredModules" />  
    <result column="optionalpassedmodules" property="nbrOfPassedOptionalModules" />
    <result column="optionalenrolledmodules" property="nbrOfEnrolledOptionalModules" />   
    <result column="numberofoptionalmodules" property="nbrOfOptionalModules" />
  </resultMap>
  
  <resultMap id="PDTrainingDetailsReportMap" type="edu.ku.cete.web.PDTrainingDetailsReportDTO">
  	<result column="organizationid" property="organizationId" />
    <result column="stateid" property="stateId" />
    <result column="state" property="state" />
    <result column="districtname" property="districtName" />
    <result column="schoolid" property="schoolId" />
    <result column="schoolname" property="schoolName" />
    <result column="userstatus" property="userStatus" />
    <result column="educatorid" property="educatorId" />
    <result column="firstname" property="educatorFirstName" /> 
    <result column="lastname" property="educatorLastName" />
        
    <result column="modulename" property="moduleName" />     
    <result column="requiredflag" property="requiredFlag" />      
    <result column="categoryname" property="moduleStatus" />
    <result column="usertestid" property="userTestId" />
    <result column="testresult" property="testResult" />
    
    <collection property="userResponses" ofType="edu.ku.cete.domain.professionaldevelopment.UserTestResponse" column="usertestid">
      <result column="response" property="response"/>
      <result column="foilid" property="foilId"/>
      <result column="foiltext" property="foilText"/>
      <result column="tasktypecode" property="taskTypeCode"/>
    </collection>
        
  </resultMap>
  
  <resultMap id="AccessibilityExtractMap" type="edu.ku.cete.web.AccessibilityExtractDTO">
    <id column="studentid" property="studentId" />
    <collection column="studentid" javaType="ArrayList" ofType="edu.ku.cete.web.StudentProfileItemAttributeDTO" property="attributes">
      <id column="spiav_id" property="id" />
      <result column="modifieddate" property="modifiedDate" />
      <result column="modifieduser" property="modifiedUser" />
      <result column="attributeNameId" property="attributeNameId" />
      <result column="attributeName" property="attributeName" />
      <result column="attributeContainerId" property="attributeContainerId" />
      <result column="attributeContainerName" property="attributeContainerName" />
      <result column="selectedValue" property="selectedValue" />
      <result column="viewOption" property="viewOption" />
    </collection>
  </resultMap>
  
  <resultMap id="QuestarMap" type="edu.ku.cete.web.QuestarExtractDTO">
    <result column="state" property="stateName" />
    <result column="district" property="districtName" />
    <result column="subjectareaname" property="subjectAreaName" />
    <result column="subjectareacode" property="subjectAreaCode" />
    <result column="school" property="schoolName" />
    <result column="gradelevel" property="gradeLevel" />
    <result column="legallastname" property="studentLastName" />
    <result column="legalfirstname" property="studentFirstName" />
    <result column="legalmiddlename" property="studentMiddleName" />
    <result column="studentid" property="studentId" />
    <result column="statestudentidentifier" property="stateStudentIdentifier" />
    <result column="dateofbirth" property="studentDateOfBirth" />
    <result column="testtypecode" property="testTypeCode" />
  </resultMap>
  
  <select id="checkKAPExtract" resultType="INTEGER">
    select count(org.id)
        from orgassessmentprogram as oap, organization as org
        where oap.organizationid = org.id and org.id=#{organizationId,jdbcType=BIGINT} 
        AND oap.assessmentprogramid=(select id from assessmentprogram where abbreviatedname='KAP')
        AND oap.activeflag is true
  </select> 

  <select id="getAdminModuleReports" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from modulereport
    where groupid = #{groupId,jdbcType=BIGINT} and activeflag is true
   		<if test="isStateAdmin or isDistrictAdmin" >
			and organizationid = #{organizationId,jdbcType=BIGINT} 
		</if>
    AND createduser = #{userId,jdbcType=BIGINT}
    AND reporttypeid IN 
  		<foreach close=")" collection="typeIds" item="typeId" open="(" separator=",">
  			#{typeId,jdbcType=SMALLINT}
  		</foreach>		
		order by reporttypeid
  </select>
  
  <select id="countAdminModuleReports" resultType="INTEGER">
    select count(id)    
    from modulereport
    where groupid = #{groupId,jdbcType=BIGINT} and activeflag is true
   		<if test="isStateAdmin or isDistrictAdmin" >
			and organizationid = #{organizationId,jdbcType=BIGINT} 
		</if>		
    AND createduser = #{userId,jdbcType=BIGINT}
    AND reporttypeid IN 
  		<foreach close=")" collection="typeIds" item="typeId" open="(" separator=",">
  			#{typeId,jdbcType=SMALLINT}
  		</foreach>		
  </select>  
  
  <select id="generatePDTrainingStatusReportItems" resultMap="PDTrainingStatusReportMap">
  	/* NO LOAD BALANCE */
  	WITH orgchildren AS (
		select id,organizationtypeid from organization_children(<choose><when test="districtId != null">#{districtId}</when><otherwise>#{stateId}</otherwise></choose>)
			union select id,organizationtypeid from organization where id=(<choose><when test="districtId != null">#{districtId}</when><otherwise>#{stateId}</otherwise></choose>)
	), paorgdata AS (select organizationid, porg from 
		  (select distinct uo.organizationid,
		    (select ARRAY[id::text, displayidentifier::text, organizationname::text] as porg from (
			select id,organizationname,displayidentifier from organization_parent(uo.organizationid) where contractingorganization is true
			union select id,organizationname,displayidentifier from organization where id=uo.organizationid and contractingorganization is true) result limit 1)
			from aartuser au
			<if test="stateId == null">
				inner join usersorganizations uo on uo.aartuserid = au.id AND uo.activeflag = true
			</if>
			<if test="stateId != null or districtId != null">
				inner join usersorganizations uo on (uo.aartuserid = au.id and uo.activeflag = true and uo.organizationid = (
					select organizationid from usersorganizations uorgs
						join orgchildren on orgchildren.id=uorgs.organizationid
						where uorgs.aartuserid=au.id AND uorgs.activeflag = true order by organizationtypeid desc limit 1))
			</if>
			inner join userorganizationsgroups uog on uog.userorganizationid = uo.id and uog.activeflag = true
			inner join groups grp on uog.groupid = grp.id
			inner join groupauthorities ga on ga.groupid = grp.id
			inner join authorities per 
				on (ga.authorityid = per.id and (authority = 'VIEW_MODULES' OR authority = 'VIEW_ADMIN')) where au.activeflag is true and ga.activeflag is true) as parentorg  
					<if test="stateId != null">
						where cast(porg[1] as bigint) = #{stateId,jdbcType=BIGINT}
					</if>					
				) 
		select distinct paorg.porg[3] as state, 
			au.id as userpkid,
			au.uniquecommonidentifier as educatorid,
			au.firstname, 
			au.surname as lastname, 
			uo.organizationid, 
			paorg.porg[1] as stateid,
			(select (CASE WHEN suo.statuscode = '1' THEN 'Pending'
				WHEN suo.statuscode = '2' THEN 'Active' ELSE 'New' END) as userstatus 
					FROM aartuser as auinner 
					left join (select max(uog.status) as statuscode, uo.aartuserid from userorganizationsgroups uog 
									inner join usersorganizations uo on uog.userorganizationid = uo.id
								where uog.activeflag = true  and uo.activeflag = true group by uo.aartuserid) suo on suo.aartuserid=au.id 
					WHERE auinner.activeFlag is true and auinner.id = au.id),			
			case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='DT')) 
				then 
					(select organizationname as districtname from organization where id = uo.organizationid)
				else 
					(select organizationname as districtname from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
					where organizationtypeid = (select id from organizationtype where typecode='DT') limit 1)	
				end,
			case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='SCH')) 
				then 
					(select displayidentifier as schoolid from organization where id = uo.organizationid)
				else 
					(select displayidentifier as schoolid from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
					where organizationtypeid = (select id from organizationtype where typecode='SCH') limit 1)	
				end,
			case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='SCH')) 
				then 
					(select organizationname as schoolname from organization where id = uo.organizationid)
				else 
					(select organizationname as schoolname from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
					where organizationtypeid = (select id from organizationtype where typecode='SCH') limit 1)	
				end,
			(select count(um.id) as requiredpassedmodules from module m
				join modulestate ms on ms.moduleid = m.id
				JOIN category msc ON msc.id = ms.statusid
				join usermodule um on (um.moduleid = m.id and um.activeflag is true)
				JOIN category umc ON umc.id = um.enrollmentstatusid
				where m.requiredflag is true and msc.categorycode = 'RELEASED' and umc.categorycode = 'PASSED' 
				and um.testresult is true and ms.stateid=cast(paorg.porg[1] as bigint) and um.userid=au.id),
			(select count(um.id) as requiredenrolledmodules from module m
				join modulestate ms on ms.moduleid = m.id
				JOIN category msc ON msc.id = ms.statusid
				join usermodule um on (um.moduleid = m.id and um.activeflag is true)
				where m.requiredflag is true and msc.categorycode = 'RELEASED' 
				and ms.stateid=cast(paorg.porg[1] as bigint) and um.userid=au.id),	
			(select count(m.id) as numberofrequiredmodules from module m
				join modulestate ms on ms.moduleid = m.id
				JOIN category msc ON msc.id = ms.statusid
				where m.requiredflag is true and msc.categorycode = 'RELEASED' 
				and ms.stateid = cast(paorg.porg[1] as bigint)),
			(select count(um.id) as optionalpassedmodules from module m
				join modulestate ms on ms.moduleid = m.id
				JOIN category msc ON msc.id = ms.statusid
				join usermodule um on (um.moduleid = m.id and um.activeflag is true)
				JOIN category umc ON umc.id = um.enrollmentstatusid
				where m.requiredflag is false and msc.categorycode = 'RELEASED' and umc.categorycode = 'PASSED' 
				and um.testresult is true and ms.stateid=cast(paorg.porg[1] as bigint) and um.userid=au.id),
			(select count(um.id) as optionalenrolledmodules from module m
				join modulestate ms on ms.moduleid = m.id
				JOIN category msc ON msc.id = ms.statusid
				join usermodule um on (um.moduleid = m.id and um.activeflag is true)
				where m.requiredflag is false and msc.categorycode = 'RELEASED' 
				and ms.stateid=cast(paorg.porg[1] as bigint) and um.userid=au.id),
			(select count(m.id) as numberofoptionalmodules from module m
				join modulestate ms on ms.moduleid = m.id
				JOIN category msc ON msc.id = ms.statusid
				where m.requiredflag is false and msc.categorycode = 'RELEASED' and ms.stateid = cast(paorg.porg[1] as bigint))
		from aartuser au		
		<if test="stateId == null">
			inner join usersorganizations uo on uo.aartuserid = au.id and uo.activeflag = true
		</if>
		<if test="stateId != null or districtId != null">
			inner join usersorganizations uo on (uo.aartuserid = au.id and uo.activeflag = true and uo.organizationid = (
					select organizationid from usersorganizations uorgs
						join orgchildren on orgchildren.id=uorgs.organizationid
						where uorgs.aartuserid=au.id and uorgs.activeflag = true order by organizationtypeid desc limit 1))
		</if>		
		inner join userorganizationsgroups uog on uog.userorganizationid = uo.id and uog.activeflag = true 
		inner join groups grp on uog.groupid = grp.id
		inner join groupauthorities ga on ga.groupid = grp.id
		inner join authorities per on (ga.authorityid = per.id and (authority = 'VIEW_MODULES' OR authority = 'VIEW_ADMIN'))
		inner join 
		(select * from paorgdata) 
		  paorg on paorg.organizationid = uo.organizationid
		inner join orgassessmentprogram orgap on orgap.organizationid = cast (paorg.porg[1] as bigint) and orgap.activeflag is true
		inner join assessmentprogram ap on (orgap.assessmentprogramid = ap.id and ap.abbreviatedname = 'DLM')
		where au.activeflag is true and ga.activeflag is true 
			<if test="stateId != null">
				and cast (paorg.porg[1] as bigint) = #{stateId,jdbcType=BIGINT} 
			</if>
		order by state, districtname, schoolname, au.id
  </select>

  <resultMap id="DLMPDTrainingListItemsMap" type="edu.ku.cete.web.DLMPDTrainingDTO">
    <id column="id" property="userOrganizationGroupId" />    
    <result column="username"  property="userName" />
    <result column="surname" property="lastName" />
    <result column="firstname" property="firstName" /> 
    <result column="email" property="email" />  
    <result column="uniquecommonidentifier" property="idNumber" /> 
    <result column="state" property="state" />
    <result column="districtname" property="districtName" />
    <result column="districtid" property="districtId" />
    <result column="schoolname" property="schoolName" /> 
    <result column="schoolid" property="schoolId" />
    <result column="groupname"  property="role" />
    <result column="createddate"  property="createdDate" />    
    <result column="trainingcompleted"  property="rtComplete" />
    <result column="trainingcompletiondate"  property="rtCompleteDate" />
    <result column="userTrainingType"  property="userTrainingType" />
  </resultMap>
  	    
  <select id="generateDLMPDTrainingListItems" resultMap="DLMPDTrainingListItemsMap">
	select  distinct au.username, au.surname, au.firstname, au.email, au.id as uniquecommonidentifier, 
		stateorg.organizationname as state,
		case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='DT')) 
		 then 
		     (select organizationname as districtname from organization where id = uo.organizationid)
		 else 
		     (select organizationname as districtname from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
			where organizationtypeid = (select id from organizationtype where typecode='DT') limit 1)	
		end,
		case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='DT')) 
		 then 
		     (select displayidentifier as districtid from organization where id = uo.organizationid)
		 else 
		     (select displayidentifier as districtid from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
			where organizationtypeid = (select id from organizationtype where typecode='DT') limit 1)	
		end,	
		case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='SCH')) 
		 then 
		     (select organizationname as schoolname from organization where id = uo.organizationid)
		 else 
		     (select organizationname as schoolname from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
			where organizationtypeid = (select id from organizationtype where typecode='SCH') limit 1)	
		end,
		case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='SCH')) 
		 then 
		     (select displayidentifier as schoolid from organization where id = uo.organizationid)
		 else 
		     (select displayidentifier as schoolid from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
			where organizationtypeid = (select id from organizationtype where typecode='SCH') limit 1)	
		end,	
		array_to_string(ARRAY(select * from (select distinct groupname from groups g 
			inner join userorganizationsgroups uog on uog.groupid = g.id and uog.activeflag is true and uog.userorganizationid = uo.id
			inner join userassessmentprogram uap on uog.id = uap.userorganizationsgroupsid and uap.activeflag is true
			where uap.aartuserid = au.id and g.activeflag is true and uap.assessmentprogramid = (select id from assessmentprogram where abbreviatedname='DLM' and activeflag is true)) as name
			 order by groupname != 'Teacher', groupname != 'Test Proctor' asc),'; ') as groupname,
			au.createddate, updtd.trainingcompletiondate,
		case when (updtd.trainingcompleted is not null and updtd.trainingcompleted is true) 
		 then 'Yes' else 'No' end as trainingcompleted, 
		 case when (moodle.usertrainingtype like '%Returning%') then 'Returning' else 'New' end as usertrainingtype
	from aartuser au 
		left join (select max(uog.status) as statuscode, uo.aartuserid from userorganizationsgroups uog 
					inner join usersorganizations uo on uog.userorganizationid = uo.id where uo.activeflag = true and uog.activeflag = true
					group by uo.aartuserid) suo on suo.aartuserid=au.id
	        join userassessmentprogram ua on ua.aartuserid = au.id and ua.activeflag is true and ua.assessmentprogramid = (select id from assessmentprogram where abbreviatedname='DLM' and activeflag is true) 								
		join userorganizationsgroups uog on ua.userorganizationsgroupsid = uog.id and uog.activeflag = true 
		join usersorganizations uo on uog.userorganizationid = uo.id and uo.activeflag = true
		<if test="organizationIds == null" >
		  join organization o on uo.organizationid = o.id and o.activeflag is true
		</if> 
		join organization stateorg 
			on stateorg.id = (CASE when ((select organizationtypeid from organization where id= uo.organizationid)= 2) 
						then uo.organizationid else (select id from organization_parent_tree(uo.organizationid, 7) where organizationtypeid=2) end)				
		left join userpdtrainingdetail updtd on (updtd.userid = au.id and updtd.currentschoolyear =  #{currentSchoolYear}
													and updtd.id=(select id from userpdtrainingdetail where userid=au.id order by modifieddate desc limit 1))
													
<!-- 		F730  -->
		left join moodleupload moodle on (moodle.aartuserid = au.id and moodle.schoolyear =  #{currentSchoolYear}
							and moodle.id=(select id from moodleupload where aartuserid=au.id and course = 'NewReturning' and schoolyear = #{currentSchoolYear} order by modifieddate desc limit 1))
<!-- 		F730  -->
 	
	where au.activeflag is true 
	<if test="organizationIds != null" >
			AND(	
		        <foreach collection="organizationIds" item="orgid" open="(" close=")" separator="OR">
		           uo.organizationid in((select id from organization_children(#{orgid}::integer))) or uo.organizationid = #{orgid}::integer
		        </foreach>)
        </if> 
   <if test="!includeInternalUsers">
   			and au.internaluserindicator is false
   		</if>
    and suo.statuscode is not null 
    and suo.statuscode &lt; 3
   	order by state, districtname, schoolname
  </select>
  
   <select id="generateDLMPDTrainingManagementListItems" resultMap="DLMPDTrainingListItemsMap">
	select uog.id,au.username, au.surname, au.firstname, au.email, au.id as uniquecommonidentifier, 
		stateorg.organizationname as state,
		case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='DT')) 
		 then 
		     (select organizationname as districtname from organization where id = uo.organizationid)
		 else 
		     (select organizationname as districtname from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
			where organizationtypeid = (select id from organizationtype where typecode='DT') limit 1)	
		end,
		case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='DT')) 
		 then 
		     (select displayidentifier as districtid from organization where id = uo.organizationid)
		 else 
		     (select displayidentifier as districtid from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
			where organizationtypeid = (select id from organizationtype where typecode='DT') limit 1)	
		end,	
		case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='SCH')) 
		 then 
		     (select organizationname as schoolname from organization where id = uo.organizationid)
		 else 
		     (select organizationname as schoolname from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
			where organizationtypeid = (select id from organizationtype where typecode='SCH') limit 1)	
		end,
		case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='SCH')) 
		 then 
		     (select displayidentifier as schoolid from organization where id = uo.organizationid)
		 else 
		     (select displayidentifier as schoolid from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
			where organizationtypeid = (select id from organizationtype where typecode='SCH') limit 1)	
		end,	
		g.groupname, au.createddate, updtd.trainingcompletiondate,
		case when (updtd.trainingcompleted is not null and updtd.trainingcompleted is true) 
		 then 'Yes' else 'No' end as trainingcompleted,
		 case when (moodle.usertrainingtype like '%Returning%') then 'Returning' else 'New' end as usertrainingtype
	from aartuser au 
		left join (select max(uog.status) as statuscode, uo.aartuserid from userorganizationsgroups uog 
					inner join usersorganizations uo on uog.userorganizationid = uo.id where uo.activeflag = true and uog.activeflag = true
					group by uo.aartuserid) suo on suo.aartuserid=au.id
	        join userassessmentprogram ua on ua.aartuserid = au.id and ua.activeflag is true and ua.assessmentprogramid = (select id from assessmentprogram where abbreviatedname='DLM' and activeflag is true) 								
		join userorganizationsgroups uog on ua.userorganizationsgroupsid = uog.id and uog.activeflag = true 
		join usersorganizations uo on uog.userorganizationid = uo.id and uo.activeflag = true
		<if test="organizationIds == null" >
		  join organization o on uo.organizationid = o.id and o.activeflag is true
		</if>  
		join groups g on uog.groupid = g.id
		join organization stateorg 
			on stateorg.id = (CASE when ((select organizationtypeid from organization where id= uo.organizationid)= 2) 
						then uo.organizationid else (select id from organization_parent_tree(uo.organizationid, 7) where organizationtypeid=2) end)			
		left join userpdtrainingdetail updtd on (updtd.userid = au.id and updtd.currentschoolyear =  #{currentSchoolYear}
													and updtd.id=(select id from userpdtrainingdetail where userid=au.id order by modifieddate desc limit 1))
<!-- 		F730  -->
		left join moodleupload moodle on (moodle.aartuserid = au.id and moodle.schoolyear =  #{currentSchoolYear}
							and moodle.id=(select id from moodleupload where aartuserid=au.id and course = 'NewReturning' and schoolyear = #{currentSchoolYear} order by modifieddate desc limit 1))
<!-- 		F730  -->		
	where au.activeflag is true
	<if test="organizationIds != null" >
			AND(	
		        <foreach collection="organizationIds" item="orgid" open="(" close=")" separator="OR">
		           uo.organizationid in((select id from organization_children(#{orgid}::integer))) or uo.organizationid = #{orgid}::integer
		        </foreach>)
        </if>
    <if test="!includeInternalUsers">
   	and au.internaluserindicator is false
   	</if> 
    and suo.statuscode is not null 
    and suo.statuscode &lt; 3  
    and stateorg.activeflag is true
	order by state, districtname, schoolname, au.modifieddate
  </select>
  
  
  <select id="generatePDTrainingDetailsReportItems" resultMap="PDTrainingDetailsReportMap">
  	/* NO LOAD BALANCE */
	WITH orgchildren AS (
		select id,organizationtypeid from organization_children(<choose><when test="districtId != null">#{districtId}</when><otherwise>#{stateId}</otherwise></choose>)
			union select id,organizationtypeid from organization where id=(<choose><when test="districtId != null">#{districtId}</when><otherwise>#{stateId}</otherwise></choose>)
	), 
	paorgdata AS (select organizationid, porg from 
			  (select distinct uo.organizationid,
			    (select ARRAY[id::text, displayidentifier::text, organizationname::text] as porg from (
				select id,organizationname,displayidentifier from organization_parent(uo.organizationid) where contractingorganization is true
				union select id,organizationname,displayidentifier from organization where id=uo.organizationid and contractingorganization is true) result limit 1)
				from aartuser au
				<if test="stateId == null">
					inner join usersorganizations uo on uo.aartuserid = au.id and uo.activeflag = true
				</if>
				<if test="stateId != null or districtId != null">
					inner join usersorganizations uo on (uo.aartuserid = au.id and and uo.activeflag = true uo.organizationid = (
						select organizationid from usersorganizations uorgs
							join orgchildren on orgchildren.id=uorgs.organizationid
							where uorgs.aartuserid=au.id and uorgs.activeflag = true order by organizationtypeid desc limit 1))
				</if>
				inner join userorganizationsgroups uog on uog.userorganizationid = uo.id and uog.activeflag = true
				inner join groups grp on uog.groupid = grp.id
				inner join groupauthorities ga on ga.groupid = grp.id
				inner join authorities per 
					on (ga.authorityid = per.id and (authority = 'VIEW_MODULES' OR authority = 'VIEW_ADMIN')) where au.activeflag is true and ga.activeflag is true) as parentorg
						<if test="stateId != null">  
							where cast(porg[1] as bigint) = #{stateId,jdbcType=BIGINT}
						</if>
					)
	,trainingusers AS (
			select distinct paorg.porg[3] as state, 
				au.id as userpkid, 
				au.uniquecommonidentifier as educatorid,
				au.firstname, 
				au.surname as lastname, 
				uo.organizationid, 
				paorg.porg[1] as stateid,
				(select (CASE WHEN suo.statuscode = '1' THEN 'Pending'
					WHEN suo.statuscode = '2' THEN 'Active' ELSE 'New' END) as userstatus 
						FROM aartuser as auinner 
						left join (select max(uog.status) as statuscode, uo.aartuserid from userorganizationsgroups uog 
										inner join usersorganizations uo on uog.userorganizationid = uo.id where uo.activeflag = true and uog.activeflag = true
									group by uo.aartuserid) suo on suo.aartuserid=au.id 
						WHERE auinner.activeFlag is true and auinner.id = au.id),							
				case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='DT')) 
					then 
						(select organizationname as districtname from organization where id = uo.organizationid)
					else 
						(select organizationname as districtname from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
						where organizationtypeid = (select id from organizationtype where typecode='DT') limit 1)	
					end,
				case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='SCH')) 
					then 
						(select displayidentifier as schoolid from organization where id = uo.organizationid)
					else 
						(select displayidentifier as schoolid from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
						where organizationtypeid = (select id from organizationtype where typecode='SCH') limit 1)	
					end,
				case when ((select organizationtypeid from organization where id = uo.organizationid) = (select id from organizationtype where typecode='SCH')) 
					then 
						(select organizationname as schoolname from organization where id = uo.organizationid)
					else 
						(select organizationname as schoolname from organization_parent_tree(uo.organizationid, (select organizationtypeid::integer from organization where id=uo.organizationid))
						where organizationtypeid = (select id from organizationtype where typecode='SCH') limit 1)	
					end
			from aartuser au
			<if test="stateId == null">
				inner join usersorganizations uo on uo.aartuserid = au.id and uo.activeflag = true
			</if>
			<if test="stateId != null or districtId != null">
				inner join usersorganizations uo on (uo.aartuserid = au.id and activeflag = true and uo.organizationid = (
					select organizationid from usersorganizations uorgs
						join orgchildren on orgchildren.id=uorgs.organizationid
						where uorgs.aartuserid=au.id and uorgs.activeflag = true order by organizationtypeid desc limit 1))
			</if>
			inner join userorganizationsgroups uog on uog.userorganizationid = uo.id and uog.activeflag = true
			inner join groups grp on uog.groupid = grp.id
			inner join groupauthorities ga on ga.groupid = grp.id
			inner join authorities per on (ga.authorityid = per.id and (authority = 'VIEW_MODULES' OR authority = 'VIEW_ADMIN'))
			inner join 
			(select * from paorgdata) 
			  paorg on paorg.organizationid = uo.organizationid
			inner join orgassessmentprogram orgap on orgap.organizationid = cast (paorg.porg[1] as bigint) and orgap.activeflag is true
			inner join assessmentprogram ap on (orgap.assessmentprogramid = ap.id and ap.abbreviatedname = 'DLM')
			where au.activeflag is true and ga.activeflag is true 
				and au.id = ANY(ARRAY(select distinct userid from usermodule where activeflag is true
					<if test="stateId != null">
						and stateid = #{stateId,jdbcType=BIGINT}
					</if> 
					))
				<if test="stateId != null">
					and cast (paorg.porg[1] as bigint) = #{stateId,jdbcType=BIGINT}
				</if> 
		)
		select * from trainingusers 
		join (
				select distinct um.userid as userpkid, um.testresult, m.name as modulename, m.requiredflag, 
				m.id as moduleid, m.testid, m.tutorialid, umc.categoryname, uts.usertestid, 
				tt.code as tasktypecode, utr.foilid, utr.response, f.foiltext
				from usermodule um 
				join module m on m.id = um.moduleid
				join category umc on umc.id = um.enrollmentstatusid
				left outer join usertest ut on (ut.testid = m.tutorialid and ut.usermoduleid=um.id)
				left outer join usertestsection uts on uts.usertestid = ut.id
				left outer join testsection ts on (uts.testsectionid=ts.id and ts.sectionorder=1)
				left outer join usertestresponse utr on (utr.testsectionid = ts.id and utr.usertestsectionid = uts.id)
				left outer join taskvariant tv on tv.id= utr.taskvariantid
				left outer join tasktype tt on tt.id = tv.tasktypeid
				left outer join testsectionstaskvariants tstv on (tstv.testsectionid = ts.id and 
						((tstv.taskvariantposition=1 and tt.code='MC-K') or (tstv.taskvariantposition=2 and tt.code='CR')))
				left outer join foil f on f.id = utr.foilid
				where 
					<if test="stateId != null">
						um.stateid = #{stateId,jdbcType=BIGINT} 
					</if> 
					<if test="districtId != null and stateId == null">
						and um.stateid = (select id from organization_parent(#{districtId}) where contractingorganization is true union 
										select id from organization where id=#{districtId} and contractingorganization is true limit 1)
					</if>
				and um.activeflag is true and ut.activeflag is true 
				and um.userid = ANY(ARRAY(select userpkid from trainingusers))
			) tutorialresponses on tutorialresponses.userpkid=trainingusers.userpkid
		order by trainingusers.state, trainingusers.districtname, trainingusers.schoolname, trainingusers.userpkid, moduleid,usertestid
  
	</select>
  
  <select id="getReportsForUserByTypes" resultMap="BaseResultMap">
  	SELECT <include refid="Base_Column_List" />
  	FROM modulereport
  	WHERE activeflag = TRUE
  	AND createduser = #{userId,jdbcType=BIGINT}	 
  	AND stateid = #{organizationId,jdbcType=BIGINT}
  	AND reporttypeid IN 
  		<foreach close=")" collection="typeIds" item="typeId" open="(" separator=",">
  			#{typeId,jdbcType=SMALLINT}
  		</foreach>
  </select>
  
   <select id="getReportsByTypeForExitOrSC" resultMap="BaseResultMap">
  	SELECT <include refid="Base_Column_List" />
  	FROM modulereport
  	WHERE activeflag = TRUE
  	AND stateid = #{organizationId,jdbcType=BIGINT}
  	AND reporttypeid IN 
  		<foreach close=")" collection="typeIds" item="typeId" open="(" separator=",">
  			#{typeId,jdbcType=SMALLINT}
  		</foreach>
  </select>
  
  <select id="getReportsForUserByTypesWithDataDictionaryDetail" resultMap="BaseDataDetailResultMap">
  	SELECT 
	extracttypeid as extracttypeid,
   	filename as datadetailfilename,
   	filelocation as datadetailfilelocation,
    specialdatadetailfilename as specialdatadetailfilename,
    specialdatadetailfilelocation as specialdatadetailfilelocation,
    (CASE 
			WHEN   specialdatadetailfilename is null 
			THEN 
				false
			ELSE 
				true
		END)
     as specialdatadetailactiveflag
	FROM datadictionaryfilemapping dfm
  	WHERE activeflag is TRUE
  	AND assessmentprogramid =#{assessmentprogramid,jdbcType=BIGINT}  
  	AND stateid =#{organizationid,jdbcType=BIGINT}
  	AND extracttypeid IN 
  		<foreach close=")" collection="typeIds" item="typeId" open="(" separator=",">
  			#{typeId,jdbcType=BIGINT}
  		</foreach>
  </select>
  
  <select id="countReportsForUserByTypes" resultType="INTEGER">
  	SELECT COUNT(id)
  	FROM modulereport
  	WHERE activeflag = TRUE
  	AND createduser = #{userId,jdbcType=BIGINT}  	
  	AND reporttypeid IN 
  		<foreach close=")" collection="typeIds" item="typeId" open="(" separator=",">
  			#{typeId,jdbcType=SMALLINT}
  		</foreach>
  </select>
  
  <select id="getMostRecentReportByTypeId" resultType="edu.ku.cete.domain.professionaldevelopment.ModuleReport">
    /* NO LOAD BALANCE */
  	SELECT *
  	FROM modulereport
  	WHERE activeflag is TRUE
  	<if test="userId != null">
  		AND createduser = #{userId,jdbcType=BIGINT}  	
  	</if>
  	AND reporttypeid = #{typeId, jdbcType=SMALLINT}  	
	AND stateid = #{organizationId,jdbcType=BIGINT}
	ORDER BY id desc
	LIMIT 1
  </select>
  
  <select id="getMostRecentCompletedReportByTypeId" resultType="edu.ku.cete.domain.professionaldevelopment.ModuleReport">
    /* NO LOAD BALANCE */
  	SELECT *
  	FROM modulereport
  	WHERE activeflag is TRUE
  	<if test="userId != null">
  		AND createduser = #{userId,jdbcType=BIGINT}  	
  	</if>
  	AND reporttypeid = #{typeId, jdbcType=SMALLINT}
  	and statusid=(select id from category where categorycode='COMPLETED' 
  			and categorytypeid=(select id from categorytype where typecode='PD_REPORT_STATUS')) ORDER BY id desc LIMIT 1
  </select>
  
  <select id="getAccessibilityReportByStudentIds" parameterType="map" resultMap="AccessibilityExtractMap">
	/* NO LOAD BALANCE */
	SELECT 
		spiav.studentid, spiav.id as spiav_id, spiav.modifieddate, spiav.modifieduser,
		pianc.id as "id",pia.id as "attributeNameId",pia.attributename as "attributeName",
		piac.id as "attributeContainerId",piac.attributecontainer as "attributeContainerName",
		spiav.selectedvalue as "selectedValue", 
		case when pss.viewoption is not null then pss.viewoption when pianacvo.viewoption is not null then pianacvo.viewoption else 'enable' end as "viewOption"
	FROM
		profileitemattribute pia 
		JOIN profileItemAttributenameAttributeContainer pianc ON pia.id =  pianc.attributenameid
		JOIN profileitemattributecontainer piac ON pianc.attributecontainerid = piac.id
		LEFT JOIN studentprofileitemattributevalue spiav ON pianc.id = spiav.profileitemattributenameattributecontainerid and spiav.activeflag = true
		LEFT OUTER JOIN profileitemattrnameattrcontainerviewoptions pianacvo ON pianacvo.pianacid = pianc.id 
			<if test="assessmentPrograms !=null">
				and pianacvo.assessmentprogramid in 
				<foreach collection="assessmentPrograms" item="assessmentprogramid" open="(" close=")" separator=",">
					#{assessmentprogramid}
				</foreach>
			</if>
		inner join student st on st.id = spiav.studentid and st.activeflag is true
		left join pnpstatesettings pss on pss.pinacid = pianc.id and pss.activeflag is true and pss.stateid=st.stateid and
		pss.assessmentprogramid = pianacvo.assessmentprogramid
	WHERE spiav.studentid = ANY(ARRAY
			<foreach collection="studentIds"
				item="studentId" open="[" close="]" separator="," >
				#{studentId, jdbcType=BIGINT}
			</foreach>) 
	ORDER BY spiav.studentid, piac.attributecontainer, pia.id
  </select>
  
  <select id="getQuestarDataForOrg" parameterType="map" resultMap="QuestarMap">
  /*NO LOAD BALANCE*/
    SELECT DISTINCT
      otd.statename as state,			
		otd.districtname as district,
		otd.schoolname as school,
      sa.subjectareaname, sa.subjectareacode,
      gc.abbreviatedname AS gradelevel, s.legallastname, s.legalfirstname, s.legalmiddlename,
      s.id AS studentid, s.statestudentidentifier, s.dateofbirth, tt.testtypecode
    FROM
      enrollmenttesttypesubjectarea ettsa,
      enrollment e inner join organizationtreedetail otd on e.attendanceschoolid=otd.schoolid,
      testtype tt,
      subjectarea sa,
      gradecourse gc,
      student s
    inner join studentassessmentprogram sap on sap.studentid = s.id and sap.activeflag = true
      <if test="isTeacher">
        ,
        enrollmentsrosters er,
        roster r
      </if>
      
    WHERE ettsa.enrollmentid = e.id
      AND ettsa.testtypeid = tt.id
      AND ettsa.subjectareaid = sa.id
      AND e.studentid = s.id
      AND e.currentgradelevel = gc.id
      AND ((
	      sa.subjectareacode IN ('D74', 'SELAA')
	      AND gc.abbreviatedname IN ('3', '4', '5', '6', '7', '8', '9', '10', '11', '12')
	    )
	    OR (
	      sa.subjectareacode IN ('SSCIA')
	      AND gc.abbreviatedname IN ('4', '8', '10')
	    )
	  )
      AND tt.testtypecode IN ('GN', 'P')
      AND e.attendanceschoolid IN
        (SELECT id
        FROM organization_children(#{organizationId,jdbcType=BIGINT})
        WHERE organizationtypeid = (SELECT id FROM organizationtype WHERE typecode = 'SCH')
        UNION SELECT #{organizationId,jdbcType=BIGINT})
      AND e.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and
      <if test="assessmentPrograms !=null">
      sap.assessmentprogramid in
       <foreach collection="assessmentPrograms" item="assessmentprogramid" open="(" close=")" separator=",">
      #{assessmentprogramid}
      </foreach>
      </if>
      <if test="isTeacher">
        AND er.enrollmentid = e.id
        AND er.rosterid = r.id
        AND r.teacherid = #{educatorId,jdbcType=BIGINT}
      </if>
    ORDER BY state, district, s.legallastname, s.legalfirstname, s.id
  </select>
  
  
  <select id="selectModuleReportsForDeletion" resultMap="BaseResultMap">   
    select 
    <include refid="Base_Column_List" />
    from modulereport
    where activeflag is false and deleteflag is false and reporttypeid NOT IN (15,16,17,21,22,23,28,29,30,31,32,40)
    order by reporttype
  </select>
  
  <update id="updateModuleReportDeleteFlag" parameterType="java.lang.Long" >
  	update modulereport
  	set deleteflag = true,
  	modifieddate = current_timestamp
  	where id = #{id, jdbcType=BIGINT}
  	and activeflag is false;
  </update>
  
  <select id="updateAndGetQueuedModuleReport" resultMap="BaseResultMap">
    select * from updateandgetqueuedmodulereport( #{inqueueStatusId,jdbcType=BIGINT},  #{inprogressStatusId,jdbcType=BIGINT});
  </select>
 
  <select id="getQueuedReports" resultMap="BaseResultMap">
  	SELECT
  	DISTINCT ON (reporttypeid) 
  	*
	FROM   modulereport
	where statusid = #{inQueueStatusId} and activeflag is true 
	and reporttypeid not in (select distinct reporttypeid from modulereport where activeflag is true and statusid = #{inProgressStatusId} 
	<if test="organizationCode !=null">
		 and organizationtypeid in (select id from organizationtype where typecode=#{organizationCode})</if>)
	<if test="organizationCode !=null">
		and organizationtypeid in (select id from organizationtype where typecode=#{organizationCode} )
	</if>
	ORDER  BY  reporttypeid, modifieddate ASC, id;
  </select>
  
  <update id="moveReportToInProgress">
  	update modulereport set statusid = #{inProgressStatusId}, modifieddate = now(), starttime = now() 
  	where id=#{reportId}
  </update>
  
 <select id ="getMostRecentGRFExtractReportByTypeId" resultMap="BaseResultMap" >
	 select * from modulereport where reporttypeid=#{reporttype} and stateid = #{organizationId,jdbcType=BIGINT} and activeflag is true;  
 </select> 
</mapper>