<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="edu.ku.cete.model.TestSessionDao">
	<resultMap id="BaseResultMap" type="edu.ku.cete.domain.TestSession">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		<result column="id" property="id" jdbcType="BIGINT" />
		<result column="rosterid" property="rosterId" jdbcType="BIGINT" />
		<result column="testid" property="testId" jdbcType="BIGINT" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="BIGINT" />
		<result column="source" property="source" jdbcType="VARCHAR" />
		<result column="activeflag" property="activeFlag" jdbcType="BIT" />
		<result column="attendanceschoolid" property="attendanceSchoolId" jdbcType="BIGINT" />
		<result column="operationaltestwindowid" property="operationalTestWindowId" jdbcType="BIGINT" />
		<result column="testcollectionid" property="testCollectionId" jdbcType="BIGINT" />
		<result column="testtypeid" property="testTypeId" jdbcType="BIGINT" />
		<result column="gradecourseid" property="gradeCourseId" jdbcType="BIGINT" />
		<result column="stageid" property="stageId" jdbcType="BIGINT" />
		<result column="schoolyear" property="schoolYear" jdbcType="BIGINT" />
		<result column="createdUser" property="createdUser" jdbcType="BIGINT" />
		<result column="stagecode" property="stageCode" jdbcType="VARCHAR" />
		<result column="gradebandid" property="gradeBandId" jdbcType="BIGINT" />
	</resultMap>

	<resultMap id="ExtendedResultMap" type="edu.ku.cete.domain.TestSession">
		<result column="id" property="id" jdbcType="BIGINT" />
		<result column="rosterid" property="rosterId" jdbcType="BIGINT" />
		<result column="testid" property="testId" jdbcType="BIGINT" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="status" property="status" jdbcType="BIGINT" />
		<result column="source" property="source" jdbcType="VARCHAR" />
		<result column="testcollectionid" property="testCollectionId" jdbcType="BIGINT" />
		<association property="statusCategory" javaType="edu.ku.cete.domain.common.Category">
			<id column="statusId" property="id" jdbcType="BIGINT" />
			<result column="statusName" property="categoryName" jdbcType="VARCHAR" />
			<result column="statusCode" property="categoryCode" jdbcType="VARCHAR" />
		</association>
	</resultMap>

	<resultMap id="testSessionWithRosterMap" type="edu.ku.cete.domain.testsession.TestSessionRoster">
		<id column="testSessionRosterId" property="id" jdbcType="BIGINT" />
		<result column="testsessiondeletableflag" property="testSessionDeletableFlag" jdbcType="VARCHAR" />
		<result column="expiredFlag" property="expiredFlag" jdbcType="VARCHAR" />
		<result column="includeCompletedTestSession" property="includeCompletedTestSession" jdbcType="BOOLEAN" />
		<result column="includeInProgressTestSession" property="includeInProgressTestSession" jdbcType="BOOLEAN" />
		<result property="studentsTestStatus" column="studentsTestStatus" jdbcType="VARCHAR" />
		<result property="totalRecords" column="totalrecords" jdbcType="INTEGER" />
		<result property="testLetProgress" column="testletprogress" />
		<association property="roster" javaType="edu.ku.cete.domain.enrollment.Roster">
			<id column="rosterid" property="id" jdbcType="BIGINT" />
			<result column="coursesectionname" property="courseSectionName" jdbcType="VARCHAR" />
			<result column="coursesectiondescription" property="courseSectionDescription" jdbcType="VARCHAR" />
			<result column="teacherid" property="teacherId" jdbcType="BIGINT" />
			<result column="statesubjectareaid" property="stateSubjectAreaId" jdbcType="BIGINT" />
			<result column="courseenrollmentstatusid" property="courseEnrollmentStatusId" jdbcType="BIGINT" />
			<result column="statecoursecode" property="stateCourseCode" jdbcType="VARCHAR" />
			<result column="restrictionId" property="restrictionId" jdbcType="BIGINT" />
		</association>
		<association property="educator" javaType="edu.ku.cete.domain.user.User">
			<id property="id" column="teacherid" />
			<result property="userName" column="educatorusername" />
			<result property="uniqueCommonIdentifier" column="educatorIdentifier" />
			<result property="firstName" column="educatorFirstName" />
			<result property="middleName" column="educatorMiddleName" />
			<result property="surName" column="educatorLastName" />
			<result property="defaultUserGroupsId" column="educatorDefaultUserGroupsId" />
			<result property="email" column="educatorEmail" />
		</association>
		<association property="stateCourse" javaType="edu.ku.cete.domain.content.ContentArea">
			<id property="id" column="statecourseid" jdbcType="BIGINT" />
			<result property="name" column="stateCourseName" jdbcType="VARCHAR" />
			<result property="externalId" column="stateCourseExternalId" jdbcType="VARCHAR" />
			<result property="sortOrder" column="stateCourseSortOrder" jdbcType="VARCHAR" />
			<result property="originationCode" column="stateCourseOriginationCode" jdbcType="BIGINT" />
			<result property="abbreviatedName" column="stateCourseAbbreviatedName" jdbcType="TIMESTAMP" />
		</association>
		<association property="stateSubjectArea" javaType="edu.ku.cete.domain.content.ContentArea">
			<id property="id" column="stateSubjectAreaId" jdbcType="BIGINT" />
			<result property="name" column="stateSubjectAreaName" jdbcType="VARCHAR" />
			<result property="externalId" column="stateSubjectAreaExternalId" jdbcType="VARCHAR" />
			<result property="sortOrder" column="stateSubjectAreaSortOrder" jdbcType="VARCHAR" />
			<result property="originationCode" column="stateSubjectAreaOriginationCode" jdbcType="BIGINT" />
			<result property="abbreviatedName" column="stateSubjectAreaAbbreviatedName" jdbcType="TIMESTAMP" />
		</association>
		<association property="tcContentArea" javaType="edu.ku.cete.domain.content.ContentArea">
			<id property="id" column="tcContentAreaId" jdbcType="BIGINT" />
			<result property="name" column="tcContentAreaName" jdbcType="VARCHAR" />
			<result property="abbreviatedName" column="tcContentAreaAbbrName" jdbcType="TIMESTAMP" />
		</association>
		<association property="testSession" javaType="edu.ku.cete.domain.TestSession">
			<id column="testSessionId" property="id" jdbcType="BIGINT" />
			<result column="testSessionRosterid" property="rosterId" jdbcType="BIGINT" />
			<result column="testSessionTestid" property="testId" jdbcType="BIGINT" />
			<result column="testSessionName" property="name" jdbcType="VARCHAR" />
			<result column="testSessionStatus" property="status" jdbcType="BIGINT" />
			<result column="testSessionSource" property="source" jdbcType="VARCHAR" />
			<result column="createdDate" property="createdDate" jdbcType="TIMESTAMP" />
		</association>
		<association property="testCollection" javaType="edu.ku.cete.domain.content.TestCollection">
			<id column="testCollectionId" property="id" jdbcType="BIGINT" />
			<result column="testCollectionName" jdbcType="VARCHAR" property="name" />
			<result column="randomizationType" jdbcType="VARCHAR" property="randomizationType" />
			<result column="testCollectionGradeCourseid" jdbcType="BIGINT" property="gradeCourseId" />
			<result column="testCollectionContentAreaId" jdbcType="BIGINT" property="contentAreaId" />
			<result column="testCollectionOriginationCode" jdbcType="VARCHAR" property="originationCode" />
		</association>
		<association property="tcGradeCourse" javaType="edu.ku.cete.domain.content.GradeCourse">
			<id column="tcGradeCourseId" property="id" jdbcType="BIGINT" />
			<result column="tcGradeCourseName" jdbcType="VARCHAR" property="name" />
			<result column="tcGradeCourseAbbreviatedName" jdbcType="VARCHAR" property="abbreviatedName" />
			<result column="tcGradeLevel" jdbcType="INTEGER" property="gradeLevel" />
		</association>
		<association property="assessment" javaType="edu.ku.cete.domain.common.Assessment">
			<id column="assessmentId" property="id" jdbcType="BIGINT" />
			<result column="testingProgramid" property="testingProgramId" jdbcType="BIGINT" />
			<result column="assessmentname" property="assessmentName" jdbcType="VARCHAR" />
			<result column="assessmentCode" property="assessmentCode" jdbcType="VARCHAR" />
			<result column="assessmentDescription" property="assessmentDescription" jdbcType="VARCHAR" />
		</association>
		<association property="testingProgram" javaType="edu.ku.cete.domain.security.TestingProgram">
			<id column="testingProgramId" property="id" jdbcType="BIGINT" />
			<result column="programName" property="programName" jdbcType="VARCHAR" />
			<result column="programDescription" property="programDescription" jdbcType="VARCHAR" />
			<result column="programAbbr" property="programAbbr" jdbcType="VARCHAR" />
			<result column="highstake" property="highStakesFlag" jdbcType="BIT" />
		</association>
		<association property="assessmentProgram" javaType="edu.ku.cete.domain.content.AssessmentProgram">
			<id column="assessmentProgramId" property="id" jdbcType="BIGINT" />
			<result column="assessmentProgramName" property="programName" jdbcType="VARCHAR" />
		</association>
		<association property="attendanceSchool" javaType="edu.ku.cete.domain.common.Organization">
			<id column="attendanceschoolid" property="id" jdbcType="BIGINT" />
			<result column="attendanceSchoolName" property="organizationName" javaType="String" />
			<result column="attendanceSchoolIdentifier" property="displayIdentifier" javaType="String" />
			<result column="welcomeMessage" property="welcomeMessage" javaType="String" />
			<result column="organizationtypeid" property="organizationType.organizationTypeId" />
		</association>
		<association property="courseEnrollment" javaType="edu.ku.cete.domain.common.Category">
			<id property="id" column="courseenrollmentstatusid" jdbcType="BIGINT" />
			<result property="categoryName" column="courseenrollmentstatus" jdbcType="VARCHAR" />
		</association>

	</resultMap>

	<resultMap id="PreviousTestResultMap" type="edu.ku.cete.domain.StudentTestInfo">
		<result column="id" property="id" jdbcType="BIGINT" />
		<result column="studentid" property="studentId" jdbcType="BIGINT" />
		<result column="previousstudentstestid" property="previousStudentsTestId" jdbcType="BIGINT" />
		<result column="testsessionid" property="testSessionId" jdbcType="BIGINT" />
		<result column="interimtheta" property="interimTheta" jdbcType="DOUBLE" />
		<result column="status" property="testStatus" jdbcType="VARCHAR" />
		<result column="testcollectionid" property="testCollectionId" jdbcType="BIGINT" />
		<result column="testid" property="testId" jdbcType="BIGINT" />
		<result column="panelid" property="panelId" jdbcType="BIGINT" />
	</resultMap>

	<resultMap id="UploadScoreStageMap" type="edu.ku.cete.domain.content.Stage">
		<result column="id" property="id" jdbcType="BIGINT" />
		<result column="code" property="code" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
	</resultMap>

	<sql id="Example_Where_Clause">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		id, rosterid, testid, name, status, source, testcollectionid, activeflag, attendanceschoolid, operationaltestwindowid, testtypeid, gradecourseid, stageid, testpanelid, gradebandid
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap" parameterType="edu.ku.cete.domain.TestSessionExample">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from public.testsession
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>


	<select id="selectByExampleAndCategory" parameterType="java.lang.Long" resultMap="BaseResultMap">

		select
		<if test="distinct">
			distinct
		</if>
		t.id, t.rosterid, t.testid, t.name, t.status, t.source, t.testcollectionid, t.activeflag, t.attendanceschoolid, t.operationaltestwindowid, t.testtypeid, t.gradecourseid,t.stageid
		from public.testsession t
		JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = t.testcollectionid and otwtc.activeflag is true
		JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
		where t.rosterid = #{rosterId,jdbcType=BIGINT}
		AND otwsr.sessionruleid = #{categoryId,jdbcType=BIGINT}
	</select>

	<select id="selectByRosterAndCategory" parameterType="map" resultMap="BaseResultMap">
		select t.id, t.rosterid, t.testid, t.name, t.status, t.source, t.testcollectionid, t.activeflag, t.attendanceschoolid, t.operationaltestwindowid, t.testtypeid, t.gradecourseid,t.stageid
		from public.testsession t
		JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = t.testcollectionid and otwtc.activeflag is true
		JOIN operationaltestwindowsessionrule otwsr ON otwsr.operationaltestwindowid = otwtc.operationaltestwindowid and otwsr.activeflag is true
		where t.rosterid = #{rosterId,jdbcType=BIGINT}
		AND otwsr.sessionruleid in
		<foreach collection="categoryIds" item="sessionRuleId" open="(" close=")" separator=",">
			#{sessionRuleId}
		</foreach>
		AND t.testcollectionid in
		(SELECT testcollectionid
		FROM assessmentstestcollections
		WHERE assessmentid IN
		(SELECT id
		FROM assessment
		WHERE testingprogramid IN
		(SELECT id
		FROM testingprogram
		WHERE programabbr='F')))
	</select>

	<sql id="Extended_With_Roster_Column_List">
		distinct (ts.id*asst.id) as testSessionRosterId,
		r.id as rosterId,
		r.coursesectionname,
		au.firstname as educatorFirstName,
		au.surname as educatorLastName,
		au.uniquecommonidentifier as educatorIdentifier,
		ts.id as testSessionId,
		ts.name as testSessionName,
		ts.status as testSessionStatus,
		ts.source as testSessionSource,
		ts.testid as testSessionTestId,
		ts.testcollectionid,
		tc.name as testCollectionname,
		tc.randomizationType as randomizationType,
		case when tc.gradecourseid is not null then tc.gradeCourseId
		when tc.gradebandid is not null then tc.gradebandid end as
		testCollectionGradeCourseId,
		case when tc.gradecourseid is not null then tcGc.name
		when tc.gradebandid is not null then tcgb.name end as tcGradeCourseName,
		tcGc.gradelevel as tcGradeLevel,
		tc.contentAreaId as testCollectionContentAreaId,
		tcContentArea.name as tcContentAreaName,
		tcContentArea.abbreviatedName as tcContentAreaAbbrName,
		asst.assessmentName,
		tp.programName, tp.highstake,
		ap.programName as assessmentProgramName,
		attendanceSchool.displayidentifier as attendanceSchoolIdentifier,
		attendanceSchool.organizationname as attendanceSchoolName,
		<if test="showExpired !=null">
			case when((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now())) then false
			else true end as expiredFlag,
		</if>

		<if test="includeCompletedTestSession != null">
			case when(((ts.operationaltestwindowid IS NULL)OR (otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now()))
			AND ((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id and st.activeflag is true)=(select count(st.studentid) from
			studentstests
			st where st.testsessionid=ts.id and st.activeflag is true and st.status=(select id from category
			where categorytypeid = (select id from categorytype where
			typecode='STUDENT_TEST_STATUS') and categorycode = 'complete'))))then
			true
			else false end as includeCompletedTestSession,
		</if>

		<if test="includeInProgressTestSession != null">
			case when(((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now()))
			AND ((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id and st.activeflag is true)!=(select count(st.studentid) from
			studentstests st where st.testsessionid=ts.id and st.activeflag is true and st.status=(select
			id
			from category where categorytypeid = (select id from categorytype
			where typecode='STUDENT_TEST_STATUS') and categorycode =
			'complete'))))then true
			else false end as includeInProgressTestSession
		</if>
		<choose>
			<when test="assessmentProgramAbbrName == 'DLM'">
				, CASE WHEN ((st.currenttestnumber IS NOT NULL AND st.currenttestnumber > 0 ) AND
				st.numberoftestsrequired IS NOT NULL AND st.numberoftestsrequired > 0) THEN
				'Testlet ' || st.currenttestnumber || ' of ' || st.numberoftestsrequired
				ELSE
				'NA'
				END as testletprogress
			</when>
			<otherwise>
				, 'NA' as testletprogress
			</otherwise>
		</choose>
	</sql>

	<sql id="Extended_With_Roster_Column_List_Toolset">
		distinct (ts.id*asst.id) as testSessionRosterId,
		r.id as rosterId,
		r.coursesectionname,
		au.firstname as educatorFirstName,
		au.surname as educatorLastName,
		au.uniquecommonidentifier as educatorIdentifier,
		ts.id as testSessionId,
		ts.name as testSessionName,
		ts.status as testSessionStatus,
		ts.source as testSessionSource,
		ts.testid as testSessionTestId,
		ts.testcollectionid,
		tc.name as testCollectionname,
		ts.createddate as createdDate,c.categorycode as studentsTestStatus,
		tc.randomizationType as randomizationType,
		case when tc.gradecourseid is not null then tc.gradeCourseId
		when tc.gradebandid is not null then tc.gradebandid end as
		testCollectionGradeCourseId,
		case when tc.gradecourseid is not null then tcGc.name
		when tc.gradebandid is not null then tcgb.name end as tcGradeCourseName,
		tcGc.gradelevel as tcGradeLevel,
		tc.contentAreaId as testCollectionContentAreaId,
		tcContentArea.name as tcContentAreaName,
		tcContentArea.abbreviatedName as tcContentAreaAbbrName,
		asst.assessmentName,
		tp.programName, tp.highstake,
		ap.programName as assessmentProgramName,
		attendanceSchool.displayidentifier as attendanceSchoolIdentifier,
		attendanceSchool.organizationname as attendanceSchoolName,
		<if test="showExpired !=null">
			case when((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now())) then false
			else true end as expiredFlag,
		</if>

		<if test="includeCompletedTestSession != null">
			case when(((ts.operationaltestwindowid IS NULL)OR (otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now()))
			AND ((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id)=(select count(st.studentid) from
			studentstests
			st where st.testsessionid=ts.id and st.status=(select id from category
			where categorytypeid = (select id from categorytype where
			typecode='STUDENT_TEST_STATUS') and categorycode = 'complete'))))then
			true
			else false end as includeCompletedTestSession,
		</if>

		<if test="includeInProgressTestSession != null">
			case when(((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now()))
			AND ((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id)!=(select count(st.studentid) from
			studentstests st where st.testsessionid=ts.id and st.status=(select
			id
			from category where categorytypeid = (select id from categorytype
			where typecode='STUDENT_TEST_STATUS') and categorycode =
			'complete'))))then true
			else false end as includeInProgressTestSession
		</if>
	</sql>

	<sql id="Extended_Test_With_Roster_Column_List_Toolset">
		distinct (ts.id*asst.id) as testSessionRosterId,
		r.id as rosterId,
		r.coursesectionname,
		au.firstname as educatorFirstName,
		au.surname as educatorLastName,
		au.uniquecommonidentifier as educatorIdentifier,
		ts.id as testSessionId,
		ts.name as testSessionName,
		ts.status as
		testSessionStatus,
		ts.source as testSessionSource,
		ts.testid as
		testSessionTestId,
		ts.testid,
		test.testname as testCollectionname,
		ts.createddate as createdDate,c.categorycode as studentsteststatus,
		tc.randomizationType as randomizationType,
		case when tc.gradecourseid is not null then tc.gradeCourseId
		when tc.gradebandid is not null then
		tc.gradebandid end as
		testCollectionGradeCourseId,
		case when
		tc.gradecourseid is not null then tcGc.name
		when tc.gradebandid is not null then tcgb.name end as tcGradeCourseName,
		tcGc.gradelevel as
		tcGradeLevel,
		tc.contentAreaId as testCollectionContentAreaId,
		tcContentArea.name as tcContentAreaName,
		tcContentArea.abbreviatedName
		as tcContentAreaAbbrName,
		asst.assessmentName,
		tp.programName,
		tp.highstake,
		ap.programName as assessmentProgramName,
		attendanceSchool.displayidentifier as attendanceSchoolIdentifier,
		attendanceSchool.organizationname as attendanceSchoolName,

		<if test="showExpired != null">
			case when ((ts.operationaltestwindowid IS NULL) OR
			(otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now())) then false
			else true end as expiredFlag,
		</if>

		<if test="includeCompletedTestSession != null">
			case when(((ts.operationaltestwindowid IS NULL)OR
			(otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now()))
			AND
			((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id and st.activeflag is true)=(select count(st.studentid) from studentstests
			st where st.testsessionid=ts.id and st.activeflag is true and st.status=(select id from category
			where categorytypeid = (select id from categorytype where
			typecode='STUDENT_TEST_STATUS') and categorycode = 'complete'))))then
			true
			else false end as includeCompletedTestSession,
		</if>

		<if test="includeInProgressTestSession != null">
			case when(((ts.operationaltestwindowid IS NULL) OR
			(otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now()))
			AND
			((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id and st.activeflag is true)!=(select count(st.studentid) from
			studentstests st where st.testsessionid=ts.id and st.activeflag is true and st.status=(select id
			from category where categorytypeid = (select id from categorytype
			where typecode='STUDENT_TEST_STATUS') and categorycode =
			'complete'))))then true
			else false end as includeInProgressTestSession
		</if>

	</sql>
	<sql id="Extended_Test_With_Roster_Column_List">
		distinct (ts.id*asst.id) as testSessionRosterId,
		r.id as rosterId,
		r.coursesectionname,
		au.firstname as educatorFirstName,
		au.surname as educatorLastName,
		au.uniquecommonidentifier as educatorIdentifier,
		ts.id as testSessionId,
		ts.name as testSessionName,
		ts.status as
		testSessionStatus,
		ts.source as testSessionSource,
		ts.testid as
		testSessionTestId,
		ts.testid,
		test.testname as testCollectionname,
		tc.randomizationType as randomizationType,
		case when tc.gradecourseid is not null then tc.gradeCourseId
		when tc.gradebandid is not null then
		tc.gradebandid end as
		testCollectionGradeCourseId,
		case when
		tc.gradecourseid is not null then tcGc.name
		when tc.gradebandid is not null then tcgb.name end as tcGradeCourseName,
		tcGc.gradelevel as
		tcGradeLevel,
		tc.contentAreaId as testCollectionContentAreaId,
		tcContentArea.name as tcContentAreaName,
		tcContentArea.abbreviatedName
		as tcContentAreaAbbrName,
		asst.assessmentName,
		tp.programName,
		tp.highstake,
		ap.programName as assessmentProgramName,
		attendanceSchool.displayidentifier as
		attendanceSchoolIdentifier,
		attendanceSchool.organizationname as attendanceSchoolName,

		<if test="showExpired != null">
			case when ((ts.operationaltestwindowid IS NULL) OR
			(otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now())) then false
			else true end as expiredFlag,
		</if>

		<if test="includeCompletedTestSession != null">
			case when(((ts.operationaltestwindowid IS NULL)OR
			(otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now()))
			AND
			((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id)=(select count(st.studentid) from studentstests
			st where st.testsessionid=ts.id and st.status=(select id from category
			where categorytypeid = (select id from categorytype where
			typecode='STUDENT_TEST_STATUS') and categorycode = 'complete'))))then
			true
			else false end as includeCompletedTestSession,
		</if>

		<if test="includeInProgressTestSession != null">
			case when(((ts.operationaltestwindowid IS NULL) OR
			(otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now()))
			AND
			((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id)!=(select count(st.studentid) from
			studentstests st where st.testsessionid=ts.id and st.status=(select id
			from category where categorytypeid = (select id from categorytype
			where typecode='STUDENT_TEST_STATUS') and categorycode =
			'complete'))))then true
			else false end as includeInProgressTestSession
		</if>
		<choose>
			<when test="assessmentProgramAbbrName == 'DLM'">
				, CASE WHEN ((st.currenttestnumber IS NOT NULL AND st.currenttestnumber > 0 ) AND
				st.numberoftestsrequired IS NOT NULL AND st.numberoftestsrequired > 0) THEN
				'Testlet ' || st.currenttestnumber || ' of ' || st.numberoftestsrequired
				ELSE
				'NA'
				END as testletprogress
			</when>
			<otherwise>
				, 'NA' as testletprogress
			</otherwise>
		</choose>
	</sql>
	<sql id="Extended_Auto_Registration_Test_Sessions_Column_List">
		distinct ts.id as testSessionId, ts.name as testSessionName, ap.programname as assessmentProgramName,
		stusession.displayidentifier AS organizationDisplayIdentifier,
		ca.name as contentAreaName, gc.name as gradeCourseName, gb.name as gradeBandName, ts.rosterid as rosterId,
		substring(gc.name, '[^0-9]+'), substring(gc.name, '[0-9]+')::int,
		<if test="! showExpired">
			false as expiredFlag
		</if>
		<if test="showExpired">
			case when ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) or ts.windowexpirydate&gt;=now()) then false
			else true end as expiredFlag
		</if>
		, otw.effectivedate as effectiveDate
		, case when (ts.windowexpirydate is not null) then ts.windowexpirydate else otw.expirydate end as expiryDate,
		ts.testpanelid as testPanelId
	</sql>
	<sql id="Extended_Auto_Registration_Test_Sessions_Status_Column_List">
		distinct ts.id as testSessionId, ts.name as testSessionName, ap.programname as assessmentProgramName,
		stusession.displayidentifier AS organizationDisplayIdentifier,
		ca.name as contentAreaName, gc.name as gradeCourseName, gb.name as gradeBandName, ts.rosterid as rosterId,
		substring(gc.name, '[^0-9]+'), substring(gc.name, '[0-9]+')::int,
		<if test="showExpired != null">
			case when ((otw.suspendwindow is FALSE AND otw.expirydate
			&gt;= now()) or
			ts.windowexpirydate &gt;=now()) then false
			else true end
			as expiredFlag,
		</if>
		<if test="includeCompletedTestSession != null">
			case when(((ts.windowexpirydate &gt;=now())OR
			(otw.suspendwindow is FALSE
			AND otw.expirydate &gt;= now()))
			AND ((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id and st.activeflag is true)=(select count(st.studentid) from studentstests
			st where st.testsessionid=ts.id and st.activeflag is true and st.status=(select id from category
			where categorytypeid = (select id from categorytype where
			typecode='STUDENT_TEST_STATUS') and categorycode = 'complete'))))then
			true
			else false end as includeCompletedTestSession,
		</if>
		<if test="includeInProgressTestSession != null">
			case when(((ts.windowexpirydate &gt;=now()) OR
			(otw.suspendwindow is FALSE
			AND otw.expirydate &gt;= now()))
			AND
			((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id and st.activeflag is true)!=(select count(st.studentid) from
			studentstests st where st.testsessionid=ts.id and st.activeflag is true and st.status=(select id
			from category where categorytypeid = (select id from categorytype
			where typecode='STUDENT_TEST_STATUS') and categorycode =
			'complete'))))then true
			else false end as includeInProgressTestSession,
		</if>
		otw.effectivedate as effectiveDate
		, case when (ts.windowexpirydate is not null) then ts.windowexpirydate else otw.expirydate end as expiryDate,
		ts.testpanelid as testPanelId
	</sql>

	<!-- TODO replace it with a for loop pattern -->
	<sql id="Extended_Roster_Where_Clause">
		<if test="studentRosterCriteriaMap.testSessionRosterId != null">
			AND (testSessionRosterId || '') ilike #{studentRosterCriteriaMap.testSessionRosterId}
		</if>
		<if test="studentRosterCriteriaMap.testSessionId != null">
			AND (ts.id || '') ilike #{studentRosterCriteriaMap.testSessionId}
		</if>
		<if test="studentRosterCriteriaMap.testSessionName != null">
			AND ts.name ilike #{studentRosterCriteriaMap.testSessionName}
		</if>
		<if test="studentRosterCriteriaMap.testSessionStatus != null">
			AND (ts.status || '') ilike #{studentRosterCriteriaMap.testSessionStatus}
		</if>
		<if test="studentRosterCriteriaMap.testSessionSource != null">
			AND (ts.source || '') ilike #{studentRosterCriteriaMap.testSessionSource}
		</if>
		<if test="studentRosterCriteriaMap.testSessionTestId != null">
			AND (ts.testid || '') ilike #{studentRosterCriteriaMap.testSessionTestId}
		</if>
		<if test="studentRosterCriteriaMap.testCollectionId != null">
			AND (ts.testCollectionId || '') ilike #{studentRosterCriteriaMap.testCollectionId}
		</if>
		<if test="studentRosterCriteriaMap.testCollectionName != null">
			<!--AND CASE tc.randomizationType WHEN 'enrollment' THEN ((test.testname || '') ilike #{studentRosterCriteriaMap.testCollectionName}) WHEN 'login' THEN ((tc.name || '') ilike #{studentRosterCriteriaMap.testCollectionName}) END -->
			AND (asst.assessmentName || '') ilike #{studentRosterCriteriaMap.testCollectionName}
		</if>
		<if test="studentRosterCriteriaMap.randomizationType != null">
			AND (tc.randomizationType || '') ilike #{studentRosterCriteriaMap.randomizationType}
		</if>
		<!-- tcGradeCourse -->
		<if test="studentRosterCriteriaMap.tcGradeCourseId != null">
			AND (tc.gradeCourseId || '') ilike #{studentRosterCriteriaMap.tcGradeCourseId}
		</if>
		<if test="studentRosterCriteriaMap.tcGradeCourseName != null">
			AND (
			case
			when tc.gradecourseid is null then (tcgb.name || '') ilike #{studentRosterCriteriaMap.tcGradeCourseName}
			when tc.gradecourseid is not null then (tcGc.name || '') ilike #{studentRosterCriteriaMap.tcGradeCourseName}
			end
			)
		</if>
		<if test="studentRosterCriteriaMap.tcGradeCourseAbbreviatedName != null">
			AND (tcGc.abbreviatedname || '') ilike #{studentRosterCriteriaMap.tcGradeCourseAbbreviatedName}
		</if>
		<if test="studentRosterCriteriaMap.tcGradeLevel != null">
			AND (tcGc.gradelevel || '') ilike #{studentRosterCriteriaMap.tcGradeLevel}
		</if>

		<!-- tcContentArea -->

		<if test="studentRosterCriteriaMap.testCollectionContentAreaId != null">
			AND (tc.contentAreaId || '') ilike #{studentRosterCriteriaMap.testCollectionContentAreaId}
		</if>
		<if test="studentRosterCriteriaMap.tcContentAreaName != null">
			AND (tcContentArea.name || '') ilike #{studentRosterCriteriaMap.tcContentAreaName}
		</if>
		<if test="studentRosterCriteriaMap.tcContentAreaAbbrName != null">
			AND (tcContentArea.abbreviatedName || '') ilike #{studentRosterCriteriaMap.tcContentAreaAbbrName}
		</if>
		<!-- assessment -->
		<if test="studentRosterCriteriaMap.assessmentId != null">
			AND (asst.id || '') ilike #{studentRosterCriteriaMap.assessmentId}
		</if>
		<if test="studentRosterCriteriaMap.testingProgramId != null">
			AND (asst.testingProgramId || '') ilike #{studentRosterCriteriaMap.testingProgramId}
		</if>
		<if test="studentRosterCriteriaMap.assessmentName != null">
			AND (asst.assessmentName || '') ilike #{studentRosterCriteriaMap.assessmentName}
		</if>
		<if test="studentRosterCriteriaMap.assessmentCode != null">
			AND (asst.assessmentCode || '') ilike #{studentRosterCriteriaMap.assessmentCode}
		</if>
		<if test="studentRosterCriteriaMap.assessmentDescription != null">
			AND (asst.assessmentDescription || '') ilike #{studentRosterCriteriaMap.assessmentDescription}
		</if>
		<!-- testingProgram -->
		<if test="studentRosterCriteriaMap.testingProgramId != null">
			AND (tp.id || '') ilike #{studentRosterCriteriaMap.testingProgramId}
		</if>
		<if test="studentRosterCriteriaMap.programName != null">
			AND (tp.programName || '') ilike #{studentRosterCriteriaMap.programName}
		</if>
		<if test="studentRosterCriteriaMap.programDescription != null">
			AND (tp.programDescription || '') ilike #{studentRosterCriteriaMap.programDescription}
		</if>
		<if test="studentRosterCriteriaMap.programAbbr != null">
			AND (tp.programAbbr || '') ilike #{studentRosterCriteriaMap.programAbbr}
		</if>
		<!-- assessmentProgram -->
		<if test="studentRosterCriteriaMap.assessmentProgramId!= null">
			AND (ap.id || '') ilike #{studentRosterCriteriaMap.assessmentProgramId}
		</if>
		<if test="studentRosterCriteriaMap.assessmentProgramName != null">
			AND (ap.programName || '') ilike #{studentRosterCriteriaMap.assessmentProgramName}
		</if>
		<!-- Roster -->
		<if test="studentRosterCriteriaMap.rosterId != null">
			AND (r.id || '') ilike #{studentRosterCriteriaMap.rosterId}
		</if>
		<if test="studentRosterCriteriaMap.courseSectionName != null">
			AND r.courseSectionName ilike #{studentRosterCriteriaMap.courseSectionName}
		</if>
		<!-- Attendance School -->
		<if test="studentRosterCriteriaMap.attendanceSchoolId != null">
			AND (attendanceSchool.id || '') ilike #{studentRosterCriteriaMap.attendanceSchoolId}
		</if>
		<if test="studentRosterCriteriaMap.attendanceSchoolIdentifier != null">
			AND (attendanceSchool.displayIdentifier || '') ilike #{studentRosterCriteriaMap.attendanceSchoolIdentifier}
		</if>
		<if test="studentRosterCriteriaMap.attendanceSchoolName != null">
			AND attendanceSchool.organizationname ilike #{studentRosterCriteriaMap.attendanceSchoolName}
		</if>
		<!-- Educator -->
		<if test="studentRosterCriteriaMap.educatorIdentifier != null">
			AND au.uniquecommonidentifier ilike #{studentRosterCriteriaMap.educatorIdentifier}
		</if>
		<if test="studentRosterCriteriaMap.educatorFirstName != null">
			AND au.firstname ilike #{studentRosterCriteriaMap.educatorFirstName}
		</if>
		<if test="studentRosterCriteriaMap.educatorLastName != null">
			AND au.surname ilike #{studentRosterCriteriaMap.educatorLastName}
		</if>
		<if test="studentRosterCriteriaMap.teacherId != null">
			AND (r.teacherId || '') ilike #{studentRosterCriteriaMap.teacherId}
		</if>
		<!-- Course Enrollment -->
		<if test="studentRosterCriteriaMap.courseEnrollmentStatusId != null">
			AND (courseenrollment.id || '') ilike #{studentRosterCriteriaMap.courseEnrollmentStatusId}
		</if>
		<if test="studentRosterCriteriaMap.courseEnrollmentStatus != null">
			AND (courseenrollment.categoryname || '') ilike #{studentRosterCriteriaMap.courseEnrollmentStatus}
		</if>
		<!-- Grade Course For Roster -->
		<if test="studentRosterCriteriaMap.gradeCourseName != null">
			AND gc.name ilike #{studentRosterCriteriaMap.gradeCourseName}
		</if>
		<if test="studentRosterCriteriaMap.stateSubjectAreaName != null">
			AND stateSubjectArea.name ilike #{studentRosterCriteriaMap.stateSubjectAreaName}
		</if>
		<if test="studentRosterCriteriaMap.stateCourseCode != null">
			AND (r.stateCourseCode || '') ilike #{studentRosterCriteriaMap.stateCourseCode}
		</if>


		<if test="studentRosterCriteriaMap.stateCourse != null">
			AND stateCourse.name ilike #{studentRosterCriteriaMap.stateCourse}
		</if>
		<if test="studentRosterCriteriaMap.stateCourseName != null">
			AND statecourse.name ilike #{studentRosterCriteriaMap.stateCourseName}
		</if>
		<if test="studentRosterCriteriaMap.stateSubjectAreaId != null">
			AND (r.stateSubjectAreaId || '') ilike #{studentRosterCriteriaMap.stateSubjectAreaId}
		</if>
		<if test="studentRosterCriteriaMap.stateSubjectArea != null">
			AND (stateSubjectArea.abbreviatedName || '') ilike #{studentRosterCriteriaMap.stateSubjectArea}
		</if>
		<if test="studentRosterCriteriaMap.gradeCourseId != null">
			AND (gc.id || '') ilike #{studentRosterCriteriaMap.gradeCourseId}
		</if>
		<if test="studentRosterCriteriaMap.gradeCourseAbbreviatedName != null">
			AND gc.abbreviatedname ilike #{studentRosterCriteriaMap.gradeCourseAbbreviatedName}
		</if>
		<if test="studentRosterCriteriaMap.gradeLevel != null">
			AND (gc.gradeLevel || '') ilike #{studentRosterCriteriaMap.gradeLevel}
		</if>

	</sql>
	<sql id="Extended_Roster_Where_Clause_Toolset">
		<if test="studentRosterCriteriaMap.testSessionRosterId != null">
			AND (testSessionRosterId || '') ilike #{studentRosterCriteriaMap.testSessionRosterId}
		</if>
		<if test="studentRosterCriteriaMap.testSessionId != null">
			AND (ts.id || '') ilike #{studentRosterCriteriaMap.testSessionId}
		</if>
		<if test="studentRosterCriteriaMap.testSessionName != null">
			AND ts.name ilike #{studentRosterCriteriaMap.testSessionName}
		</if>
		<if test="studentRosterCriteriaMap.testSessionStatus != null">
			AND (ts.status || '') ilike #{studentRosterCriteriaMap.testSessionStatus}
		</if>
		<if test="studentRosterCriteriaMap.testSessionSource != null">
			AND (ts.source || '') ilike #{studentRosterCriteriaMap.testSessionSource}
		</if>
		<if test="studentRosterCriteriaMap.testSessionTestId != null">
			AND (ts.testid || '') ilike #{studentRosterCriteriaMap.testSessionTestId}
		</if>
		<if test="studentRosterCriteriaMap.testCollectionId != null">
			AND (ts.testCollectionId || '') ilike #{studentRosterCriteriaMap.testCollectionId}
		</if>
		<if test="studentRosterCriteriaMap.testCollectionName != null">
			<!--AND CASE tc.randomizationType WHEN 'enrollment' THEN ((test.testname || '') ilike #{studentRosterCriteriaMap.testCollectionName}) WHEN 'login' THEN ((tc.name || '') ilike #{studentRosterCriteriaMap.testCollectionName}) END -->
			AND (asst.assessmentName || '') ilike #{studentRosterCriteriaMap.testCollectionName}
		</if>
		<if test="studentRosterCriteriaMap.randomizationType != null">
			AND (tc.randomizationType || '') ilike #{studentRosterCriteriaMap.randomizationType}
		</if>
		<!-- tcGradeCourse -->
		<if test="studentRosterCriteriaMap.tcGradeCourseId != null">
			AND (tc.gradeCourseId || '') ilike #{studentRosterCriteriaMap.tcGradeCourseId}
		</if>
		<if test="studentRosterCriteriaMap.tcGradeCourseName != null">
			AND (
			case
			when tc.gradecourseid is null then (tcgb.name || '') ilike #{studentRosterCriteriaMap.tcGradeCourseName}
			when tc.gradecourseid is not null then (tcGc.name || '') ilike #{studentRosterCriteriaMap.tcGradeCourseName}
			end
			)

		</if>
		<if test="studentRosterCriteriaMap.tcGradeCourseAbbreviatedName != null">
			AND (tcGc.abbreviatedname || '') ilike #{studentRosterCriteriaMap.tcGradeCourseAbbreviatedName}
		</if>
		<if test="studentRosterCriteriaMap.tcGradeLevel != null">
			AND (tcGc.gradelevel || '') ilike #{studentRosterCriteriaMap.tcGradeLevel}
		</if>

		<!-- tcContentArea -->

		<if test="studentRosterCriteriaMap.testCollectionContentAreaId != null">
			AND (tc.contentAreaId || '') ilike #{studentRosterCriteriaMap.testCollectionContentAreaId}
		</if>
		<if test="studentRosterCriteriaMap.tcContentAreaName != null">
			AND (tcContentArea.name || '') ilike #{studentRosterCriteriaMap.tcContentAreaName}
		</if>
		<if test="studentRosterCriteriaMap.tcContentAreaAbbrName != null">
			AND (tcContentArea.abbreviatedName || '') ilike #{studentRosterCriteriaMap.tcContentAreaAbbrName}
		</if>
		<!-- assessment -->
		<if test="studentRosterCriteriaMap.assessmentId != null">
			AND (asst.id || '') ilike #{studentRosterCriteriaMap.assessmentId}
		</if>
		<if test="studentRosterCriteriaMap.testingProgramId != null">
			AND (asst.testingProgramId || '') ilike #{studentRosterCriteriaMap.testingProgramId}
		</if>
		<if test="studentRosterCriteriaMap.assessmentName != null">
			AND (asst.assessmentName || '') ilike #{studentRosterCriteriaMap.assessmentName}
		</if>
		<if test="studentRosterCriteriaMap.assessmentCode != null">
			AND (asst.assessmentCode || '') ilike #{studentRosterCriteriaMap.assessmentCode}
		</if>
		<if test="studentRosterCriteriaMap.assessmentDescription != null">
			AND (asst.assessmentDescription || '') ilike #{studentRosterCriteriaMap.assessmentDescription}
		</if>
		<!-- testingProgram -->
		<if test="studentRosterCriteriaMap.testingProgramId != null">
			AND (tp.id || '') ilike #{studentRosterCriteriaMap.testingProgramId}
		</if>
		<if test="studentRosterCriteriaMap.programName != null">
			AND (tp.programName || '') ilike #{studentRosterCriteriaMap.programName}
		</if>
		<if test="studentRosterCriteriaMap.programDescription != null">
			AND (tp.programDescription || '') ilike #{studentRosterCriteriaMap.programDescription}
		</if>
		<if test="studentRosterCriteriaMap.programAbbr != null">
			AND (tp.programAbbr || '') ilike #{studentRosterCriteriaMap.programAbbr}
		</if>
		<!-- assessmentProgram -->
		<if test="studentRosterCriteriaMap.assessmentProgramId!= null">
			AND (ap.id || '') ilike #{studentRosterCriteriaMap.assessmentProgramId}
		</if>
		<if test="studentRosterCriteriaMap.assessmentProgramName != null">
			AND (ap.programName || '') ilike #{studentRosterCriteriaMap.assessmentProgramName}
		</if>
		<!-- Roster -->
		<if test="studentRosterCriteriaMap.rosterId != null">
			AND (r.id || '') ilike #{studentRosterCriteriaMap.rosterId}
		</if>
		<if test="studentRosterCriteriaMap.courseSectionName != null">
			AND r.courseSectionName ilike #{studentRosterCriteriaMap.courseSectionName}
		</if>
		<!-- Attendance School -->
		<if test="studentRosterCriteriaMap.attendanceSchoolId != null">
			AND (attendanceSchool.id || '') ilike #{studentRosterCriteriaMap.attendanceSchoolId}
		</if>
		<if test="studentRosterCriteriaMap.attendanceSchoolIdentifier != null">
			AND (attendanceSchool.displayIdentifier || '') ilike #{studentRosterCriteriaMap.attendanceSchoolIdentifier}
		</if>
		<if test="studentRosterCriteriaMap.attendanceSchoolName != null">
			AND attendanceSchool.organizationname ilike #{studentRosterCriteriaMap.attendanceSchoolName}
		</if>
		<!-- Educator -->
		<if test="studentRosterCriteriaMap.educatorIdentifier != null">
			AND au.uniquecommonidentifier ilike #{studentRosterCriteriaMap.educatorIdentifier}
		</if>
		<if test="studentRosterCriteriaMap.educatorFirstName != null">
			AND au.firstname ilike #{studentRosterCriteriaMap.educatorFirstName}
		</if>
		<if test="studentRosterCriteriaMap.educatorLastName != null">
			AND au.surname ilike #{studentRosterCriteriaMap.educatorLastName}
		</if>
		<if test="studentRosterCriteriaMap.teacherId != null">
			AND (r.teacherId || '') ilike #{studentRosterCriteriaMap.teacherId}
		</if>
		<!-- Course Enrollment -->
		<if test="studentRosterCriteriaMap.courseEnrollmentStatusId != null">
			AND (courseenrollment.id || '') ilike #{studentRosterCriteriaMap.courseEnrollmentStatusId}
		</if>
		<if test="studentRosterCriteriaMap.courseEnrollmentStatus != null">
			AND (courseenrollment.categoryname || '') ilike #{studentRosterCriteriaMap.courseEnrollmentStatus}
		</if>
		<!-- Grade Course For Roster -->
		<if test="studentRosterCriteriaMap.gradeCourseName != null">
			AND gc.name ilike #{studentRosterCriteriaMap.gradeCourseName}
		</if>
		<if test="studentRosterCriteriaMap.stateSubjectAreaName != null">
			AND stateSubjectArea.name ilike #{studentRosterCriteriaMap.stateSubjectAreaName}
		</if>
		<if test="studentRosterCriteriaMap.stateCourseCode != null">
			AND (r.stateCourseCode || '') ilike #{studentRosterCriteriaMap.stateCourseCode}
		</if>


		<if test="studentRosterCriteriaMap.stateCourse != null">
			AND stateCourse.name ilike #{studentRosterCriteriaMap.stateCourse}
		</if>
		<if test="studentRosterCriteriaMap.stateCourseName != null">
			AND statecourse.name ilike #{studentRosterCriteriaMap.stateCourseName}
		</if>
		<if test="studentRosterCriteriaMap.stateSubjectAreaId != null">
			AND (r.stateSubjectAreaId || '') ilike #{studentRosterCriteriaMap.stateSubjectAreaId}
		</if>
		<if test="studentRosterCriteriaMap.stateSubjectArea != null">
			AND (stateSubjectArea.abbreviatedName || '') ilike #{studentRosterCriteriaMap.stateSubjectArea}
		</if>
		<if test="studentRosterCriteriaMap.gradeCourseId != null">
			AND (gc.id || '') ilike #{studentRosterCriteriaMap.gradeCourseId}
		</if>
		<if test="studentRosterCriteriaMap.gradeCourseAbbreviatedName != null">
			AND gc.abbreviatedname ilike #{studentRosterCriteriaMap.gradeCourseAbbreviatedName}
		</if>
		<if test="studentRosterCriteriaMap.gradeLevel != null">
			AND (gc.gradeLevel || '') ilike #{studentRosterCriteriaMap.gradeLevel}
		</if>
		<if test="studentRosterCriteriaMap.createdDate != null">
			AND to_char(ts.createdDate, 'MM/DD/YYYY') ilike #{studentRosterCriteriaMap.createdDate}
		</if>
		<if test="studentRosterCriteriaMap.studentsTestStatus != null">
			AND c.categorycode ilike #{studentRosterCriteriaMap.studentsTestStatus}
		</if>

	</sql>

	<sql id="Extended_AR_Where_Clause">
		<if test="testSessionCriteriaMap.contentAreaName != null">
			AND ca.name ilike #{testSessionCriteriaMap.contentAreaName}
		</if>
		<if test="testSessionCriteriaMap.testSessionName != null">
			AND ts.name ilike #{testSessionCriteriaMap.testSessionName}
		</if>
		<if test="testSessionCriteriaMap.gradeCourseName != null">
			AND (
			case
			when tc.gradecourseid is null then (gb.name || '') ilike #{testSessionCriteriaMap.gradeCourseName}
			when tc.gradecourseid is not null then (gc.name || '') ilike #{testSessionCriteriaMap.gradeCourseName}
			end
			)
		</if>
		<if test="testSessionCriteriaMap.gradeBandName != null">
			AND gb.name ilike #{testSessionCriteriaMap.gradeBandName}
		</if>
		<if test="testSessionCriteriaMap.organizationDisplayIdentifier != null">
			AND stusession.displayidentifier ilike #{testSessionCriteriaMap.organizationDisplayIdentifier}
		</if>
	</sql>

	<delete id="deleteByExample" parameterType="edu.ku.cete.domain.TestSessionExample">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		delete from public.testsession
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<update id="deleteForInterim">
		update testsession
		set activeflag= false, modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
		where id=#{testSessionId,jdbcType=BIGINT}
	</update>
	<insert id="insert" parameterType="edu.ku.cete.domain.TestSession" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		insert into public.testsession (rosterid, name, status,
		source,createddate, createduser, activeflag,modifieddate, modifieduser,
		testid, testcollectionid,attendanceschoolid,operationaltestwindowid,
		testtypeid, gradecourseid,
		stageid, schoolyear, testpanelid,
		subjectareaid, gradebandid)values (#{rosterId,jdbcType=BIGINT},
		#{name,jdbcType=VARCHAR},#{status, jdbcType=BIGINT}, #{source,
		jdbcType=VARCHAR},#{createdDate}, #{createdUser},
		#{activeFlag},#{modifiedDate}, #{modifiedUser},
		#{testId,jdbcType=BIGINT},#{testCollectionId,jdbcType=BIGINT},
		#{attendanceSchoolId},#{operationalTestWindowId},#{testTypeId,jdbcType=BIGINT},#{gradeCourseId,jdbcType=BIGINT},#{stageId,jdbcType=BIGINT},
		#{schoolYear,jdbcType=BIGINT},#{testPanelId,jdbcType=BIGINT},
		#{subjectAreaId,jdbcType=BIGINT},#{gradeBandId,jdbcType=BIGINT})
	</insert>
	<insert id="insertInterim" parameterType="edu.ku.cete.domain.TestSession" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		insert into public.testsession (rosterid, name, status, source,
		createddate, createduser, activeflag,
		modifieddate, modifieduser,
		testid, testcollectionid,
		attendanceschoolid,operationaltestwindowid,
		testtypeid, gradecourseid,
		stageid, schoolyear, testpanelid,
		subjectareaid)
		values (#{rosterId,jdbcType=BIGINT},
		#{name,jdbcType=VARCHAR}, #{status,
		jdbcType=BIGINT}, #{source,
		jdbcType=VARCHAR}, #{createdDate},
		#{createdUser}, #{activeFlag},
		#{modifiedDate}, #{modifiedUser}, #{testId,jdbcType=BIGINT},
		#{testCollectionId,jdbcType=BIGINT}, #{attendanceSchoolId},
		#{operationalTestWindowId},
		#{testTypeId,jdbcType=BIGINT},
		#{gradeCourseId,jdbcType=BIGINT}, #{stageId,jdbcType=BIGINT},
		#{schoolYear,jdbcType=BIGINT}, #{testPanelId,jdbcType=BIGINT},
		#{subjectAreaId,jdbcType=BIGINT})
	</insert>
	<insert id="insertSelective" parameterType="edu.ku.cete.domain.TestSession" useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		insert into public.testsession
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="rosterId != null">
				rosterid,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="status != null">
				status,
			</if>
			<if test="source != null">
				source,
			</if>
			<if test="activeFlag != null">
				activeFlag,
			</if>
			<if test="attendanceSchoolId != null">
				attendanceSchoolId,
			</if>
			<if test="operationalTestWindowId != null">
				operationalTestWindowId,
			</if>
			<if test="testTypeId != null">
				testtypeid,
			</if>
			<if test="gradeCourseId != null">
				gradecourseid,
			</if>
			<if test="stageId != null">
				stageid,
			</if>
			<if test="schoolYear != null">
				schoolyear,
			</if>
			createddate,
			createduser,
			activeflag,
			modifieddate,
			modifieduser,
			<if test="gradeBandId != null">
				gradebandid,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="rosterId != null">
				#{rosterId,jdbcType=BIGINT},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="status != null">
				#{status,jdbcType=BIGINT},
			</if>
			<if test="source != null">
				#{source,jdbcType=VARCHAR},
			</if>
			<if test="activeFlag != null">
				#{activeFlag},
			</if>
			<if test="attendanceSchoolId != null">
				#{attendanceSchoolId,jdbcType=BIGINT},
			</if>
			<if test="operationalTestWindowId != null">
				#{operationalTestWindowId,jdbcType=BIGINT},
			</if>
			<if test="testTypeId != null">
				#{testTypeId,jdbcType=BIGINT},
			</if>
			<if test="gradeCourseId != null">
				#{gradeCourseId,jdbcType=BIGINT},
			</if>
			<if test="stageId != null">
				#{stageId,jdbcType=BIGINT},
			</if>
			<if test="schoolYear != null">
				#{schoolYear,jdbcType=BIGINT},
			</if>
			#{createdDate},
			#{createdUser},
			#{activeFlag},
			#{modifiedDate},
			#{modifiedUser},
			<if test="gradeBandId != null">
				#{gradeBandId,jdbcType=BIGINT},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="edu.ku.cete.domain.TestSessionExample" resultType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		select count(*) from public.testsession
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		update public.testsession
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=BIGINT},
			</if>
			<if test="record.rosterId != null">
				rosterid = #{record.rosterId,jdbcType=BIGINT},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.status != null">
				status = #{record.status,jdbcType=BIGINT},
			</if>
			<if test="record.source != null">
				source = #{record.source,jdbcType=VARCHAR},
			</if>
			<if test="record.activeFlag != null">
				activeflag = #{record.activeFlag},
			</if>
			<if test="record.attendanceSchoolId != null">
				attendanceschoolid = #{record.attendanceSchoolId,jdbcType=BIGINT},
			</if>
			<if test="record.operationalTestWindowId != null">
				operationaltestwindowid = #{record.operationalTestWindowId,jdbcType=BIGINT},
			</if>
			<if test="record.testTypeId != null">
				testtypeid = #{record.testTypeId,jdbcType=BIGINT},
			</if>
			<if test="record.gradeCourseId != null">
				gradecourseid = #{record.gradeCourseId,jdbcType=BIGINT},
			</if>
			<if test="record.stageId != null">
				stageId = #{record.stageId,jdbcType=BIGINT},
			</if>
			modifieddate = #{record.modifiedDate},
			modifieduser = #{record.modifiedUser},
			<if test="record.gradeBandId != null">
				gradebandid=#{record.gradeBandId,jdbcType=BIGINT},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by MyBatis Generator, do not modify. This element was generated on Thu Oct 04 09:06:00 CDT 2012. -->
		update public.testsession
		set id = #{record.id,jdbcType=BIGINT},
		rosterid = #{record.rosterId,jdbcType=BIGINT},
		name = #{record.name,jdbcType=VARCHAR},
		status = #{record.status, jdbcType=BIGINT},
		source = #{record.source, jdbcType=VARCHAR},
		attendanceschoolid = #{record.attendanceSchoolId, jdbcType=BIGINT},
		operationaltestwindowid = #{record.operationalTestWindowId, jdbcType=BIGINT},
		testtypeid = #{record.testTypeId,jdbcType=BIGINT},
		gradecourseid = #{record.gradeCourseId,jdbcType=BIGINT},
		stageid = #{record.stageId,jdbcType=BIGINT},
		activeflag = #{record.activeFlag},
		modifieddate = #{modifiedDate},
		modifieduser = #{modifiedUser},
		activeflag = #{activeFlag},
		gradbandid=#{gradeBandId,jdbcType=BIGINT}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>

	<select id="getLastId" resultType="long">
		SELECT lastval() as id;
	</select>

	<delete id="removeEmptySessions" parameterType="long">
		delete from testsession where rosterid = #{rosterId} and id not in
		(select ts.id from testsession ts join studentstests st on ts.id = st.testsessionid where ts.rosterid = #{rosterId});
	</delete>

	<select id="findByPrimaryKey" resultMap="BaseResultMap" parameterType="long">
		SELECT
		<include refid="Base_Column_List" />
		,modifieduser
		FROM testsession
		WHERE id = #{testSessionId}
	</select>

	<select id="findByPrimaryKeyStage" resultMap="BaseResultMap" parameterType="long">
		SELECT ts.*,stag.code as stagecode
		FROM testsession ts
		INNER JOIN stage stag on stag.id=ts.stageid
		WHERE ts.id = #{testSessionId}
	</select>
	<select id="findByAutoRegistrationCriteria" resultMap="BaseResultMap">
		/* NO LOAD BALANCE */
		SELECT distinct ts.id, ts.rosterid, ts.testid, ts.name, ts.status, ts.source, ts.testcollectionid, ts.testtypeid, ts.gradecourseid, ts.stageid,
			ts.operationaltestwindowid
		FROM testsession ts
		JOIN testcollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentstestcollections atc ON tc.id = atc.testcollectionid
		JOIN contentarea ca ON tc.contentareaid = ca.id
		JOIN gradecourse gc ON ts.gradecourseid = gc.id
		WHERE ts.activeflag is true
		and ca.id IN (select id from contentarea where abbreviatedname = (select abbreviatedname from contentarea where id = #{contentAreaId}))
		and gc.id IN (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id = #{gradeCourseId}))
		and ts.testtypeid = #{testTypeId} and atc.assessmentid=#{assessmentId}
		and ts.attendanceschoolid = #{attendanceSchoolId}
		<choose>
			<when test="testSessionPrefix == null">and ts.name like #{currentSchoolYear} || '_%'</when>
			<otherwise>and ts.name like #{testSessionPrefix,jdbcType=VARCHAR} || '%' </otherwise>
		</choose>
		and ts.schoolyear = #{currentSchoolYear}
		<if test="stageId != null">
			and ts.stageid = #{stageId}
		</if>
		<if test="sourceType != null">
			and ts.source = #{sourceType}
		</if>
		<if test="operationalTestWindowId != null">
			and ts.operationaltestwindowid = #{operationalTestWindowId}
		</if>
	</select>

	<select id="findByAutoRegistrationCriteriaPredictive" resultMap="BaseResultMap">
		/* NO LOAD BALANCE */
		SELECT DISTINCT ts.id, ts.rosterid, ts.testid, ts.name, ts.status, ts.source, ts.testcollectionid, ts.testtypeid, ts.gradecourseid,
			ts.operationaltestwindowid
		FROM testsession ts
		JOIN testcollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentstestcollections atc ON tc.id = atc.testcollectionid
		JOIN contentarea ca ON tc.contentareaid = ca.id
		JOIN gradecourse gc ON tc.gradecourseid = gc.id
		WHERE ts.activeflag
		AND ts.testtypeid = #{testTypeId,jdbcType=BIGINT}
		AND ts.attendanceschoolid = #{attendanceSchoolId,jdbcType=BIGINT}
		AND ts.schoolyear = #{currentSchoolYear,jdbcType=BIGINT}
		AND ca.id IN (SELECT id FROM contentarea WHERE abbreviatedname = (SELECT abbreviatedname FROM contentarea WHERE id = #{contentAreaId,jdbcType=BIGINT}))
		AND gc.id IN (SELECT id FROM gradecourse WHERE abbreviatedname = (SELECT abbreviatedname FROM gradecourse WHERE id = #{gradeCourseId,jdbcType=BIGINT}))
	</select>

	<select id="findPredecessorStageStatus" resultType="String">
		/* NO LOAD BALANCE */
		SELECT distinct ca.categorycode
		FROM testsession ts JOIN testcollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
		JOIN studentstests st on st.testsessionid = ts.id
		JOIN category ca on ca.id = st.status
		WHERE ts.activeflag is true and tc.contentareaid = #{contentAreaId}
		and ts.gradecourseid in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id = #{gradeCourseId}))
		and ts.testtypeid = #{testTypeId} and atc.assessmentid=#{assessmentId}
		<!-- and ts.attendanceschoolid = #{attendanceSchoolId} -->
		and ts.name like #{currentSchoolYear} || '_%'
		and ts.schoolyear = #{currentSchoolYear}
		and ts.stageid = #{stageId}
		and ts.source='BATCHAUTO'
		and st.activeflag is true
		and ts.operationaltestwindowid= #{operationalTestWindowId}
		and st.studentid = #{studentId} limit 1
	</select>

	<resultMap type="edu.ku.cete.domain.TestSession" id="AssociationsResultMap">
		<id column="id" property="id" />
		<result column="rosterid" property="rosterId" />
		<result column="name" property="name" />
		<result column="status" property="status" />
		<result column="source" property="source" />
		<association property="roster" javaType="edu.ku.cete.domain.enrollment.Roster">
			<id column="roster.id" property="id" />
			<result column="roster.coursesectionname" property="courseSectionName" />
			<result column="roster.teacherid" property="teacherId" />
			<result column="roster.statesubjectareaid" property="stateSubjectAreaId" />
			<result column="statecoursecode" property="stateCourseCode" />
			<association property="subject" javaType="edu.ku.cete.domain.content.ContentArea">
				<id column="ca.id" property="id" />
				<result column="ca.name" property="name" />
				<result column="ca.abbreviatedname" property="abbreviatedName" />
			</association>
		</association>
	</resultMap>

	<select id="findWithAssociationsByPrimaryKey" resultMap="AssociationsResultMap" parameterType="Long">
		SELECT ts.id, ts.rosterid, ts.name, ts.status, ts.source, r.id as "roster.id", r.coursesectionname as "roster.coursesectionname", r.teacherid as "roster.teacherid",
		r.statesubjectareaid as "roster.statesubjectareaid", r.statecoursecode as "roster.statecoursecode", ca.id as "ca.id", ca.name as "ca.name", ca.abbreviatedname as "ca.abbreviatedname"
		FROM testsession ts join roster r on ts.rosterid = r.id join contentarea ca on (select id from contentarea where id = r.statesubjectareaid order by createdate limit 1) = ca.id
		WHERE ts.id = #{testSessionId}
	</select>

	<update id="deactivateByPrimaryKey">
		update studentsresponses set activeflag=false , modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
		where studentstestsid in (select id from studentstests where testsessionid=#{testSessionId});

		update studentstestsections set activeflag=false , modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
		where studentstestid in (select id from studentstests where testsessionid=#{testSessionId});

		update studentstests set activeflag=false , modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
		where testsessionid=#{testSessionId};

		update testsession set activeflag=false , modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
		where id=#{testSessionId};
	</update>

	<update id="deactivateByPrimaryKeyWithStatus" parameterType="java.util.Map">
		update testsession
		set modifieduser = #{modifiedUserId},
		modifieddate = now(),
		activeflag = false,
		status=(select id from category
		where categorycode = 'gradechangeinactivated-' ||
		(select categorycode from category
		where id = (select status from testsession where id = #{testSessionId})
		and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS'))
		and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS'))
		where id = #{testSessionId}
	</update>

	<update id="reactivateByPrimaryKeyForGradeChange" parameterType="java.util.Map">
		update testsession
		set modifieduser = #{modifiedUserId},
		modifieddate = now(),
		activeflag = true,
		status=(select id from category
		where categorycode =
		(select split_part(categorycode, '-', 2) from category
		where id = (select status from testsession where id = #{testSessionId})
		and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS'))
		and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS'))
		where id = #{testSessionId}
	</update>

	<resultMap type="edu.ku.cete.web.TestSessionPdfDTO" id="PdfManageTestSessionMap">
		<id column="id" property="testSessionId" />
		<result column="name" property="testSessionName" />
		<result column="stateStudentIdentifier" property="stateStudentIdentifier" />
		<result column="studentTestId" property="studentTestId" />
		<result column="educatorusername" property="educatorUserName" />
		<result column="educatorfirstname" property="educatorFirstName" />
		<result column="educatorlastname" property="educatorLastName" />
		<result column="rostername" property="rosterName" />
		<result column="testcollectionname" property="testCollectionName" />
		<result column="testname" property="testName" />
		<result column="randomizationtype" property="randomizationType" />
		<result column="studentfirstname" property="studentFirstName" />
		<result column="studentlastname" property="studentLastName" />
		<result column="studentusername" property="studentUserName" />
		<result column="studentpassword" property="studentPassword" />
		<result column="ticketnumber" property="ticketNumber" />
		<result column="testsectionname" property="testSectionName" />
		<result column="testSectionTicketNumber" property="testSectionTicketNumber" />
		<result column="hardbreak" property="hardBreak" jdbcType="BIT" />
		<result column="sectionorder" property="sectionOrder" />
		<result column="testSectionCount" property="testSectionCount" />
		<result column="groupingindicator1" property="groupingindicator1" />
		<result column="groupingindicator2" property="groupingindicator2" />
		<result column="assessmentprogramname" property="assessmentProgramName" />
	</resultMap>
	<select id="findTestSessionTicketDetailsByIdInterim" resultMap="PdfManageTestSessionMap" parameterType="Long">
		SELECT distinct ts.id,
		ts.name ,
		stu.statestudentidentifier,
		st.id AS studentTestId ,
		tc.name AS testcollectionname ,
		t.testname AS testname ,
		st.ticketno AS ticketnumber ,
		tc.randomizationtype AS randomizationtype ,
		stu.legalfirstname AS studentfirstname ,
		stu.legallastname AS studentlastname ,
		stu.username AS studentusername ,
		stu.password AS studentpassword ,
		tsec.testsectionname AS testsectionname ,
		stsc.ticketno AS testSectionTicketNumber,
		tsec.hardbreak,
		tsec.sectionorder,
		(select count(1) as ts_count from testsection tsec where tsec.testid = t.id) AS testSectionCount
		,ettsa.groupingindicator1,
		ettsa.groupingindicator2,
		ap.programname as assessmentprogramname
		FROM studentstests st
		LEFT JOIN test t ON t.id = st.testid
		JOIN student stu ON stu.id = st.studentid
		JOIN enrollment en on stu.id = en.studentid
		JOIN organizationtreedetail orgtree on orgtree.schoolid = en.attendanceschoolid
		JOIN testcollection tc ON tc.id = st.testcollectionid
		JOIN testsession ts ON ts.id = st.testsessionid
		join assessmentsTestCollections asstTc on tc.id = asstTc.testcollectionid
		join assessment asst on asst.id = asstTc.assessmentid
		join testingProgram
		tp on asst.testingProgramId = tp.id
		join assessmentProgram ap on ap.id = tp.assessmentprogramid
		LEFT JOIN studentstestsections stsc on stsc.studentstestid = st.id
		LEFT JOIN testsection tsec on tsec.id=stsc.testsectionid
		LEFT JOIN enrollmenttesttypesubjectarea ettsa ON ettsa.enrollmentid = st.enrollmentid and ettsa.activeflag is true
		WHERE st.activeflag IS true and st.status in (select id from category where categorycode in ('unused','inprogress','pending'))
		<if test="testSessionIds != null">
			AND ts.id in
			<foreach collection="testSessionIds" item="testSessionId" open="(" close=")" separator=",">
				#{testSessionId}
			</foreach>
		</if>
		AND (orgtree.schoolid = #{organizationId}
			OR orgtree.districtid = #{organizationId}
			OR orgtree.stateid = #{organizationId})
		order by ettsa.groupingindicator1, ettsa.groupingindicator2,studentlastname,st.id, tsec.sectionorder, testsectionname
	</select>

	<select id="findTestSessionTicketDetailsForPredictive" resultMap="PdfManageTestSessionMap" parameterType="map">
		select distinct
		ts.id,
		ts.name,
		s.statestudentidentifier,
		st.id as studentTestId,
		tc.name as testcollectionname,
		t.testname as testname,
		st.ticketno as ticketnumber,
		tc.randomizationtype as randomizationtype,
		s.legalfirstname as studentfirstname,
		s.legallastname as studentlastname,
		s.username as studentusername,
		s.password as studentpassword,
		tsec.testsectionname as testsectionname,
		sts.ticketno as testSectionTicketNumber,
		tsec.hardbreak,
		tsec.sectionorder,
		(select count(1) as ts_count from testsection tsec where tsec.testid = t.id) AS testSectionCount,
		ap.programname as assessmentprogramname
		from testsession ts
		join studentstests st on ts.id = st.testsessionid and st.activeflag
		join student s on st.studentid = s.id and s.activeflag
		JOIN enrollment en on s.id = en.studentid
		JOIN organizationtreedetail orgtree on orgtree.schoolid = en.attendanceschoolid
		join testcollection tc on st.testcollectionid = tc.id
		join assessmentstestcollections atc on tc.id = atc.testcollectionid
		join assessment a on atc.assessmentid = a.id
		join testingprogram tp on a.testingprogramid = tp.id
		join assessmentprogram ap on tp.assessmentprogramid = ap.id
		<if test="isTeacher">
			join enrollment e
			on st.enrollmentid = e.id
			and ts.schoolyear = e.currentschoolyear
			and e.activeflag
			join enrollmentsrosters er on e.id = er.enrollmentid and er.activeflag
			join roster r
			on er.rosterid = r.id
			and e.currentschoolyear = r.currentschoolyear
			and r.teacherid = #{teacherId,jdbcType=BIGINT}
			and r.activeflag
		</if>
		left join test t on st.testid = t.id
		left join studentstestsections sts on st.id = sts.studentstestid and sts.activeflag
		left join testsection tsec on sts.testsectionid = tsec.id
		where ts.activeflag
		and st.status in (select id from category where categorycode in ('unused','inprogress','pending'))
		and ts.id = any(array
		<foreach collection="testSessionIds" item="testSessionId" open="[" separator="," close="]">
			#{testSessionId}
		</foreach>
		)
		AND (orgtree.schoolid = #{organizationId}
			OR orgtree.districtid = #{organizationId}
			OR orgtree.stateid = #{organizationId})
		order by s.legallastname, st.id, tsec.sectionorder, tsec.testsectionname
	</select>

	<select id="findTestSessionTicketDetailsById" resultMap="PdfManageTestSessionMap" parameterType="Long">
		SELECT distinct ts.id ,
		ts.name ,
		stu.statestudentidentifier,
		st.id AS studentTestId ,
		a.username AS educatorusername ,
		a.firstname AS educatorfirstname ,
		a.surname AS educatorlastname ,
		r.coursesectionname AS rostername ,
		tc.name AS testcollectionname ,
		t.testname AS testname ,
		st.ticketno AS ticketnumber ,
		tc.randomizationtype AS randomizationtype ,
		stu.legalfirstname AS studentfirstname ,
		stu.legallastname AS studentlastname ,
		stu.username AS studentusername ,
		stu.password AS studentpassword ,
		tsec.testsectionname AS testsectionname ,
		stsc.ticketno AS testSectionTicketNumber,
		tsec.hardbreak,
		tsec.sectionorder,
		(select count(1) as ts_count from testsection tsec where tsec.testid = t.id) AS testSectionCount
		,ettsa.groupingindicator1,
		ettsa.groupingindicator2,
		ap.programname as assessmentprogramname
		FROM studentstests st
		LEFT JOIN test t ON t.id = st.testid
		JOIN student stu ON stu.id = st.studentid
		JOIN testcollection tc ON tc.id = st.testcollectionid
		JOIN testsession ts ON ts.id = st.testsessionid
		JOIN roster
		r ON r.id = ts.rosterid
		JOIN aartuser a ON a.id = r.teacherid
		join assessmentsTestCollections asstTc on tc.id = asstTc.testcollectionid
		join assessment asst on asst.id = asstTc.assessmentid
		join testingProgram tp on asst.testingProgramId = tp.id
		join assessmentProgram ap on ap.id = tp.assessmentprogramid
		LEFT JOIN studentstestsections stsc on stsc.studentstestid = st.id
		LEFT JOIN testsection tsec on tsec.id=stsc.testsectionid
		<!-- LEFT JOIN enrollment en ON st.enrollmentid = en.id -->
		<!-- LEFT JOIN enrollmentsrosters enrlroster ON enrlroster.enrollmentid = en.id -->
		LEFT JOIN enrollmenttesttypesubjectarea ettsa ON ettsa.enrollmentid = st.enrollmentid and ettsa.activeflag is true
		<!-- LEFT JOIN testtypesubjectarea ttsa on ttsa.testtypeid = ettsa.testtypeid and ttsa.subjectareaid=ettsa.subjectareaid -->
		<!-- LEFT JOIN contentareatesttypesubjectarea cattsa ON cattsa.testtypesubjectareaid = ttsa.id AND (cattsa.contentareaid is null or cattsa.contentareaid = tc.contentareaid) -->
		WHERE st.activeflag IS true and st.status in (select id from category where categorycode in ('unused','inprogress','pending'))
		<if test="testSessionIds != null">
			AND ts.id in
			<foreach collection="testSessionIds" item="testSessionId" open="(" close=")" separator=",">
				#{testSessionId}
			</foreach>
		</if>
		<if test="isTeacher">
			AND r.teacherid=#{educatorId}
		</if>
		order by ettsa.groupingindicator1, ettsa.groupingindicator2,studentlastname,st.id, tsec.sectionorder, testsectionname, educatorlastname
	</select>

	<select id="getTestSessionWithRoster" resultMap="testSessionWithRosterMap">
		SELECT *, count(*) OVER() AS totalrecords from (
		SELECT
		<include refid="Extended_With_Roster_Column_List" />
		FROM roster r
		inner join Organization attendanceSchool on attendanceSchool.id = r.attendanceschoolid
		inner join aartuser au on r.teacherId = au.id
		inner join testsession ts on ts.rosterid = r.id
		inner join testcollection AS tc on tc.id = ts.testcollectionid
		<if test="! hasQCCompletePermission">
			inner join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
			inner join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otw.id and otwsr.activeflag is true
		</if>
		<if test="hasQCCompletePermission">
			left join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
			left join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otw.id and otwsr.activeflag is true
		</if>
		inner join assessmentsTestCollections asstTc on tc.id = asstTc.testcollectionid
		inner join assessment asst on asst.id = asstTc.assessmentid
		inner join testcollectionstests tct on tc.id = tct.testcollectionid
		inner join test test on test.id = tct.testid
		inner join testingProgram tp on asst.testingProgramId = tp.id
		inner join assessmentProgram ap on ap.id = tp.assessmentprogramid
		inner join contentArea tcContentArea on tc.contentAreaId = tcContentArea.id
		inner join organizationtreedetail otd on otd.schoolid = r.attendanceschoolid
		<if test="assessmentProgramAbbrName == 'DLM' or assessmentProgramAbbrName == 'I-SMART'">
			inner join studentstests st on st.testsessionid = ts.id
		</if>
		left join GradeCourse tcGc on tc.gradeCourseId = tcGc.id
		left join gradebandgradecourse tcgbgc on tc.gradebandid = tcgbgc.gradebandid
		left join gradeband tcgb on tcgbgc.gradebandid = tcgb.id
		WHERE ts.activeflag IS TRUE AND r.activeflag IS TRUE
		<choose>
			<when test="hasQCCompletePermission">
				AND tc.systemselectoptionid IS NOT NULL
			</when>
			<otherwise>
				AND otwsr.sessionruleid= #{systemEnrollmentRuleId}
			</otherwise>
		</choose>
		AND (ts.source is null OR ts.source != #{itiSourceCode})
		<if test="schoolOrgId != null">
			AND r.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (otd.schoolid=#{userOrganizationId, jdbcType=BIGINT} or otd.districtid=#{userOrganizationId, jdbcType=BIGINT} or otd.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="! hasViewAllPermission">
			AND r.teacherId=#{educatorId}
		</if>
		<if test="qcComplete != null">
			AND test.qccomplete = #{qcComplete}
		</if>
		<if test="! hasViewHighStakesTestSessionsPermission">
			AND tp.highstake = false
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND tcContentArea.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			<!-- AND tcGc.id in (select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id=(#{gradeCourseId, jdbcType=BIGINT}))) -->

			and (
			case
			when tc.gradecourseid is null then (select abbreviatedname from gradecourse where id in (#{gradeCourseId, jdbcType=BIGINT}) and activeflag is true) in (select abbreviatedname from gradecourse where id in (tcgbgc.gradecourseid) and activeflag is true)
			when tc.gradecourseid is not null then (select abbreviatedname from gradecourse where id in (#{gradeCourseId, jdbcType=BIGINT}) and activeflag is true) = (select abbreviatedname from gradecourse where id in (tcGc.id) and activeflag is true)
			end
			)

		</if>
		<if test="hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (test.qccomplete is FALSE OR test.qccomplete is NULL) OR (test.qccomplete is TRUE AND otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="! hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_Roster_Where_Clause" />
		union all
		SELECT
		<include refid="Extended_Test_With_Roster_Column_List" />
		FROM roster r
		inner join Organization attendanceSchool on attendanceSchool.id = r.attendanceschoolid
		inner join aartuser au on r.teacherId = au.id
		inner join testsession ts on ts.rosterid = r.id
		inner join testcollection AS tc on tc.id = ts.testcollectionid
		<if test="! hasQCCompletePermission">
			inner join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
			inner join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otw.id and otwsr.activeflag is true
		</if>
		<if test="hasQCCompletePermission">
			left join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
			left join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otw.id and otwsr.activeflag is true
		</if>
		inner join assessmentsTestCollections asstTc on tc.id = asstTc.testcollectionid
		inner join assessment asst on asst.id = asstTc.assessmentid
		inner join testcollectionstests tct on tc.id = tct.testcollectionid
		inner join test test on test.id = tct.testid and test.id = ts.testid
		inner join testingProgram tp on asst.testingProgramId = tp.id
		inner join assessmentProgram ap on ap.id = tp.assessmentprogramid
		inner join contentArea tcContentArea on tc.contentAreaId = tcContentArea.id
		inner join organizationtreedetail otd on otd.schoolid = r.attendanceschoolid
		<if test="assessmentProgramAbbrName == 'DLM' or assessmentProgramAbbrName == 'I-SMART'">
			inner join studentstests st on st.testsessionid = ts.id
		</if>
		left join GradeCourse tcGc on tc.gradeCourseId = tcGc.id
		left join gradebandgradecourse tcgbgc on tc.gradebandid = tcgbgc.gradebandid
		left join gradeband tcgb on tcgbgc.gradebandid = tcgb.id
		WHERE ts.activeflag IS TRUE AND r.activeflag IS TRUE
		AND (ts.source is null OR ts.source != #{itiSourceCode})
		<choose>
			<when test="hasQCCompletePermission">
				AND tc.systemselectoptionid IS NULL
			</when>
			<otherwise>
				AND otwsr.sessionruleid= #{manualEnrollmentRuleId}
			</otherwise>
		</choose>
		<if test="schoolOrgId != null">
			AND r.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (otd.schoolid=#{userOrganizationId, jdbcType=BIGINT} or otd.districtid=#{userOrganizationId, jdbcType=BIGINT} or otd.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="! hasViewAllPermission">
			AND r.teacherId=#{educatorId}
		</if>
		<if test="qcComplete != null">
			and test.qccomplete = #{qcComplete}
		</if>
		<if test="! hasViewHighStakesTestSessionsPermission">
			AND tp.highstake = false
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND tcContentArea.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			<!-- AND tcGc.id in (select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id=(#{gradeCourseId, jdbcType=BIGINT}))) -->
			and (
			case
			when tc.gradecourseid is null then (select abbreviatedname from gradecourse where id in (#{gradeCourseId, jdbcType=BIGINT}) and activeflag is true) in (select abbreviatedname from gradecourse where id in (tcgbgc.gradecourseid) and activeflag is true)
			when tc.gradecourseid is not null then (select abbreviatedname from gradecourse where id in (#{gradeCourseId, jdbcType=BIGINT}) and activeflag is true) = (select abbreviatedname from gradecourse where id in (tcGc.id) and activeflag is true)
			end
			)
		</if>
		<if test="hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (test.qccomplete is FALSE OR test.qccomplete is NULL) OR (test.qccomplete is TRUE AND otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="! hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_Roster_Where_Clause" />
		) testsessions where includeInProgressTestSession is true
		<if test="showExpired">
			or expiredFlag is true
		</if>
		<if test="includeCompletedTestSession">
			or includeCompletedTestSession is true
		</if>
		<if test="studentRosterCriteriaMap.testLetProgress != null">
			AND (testletprogress || '') ilike #{studentRosterCriteriaMap.testLetProgress}
		</if>
		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionRosterId'">
					testsessions.testSessionRosterId
				</when>
				<when test="sortByColumn == 'rosterId'">
					testsessions.rosterId
				</when>
				<when test="sortByColumn == 'courseSectionName'">
					testsessions.coursesectionname
				</when>
				<when test="sortByColumn == 'educatorFirstName'">
					testsessions.educatorFirstName
				</when>
				<when test="sortByColumn == 'educatorLastName'">
					testsessions.educatorLastName
				</when>
				<when test="sortByColumn == 'educatorIdentifier'">
					testsessions.educatorIdentifier
				</when>
				<when test="sortByColumn == 'testSessionId'">
					testsessions.testSessionId
				</when>
				<when test="sortByColumn == 'testSessionName'">
					testsessions.testSessionName
				</when>
				<when test="sortByColumn == 'testSessionStatus'">
					testsessions.testSessionStatus
				</when>
				<when test="sortByColumn == 'testSessionSource'">
					testsessions.testSessionSource
				</when>
				<when test="sortByColumn == 'testSessionTestId'">
					testsessions.testSessionTestId
				</when>
				<when test="sortByColumn == 'testcollectionid'">
					testsessionsts.testcollectionid
				</when>
				<when test="sortByColumn == 'testCollectionName'">
					testsessions.testCollectionname
				</when>
				<when test="sortByColumn == 'randomizationType'">
					testsessions.randomizationType
				</when>
				<when test="sortByColumn == 'tcGradeCourseName'">
					testsessions.tcGradeCourseName
				</when>
				<when test="sortByColumn == 'tcGradeLevel'">
					testsessions.tcGradeLevel
				</when>
				<when test="sortByColumn == 'testCollectionContentAreaId'">
					testsessions.testCollectionContentAreaId
				</when>
				<when test="sortByColumn == 'tcContentAreaName'">
					testsessions.tcContentAreaName
				</when>
				<when test="sortByColumn == 'tcContentAreaAbbrName'">
					testsessions.tcContentAreaAbbrName
				</when>
				<when test="sortByColumn == 'assessmentName'">
					testsessions.assessmentName
				</when>
				<when test="sortByColumn == 'programName'">
					testsessions.programName
				</when>
				<when test="sortByColumn == 'highstake'">
					testsessions.highstake
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					testsessions.assessmentProgramName
				</when>
				<when test="sortByColumn == 'attendanceSchoolIdentifier'">
					testsessions.attendanceSchoolIdentifier
				</when>
				<when test="sortByColumn == 'attendanceSchoolName'">
					testsessions.attendanceSchoolName
				</when>
				<when test="sortByColumn == 'testLetProgress'">
					testletprogress
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		limit #{limit}
		offset #{offset}
	</select>
	<select id="countTestSessionWithRoster" resultType="INTEGER">
		SELECT count(1) from (
		SELECT
		<include refid="Extended_With_Roster_Column_List" />
		FROM roster r
		inner join Organization attendanceSchool on attendanceSchool.id = r.attendanceschoolid
		inner join aartuser au on r.teacherId = au.id
		inner join testsession ts on ts.rosterid = r.id
		inner join testcollection AS tc on tc.id = ts.testcollectionid
		<if test="! hasQCCompletePermission">
			inner join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			inner join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otwtc.operationaltestwindowid and otwsr.activeflag is true
			inner join operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
		</if>
		<if test="hasQCCompletePermission">
			left join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			left join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otwtc.operationaltestwindowid and otwsr.activeflag is true
			left join operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
		</if>
		inner join assessmentsTestCollections asstTc on tc.id = asstTc.testcollectionid
		inner join assessment asst on asst.id = asstTc.assessmentid
		inner join testcollectionstests tct on tc.id = tct.testcollectionid
		inner join test test on test.id = tct.testid
		inner join testingProgram tp on asst.testingProgramId = tp.id
		inner join assessmentProgram ap on ap.id = tp.assessmentprogramid
		inner join contentArea tcContentArea on tc.contentAreaId = tcContentArea.id
		inner join organizationtreedetail otd on otd.schoolid = r.attendanceschoolid
		left join GradeCourse tcGc on tc.gradeCourseId = tcGc.id
		left join gradebandgradecourse tcgbgc on tc.gradebandid = tcgbgc.gradebandid
		left join gradeband tcgb on tcgbgc.gradebandid = tcgb.id
		WHERE ts.activeflag IS TRUE AND r.activeflag IS TRUE
		AND (ts.source is null OR ts.source != #{itiSourceCode})
		<choose>
			<when test="hasQCCompletePermission">
				AND tc.systemselectoptionid IS NOT NULL
			</when>
			<otherwise>
				AND otwsr.sessionruleid= #{systemEnrollmentRuleId}
			</otherwise>
		</choose>
		<if test="schoolOrgId != null">
			AND r.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>
		<if test="schoolOrgId == null and userOrganizationId != null">
			<!-- AND r.attendanceschoolid = ANY(select id from organization_children(#{userOrganizationId, jdbcType=BIGINT}) union select #{userOrganizationId, jdbcType=BIGINT}) -->
			AND (otd.schoolid=#{userOrganizationId, jdbcType=BIGINT} or otd.districtid=#{userOrganizationId, jdbcType=BIGINT} or otd.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="! hasViewAllPermission">
			AND r.teacherId=#{educatorId}
		</if>
		<if test="qcComplete != null">
			AND test.qccomplete = #{qcComplete}
		</if>
		<if test="! hasViewHighStakesTestSessionsPermission">
			AND tp.highstake = false
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND tcContentArea.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			AND tcGc.id in (select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id=(#{gradeCourseId, jdbcType=BIGINT})))
		</if>
		<if test="hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (test.qccomplete is FALSE OR test.qccomplete is NULL) OR (test.qccomplete is TRUE AND otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="! hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_Roster_Where_Clause" />
		union all
		SELECT
		<include refid="Extended_Test_With_Roster_Column_List" />
		FROM roster r
		inner join Organization attendanceSchool on attendanceSchool.id = r.attendanceschoolid
		inner join aartuser au on r.teacherId = au.id
		inner join testsession ts on ts.rosterid = r.id
		inner join testcollection AS tc on tc.id = ts.testcollectionid
		<if test="! hasQCCompletePermission">
			inner join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			inner join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otwtc.operationaltestwindowid and otwsr.activeflag is true
			inner join operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
		</if>
		<if test="hasQCCompletePermission">
			left join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id and otwtc.activeflag is true
			left join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otwtc.operationaltestwindowid and otwsr.activeflag is true
			left join operationaltestwindow otw on otw.id = otwsr.operationaltestwindowid
		</if>
		inner join assessmentsTestCollections asstTc on tc.id = asstTc.testcollectionid
		inner join assessment asst on asst.id = asstTc.assessmentid
		inner join testcollectionstests tct on tc.id = tct.testcollectionid
		inner join test test on test.id = tct.testid and test.id = ts.testid
		inner join testingProgram tp on asst.testingProgramId = tp.id
		inner join assessmentProgram ap on ap.id = tp.assessmentprogramid
		inner join contentArea tcContentArea on tc.contentAreaId = tcContentArea.id
		inner join organizationtreedetail otd on otd.schoolid = r.attendanceschoolid
		left join GradeCourse tcGc on tc.gradeCourseId = tcGc.id
		left join gradebandgradecourse tcgbgc on tc.gradebandid = tcgbgc.gradebandid
		left join gradeband tcgb on tcgbgc.gradebandid = tcgb.id
		WHERE ts.activeflag IS TRUE AND r.activeflag IS TRUE
		AND (ts.source is null OR ts.source != #{itiSourceCode})
		<choose>
			<when test="hasQCCompletePermission">
				AND tc.systemselectoptionid IS NULL
			</when>
			<otherwise>
				AND otwsr.sessionruleid= #{manualEnrollmentRuleId}
			</otherwise>
		</choose>
		<if test="schoolOrgId != null">
			AND r.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>
		<if test="schoolOrgId == null and userOrganizationId != null">
			<!-- AND r.attendanceschoolid = ANY(select id from organization_children(#{userOrganizationId, jdbcType=BIGINT}) union select #{userOrganizationId, jdbcType=BIGINT}) -->
			AND (otd.schoolid=#{userOrganizationId, jdbcType=BIGINT} or otd.districtid=#{userOrganizationId, jdbcType=BIGINT} or otd.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="! hasViewAllPermission">
			AND r.teacherId=#{educatorId}
		</if>
		<if test="qcComplete != null">
			and test.qccomplete = #{qcComplete}
		</if>
		<if test="! hasViewHighStakesTestSessionsPermission">
			AND tp.highstake = false
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND tcContentArea.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			AND tcGc.id in (select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id=(#{gradeCourseId, jdbcType=BIGINT})))
		</if>
		<if test="hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (test.qccomplete is FALSE OR test.qccomplete is NULL) OR (test.qccomplete is TRUE AND otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="! hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_Roster_Where_Clause" />
		) testsessions
	</select>

	<select id="findTestSessionDelFlags" parameterType="map" resultType="hashmap">
		select os.id, CASE WHEN (
		select count(*) from (
		select st.testsessionid, st.id from studentstests st
		inner join category ca on st.status = ca.id
		inner join categorytype ct on ca.categorytypeid=ct.id
		where st.activeflag = true and ca.categorycode != 'unused' and ct.typecode='STUDENT_TEST_STATUS'
		and st.testsessionid = os.id
		union
		select st.testsessionid, st.id from studentstests st
		where st.activeflag = true and st.id in (select sts.studentstestid from studentstestsections sts
		inner join category ca on sts.statusid = ca.id
		inner join categorytype ct on (ca.categorytypeid=ct.id and ct.typecode='STUDENT_TESTSECTION_STATUS')
		and sts.activeflag=true and ca.categorycode != 'unused' )
		and st.testsessionid = os.id
		) notunused ) > 0 THEN 'N' ELSE 'Y' END as testsessiondeletableflag from (
		select ts.id from testsession ts where id = ANY(ARRAY
		<foreach collection="testSessionIds" item="testSessionId" open="[" close="]" separator=",">
			#{testSessionId}
		</foreach>
		)
		) as os
	</select>

	<select id="findTestSessionDelFlag" parameterType="java.lang.Long" resultType="boolean">
		select CASE WHEN (
		select count(*) from (
		select st.testsessionid, st.id from studentstests st
		inner join category ca on st.status = ca.id
		inner join categorytype ct on ca.categorytypeid=ct.id
		where st.activeflag = true and ca.categorycode != 'unused' and ct.typecode='STUDENT_TEST_STATUS'
		and st.testsessionid = #{testSessionId}
		union
		select st.testsessionid, st.id from studentstests st
		where st.activeflag = true and st.id in (select sts.studentstestid from studentstestsections sts
		inner join category ca on sts.statusid = ca.id
		inner join categorytype ct on (ca.categorytypeid=ct.id and ct.typecode='STUDENT_TESTSECTION_STATUS')
		and sts.activeflag=true and ca.categorycode != 'unused' )
		and st.testsessionid = #{testSessionId}
		) notunused ) > 0 THEN false ELSE true END as testsessiondeletableflag
	</select>

	<select id="selectTestSessionByStudentId" resultType="java.lang.Long">
		SELECT st.id
		FROM testsession ts
		JOIN studentstests st ON st.testsessionid = ts.id
		WHERE ts.name ilike #{testSessionName}
		AND st.studentid = #{studentId} and st.activeflag IS true
		and st.status in (SELECT c.id FROM category c, categorytype ct WHERE c.categorytypeid = ct.id
		AND c.categorycode !='complete' AND ct.typecode='STUDENT_TEST_STATUS')
		ORDER BY st.id desc
	</select>

	<select id="getAutoRegisteredTestSession" resultType="edu.ku.cete.domain.testsession.AutoRegisteredTestSessionDTO">

		WITH stusession AS
		(
		select distinct st.testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE e.id = st.enrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		UNION

		select distinct st.transferedtestsessionid as testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE e.id = st.transferedenrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		)

		select tsession.*, count(*) OVER() AS totalrecords from (SELECT
		<include refid="Extended_Auto_Registration_Test_Sessions_Status_Column_List" />
		FROM testsession ts
		JOIN TestCollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentsTestCollections atc ON tc.id = atc.testcollectionid
		JOIN assessment a ON atc.assessmentid = a.id
		JOIN testingProgram tp ON a.testingprogramid = tp.id
		JOIN assessmentProgram ap ON tp.assessmentprogramid = ap.id
		INNER JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN stusession on stusession.testsessionid=ts.id
		LEFT JOIN gradecourse gc ON tc.gradecourseid = gc.id
		LEFT JOIN gradeband gb ON tc.gradebandid = gb.id
		WHERE ts.rosterid IS NULL
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (org.schoolid=#{userOrganizationId, jdbcType=BIGINT} or org.districtid=#{userOrganizationId, jdbcType=BIGINT} or org.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND ca.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			AND gc.id in (select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id=(#{gradeCourseId, jdbcType=BIGINT})))
		</if>
		<if test="! showExpired">
			AND ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) OR ts.windowexpirydate &gt;= now())
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_AR_Where_Clause" />
		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionId'">
					ts.id
				</when>
				<when test="sortByColumn == 'testSessionName'">
					ts.name
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					ap.programname
				</when>
				<when test="sortByColumn == 'organizationDisplayIdentifier'">
					stusession.displayidentifier
				</when>
				<when test="sortByColumn == 'contentAreaName'">
					ca.name
				</when>
				<when test="sortByColumn == 'gradeCourseName'">
					substring(gc.name, '[^0-9]+'), substring(gc.name, '[0-9]+')::int
				</when>
				<when test="sortByColumn == 'gradeBandName'">
					gb.name
				</when>
				<when test="sortByColumn == 'rosterId'">
					ts.rosterid
				</when>
				<when test="sortByColumn == 'effectiveDate'">
					otw.effectivedate
				</when>
				<when test="sortByColumn == 'expiryDate'">
					expiryDate
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		) as tsession
		where includeInProgressTestSession is true
		<if test="showExpired">
			or expiredFlag is true
		</if>
		<if test="includeCompletedTestSession">
			or includeCompletedTestSession is true
		</if>
		<if test="limit != null">
			LIMIT #{limit}
		</if>
		<if test="offset != null">
			OFFSET #{offset}
		</if>
	</select>

	<select id="countAutoRegisteredTestSessions" resultType="INTEGER">

		WITH stusession AS
		(
		select distinct st.testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE e.id = st.enrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		UNION

		select distinct st.transferedtestsessionid as testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE e.id = st.transferedenrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		)

		SELECT count(1) from (
		SELECT
		<include refid="Extended_Auto_Registration_Test_Sessions_Column_List" />
		FROM testsession ts
		JOIN TestCollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentsTestCollections atc ON tc.id = atc.testcollectionid
		JOIN assessment a ON atc.assessmentid = a.id
		JOIN testingProgram tp ON a.testingprogramid = tp.id
		JOIN assessmentProgram ap ON tp.assessmentprogramid = ap.id
		INNER JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN stusession on stusession.testsessionid=ts.id
		LEFT JOIN gradecourse gc ON tc.gradecourseid = gc.id
		LEFT JOIN gradeband gb ON tc.gradebandid = gb.id
		WHERE ts.rosterid IS NULL
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (org.schoolid=#{userOrganizationId, jdbcType=BIGINT} or org.districtid=#{userOrganizationId, jdbcType=BIGINT} or org.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND ca.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			AND gc.id in (select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id=(#{gradeCourseId, jdbcType=BIGINT})))
		</if>
		<if test="! showExpired">
			AND ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) OR ts.windowexpirydate &gt;= now())
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_AR_Where_Clause" />
		) testsessions
	</select>

	<select id="findAutoPrintFiles" parameterType="map" resultType="hashmap">
		select testsessionid, array_to_string(array_agg(printtestfiles), ',') as printtestfiles
		from (SELECT distinct ts.id as testsessionid,
		(ap.programname||'/'||currentschoolyear||'/' ||tp.programabbr||'_'||a.assessmentcode||'_' ||sa.subjectareacode||'_' ||apg.gradecode||'_' ||tt.testtypecode||'_' ||tt.accessibilityflagcode||'.pdf') as printtestfiles
		FROM testsession ts
		INNER JOIN studentstests st ON ts.id = st.testsessionid and st.activeflag IS true
		<!-- INNER JOIN enrollment e ON st.studentid = e.studentid and st.enrollmentid=e.id AND e.activeflag is true -->
		<!-- INNER JOIN enrollmenttesttypesubjectarea etsa on etsa.enrollmentid = e.id -->
		<!-- INNER JOIN testtypesubjectarea ttsa on ttsa.testtypeid = etsa.testtypeid and ttsa.subjectareaid=etsa.subjectareaid -->
		INNER JOIN testtype tt on ts.testtypeid = tt.id
		INNER JOIN subjectarea sa on ts.subjectareaid=sa.id
		INNER JOIN assessmentsTestCollections atc ON ts.testcollectionid = atc.testcollectionid
		INNER JOIN assessment a ON atc.assessmentid = a.id
		INNER JOIN testingProgram tp ON a.testingprogramid = tp.id
		INNER JOIN assessmentProgram ap ON tp.assessmentprogramid = ap.id
		INNER JOIN gradecourse gc ON ts.gradecourseid = gc.id
		INNER JOIN gradecourse igc on gc.abbreviatedname=igc.abbreviatedname
		INNER JOIN assessmentprogramgrades apg ON igc.assessmentprogramgradesid = apg.id
		<!-- INNER JOIN TestCollection tc ON ts.testcollectionid = tc.id -->
		<!-- INNER JOIN contentarea ca ON ca.id = tc.contentareaid -->
		<!-- INNER JOIN contentareatesttypesubjectarea cattsa on cattsa.testtypesubjectareaid=ttsa.id and cattsa.contentareaid=ca.id -->
		WHERE ts.rosterid is null
		AND ts.id = ANY(ARRAY
		<foreach collection="testSessionIds" item="testSessionId" open="[" close="]" separator=",">
			#{testSessionId}
		</foreach>
		)
		) as a
		where printtestfiles is not null
		GROUP BY testsessionid
		ORDER BY testsessionid asc
	</select>

	<select id="findAutoRegisteredTestSessionTicketsById" resultMap="PdfManageTestSessionMap" parameterType="Long">
		SELECT distinct ts.id, ts.name, stu.statestudentidentifier, st.id AS studentTestId,
		tc.name AS testcollectionname,
		(select testname from test where id=st.testid) AS testname,
		st.ticketno AS ticketnumber,
		randomizationtype randomizationtype, stu.legalfirstname AS studentfirstname,
		stu.legallastname AS studentlastname, stu.username AS studentusername, stu.PASSWORD AS studentpassword,
		tsec.testsectionname,
		stsc.ticketno AS testSectionTicketNumber,
		tsec.hardbreak, tsec.sectionorder,
		( SELECT count ( 1 ) AS ts_count FROM testsection tsec WHERE tsec.testid = st.testid ) AS testSectionCount,
		ettsa.groupingindicator1,
		ettsa.groupingindicator2,
		ap.programname as assessmentprogramname
		FROM testsession ts
		JOIN testcollection tc ON ts.testcollectionid = tc.id
		JOIN studentstests st ON st.testsessionid =ts.id
		JOIN student stu ON stu.id = st.studentid
		JOIN enrollment en on stu.id = en.studentid
		JOIN organizationtreedetail orgtree on orgtree.schoolid = en.attendanceschoolid
		join assessmentsTestCollections asstTc on tc.id = asstTc.testcollectionid
		join assessment asst on asst.id = asstTc.assessmentid
		join testingProgram tp on
		asst.testingProgramId = tp.id
		join assessmentProgram ap on ap.id = tp.assessmentprogramid
		LEFT JOIN studentstestsections stsc on stsc.studentstestid = st.id and stsc.activeflag IS TRUE
		LEFT JOIN testsection tsec on tsec.id=stsc.testsectionid
		<!-- LEFT JOIN enrollment en ON st.enrollmentid = en.id -->
		<!-- LEFT JOIN enrollmentsrosters enrlroster ON enrlroster.enrollmentid = st.enrollmentid -->
		<!-- LEFT JOIN roster r ON r.id = enrlroster.rosterid -->
		LEFT JOIN enrollmenttesttypesubjectarea ettsa ON ettsa.enrollmentid = st.enrollmentid and ts.testtypeid= ettsa.testtypeid and ts.subjectareaid=ettsa.subjectareaid and ettsa.activeflag is true
		<!-- JOIN testtypesubjectarea ttsa on ttsa.testtypeid = ts.testtypeid and ttsa.subjectareaid=ts.subjectareaid and ttsa.assessmentid = asst.id -->
		<!-- JOIN contentareatesttypesubjectarea cattsa ON cattsa.testtypesubjectareaid = ttsa.id AND cattsa.contentareaid = tc.contentareaid -->
		WHERE st.activeflag IS TRUE
		and st.status in (select id from category where categorycode in ('unused','inprogress','pending'))
		<if test="testSessionIds != null">
			AND ts.id in
			<foreach collection="testSessionIds" item="testSessionId" open="(" close=")" separator=",">
				#{testSessionId}
			</foreach>
		</if>
		<if test="studentIds != null">
			AND stu.id in
			<foreach collection="studentIds" item="studentId" open="(" close=")" separator=",">
				#{studentId}
			</foreach>
		</if>
		AND (orgtree.schoolid = #{organizationId}
			OR orgtree.districtid = #{organizationId}
			OR orgtree.stateid = #{organizationId})
		ORDER BY ettsa.groupingindicator1, ettsa.groupingindicator2, studentlastname, st.id, tsec.sectionorder, testsectionname
	</select>
	<select id="getAutoregisteredTestSessionForActiveRosters" resultType="edu.ku.cete.domain.testsession.AutoRegisteredTestSessionDTO">
		WITH stusession AS
		(
		select distinct st.testsessionid, o.displayidentifier, org.schoolid, org.districtid, org.stateid
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN enrollmentsrosters enrlroster ON enrlroster.enrollmentid = e.id
		JOIN roster r ON r.id = enrlroster.rosterid
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE r.teacherid = #{teacherId} AND r.activeflag IS true
		and e.id = st.enrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		UNION

		select distinct st.transferedtestsessionid as testsessionid, o.displayidentifier, org.schoolid, org.districtid, org.stateid
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN enrollmentsrosters enrlroster ON enrlroster.enrollmentid = e.id
		JOIN roster r ON r.id = enrlroster.rosterid
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE r.teacherid = #{teacherId} AND r.activeflag IS true
		and e.id = st.transferedenrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		)

		select tsession.*, count(*) OVER() AS totalrecords from (SELECT
		<include refid="Extended_Auto_Registration_Test_Sessions_Column_List" />
		FROM testsession ts
		JOIN TestCollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentsTestCollections atc ON tc.id = atc.testcollectionid
		JOIN assessment a ON atc.assessmentid = a.id
		JOIN testingProgram tp ON a.testingprogramid = tp.id
		JOIN assessmentProgram ap ON tp.assessmentprogramid = ap.id
		INNER JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN stusession on stusession.testsessionid=ts.id
		LEFT JOIN gradecourse gc ON tc.gradecourseid = gc.id
		LEFT JOIN gradeband gb ON tc.gradebandid = gb.id
		LEFT JOIN gradebandgradecourse tcgbgc on tc.gradebandid = tcgbgc.gradebandid
		WHERE ts.rosterid IS NULL
		<if test="! showExpired">
			AND ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) OR	ts.windowexpirydate &gt;= now())
		</if>	
		
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (stusession.schoolid=#{userOrganizationId, jdbcType=BIGINT} or stusession.districtid=#{userOrganizationId, jdbcType=BIGINT} or stusession.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND ca.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			and (
			case
			when tc.gradecourseid is null then (select abbreviatedname from gradecourse where id in (#{gradeCourseId, jdbcType=BIGINT}) and activeflag is true) in (select abbreviatedname from gradecourse where id in (tcgbgc.gradecourseid) and activeflag is true)
			when tc.gradecourseid is not null then (select abbreviatedname from gradecourse where id in (#{gradeCourseId, jdbcType=BIGINT}) and activeflag is true) = (select abbreviatedname from gradecourse where id in (gc.id) and activeflag is true)
			end
			)
		</if>
		<if test="showExpired">
			or expiredFlag is true
		</if>
		
		<if test="includeCompletedTestSession">
			or includeCompletedTestSession is true
		</if>
		
		<include refid="Extended_AR_Where_Clause" />
		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionId'">
					ts.id
				</when>
				<when test="sortByColumn == 'testSessionName'">
					ts.name
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					ap.programname
				</when>
				<when test="sortByColumn == 'organizationDisplayIdentifier'">
					stusession.displayidentifier
				</when>
				<when test="sortByColumn == 'contentAreaName'">
					ca.name
				</when>
				<when test="sortByColumn == 'gradeCourseName'">
					substring(gc.name, '^[0-9]+')::bigint
					<choose>
						<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
							DESC
						</when>
						<otherwise>
							ASC
						</otherwise>
					</choose>
					, substring(gc.name, '[^0-9]*$')
				</when>
				<when test="sortByColumn == 'gradeBandName'">
					gb.name
				</when>
				<when test="sortByColumn == 'rosterId'">
					ts.rosterid
				</when>
				<when test="sortByColumn == 'effectiveDate'">
					otw.effectivedate
				</when>
				<when test="sortByColumn == 'expiryDate'">
					ts.windowexpirydate
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		) as tsession
		<if test="limit != null">
			LIMIT #{limit}
		</if>
		<if test="offset != null">
			OFFSET #{offset}
		</if>
	</select>
	<select id="countAutoregisteredTestSessionForActiveRosters" resultType="INTEGER">

		WITH stusession AS
		(
		select distinct st.testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e ON st.studentid = e.studentid AND st.activeflag IS TRUE
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN enrollmentsrosters enrlroster ON enrlroster.enrollmentid = e.id
		JOIN roster r ON r.id = enrlroster.rosterid
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		where r.teacherid = #{teacherId} AND r.activeflag IS true
		and e.id = st.enrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		UNION

		select distinct st.transferedtestsessionid as testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e ON st.studentid = e.studentid AND st.activeflag IS TRUE
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN enrollmentsrosters enrlroster ON enrlroster.enrollmentid = e.id
		JOIN roster r ON r.id = enrlroster.rosterid
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		where r.teacherid = #{teacherId} AND r.activeflag IS true
		and e.id = st.transferedenrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>


		)
		SELECT count(1) from (
		SELECT
		<include refid="Extended_Auto_Registration_Test_Sessions_Column_List" />
		FROM testsession ts
		JOIN TestCollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentsTestCollections atc ON tc.id = atc.testcollectionid
		JOIN assessment a ON atc.assessmentid = a.id
		JOIN testingProgram tp ON a.testingprogramid = tp.id
		JOIN assessmentProgram ap ON tp.assessmentprogramid = ap.id
		INNER JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN stusession on stusession.testsessionid=ts.id
		LEFT JOIN gradecourse gc ON tc.gradecourseid = gc.id
		LEFT JOIN gradeband gb ON tc.gradebandid = gb.id
		WHERE ts.rosterid IS NULL
		AND ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) OR ts.windowexpirydate &gt;= now())
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (org.schoolid=#{userOrganizationId, jdbcType=BIGINT} or org.districtid=#{userOrganizationId, jdbcType=BIGINT} or org.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND ca.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			AND gc.id in (select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id=(#{gradeCourseId, jdbcType=BIGINT})))
		</if>
		<include refid="Extended_AR_Where_Clause" />
		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionId'">
					ts.id
				</when>
				<when test="sortByColumn == 'testSessionName'">
					ts.name
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					ap.programname
				</when>
				<when test="sortByColumn == 'organizationDisplayIdentifier'">
					stusession.displayidentifier
				</when>
				<when test="sortByColumn == 'contentAreaName'">
					ca.name
				</when>
				<when test="sortByColumn == 'gradeCourseName'">
					substring(gc.name, '^[0-9]+')::bigint
					<choose>
						<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
							DESC
						</when>
						<otherwise>
							ASC
						</otherwise>
					</choose>
					, substring(gc.name, '[^0-9]*$')
				</when>
				<when test="sortByColumn == 'gradeBandName'">
					gb.name
				</when>
				<when test="sortByColumn == 'rosterId'">
					ts.rosterid
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		<if test="limit != null">
			LIMIT #{limit}
		</if>
		<if test="offset != null">
			OFFSET #{offset}
		</if>
		) testsessions
	</select>
	<select id="selectForStudentGradeSubjectAndPartialName" resultMap="ExtendedResultMap">
		select ts.id, ts.rosterid, ts.testid, ts.name, ts.status as statusId, ts.testcollectionid, c.categoryname as statusName, c.categorycode as statusCode
		from testsession ts
		join roster r on ts.rosterid=r.id
		join enrollmentsrosters er on r.id = er.rosterid
		join enrollment e on e.id = er.enrollmentid
		join (select id, gradecourseid,contentareaid from testcollection
		union select id, gbgc.gradecourseid,contentareaid from testcollection tc
		inner join gradebandgradecourse gbgc on tc.gradebandid = gbgc.gradebandid) as tc
		on ts.testcollectionid=tc.id
		join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		join contentarea ca on tc.contentareaid=ca.id
		join gradecourse gc on tc.gradecourseid = gc.id
		join category c on ts.status = c.id
		where r.activeflag=true and
		ts.activeflag = true and
		e.activeflag = true and
		e.studentid=#{studentId} and
		gc.abbreviatedname=#{gradeCourseCode} and
		ca.abbreviatedname=#{contentAreaCode} and
		ts.name
		like #{name} and
		(otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate) and
		ts.status != (select id from category where categorycode = 'complete' and categorytypeid = (select id from categorytype where typecode='STUDENT_TEST_STATUS')) limit #{limit};
	</select>

	<select id="countEnrolledStudentsOfDLMTeacher" resultType="INTEGER">
		SELECT count(st.id)
		FROM Student st
		JOIN enrollment enrl ON enrl.Studentid = st.id
		JOIN enrollmentsRosters enrlRoster ON enrl.id=enrlRoster.enrollmentid
		JOIN Roster r ON (r.id = enrlRoster.rosterId AND r.teacherId=#{educatorId})
		JOIN studentassessmentprogram sap on sap.studentid = st.id
		WHERE enrl.activeflag is true and enrlRoster.activeflag is true
		and r.activeflag is true and sap.activeflag is true
		and enrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER}
		and sap.assessmentprogramid = (select id from assessmentprogram where abbreviatedname = 'DLM' and activeflag is true)
		and sap.activeflag = true
	</select>


	<select id="selectResourceByTestSessionId" parameterType="map" resultType="hashmap">
		select testsessionid, array_to_string(array_agg(printtestfiles), ',') as printtestfiles
		from (select distinct tss.id as testSessionId,
		sva.filelocation ||'----'|| sva.filename as printtestfiles
		from testsession tss
		JOIN studentstests st on tss.testcollectionid = st.testcollectionid and tss.id=st.testsessionid
		JOIN testsection ts on ts.testid = st.testid
		JOIN testsectionresource tsr on tsr.testsectionid = ts.id
		JOIN stimulusvariantattachment sva on sva.stimulusvariantid = tsr.stimulusvariantid
		where filetype='pdf' and st.enddatetime is null and tss.id = ANY(ARRAY
		<foreach collection="testSessionIds" item="testSessionId" open="[" close="]" separator=",">
			#{testSessionId}
		</foreach>
		)
		) as a
		where printtestfiles is not null
		GROUP BY testsessionid
		ORDER BY testsessionid asc
	</select>

	<resultMap type="edu.ku.cete.web.StudentTestSessionInfoDTO" id="studentsTestSessionMap">
		<result column="state" property="state" />
		<result column="district" property="district" />
		<result column="schoolName" property="schoolName" />
		<result column="schoolId" property="schoolIdentifier" />
		<result column="grade" property="grdae" />
		<result column="groupingindicator1" property="grouping1" />
		<result column="groupingindicator2" property="grouping2" />
		<result column="subject" property="subject" />
		<result column="testsessionname" property="testSessionName" />
		<result column="testcollectionname" property="testCollectionName" />
		<result column="teststatus" property="testSatus" />
		<result column="studentstestsid" property="studentTestId" />
		<result column="specialcircumstance" property="specialCircumstances" />
		<result column="categoryname" property="specialCircumstanceStatus" />
		<result column="lastReactivateddate" property="lastReactivatedDate" />
		<result column="stagename" property="stage" />
		<result column="studentFirstName" property="studentFirstName" />
		<result column="studentLastName" property="studentLastName" />
		<result column="studentMiddleName" property="studentMiddleName" />
		<result column="statestudentidentifier" property="stateStudentIdentifier" />
		<result column="localstudentidentifier" property="localStudentIdentifier" />
		<result column="studentLoginUserName" property="studentLoginUserName" />
		<result column="studentPassword" property="studentLoginPassword" />
		<result column="rostername" property="rosterName" />
		<result column="educatorFirstName" property="educatorFirstName" />
		<result column="educatorlastname" property="educatorLastName" />
		<result column="educatotidentifier" property="educatorIdentifier" />
		<result column="attendanceschoolid" property="attendanceSchoolId" />
	</resultMap>

	<select id="getStudentsTestsInfo" resultMap="studentsTestSessionMap">
		/*NO LOAD BALANCE*/
		WITH students_tests_details
		as ( select st.studentid,
		st.id,
		st.testsessionid,
		e.localstudentidentifier,
		e.id enrollmentid,
		c.categorycode
		from studentstests st
		inner join category c on c.id=st.status
		inner join enrollment e on e.id=st.enrollmentid
		where e.attendanceschoolid = #{organionId, jdbcType=BIGINT}
		and e.activeflag is true and st.activeflag is true and e.currentschoolyear= #{currentSchoolYear, jdbcType=BIGINT}
		AND c.categorycode IN ( 'unused', 'inprogress', 'complete','PROCESS_LCS_RESPONSES')
		union
		select st.studentid,
		st.id,
		st.testsessionid,
		e.localstudentidentifier,
		e.id enrollmentid,
		c.categorycode
		from studentstests st
		inner join category c on c.id=st.status
		inner join enrollment e on e.id=st.transferedenrollmentid
		where e.attendanceschoolid = #{organionId, jdbcType=BIGINT} and st.transferedtestsessionid is not null
		and e.activeflag is true and st.activeflag is true and e.currentschoolyear= #{currentSchoolYear, jdbcType=BIGINT}
		AND c.categorycode IN ('complete')
		)
		SELECT
		distinct st.id AS studentstestsid, gc.abbreviatedname as grade,
		ts.attendanceschoolid,
		stu.legalLastname as studentLastName,
		stu.legalFirstName as studentFirstName,
		stu.legalMiddleName as studentMiddleName,
		stu.statestudentidentifier as statestudentidentifier,
		st.localstudentidentifier as localstudentidentifier,
		stu.username as studentLoginUserName,
		stu.password as studentPassword,
		ettsa.groupingindicator1,ettsa.groupingindicator2,
		conArea.name as subject,
		ts.name as testsessionname,
		tc.name as testcollectionname,
		(select acteddate::TIMESTAMP WITH TIME ZONE from studentstestshistory where studentstestsid =
		st.id and action = 'REACTIVATION' order by acteddate desc limit 1) as lastReactivateddate,
		st.categorycode as teststatus,
		(select specialcircumstancetype from specialcircumstance where id in (select
		specialcircumstanceid from studentspecialcircumstance where
		studenttestid = st.id and activeflag is true) limit 1) as specialcircumstance,
		(select categoryname from category c,studentspecialcircumstance
		ssc
		where c.id = ssc.status and studenttestid = st.id and ssc.activeflag is true LIMIT 1) as specialCircumstanceStatus,
		<choose>
			<when test="assessmentProgramCode == 'AMP'">
				roster_teacherdetails.courseSectionName as rosterName,
				roster_teacherdetails.firstname as educatorFirstName,
				roster_teacherdetails.surname as educatorlastname,
				roster_teacherdetails.uniquecommonidentifier as educatotidentifier,
			</when>
			<otherwise>
				'' as rosterName, '' as educatorFirstName, '' as educatorlastname, '' as educatotidentifier,
			</otherwise>
		</choose>
		stg.name as stagename
		FROM testsession ts
		JOIN testcollection tc ON ts.testcollectionid = tc.id
		JOIN students_tests_details st ON st.testsessionid =ts.id
		JOIN student stu ON stu.id = st.studentid
		JOIN enrollmenttesttypesubjectarea ettsa ON ettsa.enrollmentid = st.enrollmentid and ts.subjectareaid=ettsa.subjectareaid
		and (ts.testtypeid= ettsa.testtypeid or ettsa.testtypeid=(select id from testtype where activeflag is true and testtypecode='C'))
		and ettsa.activeflag is true
		JOIN gradecourse gc ON ts.gradecourseid = gc.id
		JOIN contentarea conArea ON conArea.id = tc.contentareaid
		JOIN organizationtreedetail otd ON otd.schoolid=ts.attendanceschoolid
		<if test="assessmentProgramCode == 'AMP'">
			LEFT JOIN (SELECT r.id, r.coursesectionname, au.firstname, au.surname, au.uniquecommonidentifier FROM roster r
			JOIN aartuser au ON au.id = r.teacherid WHERE r.activeflag IS true) as roster_teacherdetails ON roster_teacherdetails.id =ts.rosterid
		</if>
		LEFT JOIN stage stg on stg.id = tc.stageid
		inner join studentassessmentprogram sap on sap.studentid = stu.id and sap.activeflag = true
		WHERE ts.source='BATCHAUTO' and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		<if test="assessmentPrograms !=null">
			and sap.assessmentprogramid in
			<foreach collection="assessmentPrograms" item="assessmentprogramid" open="(" close=")" separator=",">
				#{assessmentprogramid}
			</foreach>
		</if>
		ORDER BY subject, ts.attendanceschoolid, educatorlastname, grade, studentLastName offset #{offset} limit #{limit}
	</select>

	<resultMap type="edu.ku.cete.web.StudentTestSectionsDTO" id="studentTestSectionMap">
		<result column="studentstestid" property="stuTestId" />
		<result column="ticketno" property="ticketNumber" />
		<result column="startdate" property="stuTestSectionStartDate" />
		<result column="enddate" property="stuTestSectionEndDate" />
		<result column="studenttestsectionstatus" property="stuTestSectionStatus" />
		<result column="numofiteams" property="numofItems" />
		<result column="hardbreak" property="hardBreak" />
		<result column="sectionorder" property="sectionOrder" />
		<result column="numofitemsanswered" property="numOfItemsAnswered" />
	</resultMap>

	<select id="getStudentTestSectionDetails" resultMap="studentTestSectionMap">
		/*NO LOAD BALANCE*/
		SELECT stsc.ticketno, stsc.startdatetime::TIMESTAMP WITH TIME ZONE as startdate, stsc.enddatetime::TIMESTAMP WITH TIME ZONE as enddate,
		(select categoryname from category where id = stsc.statusid) as studenttestsectionstatus,
		tsection.numberoftestitems as numofiteams,
		tsection.hardbreak, tsection.sectionorder,
		(select count(*) from studentsresponses where studentstestsectionsid = stsc.id) as numofitemsanswered
		FROM studentstestsections stsc
		INNER JOIN testsection tsection
		ON tsection.id = stsc.testsectionid
		WHERE stsc.studentstestid = #{studenttestid, jdbcType=BIGINT}
		AND stsc.activeflag is true
		ORDER BY tsection.sectionorder
	</select>

	<resultMap type="edu.ku.cete.web.StudentTestDTO" id="allStudentsTestSesctionsDetailsMap">
		<result column="studentstestid" property="stuTestId" />
		<association property="studentTestSectionDtos" javaType="edu.ku.cete.web.StudentTestSectionsDTO" column="studentstestid" resultMap="studentTestSectionMap" />
	</resultMap>

	<select id="getAllStudentsTestSectionDetails" parameterType="map" resultMap="allStudentsTestSesctionsDetailsMap">
		/*NO LOAD BALANCE*/
		SELECT stsc.studentstestid, stsc.ticketno, stsc.startdatetime AT TIME ZONE 'UTC' as startdate, stsc.enddatetime AT TIME ZONE 'UTC' as enddate,
		(select categoryname from category where id = stsc.statusid) as studenttestsectionstatus,
		tsection.numberoftestitems as numofiteams,
		tsection.hardbreak, tsection.sectionorder,
		(select count(CASE WHEN ((foilid is not null or response is not null) and activeflag is true) THEN 1 ELSE null END) from studentsresponses where studentstestsectionsid = stsc.id) as numofitemsanswered
		FROM studentstestsections stsc
		INNER JOIN testsection tsection
		ON tsection.id = stsc.testsectionid
		WHERE stsc.studentstestid = ANY(ARRAY
		<foreach collection="studentTestIds" item="studentTestId" open="[" close="]" separator=",">
			#{studentTestId}
		</foreach>
		)
		AND stsc.activeflag is true
		ORDER BY tsection.sectionorder
	</select>

	<select id="selectTestSessionByStudentIdAndSource" resultType="java.lang.Long">
		SELECT distinct ts.id
		FROM testsession ts
		JOIN studentstests st ON st.testsessionid = ts.id
		WHERE ts.source = #{source}
		AND st.studentid = #{studentId} and st.activeflag IS true
		and st.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid where categorycode in ('unused', 'inprogress', 'pending')
		and ct.typecode = 'STUDENT_TEST_STATUS')
	</select>

	<select id="selectTestSessionByStudentIdAndSourceWithActiveOTW" resultType="java.lang.Long">
		SELECT distinct ts.id
		FROM testsession ts
		JOIN studentstests st ON st.testsessionid = ts.id
		join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		WHERE ts.source = #{source}
		AND st.studentid = #{studentId} and st.activeflag IS true
		and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
		and st.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid where categorycode in ('unused', 'inprogress', 'pending', 'inprogresstimedout')
		and ct.typecode = 'STUDENT_TEST_STATUS')
		<if test="assessmentProgramId != null">
			and otw.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
		</if>
	</select>

	<select id="selectAllTestSessionsByStudentIdSource" resultMap="BaseResultMap">
		SELECT distinct ts.*
		FROM testsession ts
		JOIN studentstests st ON st.testsessionid = ts.id
		join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		join assessmentprogram ap on ap.id = otw.assessmentprogramid
		WHERE ts.source = #{source}
		AND st.studentid = #{studentId} and st.activeflag IS true
		and (otw.effectivedate &lt;= now() and now() &lt;= otw.expirydate)
		and st.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid where categorycode in ('unused', 'inprogress', 'pending', 'inprogresstimedout')
		and ct.typecode = 'STUDENT_TEST_STATUS')
		<if test="assessmentProgramCode != null">
			and ap.abbreviatedname = #{assessmentProgramCode,jdbcType=VARCHAR}
		</if>
		and ap.abbreviatedname &lt;&gt; 'KELPA2'
	</select>

	<resultMap type="edu.ku.cete.web.KSDEStudentTestDetailsDTO" id="ksdeStudentTestDetailsMap">
		<result column="studentid" property="studentid" />
		<result column="statestudentidentifier" property="stateStudentIdentifier" />
		<result column="enrollmentid" property="enrollmentId" />
		<result column="testgrade" property="testGrade" />
		<result column="gradecourseid" property="gradeId" />
		<result column="aypschoolidentifier" property="aypSchoolIdentifier" />
		<result column="subject" property="abbrSubject" />
		<result column="conAreaId" property="contentAreaId" />
		<result column="studentgrade" property="studentGrade" />
		<result column="testtypeCode" property="testTypeCode" />
		<result column="attendanceschoolid" property="attendanceSchoolId" />
		<result column="scalescore" property="scaleScore" />
		<result column="elacombinedprfrmlevel" property="elaCombinedPrfrmLevel" />
		<result column="mdptscore" property="mdptScore" />
		<result column="mdptscorableflag" property="mdptScorableFlag" />
		<result column="levelid" property="performanceLevel" />
		<collection property="studentTestDetails" ofType="edu.ku.cete.web.KSDEStudentTestDTO">
			<result column="studentstestsid" property="studentstestsid" />
			<result column="testid" property="testid" />
			<result column="testbegindate" property="testBeginDate" />
			<result column="testenddatetime" property="testEndTime" />
			<result column="responsecount" property="responseCount" />
			<result column="stagecode" property="stageCode" />
			<result column="studentstestsstatus" property="studentTeststatus" />
			<result column="numofexludeditems" property="numofExludedItems" />
			<result column="sectionquestionscount" property="sectionQuestionsCount" />
			<result column="ksdesccode" property="ksdeScCode" />
			<collection property="ksdeStudentTestSectionDtos" ofType="edu.ku.cete.web.KSDEStudentTestSectionsDTO">
				<result column="sectionquestionscount" property="sectionQuestionsCount" />
				<result column="studentstestsectionstatus" property="sectionStatus" />
				<result column="numofexludeditems" property="numofExludedItems" />
			</collection>
		</collection>
	</resultMap>

	<select id="getKSDEStudentTestDetails" resultMap="ksdeStudentTestDetailsMap">
		/*NO LOAD BALANCE*/
		WITH testsessiondetails AS (SELECT ts.id as testsessionid, ts.testtypeid, ts.subjectareaid, stage.code, ttype.testtypecode
		FROM testsession ts
		JOIN testtype ttype ON ttype.id = ts.testtypeid
		JOIN subjectarea subArea ON subArea.id = ts.subjectareaid
		JOIN stage stage ON stage.id = ts.stageid
		WHERE ts.attendanceschoolid = #{organionId, jdbcType=BIGINT}
		AND ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		AND ts.source='BATCHAUTO'
		AND ttype.testtypecode = '2'
		AND subArea.subjectareacode =ANY(ARRAY
		<foreach collection="subjectAreaCodes" item="subjectAreaCode" open="[" close="]" separator=",">
			#{subjectAreaCode}
		</foreach>
		)
		AND stage.code != 'Stg4')
		SELECT distinct stu.statestudentidentifier, stu.id as studentid, en.id as enrollmentid, en.aypschoolidentifier, en.attendanceschoolid,
		CASE WHEN tc.gradecourseid IS NOT NULL THEN tgc.abbreviatedname ELSE tgb.abbreviatedname END AS testgrade,
		gc.abbreviatedname as studentgrade, gc.id as gradecourseid,
		st.id as studentstestsid, st.startdatetime as testbegindate, st.enddatetime as testenddatetime,
		( SELECT count(str.taskvariantid)
		FROM studentsresponses str
		JOIN taskvariant tv ON tv.id = str.taskvariantid
		WHERE studentstestsid = st.id
		AND str.score is not null
		AND str.activeflag is true
		AND tv.externalid not in(select taskvariantid from excludeditems
		where assessmentprogramid =( SELECT id FROM assessmentprogram WHERE abbreviatedname ='KAP')
		and subjectid = conarea.id
		and schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		and gradeid = ANY(SELECT id FROM gradecourse WHERE abbreviatedname= tgc.abbreviatedname))) AS responsecount,
		test.externalid as testid, tsd.code as
		stagecode,
		ststatus.categorycode as studentstestsstatus, tsd.testtypecode as testtypeCode,
		conArea.id as conAreaId, conArea.abbreviatedname as subject,
		(SELECT Count(tv.id)
		FROM taskvariant tv
		JOIN testsectionstaskvariants tstv ON tstv.taskvariantid = tv.id
		JOIN testsection tsec ON tstv.testsectionid = tsec.id
		JOIN tasktype tt ON tv.tasktypeid = tt.id
		WHERE tsec.testid = st.testid) AS sectionquestionscount,
		stsecstatus.categorycode as studentstestsectionstatus, sc.ksdecode as ksdesccode,
		(SELECT count(1)
		FROM excludeditems
		WHERE taskvariantid IN (SELECT tv.externalid from taskvariant tv
		JOIN testsectionstaskvariants tstv on tstv.taskvariantid = tv.id
		JOIN testsection tsec on tstv.testsectionid=tsec.id and tsec.testid = st.testid )
		AND subjectid = conarea.id
		AND schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		AND gradeid = ANY (SELECT id FROM gradecourse WHERE abbreviatedname= tgc.abbreviatedname)
		AND assessmentprogramid = (SELECT id FROM assessmentprogram WHERE abbreviatedname ='KAP')) AS
		numofexludeditems,
		str.scalescore as scalescore, str.combinedlevel as elacombinedprfrmlevel, str.mdptscore as mdptscore, str.mdptscorableflag as mdptscorableflag, ld.level as levelid
		FROM student stu
		JOIN enrollment en ON stu.id = en.studentid
		JOIN studentstests st ON st.enrollmentid = en.id
		JOIN testsessiondetails tsd ON tsd.testsessionid = st.testsessionid
		JOIN testcollection tc ON tc.id = st.testcollectionid
		JOIN contentarea conArea ON conArea.id = tc.contentareaid
		JOIN enrollmenttesttypesubjectarea ettsa ON ettsa.enrollmentid = en.id AND tsd.subjectareaid=ettsa.subjectareaid
		JOIN test test ON test.id = st.testid
		JOIN gradecourse gc ON gc.id = en.currentgradelevel
		JOIN category ststatus ON ststatus.id = st.status
		JOIN studentstestsections stsec ON stsec.studentstestid =st.id AND stsec.activeflag is true
		JOIN category stsecstatus ON stsecstatus.id = stsec.statusid
		JOIN testsection testsect ON testsect.id = stsec.testsectionid
		LEFT JOIN gradecourse tgc ON tgc.id = tc.gradecourseid
		LEFT JOIN
		gradeband tgb ON tgb.id = tc.gradebandid
		LEFT JOIN studentspecialcircumstance ssc ON ssc.studenttestid = st.id
		AND ssc.activeflag IS true
		AND ssc.status IN (SELECT id FROM category WHERE categorycode IN ('APPROVED', 'SAVED') AND categorytypeid = (SELECT id FROM categorytype WHERE typecode = 'SPECIAL CIRCUMSTANCE STATUS'))
		LEFT JOIN specialcircumstance sc ON sc.id = ssc.specialcircumstanceid AND sc.activeflag IS true
		LEFT JOIN studentreport str ON str.enrollmentid = en.id AND str.studentid = en.studentid
		AND str.contentareaid = conArea.id AND str.gradeid = ANY(SELECT id FROM gradecourse WHERE abbreviatedname = tgc.abbreviatedname)
		AND str.assessmentprogramid = (SELECT id FROM assessmentprogram WHERE abbreviatedname = 'KAP')
		LEFT JOIN leveldescription ld ON ld.id = str.levelid
		WHERE st.activeflag is true
		AND stu.activeflag is true
		AND en.currentschoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		ORDER BY stu.id, en.id, en.attendanceschoolid, gradecourseid, conAreaId
	</select>

	<select id="getKSDEStudentTestDetailsForHGSS" resultMap="ksdeStudentTestDetailsMap">
		/*NO LOAD BALANCE*/
		WITH testsessiondetails AS (SELECT ts.id as testsessionid, ts.testtypeid, ts.subjectareaid, stage.code, ttype.testtypecode
		FROM testsession ts
		JOIN testtype ttype ON ttype.id = ts.testtypeid
		JOIN subjectarea subArea ON subArea.id = ts.subjectareaid
		JOIN stage stage ON stage.id = ts.stageid
		WHERE ts.attendanceschoolid = #{organionId, jdbcType=BIGINT}
		AND ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		AND ts.source='BATCHAUTO'
		AND ttype.testtypecode = '2'
		AND subArea.subjectareacode =ANY(ARRAY
		<foreach collection="subjectAreaCodes" item="subjectAreaCode" open="[" close="]" separator=",">
			#{subjectAreaCode}
		</foreach>
		)
		AND stage.code != 'Stg4'
		UNION
		SELECT ts.id as testsessionid, ts.testtypeid, ts.subjectareaid, stage.code, ttype.testtypecode
		FROM testsession ts
		JOIN testtype ttype ON ttype.id = ts.testtypeid
		JOIN subjectarea subArea ON subArea.id = ts.subjectareaid
		JOIN stage stage ON stage.id = ts.stageid
		WHERE ts.attendanceschoolid = #{organionId, jdbcType=BIGINT}
		AND ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		AND ts.source='BATCHAUTO'
		AND ttype.testtypecode = '2'
		AND subArea.subjectareacode = 'SELAA'
		AND stage.code = 'Prfrm')
		SELECT distinct stu.statestudentidentifier, stu.id as studentid, en.id as enrollmentid, en.aypschoolidentifier, en.attendanceschoolid,
		tgc.abbreviatedname AS testgrade,
		gc.abbreviatedname as studentgrade, gc.id as gradecourseid,
		st.id as studentstestsid, st.startdatetime as testbegindate, st.enddatetime as testenddatetime,
		(SELECT count(1) FROM studentsresponses WHERE studentstestsid =st.id and activeflag is true) as responsecount,
		test.externalid as testid, tsd.code as
		stagecode,
		ststatus.categorycode as studentstestsstatus, tsd.testtypecode as testtypeCode,
		'SS' as subject,
		testsect.numberoftestitems as sectionquestionscount,
		stsecstatus.categorycode as studentstestsectionstatus, sc.ksdecode as ksdesccode,
		(SELECT count(1) FROM excludeditems WHERE taskvariantid
		IN (SELECT taskvariantid FROM testsectionstaskvariants WHERE testsectionid = testsect.id)
		AND subjectid = conArea.id and schoolyear =#{currentSchoolYear, jdbcType=BIGINT}
		AND gradeid = ANY(SELECT id FROM gradecourse WHERE abbreviatedname= tgc.abbreviatedname)
		AND assessmentprogramid = (SELECT id FROM assessmentprogram WHERE abbreviatedname ='KAP')) AS numofexludeditems,
		str.scalescore as scalescore, str.combinedlevel as elacombinedprfrmlevel, str.mdptscore as mdptscore, str.mdptscorableflag as mdptscorableflag, ld.level as levelid
		FROM student stu
		JOIN enrollment en ON stu.id = en.studentid
		JOIN studentstests st ON st.enrollmentid = en.id
		JOIN testsessiondetails tsd ON tsd.testsessionid =
		st.testsessionid
		JOIN testcollection tc ON tc.id = st.testcollectionid
		JOIN contentarea conArea ON conArea.id = tc.contentareaid
		JOIN enrollmenttesttypesubjectarea ettsa ON ettsa.enrollmentid = en.id AND tsd.subjectareaid=ettsa.subjectareaid
		JOIN test test ON test.id = st.testid
		JOIN gradecourse gc ON gc.id = en.currentgradelevel
		JOIN category ststatus ON ststatus.id = st.status
		JOIN studentstestsections stsec ON stsec.studentstestid =st.id AND stsec.activeflag is true
		JOIN category stsecstatus ON stsecstatus.id = stsec.statusid
		JOIN testsection testsect ON testsect.id = stsec.testsectionid
		JOIN gradecourse tgc ON tgc.id = tc.gradecourseid
		AND tgc.id in(select id from gradecourse where abbreviatedname in('6','8','11'))
		LEFT JOIN studentspecialcircumstance ssc ON ssc.studenttestid = st.id
		AND ssc.activeflag IS true
		AND ssc.status IN (SELECT id FROM category WHERE categorycode IN ('APPROVED', 'SAVED') AND categorytypeid = (SELECT id FROM categorytype WHERE typecode = 'SPECIAL CIRCUMSTANCE STATUS'))
		LEFT JOIN specialcircumstance sc ON sc.id = ssc.specialcircumstanceid AND sc.activeflag IS true
		LEFT JOIN studentreport str ON str.schoolyear= #{currentSchoolYear, jdbcType=BIGINT} AND str.studentid = en.studentid
		AND str.contentareaid = (select id from contentarea where abbreviatedname='SS' and activeflag is true) AND str.gradeid = ANY(SELECT id FROM gradecourse WHERE abbreviatedname = tgc.abbreviatedname)
		AND str.assessmentprogramid = (SELECT id FROM assessmentprogram WHERE abbreviatedname = 'KAP')
		LEFT JOIN leveldescription ld ON ld.id = str.levelid
		WHERE st.activeflag is true
		AND stu.activeflag is true
		AND en.currentschoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		ORDER BY stu.id, en.id, en.attendanceschoolid, gradecourseid
	</select>

	<resultMap type="edu.ku.cete.web.TestFormMediaResourceDTO" id="testFormMediaResourceDTO">
		<result column="formName" property="formName" />
		<result column="createDate" property="createDate" />
		<result column="contentBuilderFormId" property="contentBuilderFormId" />
		<result column="educatorPortalFormId" property="educatorPortalFormId" />
		<result column="testName" property="testName" />
		<result column="testCollection" property="testCollection" />
		<result column="resourceFileName" property="resourceFileName" />
		<result column="contentBuilderMediaName" property="contentBuilderMediaName" />
		<result column="contentBuilderMediaId" property="contentBuilderMediaId" />
		<result column="sectionNumber" property="sectionNumber" />
		<result column="lastModifiedDate" property="lastModifiedDate" />
		<result column="testletId" property="testletId" />
		<result column="qcCompleteStatus" property="qcCompleteStatus" />
	</resultMap>
	<select id="getTestFormMediaResource" resultMap="testFormMediaResourceDTO">
		select distinct ts.testname formname,
		ts.createdate as createdate,
		ts.externalid contentbuilderformid,
		ts.id educatorportalformid,
		ts.testinternalname as testname,
		tc.name testcollection,
		string_agg(distinct stvar.resourcename,',') resourcefilename,
		string_agg(stvar.stimulustitle,',') medianame,
		string_agg(cast(stvar.externalid as text),',') mediaid,
		string_agg(cast(tscnt.sectionnumber as text),',') sectionnumber,
		ts.modifieddate lastModifiedDate,
		ts.qccomplete qccompletestatus,
		array_to_string(ARRAY(select DISTINCT tstv.testletid from testlet tl
		INNER JOIN testsectionstaskvariants tstv ON tl.id = tstv.testletid
		INNER JOIN testsection tsec ON tstv.testsectionid = tsec.id
		where tsec.testid=ts.id),', ') as testletId
		from studentassessmentprogram sap
		INNER JOIN studentstests st ON sap.studentid = st.studentid
		INNER JOIN test ts ON st.testid = ts.id
		inner join testcollectionstests tct on ts.id = tct.testid
		inner join testcollection tc on tct.testcollectionid = tc.id
		left join testsection tsec on ts.id =
		tsec.testid
		left join testsectioncontainer tscnt on tscnt.testid = ts.id
		left join testsectionstaskvariants tstv ON tstv.testsectionid = tsec.id
		left join testsectionresource tsecr on tsec.id = tsecr.testsectionid
		left join stimulusvariant stvar on stvar.id = tsecr.stimulusvariantid
		<if test="assessmentPrograms !=null">
			where sap.assessmentprogramid in
			<foreach collection="assessmentPrograms" item="assessmentprogramid" open="(" close=")" separator=",">
				#{assessmentprogramid}
			</foreach>
		</if>
		and sap.activeflag = true
		<choose>
			<when test="qcStatus == 'true'">
				AND ts.qccomplete = true
			</when>
			<when test="qcStatus == 'false'">
				AND ts.qccomplete = false
			</when>
		</choose>
		<choose>
			<when test="media == 'true'">
				AND stvar.resourcename is null
			</when>
		</choose>
		AND ts.createdate BETWEEN to_date(#{fromDate},'MM/DD/YYYY') AND to_date(#{toDate},'MM/DD/YYYY')
		group by ts.externalid, ts.id,ts.testname, tc.name,ts.modifieddate,ts.qccomplete
	</select>

	<sql id="selectTestSessionAndStudentCountForScorer">
		select
		ts.id,ts.name as testsessionName,ts.createddate as createdDate,count(distinct stst.id) as studentCount,
		otd.districtname districtName,otd.schoolname schoolName,tp.programname as testingProgramName

		from testsession ts
		inner join studentstests stst on ts.id = stst.testsessionid and stst.activeflag is true
		inner join organizationtreedetail otd on otd.schoolid = ts.attendanceschoolid
		inner join testcollection AS tc ON tc.id = ts.testcollectionid
		inner join stage s ON ts.stageid = s.id and s.activeflag is true
		inner join GradeCourse tcGc on ts.gradeCourseId = tcGc.id and tcGc.activeflag is true
		inner join assessmentsTestCollections asstTc ON tc.id = asstTc.testcollectionid and ts.testcollectionid = asstTc.testcollectionid and asstTc.activeflag is true
		INNER JOIN assessment asst ON asst.id = asstTc.assessmentid and asst.activeflag is true
		INNER JOIN testingProgram tp ON asst.testingProgramId = tp.id and tp.activeflag is true
		inner join operationaltestwindow otw on ts.operationaltestwindowid =
		otw.id and otw.activeflag is true
		where otw.assessmentprogramid = #{assessmentProgramId}
		and tc.contentareaid = #{contentAreaId}
		and ts.activeflag is true
		and s.code not in ('Rdng','Lstng')
		and ts.gradecourseid = #{gradeId}
		and (otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP &lt; otw.scoringwindowenddate)
		<if test="schoolId != null">
			AND otd.schoolid = #{schoolId}
		</if>
		<if test="districtId != null">
			AND otd.districtid = #{districtId}
		</if>
		<if test="stateId != null">
			AND otd.stateid = #{stateId}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId}
		</if>

		<if test="testsessionRecordCriteriaMap.testsessionName != null">
			AND (ts.name ) ilike #{testsessionRecordCriteriaMap.testsessionName}
		</if>
		<if test="testsessionRecordCriteriaMap.testingProgramName != null">
			AND (tp.programname ) ilike #{testsessionRecordCriteriaMap.testingProgramName}
		</if>
		<if test="testsessionRecordCriteriaMap.districtName != null">
			AND (otd.districtname) ilike #{testsessionRecordCriteriaMap.districtName}
		</if>
		<if test="testsessionRecordCriteriaMap.schoolName != null">
			AND (otd.schoolname) ilike #{testsessionRecordCriteriaMap.schoolName}
		</if>

		group by ts.id, ts.name,ts.createddate,
		otd.districtname, otd.schoolname, tp.programname
		<if test="sidx != null">
			ORDER BY
			<choose>
				<when test="sidx == 'testsessionName'">testsessionName</when>
				<when test="sidx == 'createdDate'">createdDate</when>
				<when test="sidx == 'studentCount'">studentCount</when>
				<when test="sidx == 'districtName'">districtName</when>
				<when test="sidx == 'schoolName'">schoolName</when>
				<when test="sidx == 'testingProgramName'">testingProgramName</when>
				<otherwise>id</otherwise>
			</choose>
			<if test="sord!=null and sord=='desc'">
				desc
			</if>
			<if test="sord=='asc' or sord==null">
				asc
			</if>
		</if>
	</sql>

	<select id="getTestSessionAndStudentCountForScorer" resultType="edu.ku.cete.web.AssignScorerTestSessionDTO">
		<include refid="selectTestSessionAndStudentCountForScorer" />
		limit #{limit}
		offset #{offset}
	</select>

	<select id="getCountTestSessionAndStudentCountForScorer" resultType="java.lang.Integer">
		select count(*) from (
		<include refid="selectTestSessionAndStudentCountForScorer" />
		) baseq
	</select>

	<select id="selectTestSectionStudents" resultType="edu.ku.cete.web.ScorerTestSessionStudentDTO">
		select st.id as studentTestId,
		st.enrollmentid as enrollmentId,
		st.testid as testId,
		s.id as studentId,
		s.legalfirstname as firstName,
		s.legallastname as lastName,
		s.statestudentidentifier as stateStudentIdentifier,
		otd.districtname as districtName,
		otd.schoolname as schoolName,
		gc.abbreviatedname as abbreviatedName,
		array_to_string(array(select r.coursesectionname from enrollmentsrosters enr
		inner join roster r ON enr.rosterid = r.id and r.activeflag is true and r.currentschoolyear = #{schoolyear} and r.statesubjectareaid=#{subjectId}
		where enr.enrollmentid = e.id and enr.activeflag is true), ', ') as roster
		from studentstests st
		inner join student s ON s.id = st.studentid and s.activeflag is true
		inner join enrollment e ON e.id = st.enrollmentid and e.currentschoolyear = #{schoolyear}
		inner join organizationtreedetail otd on otd.schoolid = e.attendanceschoolid
		inner join gradecourse gc on gc.id = #{gradeId}
		where st.testsessionid = #{testSessionId}
		and st.activeflag is
		true order by lastName, firstName asc
	</select>

	<select id="selectTestSessionStageByPrimaryKey" resultType="edu.ku.cete.domain.content.Stage">
		select * from Stage where id = #{testSessionStageId}
	</select>

	<select id="findPredecessorTestInfo" resultMap="PreviousTestResultMap">

		SELECT distinct ca.categorycode as status, st.studentid as studentid, st.id as id, st.testcollectionid as testcollectionid, st.testsessionid as testsessionid,
		st.previousstudentstestid as previousstudentstestid, st.interimtheta as interimtheta , st.testid as testid, ts.testpanelid as panelid
		FROM testsession ts JOIN testcollection tc ON ts.testcollectionid = tc.id and ts.activeflag = true
		JOIN assessmentstestcollections atc ON tc.id=atc.testcollectionid
		JOIN studentstests st on st.testsessionid = ts.id and st.activeflag = true
		JOIN category ca on ca.id = st.status
		WHERE ts.activeflag is true and tc.contentareaid = #{contentAreaId}
		and ts.gradecourseid in (select id from gradecourse where abbreviatedname = (select abbreviatedname from gradecourse where id = #{gradeCourseId}))
		and ts.testtypeid = #{testTypeId} and atc.assessmentid=#{assessmentId}
		<!--and ts.attendanceschoolid = #{attendanceSchoolId} -->
		and ts.name like #{currentSchoolYear} || '_%'
		and ts.schoolyear = #{currentSchoolYear}
		and ts.stageid = #{stageId}
		and ts.source='BATCHAUTO'
		and ts.operationaltestwindowid= #{operationalTestWindowId}
		and st.studentid = #{studentId} limit 1
	</select>

	<select id="selectStageByContentAreaTestTypeAssessment" resultType="edu.ku.cete.domain.content.Stage">
		select stage.*
		from contentareatesttypesubjectarea cattsa
		inner join testtypesubjectarea ttsa on cattsa.testtypesubjectareaid = ttsa.id
		inner join testtype tt on ttsa.testtypeid = tt.id
		inner join stage on cattsa.stageid = stage.id
		where cattsa.activeflag = true and ttsa.activeflag = true and tt.activeflag = true and stage.activeflag = true
		and cattsa.contentareaid = #{contentAreaId}
		and tt.id = #{testTypeId}
		and ttsa.assessmentid = #{assessmentId}
	</select>

	<select id="getTestSessionByTestId" parameterType="java.lang.Long" resultType="edu.ku.cete.domain.TestSession">
		select * from testsession where testid=#{testId} and activeflag is true
	</select>

	<update id="updateTestsession">
		update testsession
		<set>
			modifieddate = #{modifiedDate},
			modifieduser = #{modifiedUser}
		</set>
		where id = #{id, jdbcType=BIGINT}
	</update>

	<select id="getTestSessionByTestSessionId" parameterType="java.lang.Long" resultType="edu.ku.cete.domain.TestSession">
		select * from testsession ts where ts.id= #{testSessionId,jdbcType=BIGINT}
	</select>

	<select id="getTestSessionDetailsByTestSessionId" parameterType="java.lang.Long" resultMap="BaseResultMap">
		select * from testsession ts where ts.id= #{testSessionId,jdbcType=BIGINT}
	</select>

	<select id="getTestSessionByStudentIdTestCollectionSource" resultMap="BaseResultMap">
		select ts.*, sts.status from testsession ts
		join studentstests sts on sts.testsessionid = ts.id
		join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = ts.testcollectionid and ts.operationaltestwindowid = otwtc.operationaltestwindowid
		where ts.testcollectionid = #{testCollectionId,jdbcType=BIGINT} and ts.source = #{source,jdbcType=VARCHAR}
		and sts.studentid = #{studentId,jdbcType=BIGINT}
	</select>

	<select id="findTestSessionsInactivatedBy" resultType="java.lang.Long">
		select ts.id
		from enrollment e
		join enrollmentsrosters er
			on er.enrollmentid = e.id
			<if test="isEnrolled">
				and er.activeflag = true
			</if>
		join roster r
			on er.rosterid = r.id
			<if test="isEnrolled">
				and r.activeflag = true
			</if>
		join testsession ts on ts.rosterid = r.id and ts.source != 'ITI' and ts.activeflag = false
		join studentstests st on st.testsessionid=ts.id <!--and st.activeflag = false--> and e.studentid=st.studentid
		join testcollection tc on ts.testcollectionid = tc.id and tc.activeflag = true
		join operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag = true
		where e.activeflag = true
		and e.studentid = #{studentId}
		and e.currentschoolyear = #{currentSchoolYear}
		and e.attendanceschoolid = #{attendanceSchoolId}
		and (otw.effectivedate &lt;= now() AND now() &lt;= otw.expirydate)
		and ts.status in (
			select c.id
			from category c
			join categorytype ct on ct.id = c.categorytypeid
			where categorycode in (
				#{inactivationType} || '-complete',
				#{inactivationType} || '-inprogress',
				#{inactivationType} || '-inprogresstimedout',
				#{inactivationType} || '-pending',
				#{inactivationType} || '-unused'
			)
			and ct.typecode = 'STUDENT_TEST_STATUS'
		)
		and CASE WHEN (tc.gradebandid is not null) THEN (
			select (select abbreviatedname from gradecourse where id = #{gradeId}) in (
				select distinct gc1.abbreviatedname
				from gradebandgradecourse gbgc1
				join gradecourse gc1 on gbgc1.gradecourseid = gc1.id
				where gbgc1.gradebandid = tc.gradebandid
			)
		)
		WHEN (tc.gradebandid is null) THEN (
			(select abbreviatedname from gradecourse where id = tc.gradecourseid) = (select abbreviatedname from gradecourse where id = #{gradeId})
		)

		END

		UNION

		select ts.id
		from enrollment e
		join enrollmentsrosters er
			on er.enrollmentid = e.id
			<if test="isEnrolled">
				and er.activeflag = true
			</if>
		join ititestsessionhistory iti on er.id = iti.studentenrlrosterid and iti.activeflag = false
		join testsession ts on ts.rosterid = iti.rosterid and ts.source = 'ITI' and ts.activeflag = false
		join studentstests st on st.testsessionid = ts.id and st.activeflag = false and e.studentid=st.studentid
		join testcollection tc on ts.testcollectionid = tc.id and tc.activeflag = true
		join operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag = true
		where e.activeflag = true
		and e.studentid = #{studentId}
		and e.currentschoolyear = #{currentSchoolYear}
		and e.attendanceschoolid = #{attendanceSchoolId}
		and (otw.effectivedate &lt;= now() AND now() &lt;= otw.expirydate)
		and ts.status in (
			select c.id
			from category c
			join categorytype ct on ct.id = c.categorytypeid
			where categorycode in (
				#{inactivationType} || '-complete',
				#{inactivationType} || '-inprogress',
				#{inactivationType} || '-inprogresstimedout',
				#{inactivationType} || '-pending',
				#{inactivationType} || '-unused'
			)
			and ct.typecode = 'STUDENT_TEST_STATUS'
		)
		and CASE WHEN (tc.gradebandid is not null) THEN (
			select (select abbreviatedname from gradecourse where id = #{gradeId}) in (
				select distinct gc1.abbreviatedname
				from gradebandgradecourse gbgc1
				join gradecourse gc1 on gbgc1.gradecourseid = gc1.id
				where gbgc1.gradebandid = tc.gradebandid
			)
		)
		WHEN (tc.gradebandid is null) THEN (
			(select abbreviatedname from gradecourse where id = tc.gradecourseid) = (select abbreviatedname from gradecourse where id = #{gradeId})
		)

		END
	</select>

	<select id="findTestSessionsToDeactivateForGradeChange" resultType="java.lang.Long">
		select ts.id
		from enrollment e
		join enrollmentsrosters er on er.enrollmentid = e.id and er.activeflag = true
		join roster r on er.rosterid = r.id and r.activeflag=true
		join testsession ts on ts.rosterid = r.id and ts.source != 'ITI' and ts.activeflag = true
		join studentstests st on st.testsessionid=ts.id and st.activeflag = true and e.studentid=st.studentid
		join testcollection tc on ts.testcollectionid = tc.id and tc.activeflag = true
		join operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag = true
		where e.studentid = #{studentId} and e.activeflag = true and e.currentschoolyear = #{currentSchoolYear}
		and e.attendanceschoolid = #{attendanceSchoolId} and (otw.effectivedate &lt;= now() AND now() &lt;= otw.expirydate)
		and ts.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid
		where categorycode in ('complete', 'inprogress', 'inprogresstimedout', 'pending', 'unused')
		and ct.typecode = 'STUDENT_TEST_STATUS')
		and CASE
				WHEN (tc.gradebandid is not null) THEN (select (select abbreviatedname from gradecourse where id=#{newGradeId}) not in (
														select distinct gc1.abbreviatedname
														from gradebandgradecourse gbgc1
														join gradecourse gc1 on gbgc1.gradecourseid = gc1.id
														where gbgc1.gradebandid = tc.gradebandid))
				WHEN (tc.gradebandid is null) THEN (((select abbreviatedname from gradecourse where id = tc.gradecourseid) = (select abbreviatedname from gradecourse where id = #{oldGradeId})))
			END

		UNION

		select ts.id
		from enrollment e
		join enrollmentsrosters er on er.enrollmentid = e.id and er.activeflag = true
		join ititestsessionhistory iti on er.id = iti.studentenrlrosterid and iti.activeflag = true
		join testsession ts on ts.id = iti.testsessionid and ts.source = 'ITI' and ts.activeflag = true
		join studentstests st on st.testsessionid=ts.id and st.activeflag = true and e.studentid=st.studentid
		join testcollection tc on ts.testcollectionid = tc.id and tc.activeflag = true
		join operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag = true
		where e.studentid = #{studentId} and e.currentschoolyear = #{currentSchoolYear}
		and e.attendanceschoolid = #{attendanceSchoolId} and (otw.effectivedate &lt;= now() AND now() &lt;= otw.expirydate)
		and ts.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid
		where categorycode in ('complete', 'inprogress', 'inprogresstimedout', 'pending', 'unused')
		and ct.typecode = 'STUDENT_TEST_STATUS')
		and CASE
				WHEN (tc.gradebandid is not null) THEN (select (select abbreviatedname from gradecourse where id=#{newGradeId}) not in (
														select distinct gc1.abbreviatedname
														from gradebandgradecourse gbgc1
														join gradecourse gc1 on gbgc1.gradecourseid = gc1.id
														where gbgc1.gradebandid = tc.gradebandid))
				WHEN (tc.gradebandid is null) THEN (((select abbreviatedname from gradecourse where id = tc.gradecourseid) = (select abbreviatedname from gradecourse where id = #{oldGradeId})))
			END
	</select>
	<select id="doesStudentHaveTestSessionsForCurrentGrade" resultType="boolean">
		select count(a.id) > 0
		from (
		select ts.id
		from enrollment e
		join student s on s.id = e.studentid and s.activeflag = true
		join enrollmentsrosters er on er.enrollmentid = e.id and er.activeflag = true
		join roster r on er.rosterid = r.id and r.activeflag=true
		join testsession ts on ts.rosterid = r.id and ts.source != 'ITI' and ts.activeflag = true
		join testcollection tc on ts.testcollectionid = tc.id and tc.activeflag = true
		join operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag = true
		where s.id = #{studentId} and e.activeflag = true and e.currentschoolyear = #{currentSchoolYear}
		and e.attendanceschoolid = #{attendanceSchoolId} and (otw.effectivedate &lt;= now() AND now() &lt;= otw.expirydate)
		and ts.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid
		where categorycode in ('complete', 'inprogress', 'inprogresstimedout', 'pending', 'unused')
		and ct.typecode
		= 'STUDENT_TEST_STATUS')
		and CASE
		WHEN (tc.gradebandid is not null) THEN (select (select abbreviatedname from gradecourse where id=#{gradeId}) in (
		select distinct gc1.abbreviatedname
		from gradebandgradecourse gbgc1
		join gradecourse gc1 on gbgc1.gradecourseid = gc1.id
		where gbgc1.gradebandid = tc.gradebandid))
		WHEN (tc.gradebandid is null) THEN (((select abbreviatedname from gradecourse where id = tc.gradecourseid) = (select abbreviatedname from gradecourse where id = #{gradeId})))

		END

		UNION

		select ts.id
		from enrollment e
		join student s on s.id = e.studentid and s.activeflag = true
		join enrollmentsrosters er on er.enrollmentid = e.id and er.activeflag = true
		join ititestsessionhistory iti on s.id = iti.studentid and er.id = iti.studentenrlrosterid and iti.activeflag = true
		join testsession ts on iti.testsessionid = ts.id and ts.rosterid = iti.rosterid and ts.source = 'ITI' and ts.activeflag = true
		join testcollection tc on ts.testcollectionid = tc.id and tc.activeflag = true
		join
		operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag = true
		where s.id = #{studentId} and e.currentschoolyear = #{currentSchoolYear}
		and e.attendanceschoolid = #{attendanceSchoolId} and (otw.effectivedate &lt;= now() AND now() &lt;= otw.expirydate)
		and ts.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid
		where categorycode in ('complete', 'inprogress', 'inprogresstimedout', 'unused')
		and ct.typecode = 'STUDENT_TEST_STATUS')
		and CASE
		WHEN (tc.gradebandid is not null) THEN (select (select abbreviatedname from gradecourse where id=#{gradeId}) in (
		select distinct gc1.abbreviatedname
		from gradebandgradecourse gbgc1
		join gradecourse gc1 on gbgc1.gradecourseid = gc1.id
		where gbgc1.gradebandid = tc.gradebandid))
		WHEN (tc.gradebandid is null) THEN (((select abbreviatedname from gradecourse where id = tc.gradecourseid) = (select abbreviatedname from gradecourse where id = #{gradeId})))

		END

		UNION

		select iti.id
		from enrollment e
		join student
		s on s.id = e.studentid and s.activeflag = true
		join enrollmentsrosters er on er.enrollmentid = e.id and er.activeflag = true
		join ititestsessionhistory iti on s.id = iti.studentid and er.id = iti.studentenrlrosterid and iti.activeflag = true
		join testcollection tc on iti.testcollectionid = tc.id and tc.activeflag = true
		join operationaltestwindowstestcollections otwtc on otwtc.testcollectionid = tc.id
		join operationaltestwindow otw on otw.id = otwtc.operationaltestwindowid and otw.activeflag = true
		where s.id = #{studentId} and e.currentschoolyear = #{currentSchoolYear}
		and e.attendanceschoolid = #{attendanceSchoolId} and (otw.effectivedate &lt;= now() AND now() &lt;= otw.expirydate)
		and iti.status in (select c.id from category c join categorytype ct on ct.id = c.categorytypeid
		where categorycode in ('pending')
		and ct.typecode = 'STUDENT_TEST_STATUS')
		and CASE
		WHEN (tc.gradebandid is not null) THEN (select (select abbreviatedname from gradecourse where id=#{gradeId}) in (
		select distinct
		gc1.abbreviatedname
		from gradebandgradecourse gbgc1
		join gradecourse gc1 on gbgc1.gradecourseid = gc1.id
		where gbgc1.gradebandid = tc.gradebandid))
		WHEN (tc.gradebandid is null) THEN (((select abbreviatedname from gradecourse where id = tc.gradecourseid) = (select abbreviatedname from gradecourse where id = #{gradeId})))

		END
		) a
	</select>

	<select id="getKELPAAutoRegisteredTestSessionsByGradeCourseGradeBand" resultType="edu.ku.cete.domain.testsession.AutoRegisteredTestSessionDTO">

		WITH stusession AS
		(
		select distinct st.testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE e.id = st.enrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		UNION

		select distinct st.transferedtestsessionid as testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE e.id = st.transferedenrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		)

		select tsession.*, count(*) OVER() AS totalrecords from (SELECT
		<include refid="Extended_Auto_Registration_Test_Sessions_Status_Column_List" />
		FROM testsession ts
		JOIN TestCollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentsTestCollections atc ON tc.id = atc.testcollectionid
		JOIN assessment a ON atc.assessmentid = a.id
		JOIN testingProgram tp ON a.testingprogramid = tp.id
		JOIN assessmentProgram ap ON tp.assessmentprogramid = ap.id
		INNER JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN stusession on stusession.testsessionid=ts.id
		JOIN gradeband gb ON tc.gradebandid = gb.id
		JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
		JOIN gradecourse gc ON gbgc.gradecourseid = gc.id AND ts.gradecourseid=gc.id
		WHERE ts.rosterid IS NULL
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (org.schoolid=#{userOrganizationId, jdbcType=BIGINT} or org.districtid=#{userOrganizationId, jdbcType=BIGINT} or org.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND ca.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			AND gc.id in (select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id=(#{gradeCourseId, jdbcType=BIGINT})))
		</if>
		<if test="! showExpired">
			AND ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) OR ts.windowexpirydate &gt;= now())
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_AR_Where_Clause" />
		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionId'">
					ts.id
				</when>
				<when test="sortByColumn == 'testSessionName'">
					ts.name
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					ap.programname
				</when>
				<when test="sortByColumn == 'organizationDisplayIdentifier'">
					stusession.displayidentifier
				</when>
				<when test="sortByColumn == 'contentAreaName'">
					ca.name
				</when>
				<when test="sortByColumn == 'gradeCourseName'">
					substring(gc.name, '[^0-9]+'), substring(gc.name, '[0-9]+')::int
				</when>
				<when test="sortByColumn == 'gradeBandName'">
					gb.name
				</when>
				<when test="sortByColumn == 'rosterId'">
					ts.rosterid
				</when>
				<when test="sortByColumn == 'effectiveDate'">
					otw.effectivedate
				</when>
				<when test="sortByColumn == 'expiryDate'">
					expiryDate
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		) as tsession
		where includeInProgressTestSession is true
		<if test="showExpired">
			or expiredFlag is true
		</if>
		<if test="includeCompletedTestSession">
			or includeCompletedTestSession is true
		</if>
		<if test="limit != null">
			LIMIT #{limit}
		</if>
		<if test="offset != null">
			OFFSET #{offset}
		</if>
	</select>
	<select id="getKELPAAutoregisteredTestSessionForActiveRosters" resultType="edu.ku.cete.domain.testsession.AutoRegisteredTestSessionDTO">

		WITH stusession AS
		(
		select distinct st.testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		JOIN enrollmentsrosters enrlroster ON enrlroster.enrollmentid = e.id
		JOIN roster r ON r.id = enrlroster.rosterid
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE r.teacherid = #{teacherId} AND r.activeflag IS true
		and e.id = st.enrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		UNION

		select distinct st.transferedtestsessionid as testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		JOIN enrollmentsrosters enrlroster ON enrlroster.enrollmentid = e.id
		JOIN roster r ON r.id = enrlroster.rosterid
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE r.teacherid = #{teacherId} AND r.activeflag IS true
		and e.id = st.transferedenrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>
		)



		select tsession.*, count(*) OVER() AS totalrecords from (SELECT
		<include refid="Extended_Auto_Registration_Test_Sessions_Column_List" />
		FROM testsession ts
		JOIN TestCollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentsTestCollections atc ON tc.id = atc.testcollectionid
		JOIN assessment a ON atc.assessmentid = a.id
		JOIN testingProgram tp ON a.testingprogramid = tp.id
		JOIN assessmentProgram ap ON tp.assessmentprogramid = ap.id
		INNER JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN stusession on stusession.testsessionid=ts.id
		JOIN gradeband gb ON tc.gradebandid = gb.id
		JOIN gradebandgradecourse gbgc on gbgc.gradebandid = gb.id
		JOIN gradecourse gc ON gbgc.gradecourseid = gc.id AND ts.gradecourseid=gc.id
		WHERE ts.rosterid IS NULL
		AND ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) OR ts.windowexpirydate &gt;= now())
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (org.schoolid=#{userOrganizationId, jdbcType=BIGINT} or org.districtid=#{userOrganizationId, jdbcType=BIGINT} or org.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND ca.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			AND gc.id in (select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id=(#{gradeCourseId, jdbcType=BIGINT})))
		</if>
		<include refid="Extended_AR_Where_Clause" />
		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionId'">
					ts.id
				</when>
				<when test="sortByColumn == 'testSessionName'">
					ts.name
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					ap.programname
				</when>
				<when test="sortByColumn == 'organizationDisplayIdentifier'">
					stusession.displayidentifier
				</when>
				<when test="sortByColumn == 'contentAreaName'">
					ca.name
				</when>
				<when test="sortByColumn == 'gradeCourseName'">
					substring(gc.name, '^[0-9]+')::bigint
					<choose>
						<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
							DESC
						</when>
						<otherwise>
							ASC
						</otherwise>
					</choose>
					, substring(gc.name, '[^0-9]*$')
				</when>
				<when test="sortByColumn == 'gradeBandName'">
					gb.name
				</when>
				<when test="sortByColumn == 'rosterId'">
					ts.rosterid
				</when>
				<when test="sortByColumn == 'effectiveDate'">
					otw.effectivedate
				</when>
				<when test="sortByColumn == 'expiryDate'">
					ts.windowexpirydate
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		) as tsession
		<if test="limit != null">
			LIMIT #{limit}
		</if>
		<if test="offset != null">
			OFFSET #{offset}
		</if>
	</select>

	<select id="getSessionsForAutoScoring" resultMap="BaseResultMap">
		select distinct ts.* from studentstests st
		inner join testsession ts on ts.id = st.testsessionid and ts.activeflag is true
		inner join assessmentstestcollections atc ON atc.testcollectionid = st.testcollectionid and atc.activeflag is true
		inner join assessment ass ON ass.id = atc.assessmentid and ass.activeflag is true
		inner join testingprogram tp ON tp.id = ass.testingprogramid and tp.activeflag is true
		inner join operationaltestwindow otw ON ts.operationaltestwindowid = otw.id and (otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP &lt; otw.scoringwindowenddate)
		inner join testsection tsec on st.testid = tsec.testid
		inner join testsectionstaskvariants tstv on tstv.testsectionid = tsec.id
		inner join taskvariant tv on tv.id = tstv.taskvariantid inner join tasktype tt on tt.id = tv.tasktypeid
		where st.activeflag is true and tp.assessmentprogramid =#{assessmentProgramId,jdbcType=BIGINT}
		and st.scoringassignmentid is null and ts.source =
		'BATCHAUTO'
		and (tt.code = 'ER' OR tt.code = 'UDI')
		order by ts.id desc
	</select>


	<select id="getKELPATestAdministrationExtract" resultType="edu.ku.cete.web.KELPATestAdministrationDTO" parameterType="java.lang.Long">
		select distinct
		otd.statename as state, otd.districtname as district, otd.schoolname as school,
		otd.schooldisplayidentifier as schoolidentifier,gc.abbreviatedname as grade,
		ettsa.groupingindicator1 as grouping1,ettsa.groupingindicator2 as grouping2,
		(SELECT au.uniquecommonidentifier FROM enrollmentsrosters enrlroster
		JOIN roster r ON r.id = enrlroster.rosterid and r.activeflag IS TRUE
		JOIN aartuser au ON au.id = r.teacherid
		where enrlroster.enrollmentid = st.enrollmentid
		and enrlroster.activeflag IS TRUE
		order by r.modifieddate desc limit 1) as educatoridentifier,
		(select au.surname from enrollmentsrosters enrlroster
		JOIN roster r ON r.id = enrlroster.rosterid and r.activeflag IS TRUE
		JOIN aartuser au ON au.id = r.teacherid
		where enrlroster.enrollmentid = st.enrollmentid
		and enrlroster.activeflag IS TRUE
		order by r.modifieddate desc limit 1) as educatorlastname,
		(select au.firstname from enrollmentsrosters enrlroster
		JOIN roster r ON r.id = enrlroster.rosterid and r.activeflag IS TRUE
		JOIN aartuser
		au ON au.id = r.teacherid
		where enrlroster.enrollmentid = st.enrollmentid
		and enrlroster.activeflag IS TRUE
		order by r.modifieddate desc limit 1) as educatorfirstname,
		s.legallastname as studentlastname, s.legalfirstname as studentfirstname,
		s.legalmiddlename as studentmiddlename, s.statestudentidentifier as statestudentidentifier,
		enrl.localstudentidentifier as localstudentidentifier,
		conArea.name as subject, ts.name as testsessionname,c.categoryname as teststatus,
		sc.specialcircumstancetype as specialcircumstance,
		(select categoryname from category where id = ssc.status) as specialcircumstancestatus,
		(select (acteddate AT TIME ZONE 'CDT') from studentstestshistory where studentstestsid =
		st.id and action = 'REACTIVATION' order by acteddate desc limit 1) as lastreactivateddatetime,
		stg.name as stage,
		((st.startdatetime AT TIME ZONE 'GMT') AT TIME ZONE 'CDT') as teststartdatetime,
		((st.enddatetime AT TIME ZONE 'GMT') AT TIME ZONE 'CDT') as testenddatetime,
		(select count(tv.*) from testsection ts
		join testsectionstaskvariants tstv on ts.testid = st.testid and ts.id = tstv.testsectionid
		join taskvariant tv on tv.id = tstv.taskvariantid) as testtotalitems,
		(select (select count(tv.*) from testsection ts
		join testsectionstaskvariants tstv on ts.testid = st.testid and ts.id = tstv.testsectionid
		join taskvariant tv on tv.id = tstv.taskvariantid) -
		(select count(*) from studentsresponses where studentstestsid = st.id)) as testOmitteditems
		from studentstests st
		join testsession ts on st.testsessionid =ts.id and st.activeflag is true and ts.activeflag is true
		join student s on st.studentid = s.id and s.activeflag is true
		join category c on c.id = st.status and c.activeflag is true
		join operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag is true
		and otw.assessmentprogramid in(select id from assessmentprogram where abbreviatedname ='KELPA2')
		join testcollection tc on ts.testcollectionid = tc.id and tc.activeflag is true
		JOIN stage stg on stg.id = tc.stageid and
		stg.activeflag is true
		JOIN enrollmenttesttypesubjectarea ettsa ON ettsa.enrollmentid = st.enrollmentid and ts.subjectareaid=ettsa.subjectareaid
		and (ts.testtypeid= ettsa.testtypeid or ettsa.testtypeid=(select id from testtype where activeflag is true and testtypecode='C'))
		and ettsa.activeflag is true
		join gradecourse gc ON ts.gradecourseid = gc.id and gc.activeflag is true
		join contentarea conArea on conArea.id = tc.contentareaid and conArea.activeflag is true
		join enrollment enrl on enrl.studentid = st.studentid and enrl.activeflag is true
		join organizationtreedetail otd on enrl.attendanceschoolid=otd.schoolid
		inner join studentassessmentprogram sap on sap.studentid = s.id and sap.activeflag = true
		left join studentspecialcircumstance ssc on st.id = ssc.studenttestid and ssc.activeflag is true
		left join specialcircumstance sc on ssc.specialcircumstanceid = sc.id and sc.activeflag is true
		where enrl.currentschoolyear = #{currentSchoolYear, jdbcType=INTEGER} and
		(otd.schoolid=#{orgId,jdbcType=BIGINT} or
		otd.districtid=#{orgId,jdbcType=BIGINT} or
		otd.stateid=#{orgId,jdbcType=BIGINT}) and
		<if test="assessmentProgramId !=null">
			sap.assessmentprogramid in
			<foreach collection="assessmentProgramId" item="assessmentprogram" open="(" close=")" separator=",">
				#{assessmentprogram}
			</foreach>
		</if>
		AND ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) OR ts.windowexpirydate &gt;= now())
		order by state, district, school, studentfirstname, subject, stage
	</select>
	<select id="getTestingProgramNames" parameterType="java.lang.Long" resultType="String">
		select tp.programname from testsession ts
		inner join testcollection tc on tc.id=ts.testcollectionid
		inner join assessmentsTestCollections assttc on tc.id = assttc.testcollectionid
		inner join assessment asst on asst.id = assttc.assessmentid
		inner join testingProgram tp on asst.testingProgramId = tp.id
		where ts.id=#{testSessionId,jdbcType=BIGINT} and ts.activeflag is true
		and tc.activeflag is true and assttc.activeflag is true
		and asst.activeflag is true and tp.activeflag is true
	</select>
	<select id="getAutoRegisteredTestSessionsForExtendedStatus" resultType="edu.ku.cete.domain.testsession.AutoRegisteredTestSessionDTO">

		WITH stusession AS
		(
		select distinct st.testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE e.id = st.enrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		UNION

		select distinct st.transferedtestsessionid as testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE e.id = st.transferedenrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		)

		select tsession.*, count(*) OVER() AS totalrecords from (SELECT
		<include refid="Extended_Auto_Registration_Test_Sessions_Column_List_For_ExtendedStatus" />
		FROM testsession ts
		JOIN TestCollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentsTestCollections atc ON tc.id = atc.testcollectionid
		JOIN assessment a ON atc.assessmentid = a.id
		JOIN testingProgram tp ON a.testingprogramid = tp.id
		JOIN assessmentProgram ap ON tp.assessmentprogramid = ap.id
		INNER JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN stusession on stusession.testsessionid=ts.id
		LEFT JOIN gradecourse gc ON tc.gradecourseid = gc.id
		LEFT JOIN gradeband gb ON tc.gradebandid = gb.id
		LEFT JOIN gradebandgradecourse tcgbgc on tc.gradebandid = tcgbgc.gradebandid
		WHERE ts.activeflag IS TRUE
		<if test="assessmentProgramAbbr != 'PLTW'">
			AND ts.rosterid IS NULL
		</if>
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (org.schoolid=#{userOrganizationId, jdbcType=BIGINT} or
			org.districtid=#{userOrganizationId, jdbcType=BIGINT} or
			org.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND ca.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			AND (
			case
			when tc.gradecourseid is null then (select abbreviatedname from gradecourse 
			where id in (#{gradeCourseId,jdbcType=BIGINT}) and activeflag is true) in 
			(select abbreviatedname from gradecourse where id in (tcgbgc.gradecourseid) and activeflag is true)
			when tc.gradecourseid is not null then (select abbreviatedname from gradecourse 
			where id in (#{gradeCourseId,jdbcType=BIGINT}) and activeflag is true) = 
			(select abbreviatedname from gradecourse where id in (gc.id) and activeflag is true)
			end
			)
		</if>
		<if test="! showExpired">
			AND ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) OR
			ts.windowexpirydate &gt;= now())
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_AR_Where_Clause" />
		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionId'">
					ts.id
				</when>
				<when test="sortByColumn == 'testSessionName'">
					ts.name
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					ap.programname
				</when>
				<when test="sortByColumn == 'organizationDisplayIdentifier'">
					stusession.displayidentifier
				</when>
				<when test="sortByColumn == 'contentAreaName'">
					ca.name
				</when>
				<when test="sortByColumn == 'gradeCourseName'">
					substring(gc.name, '[^0-9]+'), substring(gc.name, '[0-9]+')::int
				</when>
				<when test="sortByColumn == 'gradeBandName'">
					gb.name
				</when>
				<when test="sortByColumn == 'rosterId'">
					ts.rosterid
				</when>
				<when test="sortByColumn == 'effectiveDate'">
					otw.effectivedate
				</when>
				<when test="sortByColumn == 'expiryDate'">
					expiryDate
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		) as tsession
		where includeInProgressTestSession is true
		<if test="showExpired">
			or expiredFlag is true
		</if>
		<if test="includeCompletedTestSession">
			or includeCompletedTestSession is true
		</if>

		<if test="limit != null">
			LIMIT #{limit}
		</if>
		<if test="offset != null">
			OFFSET #{offset}
		</if>
	</select>
	<sql id="Extended_Auto_Registration_Test_Sessions_Column_List_For_ExtendedStatus">
		distinct ts.id as testSessionId, ts.name as testSessionName,
		ap.programname as assessmentProgramName,
		stusession.displayidentifier AS
		organizationDisplayIdentifier,
		ca.name as contentAreaName, gc.name as
		gradeCourseName, gb.name as
		gradeBandName, ts.rosterid as rosterId,
		substring(gc.name, '[^0-9]+'), substring(gc.name, '[0-9]+')::int,
		<if test="showExpired != null">
			case when ((otw.suspendwindow is FALSE AND otw.expirydate
			&gt;= now()) or
			ts.windowexpirydate &gt;=now()) then false
			else true end
			as expiredFlag,
		</if>

		<if test="includeCompletedTestSession != null">
			case when(((ts.windowexpirydate &gt;=now())OR
			(otw.suspendwindow is FALSE
			AND otw.expirydate &gt;= now()))
			AND ((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id and st.activeflag is true)=(select count(st.studentid) from studentstests
			st where st.testsessionid=ts.id and st.activeflag is true and st.status=(select id from category
			where categorytypeid = (select id from categorytype where
			typecode='STUDENT_TEST_STATUS') and categorycode = 'complete'))))then
			true
			else false end as includeCompletedTestSession,
		</if>

		<if test="includeInProgressTestSession != null">
			case when(((ts.windowexpirydate &gt;=now()) OR
			(otw.suspendwindow is FALSE
			AND otw.expirydate &gt;= now()))
			AND
			((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id and st.activeflag is true)!=(select count(st.studentid) from
			studentstests st where st.testsessionid=ts.id and st.activeflag is true and st.status=(select id
			from category where categorytypeid = (select id from categorytype
			where typecode='STUDENT_TEST_STATUS') and categorycode =
			'complete'))))then true
			else false end as includeInProgressTestSession,
		</if>

		otw.effectivedate as effectiveDate,
		case when (ts.windowexpirydate is
		not null) then ts.windowexpirydate
		else otw.expirydate end as
		expiryDate,
		ts.testpanelid as testPanelId
	</sql>



	<select id="getTestSessionsByStudentId" resultMap="testSessionWithRosterMap">
		SELECT *, count(*) OVER() AS totalrecords from (
		SELECT
		<include refid="Extended_With_Roster_Column_List_Toolset" />
		FROM roster r
		inner join Organization attendanceSchool on attendanceSchool.id = r.attendanceschoolid
		inner join aartuser au on r.teacherId = au.id
		inner join testsession ts on ts.rosterid = r.id
		inner join category c on c.id=(select st.status from studentstests st where st.studentid=#{studentId, jdbcType=BIGINT} and st.activeflag=true and st.testsessionid=ts.id)
		inner join testcollection AS tc on tc.id = ts.testcollectionid
		<if test="! hasQCCompletePermission">
			inner join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
			inner join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otw.id and otwsr.activeflag is true
		</if>
		<if test="hasQCCompletePermission">
			left join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
			left join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otw.id and otwsr.activeflag is true
		</if>
		inner join assessmentsTestCollections asstTc on tc.id = asstTc.testcollectionid
		inner join assessment asst on asst.id = asstTc.assessmentid
		inner join testcollectionstests tct on tc.id = tct.testcollectionid
		inner join test test on test.id = tct.testid
		inner join testingProgram tp on asst.testingProgramId = tp.id
		inner join assessmentProgram ap on ap.id = tp.assessmentprogramid
		inner join contentArea tcContentArea on tc.contentAreaId = tcContentArea.id
		inner join organizationtreedetail otd on otd.schoolid = r.attendanceschoolid
		left join GradeCourse tcGc on tc.gradeCourseId = tcGc.id
		left join gradebandgradecourse tcgbgc on tc.gradebandid = tcgbgc.gradebandid
		left join gradeband tcgb on tcgbgc.gradebandid = tcgb.id
		WHERE ts.activeflag IS TRUE AND r.activeflag IS TRUE
		<choose>
			<when test="hasQCCompletePermission">
				AND tc.systemselectoptionid IS NOT NULL
			</when>
			<otherwise>
				AND otwsr.sessionruleid= #{systemEnrollmentRuleId}
			</otherwise>
		</choose>
		AND (ts.source is null OR ts.source != #{itiSourceCode})
		<if test="! hasViewAllPermission">
			AND r.teacherId=#{educatorId}
		</if>
		<if test="qcComplete != null">
			AND test.qccomplete = #{qcComplete}
		</if>
		<if test="! hasViewHighStakesTestSessionsPermission">
			AND tp.highstake = false
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>

		<if test="hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (test.qccomplete is FALSE OR test.qccomplete is NULL) OR (test.qccomplete is TRUE AND otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="! hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_Roster_Where_Clause_Toolset" />
		union all
		SELECT
		<include refid="Extended_Test_With_Roster_Column_List_Toolset" />
		FROM roster r
		inner join Organization attendanceSchool on attendanceSchool.id = r.attendanceschoolid
		inner join aartuser au on r.teacherId = au.id
		inner join testsession ts on ts.rosterid = r.id
		inner join category c on c.id=(select st.status from studentstests st where st.studentid=#{studentId, jdbcType=BIGINT} and st.activeflag=true and st.testsessionid=ts.id)
		inner join testcollection AS tc on tc.id = ts.testcollectionid
		<if test="! hasQCCompletePermission">
			inner join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
			inner join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otw.id and otwsr.activeflag is true
		</if>
		<if test="hasQCCompletePermission">
			left join operationaltestwindow otw on otw.id = ts.operationaltestwindowid
			left join operationaltestwindowsessionrule otwsr on otwsr.operationaltestwindowid= otw.id and otwsr.activeflag is true
		</if>
		inner join assessmentsTestCollections asstTc on tc.id = asstTc.testcollectionid
		inner join assessment asst on asst.id = asstTc.assessmentid
		inner join testcollectionstests tct on tc.id = tct.testcollectionid
		inner join test test on test.id = tct.testid and test.id = ts.testid
		inner join testingProgram tp on asst.testingProgramId = tp.id
		inner join assessmentProgram ap on ap.id = tp.assessmentprogramid
		inner join contentArea tcContentArea on tc.contentAreaId = tcContentArea.id
		inner join organizationtreedetail otd on otd.schoolid = r.attendanceschoolid
		left join GradeCourse tcGc on tc.gradeCourseId = tcGc.id
		left join gradebandgradecourse tcgbgc on tc.gradebandid = tcgbgc.gradebandid
		left join gradeband tcgb on tcgbgc.gradebandid = tcgb.id
		WHERE ts.activeflag IS TRUE AND r.activeflag IS TRUE
		AND (ts.source is null OR ts.source != #{itiSourceCode})
		<choose>
			<when test="hasQCCompletePermission">
				AND tc.systemselectoptionid IS NULL
			</when>
			<otherwise>
				AND otwsr.sessionruleid= #{manualEnrollmentRuleId}
			</otherwise>
		</choose>
		<if test="! hasViewAllPermission">
			AND r.teacherId=#{educatorId}
		</if>
		<if test="qcComplete != null">
			and test.qccomplete = #{qcComplete}
		</if>
		<if test="! hasViewHighStakesTestSessionsPermission">
			AND tp.highstake = false
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>

		<if test="hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (test.qccomplete is FALSE OR test.qccomplete is NULL) OR (test.qccomplete is TRUE AND otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="! hasQCCompletePermission and ! showExpired">
			AND ((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()))
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_Roster_Where_Clause_Toolset" />
		) testsessions where testSessionId not in(select distinct iti.testsessionid from ititestsessionhistory iti
		where iti.studentid=#{studentId, jdbcType=BIGINT} and iti.activeflag=true)
		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionRosterId'">
					testsessions.testSessionRosterId
				</when>
				<when test="sortByColumn == 'rosterId'">
					testsessions.rosterId
				</when>
				<when test="sortByColumn == 'courseSectionName'">
					testsessions.coursesectionname
				</when>
				<when test="sortByColumn == 'educatorFirstName'">
					testsessions.educatorFirstName
				</when>
				<when test="sortByColumn == 'educatorLastName'">
					testsessions.educatorLastName
				</when>
				<when test="sortByColumn == 'educatorIdentifier'">
					testsessions.educatorIdentifier
				</when>
				<when test="sortByColumn == 'testSessionId'">
					testsessions.testSessionId
				</when>
				<when test="sortByColumn == 'testSessionName'">
					testsessions.testSessionName
				</when>
				<when test="sortByColumn == 'testSessionStatus'">
					testsessions.testSessionStatus
				</when>
				<when test="sortByColumn == 'testSessionSource'">
					testsessions.testSessionSource
				</when>
				<when test="sortByColumn == 'testSessionTestId'">
					testsessions.testSessionTestId
				</when>
				<when test="sortByColumn == 'testcollectionid'">
					testsessionsts.testcollectionid
				</when>
				<when test="sortByColumn == 'testCollectionName'">
					testsessions.testCollectionname
				</when>
				<when test="sortByColumn == 'randomizationType'">
					testsessions.randomizationType
				</when>
				<when test="sortByColumn == 'tcGradeCourseName'">
					testsessions.tcGradeCourseName
				</when>
				<when test="sortByColumn == 'tcGradeLevel'">
					testsessions.tcGradeLevel
				</when>
				<when test="sortByColumn == 'testCollectionContentAreaId'">
					testsessions.testCollectionContentAreaId
				</when>
				<when test="sortByColumn == 'tcContentAreaName'">
					testsessions.tcContentAreaName
				</when>
				<when test="sortByColumn == 'tcContentAreaAbbrName'">
					testsessions.tcContentAreaAbbrName
				</when>
				<when test="sortByColumn == 'assessmentName'">
					testsessions.assessmentName
				</when>
				<when test="sortByColumn == 'programName'">
					testsessions.programName
				</when>
				<when test="sortByColumn == 'highstake'">
					testsessions.highstake
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					testsessions.assessmentProgramName
				</when>
				<when test="sortByColumn == 'attendanceSchoolIdentifier'">
					testsessions.attendanceSchoolIdentifier
				</when>
				<when test="sortByColumn == 'attendanceSchoolName'">
					testsessions.attendanceSchoolName
				</when>
				<when test="sortByColumn == 'createdDate'">
					testsessions.createdDate
				</when>
				<when test="sortByColumn == 'studentsTestStatus'">
					testsessions.studentsTestStatus
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		limit #{limit}
		offset #{offset}
	</select>
	<select id="getTestSessionsByStudentIdForLCS" resultMap="testSessionWithRosterMap">

		SELECT *, count(*) OVER() AS totalrecords from (
		SELECT
		distinct ts.id as testSessionid, (ts.id) as testSessionRosterId,
		r.id as rosterId,
		r.coursesectionname,
		au.firstname as educatorFirstName,
		au.surname as educatorLastName,
		au.uniquecommonidentifier as educatorIdentifier,
		ts.name as testSessionName,
		ts.status as testSessionStatus,
		ts.source as testSessionSource,
		ts.testid as testSessionTestId,
		ts.testcollectionid,
		tc.name as testCollectionname,
		ts.createddate as createdDate,c.categorycode as studentsTestStatus,
		tc.randomizationType as randomizationType,
		tc.contentAreaId as testCollectionContentAreaId,
		tcContentArea.name as tcContentAreaName,
		tcContentArea.abbreviatedName as tcContentAreaAbbrName,
		asst.assessmentName,
		tp.programName, tp.highstake,
		ap.programName as assessmentProgramName,
		attendanceSchool.displayidentifier as attendanceSchoolIdentifier,
		attendanceSchool.organizationname as attendanceSchoolName
		FROM roster r
		inner join enrollmentsrosters er on r.id=er.rosterid
		inner join enrollment e on e.id=er.enrollmentid
		inner join studentstests st on st.enrollmentid=e.id and st.studentid=#{studentId}
		inner join testsession ts on ts.id = st.testsessionid
		inner join Organization attendanceSchool on attendanceSchool.id = r.attendanceschoolid
		inner join aartuser au on r.teacherId = au.id
		inner join category c on c.id=st.status
		inner join testcollection AS tc on tc.id = ts.testcollectionid
		inner join assessmentsTestCollections asstTc on tc.id = asstTc.testcollectionid inner join assessment asst on asst.id = asstTc.assessmentid
		inner join testcollectionstests tct on tc.id = tct.testcollectionid
		inner join test test on test.id = tct.testid
		inner join testingProgram tp on asst.testingProgramId = tp.id
		inner join assessmentProgram ap on ap.id = tp.assessmentprogramid
		inner join contentArea tcContentArea on tc.contentAreaId = tcContentArea.id
		inner join gradecourse tcGc on test.gradecourseid=tcGc.id
		WHERE ts.activeflag IS TRUE AND r.activeflag IS TRUE
		AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}

		and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		) testsessions
		where testsessionid in
		(select sts.testsessionid from studentstests sts
		where sts.id in
		(select lcssts.studentstestsid from lcsstudentstests lcssts
		where lcssts.studentstestsid in
		(select id from studentstests where studentid =#{studentId}
		and activeflag is true) and lcssts.activeflag is true )and sts.activeflag is true and status in(select id from category where categoryname in('Unused','In Progress') ))

		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionRosterId'">
					testsessions.testSessionRosterId
				</when>
				<when test="sortByColumn == 'rosterId'">
					testsessions.rosterId
				</when>
				<when test="sortByColumn == 'courseSectionName'">
					testsessions.coursesectionname
				</when>
				<when test="sortByColumn == 'educatorFirstName'">
					testsessions.educatorFirstName
				</when>
				<when test="sortByColumn == 'educatorLastName'">
					testsessions.educatorLastName
				</when>
				<when test="sortByColumn == 'educatorIdentifier'">
					testsessions.educatorIdentifier
				</when>
				<when test="sortByColumn == 'testSessionId'">
					testsessions.testSessionId
				</when>
				<when test="sortByColumn == 'testSessionName'">
					testsessions.testSessionName
				</when>
				<when test="sortByColumn == 'testSessionStatus'">
					testsessions.testSessionStatus
				</when>
				<when test="sortByColumn == 'testSessionSource'">
					testsessions.testSessionSource
				</when>
				<when test="sortByColumn == 'testSessionTestId'">
					testsessions.testSessionTestId
				</when>
				<when test="sortByColumn == 'testcollectionid'">
					testsessionsts.testcollectionid
				</when>
				<when test="sortByColumn == 'testCollectionName'">
					testsessions.testCollectionname
				</when>
				<when test="sortByColumn == 'randomizationType'">
					testsessions.randomizationType
				</when>
				<when test="sortByColumn == 'tcGradeCourseName'">
					testsessions.tcGradeCourseName
				</when>
				<when test="sortByColumn == 'tcGradeLevel'">
					testsessions.tcGradeLevel
				</when>
				<when test="sortByColumn == 'testCollectionContentAreaId'">
					testsessions.testCollectionContentAreaId
				</when>
				<when test="sortByColumn == 'tcContentAreaName'">
					testsessions.tcContentAreaName
				</when>
				<when test="sortByColumn == 'tcContentAreaAbbrName'">
					testsessions.tcContentAreaAbbrName
				</when>
				<when test="sortByColumn == 'assessmentName'">
					testsessions.assessmentName
				</when>
				<when test="sortByColumn == 'programName'">
					testsessions.programName
				</when>
				<when test="sortByColumn == 'highstake'">
					testsessions.highstake
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					testsessions.assessmentProgramName
				</when>
				<when test="sortByColumn == 'attendanceSchoolIdentifier'">
					testsessions.attendanceSchoolIdentifier
				</when>
				<when test="sortByColumn == 'attendanceSchoolName'">
					testsessions.attendanceSchoolName
				</when>
				<when test="sortByColumn == 'createdDate'">
					testsessions.createdDate
				</when>
				<when test="sortByColumn == 'studentsTestStatus'">
					testsessions.studentsTestStatus
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		limit #{limit}
		offset #{offset}
	</select>
	<update id="deactivateLcsStudentsTestsForStudentOnly">
		update lcsstudentstests set activeflag=false, modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
		where studentstestsid in(select id from studentstests st
		where studentid= #{studentId, jdbcType=BIGINT})
	</update>

	<update id="deactivateLcsStudentsTestsForLcsOnly">
		update lcsstudentstests set activeflag= false, modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
		where lcsid= #{lcsId, jdbcType=VARCHAR}
	</update>
	<update id="deactivateLcsTests">
		update lcsstudentstests set activeflag=false, modifieddate = #{modifiedDate}, modifieduser = #{modifiedUser}
		where studentstestsid in(select id from studentstests st
		where studentid= #{studentId, jdbcType=BIGINT} and testsessionid=#{testSessionId, jdbcType=BIGINT})
	</update>

	<!-- Stage -->
	<select id="getUploadScoresStage" resultMap="UploadScoreStageMap">
		select distinct stg.id,stg.name,stg.code
		from scoringassignment sa
		inner join scoringassignmentscorer saco on saco.scoringassignmentid = sa.id
		inner join testsession ts on ts.id = sa.testsessionid
		inner join organizationtreedetail otd on otd.schoolid = ts.attendanceschoolid
		inner join stage stg ON stg.id = ts.stageid
		inner join testcollection tc on tc.id = ts.testcollectionid
		inner join gradecourse gc on ts.gradecourseid = gc.id
		inner join operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.activeflag is true and ( otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP &lt; otw.scoringwindowenddate)
		where (
		otd.schoolid in
		<foreach collection="schoolIds" item="schoolId" open="(" close=")" separator=",">
			#{schoolId,jdbcType=BIGINT}
		</foreach>

		) and tc.contentareaid = #{subjectId}
		<if test="gradeId !=null">
			and ts.gradecourseid = #{gradeId,jdbcType=BIGINT}
		</if>
		order by stg.name
	</select>

	<!-- for scoring stage -->
	<select id="getStageByGradeIdForAssignScorers" resultType="edu.ku.cete.domain.content.Stage">
		select distinct stg.id,stg.name,stg.code
		from testsession ts
		inner join organizationtreedetail otd on otd.schoolid = ts.attendanceschoolid
		inner join stage stg ON stg.id = ts.stageid
		inner join testcollection tc on tc.id = ts.testcollectionid
		inner join operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.activeflag is true
		where otw.assessmentprogramid = #{assessmentProgramId}
		and otd.schoolid in ( #{schoolId} )
		and tc.contentareaid = #{contentAreaId}
		and ts.gradecourseid = #{gradeId}
		and ts.schoolyear = #{currentSchoolYear}
		<if test="assessmentProgramCode != null and assessmentProgramCode == 'KELPA2'">
			and stg.code in ('Spkng', 'Wrtng')
		</if>
		<if test="assessmentProgramCode != null and assessmentProgramCode == 'KAP'">
			and stg.code in ('Prfrm') 
			and	tc.contentareaid in(select id from contentarea where abbreviatedname = 'SS' and activeflag is true)
		</if>
		and (otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP &lt; otw.scoringwindowenddate) order by stg.name
	</select>





	<select id="getAssignScoresTestSessions" resultType="edu.ku.cete.domain.TestSession">
		select distinct ts.id,ts.name
		from testsession ts
		inner join organizationtreedetail otd on otd.schoolid = ts.attendanceschoolid
		inner join testcollection tc on tc.id = ts.testcollectionid
		inner join stage stg ON stg.id = ts.stageid
		inner join operationaltestwindow otw ON otw.id = ts.operationaltestwindowid and otw.activeflag is true
		where otw.assessmentprogramid = #{assessmentProgramId}
		and otd.schoolid in ( #{schoolId} )
		<if test="stageId != null">
			and ts.stageid = #{stageId}
		</if>
		and tc.contentareaid = #{subjectId}
		and ts.gradecourseid = #{gradeId}
		and ts.schoolyear = #{currentSchoolYear}
		<if test="assessmentProgramCode != null and assessmentProgramCode == 'KELPA2'">
			and stg.code in ('Spkng', 'Wrtng')
		</if>
		<if test="assessmentProgramCode != null and assessmentProgramCode == 'KAP'">
			and stg.code in ('Prfrm') 
			and	tc.contentareaid in(select id from contentarea where abbreviatedname = 'SS' and activeflag is true)
		</if>
		and (otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP &lt; otw.scoringwindowenddate) order by ts.name
	</select>
	<select id="getUploadScoresTestSessions" resultMap="BaseResultMap">
		select ts.id as id, ts.rosterid as rosterid, ts.testid as testid, ts.name as name, ts.status as status, ts.source as source,
		ts.testcollectionid as testcollectionid, ts.activeflag as activeflag, ts.attendanceschoolid as attendanceschoolid, ts.operationaltestwindowid as operationaltestwindowid,
		ts.testtypeid as testtypeid, ts.gradecourseid as gradecourseid, ts.stageid as stageid, ts.testpanelid as testpanelid
		from testsession ts
		inner join scoringassignment sa ON ts.id = sa.testsessionid and sa.activeflag is true
		inner join scoringassignmentscorer saco on saco.scoringassignmentid = sa.id and saco.activeflag is true
		inner join organizationtreedetail otd on otd.schoolid = ts.attendanceschoolid
		inner join testcollection AS tc ON tc.id = ts.testcollectionid
		inner join GradeCourse tcGc on ts.gradeCourseId = tcGc.id and tcGc.activeflag is true
		inner join operationaltestwindow otw on otw.id = ts.operationaltestwindowid and otw.activeflag is true
		where otw.assessmentprogramid =
		#{assessmentProgramId,jdbcType=BIGINT}
		and tc.contentareaid = #{subjectId,jdbcType=BIGINT}
		and (otw.scoringwindowenddate is null OR CURRENT_TIMESTAMP &lt; otw.scoringwindowenddate)
		and ts.activeflag is true
		<if test="gradeId != null ">
			and ts.gradecourseid = #{gradeId}
		</if>
		and otd.schoolid in
		<foreach collection="schoolIds" item="schoolId" open="(" close=")" separator=",">
			#{schoolId,jdbcType=BIGINT}
		</foreach>
		<if test="stageId != null">
			and ts.stageid = #{stageId,jdbcType=BIGINT}
		</if>
		<if test="isScoreAllTest != null and isScoreAllTest == false">
			and saco.scorerid = #{scorerId,jdbcType=BIGINT}
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear,jdbcType=BIGINT}
		</if>
		group by ts.id, ts.name,ts.createddate,
		otd.districtname, otd.schoolname
		ORDER BY ts.name,id
	</select>

	<select id="checkIsStudentPresent" resultType="java.lang.Long">
		select id from student where statestudentidentifier =#{stateStudentIdentifier, jdbcType=VARCHAR}
		<if test="contractingOrgId != null">
			and stateid=#{contractingOrgId,jdbcType=BIGINT}
		</if>
		and activeflag=true
	</select>
	<select id="getContentAreaIdByTestSession" resultType="java.lang.Long">
		select contentareaid from testcollection
		where id=(select testcollectionid from studentstests where testsessionid=#{testSessionId, jdbcType=BIGINT}
		and studentid=#{studentId} and activeflag is true)
		and activeflag is true
	</select>
	<update id="resetDLMTestlet">
		select * from dlm_testlet_reset(#{studentId, jdbcType=BIGINT},#{testSessionId, jdbcType=BIGINT},#{contentAreaId, jdbcType=BIGINT},#{userId,jdbcType=BIGINT})
	</update>
	<update id="deleteCurrentTest">

		UPDATE studentsresponses SET activeflag = false, modifieduser = #{userId,jdbcType=BIGINT}, modifieddate = now()
		WHERE studentstestsid IN (SELECT id FROM studentstests WHERE testsessionid =#{testSessionId,jdbcType=BIGINT} and studentid=#{studentId,jdbcType=BIGINT});

		UPDATE studentstestsections SET activeflag = false, modifieduser = #{userId,jdbcType=BIGINT}, modifieddate = now()
		WHERE studentstestid IN (SELECT id FROM studentstests WHERE testsessionid =#{testSessionId,jdbcType=BIGINT} and studentid=#{studentId,jdbcType=BIGINT});

		UPDATE studentstests SET activeflag = false, modifieduser = #{userId,jdbcType=BIGINT}, modifieddate = now()
		WHERE testsessionid =#{testSessionId,jdbcType=BIGINT} and studentid=#{studentId,jdbcType=BIGINT};
		
		UPDATE testsession ts SET activeflag = false, modifieduser = #{userId,jdbcType=BIGINT}, modifieddate = now()
			FROM studentstests st 
			JOIN assessmentstestcollections atc on atc.testcollectionid=st.testcollectionid
			JOIN  assessment a on a.id=atc.assessmentid
			JOIN testingprogram tp on tp.id= a.testingprogramid
			JOIN assessmentprogram ap on tp.assessmentprogramid=ap.id
			WHERE st.testsessionid = ts.id 
				AND (select count(id) from studentstests where testsessionid = #{testSessionId,jdbcType=BIGINT} and activeflag is true) = 1
				AND st.studentid = #{studentId,jdbcType=BIGINT} AND ts.id = #{testSessionId,jdbcType=BIGINT} AND ap.abbreviatedname = 'DLM';
	</update>
	<select id="getAllLcsIds" resultType="java.lang.Long">
		select distinct lcsid from lcsstudentstests where activeflag=true
	</select>

	<select id="getAutoRegisteredTestSessions" resultType="edu.ku.cete.domain.testsession.AutoRegisteredTestSessionDTO">
		WITH stusession AS (
		select distinct testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e ON st.studentid = e.studentid AND st.activeflag IS TRUE
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->
		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE e.id = st.enrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		UNION

		select distinct transferedtestsessionid as testsessionid, o.displayidentifier
		from studentstests st
		JOIN enrollment e ON st.studentid = e.studentid AND st.activeflag IS TRUE
		<!-- Completed TestSessions must now be shown for displayed even if enrollment is inactive AND (e.activeflag IS TRUE OR (e.activeflag IS FALSE AND e.exitwithdrawaldate IS NOT NULL)) -->

		<if test="assessmentProgramAbbr == 'KAP'">
			<!-- KAP doesn't want pending tests -->
			AND st.status != (
			select id
			from category
			where categorycode = 'pending' and categorytypeid = (select id from categorytype where typecode = 'STUDENT_TEST_STATUS')
			)
		</if>
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE e.id = st.transferedenrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		)

		select tsession.*, count(*) OVER() AS totalrecords from (SELECT
		<include refid="Extended_Auto_Registration_Test_Sessions_Column_List" />
		FROM testsession ts
		JOIN TestCollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentsTestCollections atc ON tc.id = atc.testcollectionid
		JOIN assessment a ON atc.assessmentid = a.id
		JOIN testingProgram tp ON a.testingprogramid = tp.id
		JOIN assessmentProgram ap ON tp.assessmentprogramid = ap.id
		INNER JOIN operationaltestwindow otw on otw.id = ts.operationaltestwindowid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN stusession on stusession.testsessionid=ts.id
		LEFT JOIN gradecourse gc ON tc.gradecourseid = gc.id
		LEFT JOIN gradeband gb ON tc.gradebandid = gb.id
		WHERE ts.rosterid IS NULL
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (org.schoolid=#{userOrganizationId, jdbcType=BIGINT} or org.districtid=#{userOrganizationId, jdbcType=BIGINT} or org.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		<if test="contentAreaId != null">
			AND ca.id = #{contentAreaId, jdbcType=BIGINT}
		</if>
		<if test="gradeCourseId != null">
			AND gc.id in (select id from gradecourse where abbreviatedname=(select abbreviatedname from gradecourse where id=(#{gradeCourseId, jdbcType=BIGINT})))
		</if>
		<if test="! showExpired">
			AND ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) OR ts.windowexpirydate &gt;= now())
		</if>
		<if test="currentSchoolYear != null">
			and ts.schoolyear = #{currentSchoolYear, jdbcType=BIGINT}
		</if>
		<include refid="Extended_AR_Where_Clause" />
		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionId'">
					ts.id
				</when>
				<when test="sortByColumn == 'testSessionName'">
					ts.name
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					ap.programname
				</when>
				<when test="sortByColumn == 'organizationDisplayIdentifier'">
					stusession.displayidentifier
				</when>
				<when test="sortByColumn == 'contentAreaName'">
					ca.name
				</when>
				<when test="sortByColumn == 'gradeCourseName'">
					substring(gc.name, '[^0-9]+'), substring(gc.name, '[0-9]+')::int
				</when>
				<when test="sortByColumn == 'gradeBandName'">
					gb.name
				</when>
				<when test="sortByColumn == 'rosterId'">
					ts.rosterid
				</when>
				<when test="sortByColumn == 'effectiveDate'">
					otw.effectivedate
				</when>
				<when test="sortByColumn == 'expiryDate'">
					expiryDate
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		) as tsession

		<if test="limit != null">
			LIMIT #{limit}
		</if>
		<if test="offset != null">
			OFFSET #{offset}
		</if>
	</select>
	<select id="getStudentsIdsByIncompleteTestSessionId" parameterType="java.lang.Long" resultType="java.lang.Long">
		select st.studentid
		from studentstests st
		join testsession tss on tss.testcollectionid = st.testcollectionid and st.testsessionid = tss.id
		and st.activeflag is true and tss.activeflag is true
		join test t on t.id = st.testid and t.activeflag is true
		join enrollment e on e.studentid = st.studentid and currentschoolyear = #{currentSchoolYear} and e.activeflag is true
		join organizationtreedetail otd on otd.schoolid = e.attendanceschoolid
		where tss.id = #{testSessionId}
		and st.status not in (
		select id from category where categorytypeid = (
		select id from categorytype where typecode='STUDENT_TEST_STATUS')
		and categorycode in ('complete'))
	</select>
	<select id="findLCSIdCount" resultType="java.lang.Long">
	select count(lcsid)
	from lcsstudentstests where lcsid=#{lcsId, jdbcType=VARCHAR}
	</select>
	
	<select id="findTestSessionByGradeBandContentArea" resultMap="BaseResultMap">
		/* NO LOAD BALANCE */
		SELECT distinct ts.id, ts.rosterid, ts.testid, ts.name, ts.status, ts.source, ts.testcollectionid, ts.testtypeid, ts.gradebandid, ts.stageid,
			ts.operationaltestwindowid
		FROM testsession ts
		JOIN testcollection tc ON ts.testcollectionid = tc.id
		JOIN contentarea ca ON tc.contentareaid = ca.id
		JOIN gradeband gb ON ts.gradebandid = gb.id and tc.gradebandid = gb.id
		WHERE ts.activeflag is true
		and ca.activeflag is true
		and gb.activeflag is true
		and ca.id = #{contentAreaId,jdbcType=BIGINT}
		and gb.id = #{gradeBandId,jdbcType=BIGINT}
		and ts.attendanceschoolid = #{attendanceSchoolId,jdbcType=BIGINT}		
		and ts.schoolyear = #{currentSchoolYear}
		<if test="stageId != null">
			and ts.stageid = #{stageId}
		</if>
		<if test="sourceType != null">
			and ts.source = #{sourceType}
		</if>
		<if test="operationalTestWindowId != null">
			and ts.operationaltestwindowid = #{operationalTestWindowId}
		</if>		
		<if test="testSessionName != null">
			and ts.name = #{testSessionName,jdbcType=VARCHAR}
		</if>
	</select>
	
	<select id="findPredecessorStageStudentsTestStatus" resultType="String">
		/* NO LOAD BALANCE */
		SELECT distinct ca.categorycode
		FROM testsession ts 
		JOIN testcollection tc ON ts.testcollectionid = tc.id
		JOIN studentstests st on st.testsessionid = ts.id
		JOIN category ca on ca.id = st.status
		WHERE st.activeflag is true
		and ts.activeflag is true
		and tc.gradebandid = ts.gradebandid 
		and tc.contentareaid = #{contentAreaId,jdbcType=BIGINT}
		and ts.gradebandid = #{gradeBandId,jdbcType=BIGINT}
		and ts.schoolyear = #{currentSchoolYear,jdbcType=BIGINT}
		and ts.stageid = #{stageId,jdbcType=BIGINT}
		and ts.source='BATCHAUTO'		
		and ts.operationaltestwindowid= #{operationalTestWindowId,jdbcType=BIGINT}
		and st.studentid = #{studentId,jdbcType=BIGINT} limit 1
	</select>
	
		<select id="getAutoregisteredTestSessionForActiveRostersPltw" resultType="edu.ku.cete.domain.testsession.AutoRegisteredTestSessionDTO">
		WITH stusession AS
		(
		select distinct st.testsessionid, o.displayidentifier, org.schoolid, org.districtid, org.stateid
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		JOIN enrollmentsrosters enrlroster ON enrlroster.enrollmentid = e.id
		JOIN roster r ON r.id = enrlroster.rosterid
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE r.teacherid = #{teacherId} AND r.activeflag IS true
		and e.id = st.enrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		UNION

		select distinct st.transferedtestsessionid as testsessionid, o.displayidentifier, org.schoolid, org.districtid, org.stateid
		from studentstests st
		JOIN enrollment e on st.studentid = e.studentid AND st.activeflag is true
		JOIN enrollmentsrosters enrlroster ON enrlroster.enrollmentid = e.id
		JOIN roster r ON r.id = enrlroster.rosterid
		JOIN Organization o ON e.attendanceschoolid = o.id
		<if test="schoolOrgId == null and userOrganizationId != null">
			JOIN organizationtreedetail org on org.schoolid=e.attendanceschoolid
		</if>
		WHERE r.teacherid = #{teacherId} AND r.activeflag IS true
		and e.id = st.transferedenrollmentid
		<if test="schoolOrgId != null">
			AND e.attendanceschoolid = #{schoolOrgId, jdbcType=BIGINT}
		</if>

		)

		select tsession.*, count(*) OVER() AS totalrecords from (SELECT
		distinct ts.id as testSessionId, ts.name as testSessionName, ap.programname as assessmentProgramName,
		stusession.displayidentifier AS organizationDisplayIdentifier,
		ca.name as contentAreaName, gc.name as gradeCourseName, gb.name as gradeBandName, ts.rosterid as rosterId,
		substring(gc.name, '[^0-9]+'), substring(gc.name, '[0-9]+')::int,
		<if test="! showExpired">
			false as expiredFlag,
		</if>
		<if test="showExpired">
			case when ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) or ts.windowexpirydate&gt;=now()) then false
			else true end as expiredFlag,
		</if>
			
		<if test="includeCompletedTestSession">
			case when(((ts.operationaltestwindowid IS NULL)OR (otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now()))
			AND ((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id and st.activeflag is true)=(select count(st.studentid) from studentstests
			st where st.testsessionid=ts.id and st.activeflag is true and st.status=(select id from category
			where categorytypeid = (select id from categorytype where
			typecode='STUDENT_TEST_STATUS') and categorycode = 'complete'))))then
			true
			else false end as includeCompletedTestSession,
			
		</if>
			case when(((ts.operationaltestwindowid IS NULL) OR (otw.suspendwindow is
			FALSE AND otw.expirydate &gt;= now()))
			AND ((select count(st.studentid) from studentstests st where
			st.testsessionid=ts.id and st.activeflag is true)!=(select count(st.studentid) from
			studentstests st where st.testsessionid=ts.id and st.activeflag is true and st.status=(select
			id
			from category where categorytypeid = (select id from categorytype
			where typecode='STUDENT_TEST_STATUS') and categorycode =
			'complete'))))then true
			else false end as includeInProgressTestSession,
	
		otw.effectivedate as effectiveDate
		, case when (ts.windowexpirydate is not null) then ts.windowexpirydate else otw.expirydate end as expiryDate,
		ts.testpanelid as testPanelId
		FROM testsession ts
		JOIN TestCollection tc ON ts.testcollectionid = tc.id
		JOIN assessmentsTestCollections atc ON tc.id = atc.testcollectionid
		JOIN assessment a ON atc.assessmentid = a.id
		JOIN testingProgram tp ON a.testingprogramid = tp.id
		JOIN assessmentProgram ap ON tp.assessmentprogramid = ap.id
		INNER JOIN operationaltestwindow otw ON otw.id = ts.operationaltestwindowid
		JOIN contentarea ca ON ca.id = tc.contentareaid
		JOIN stusession on stusession.testsessionid=ts.id
		LEFT JOIN gradecourse gc ON tc.gradecourseid = gc.id
		LEFT JOIN gradeband gb ON tc.gradebandid = gb.id
		WHERE ts.activeflag is true
		<if test="assessmentProgramAbbr != 'PLTW'">
			AND ts.rosterid IS NULL
		</if>
		<if test="! showExpired">
			AND ((otw.suspendwindow is FALSE AND otw.expirydate &gt;= now()) OR	ts.windowexpirydate &gt;= now())
		</if>	
		
		<if test="schoolOrgId == null and userOrganizationId != null">
			AND (stusession.schoolid=#{userOrganizationId, jdbcType=BIGINT} or stusession.districtid=#{userOrganizationId, jdbcType=BIGINT} or stusession.stateid=#{userOrganizationId, jdbcType=BIGINT})
		</if>
		<if test="assessmentProgramId != null">
			AND ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		</if>
		<if test="testingProgramId != null">
			AND tp.id = #{testingProgramId, jdbcType=BIGINT}
		</if>
		
		<include refid="Extended_AR_Where_Clause" />
		<if test="sortByColumn != null">
			ORDER BY
			<choose>
				<when test="sortByColumn == 'testSessionId'">
					ts.id
				</when>
				<when test="sortByColumn == 'testSessionName'">
					ts.name
				</when>
				<when test="sortByColumn == 'assessmentProgramName'">
					ap.programname
				</when>
				<when test="sortByColumn == 'organizationDisplayIdentifier'">
					stusession.displayidentifier
				</when>
				<when test="sortByColumn == 'contentAreaName'">
					ca.name
				</when>
				<when test="sortByColumn == 'gradeCourseName'">
					substring(gc.name, '^[0-9]+')::bigint
					<choose>
						<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
							DESC
						</when>
						<otherwise>
							ASC
						</otherwise>
					</choose>
					, substring(gc.name, '[^0-9]*$')
				</when>
				<when test="sortByColumn == 'gradeBandName'">
					gb.name
				</when>
				<when test="sortByColumn == 'rosterId'">
					ts.rosterid
				</when>
				<when test="sortByColumn == 'effectiveDate'">
					otw.effectivedate
				</when>
				<when test="sortByColumn == 'expiryDate'">
					ts.windowexpirydate
				</when>
			</choose>
			<choose>
				<when test="sortType != null and (sortType=='desc' or sortType=='DESC')">
					DESC
				</when>
				<otherwise>
					ASC
				</otherwise>
			</choose>
		</if>
		) as tsession		
		where includeInProgressTestSession is true
		<if test="showExpired">
			or expiredFlag is true
		</if>
		
		<if test="includeCompletedTestSession">
			or includeCompletedTestSession is true
		</if>
		<if test="limit != null">
			LIMIT #{limit}
		</if>
		<if test="offset != null">
			OFFSET #{offset}
		</if>
	</select>
</mapper>