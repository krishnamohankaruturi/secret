<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://www.mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="edu.ku.cete.model.TestDao">
	<resultMap id="BaseResultMap" type="edu.ku.cete.domain.content.Test">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="testname" property="testName" jdbcType="VARCHAR" />
		<result column="numitems" property="numItems" jdbcType="INTEGER" />
		<result column="externalid" property="externalId" jdbcType="BIGINT" />
		<result column="createdate" property="createDate" jdbcType="TIMESTAMP" />
		<result column="modifieddate" property="modifiedDate" jdbcType="TIMESTAMP" />
		<result column="directions" property="directions" jdbcType="VARCHAR" />
		<result column="uitypecode" property="uiTypeCode" jdbcType="VARCHAR" />
		<result column="reviewtext" property="reviewText" jdbcType="VARCHAR" />
		<result column="begininstructions" property="beginInstructions"
			jdbcType="VARCHAR" />
		<result column="endinstructions" property="endInstructions"
			jdbcType="VARCHAR" />
		<result column="gradecourseid" property="gradeCourseId"
			jdbcType="BIGINT" />
		<result column="contentareaid" property="contentAreaId"
			jdbcType="BIGINT" />
		<result column="status" property="status" jdbcType="BIGINT" />
		<result column="originationcode" property="originationCode"
			jdbcType="VARCHAR" />
		<result column="qccomplete" property="qcComplete" jdbcType="BOOLEAN" />
		<result column="tutorialflag" property="tutorialFlag" jdbcType="BOOLEAN" />
		<result column="maxscore" property="maxScore" jdbcType="INTEGER" />
		<result column="accessibilityflagcode" property="accessibilityFlagCode"
			jdbcType="VARCHAR" />
		<result column="testinternalname" property="testInternalName"
			jdbcType="VARCHAR" />
		<result column="testcollectionid" property="testCollectionId"
			jdbcType="BIGINT" />

		<result column="testdescription" property="testDescription"
			jdbcType="VARCHAR" />
		<result column="createdby" property="createdBy"
			jdbcType="VARCHAR" />
		<result column="feedbackallowed" property="feedbackAllowed" jdbcType="BOOLEAN" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">and test.${criterion.condition}</when>
								<when test="criterion.singleValue">and test.${criterion.condition}
									#{criterion.value}
								</when>
								<when test="criterion.betweenValue">and test.${criterion.condition}
									#{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and test.${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">#{listItem}</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">and test.${criterion.condition}</when>
								<when test="criterion.singleValue">and test.${criterion.condition}
									#{criterion.value}
								</when>
								<when test="criterion.betweenValue">and test.${criterion.condition}
									#{criterion.value} and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and test.${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">#{listItem}</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		test.id, test.testname, test.numitems, test.qccomplete
	</sql>
	<sql id="Expanded_Column_List">test.id, asstTc.assessmentid as "assessmentId", 'none' as
		"subjectId",
		'noGrade' as "gradeId", test.testname as "testName",
		test.numitems as "numItems", a.id as "assessment.id",
		tp.assessmentprogramid as
		"assessment.assessmentProgramId",
		a.assessmentname as "assessment.assessmentName",
		'none' as
		"subject.id", 'none' as "subject.categoryName", 'none' as
		"subject.categoryCode",
		'none' as "subject.categoryDescription", 'none'
		as "subject.categoryTypeId",
		'none' as "grade.id", 'none' as
		"grade.categoryName", 'none' as
		"grade.categoryCode",
		'none' as
		"grade.categoryDescription", 'none' as "grade.categoryTypeId"
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="edu.ku.cete.domain.content.TestExample">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		select
		<if test="distinct">distinct</if>
		<include refid="Base_Column_List" />
		from public.test
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">order by ${orderByClause}</if>
	</select>
	<select id="selectByExampleAndAssessmentProgram" resultType="edu.ku.cete.domain.content.Test"
		parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		select
		<if test="distinct">distinct</if>
		<include refid="Expanded_Column_List" />
		from test,testcollectionstests tct, assessmentstestcollections asstTc,
		assessment as a,
		testingprogram tp
		<if test="example != null">
			<include refid="Example_Where_Clause" />
			and
		</if>
		<if test="example == null">where</if>
		test.id = tct.testid
		and tct.testCollectionId = asstTc.testCollectionId
		and asstTc.assessmentid = a.id
		and a.testingprogramid = tp.id
		and
		tp.assessmentprogramid = #{assessmentProgramId}
		<if test="orderByClause != null">order by ${orderByClause}</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Long">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		select
		<include refid="Base_Column_List" />
		from public.test
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		delete from public.test
		where id = #{id,jdbcType=BIGINT}
	</delete>
	<select id="softDeleteByPrimaryKey" parameterType="java.lang.Long">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		update public.test
		set activeflag=false
		where id = #{id,jdbcType=BIGINT}
	</select>
	<delete id="deleteByExample" parameterType="edu.ku.cete.domain.content.TestExample">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		delete from public.test
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="edu.ku.cete.domain.content.Test"
		useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		insert into public.test (testname, numitems
		)
		values
		(#{testName,jdbcType=VARCHAR},
		#{numItems,jdbcType=INTEGER}
		)
	</insert>
	<insert id="insertInterim" parameterType="edu.ku.cete.domain.content.Test"
		useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		insert into public.test (is_interim_test,testname,
		numitems,originationcode,uitypecode,status,
		gradecourseid,contentareaid,createdate,modifieddate,createduser,modifieduser,qccomplete,testspecificationid)
		values
		(#{isInterimTest,jdbcType=BOOLEAN},#{testName,jdbcType=VARCHAR},
		#{numItems,jdbcType=INTEGER},#{originationCode,jdbcType=VARCHAR},#{uiTypeCode,jdbcType=VARCHAR},
		#{status,jdbcType=BIGINT},#{gradeCourseId,jdbcType=BIGINT},#{contentAreaId,jdbcType=BIGINT},#{createdDate,jdbcType=TIMESTAMP},
		#{modifiedDate,jdbcType=TIMESTAMP},#{createdUser,jdbcType=INTEGER},#{modifiedUser,jdbcType=INTEGER},#{qcComplete,jdbcType=BOOLEAN},
		(select id from testspecification where specificationname ilike 'Instructional-Interim' and activeflag is true limit 1)
		)
	</insert>
	<insert id="insertSelective" parameterType="edu.ku.cete.domain.content.Test"
		useGeneratedKeys="true" keyColumn="id" keyProperty="id">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		insert into public.test
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="assessmentid != null">assessmentid,</if>
			<if test="subjectid != null">subjectid,</if>
			<if test="gradeid != null">gradeid,</if>
			<if test="testname != null">testname,</if>
			<if test="numitems != null">numitems,</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="assessmentid != null">#{assessmentid,jdbcType=BIGINT},</if>
			<if test="subjectid != null">#{subjectid,jdbcType=BIGINT},</if>
			<if test="gradeid != null">#{gradeid,jdbcType=BIGINT},</if>
			<if test="testname != null">#{testname,jdbcType=VARCHAR},</if>
			<if test="numitems != null">#{numitems,jdbcType=INTEGER},</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="edu.ku.cete.domain.content.TestExample"
		resultType="java.lang.Integer">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		select count(*) from public.test
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		update public.test
		<set>
			<if test="record.id != null">id = #{record.id,jdbcType=BIGINT},</if>
			<if test="record.assessmentid != null">assessmentid = #{record.assessmentid,jdbcType=BIGINT},
			</if>
			<if test="record.subjectid != null">subjectid = #{record.subjectid,jdbcType=BIGINT},</if>
			<if test="record.gradeid != null">gradeid = #{record.gradeid,jdbcType=BIGINT},</if>
			<if test="record.testname != null">testname = #{record.testname,jdbcType=VARCHAR},</if>
			<if test="record.numitems != null">numitems = #{record.numitems,jdbcType=INTEGER},</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		update public.test
		set id = #{record.id,jdbcType=BIGINT},
		assessmentid =
		#{record.assessmentid,jdbcType=BIGINT},
		subjectid =
		#{record.subjectid,jdbcType=BIGINT},
		gradeid =
		#{record.gradeid,jdbcType=BIGINT},
		testname =
		#{record.testname,jdbcType=VARCHAR},
		numitems =
		#{record.numitems,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="edu.ku.cete.domain.content.Test">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		update public.test
		<set>
			<if test="assessmentId != 0">assessmentid = #{assessmentId,jdbcType=BIGINT},</if>
			<if test="subjectId != 0">subjectid = #{subjectId,jdbcType=BIGINT},</if>
			<if test="gradeId != 0">gradeid = #{gradeId,jdbcType=BIGINT},</if>
			<if test="testName != null">testname = #{testName,jdbcType=VARCHAR},</if>
			<if test="numItems != 0">numitems = #{numItems,jdbcType=INTEGER},</if>
			<if test="qcComplete != null">qccomplete = #{qcComplete,jdbcType=BOOLEAN},</if>
			<if test="tutorialFlag != null">tutorialFlag = #{tutorialFlag,jdbcType=BOOLEAN},</if>
		</set>
		where id = #{id,jdbcType=BIGINT}
	</update>
	<update id="updateByPrimaryKey" parameterType="edu.ku.cete.domain.content.Test">
		<!-- WARNING - @mbggenerated This element is automatically generated by 
			MyBatis Generator, do not modify. This element was generated on Fri Jun 22 
			10:27:08 CDT 2012. -->
		update public.test
		set assessmentid = #{assessmentid,jdbcType=BIGINT},
		subjectid = #{subjectid,jdbcType=BIGINT},
		gradeid =
		#{gradeid,jdbcType=BIGINT},
		testname = #{testname,jdbcType=VARCHAR},
		numitems = #{numitems,jdbcType=INTEGER}
		where id =
		#{id,jdbcType=BIGINT}
	</update>
	<update id="publishRepublishingTest" parameterType="long"
		statementType="CALLABLE">{ call
		publish_republishing_test(#{newTestId,jdbcType=BIGINT,mode=IN})
		}
	</update>
	<sql id="select">id, testname, numitems, externalid, createdate,
		modifieddate,
		originationcode, directions, uitypecode, reviewtext,
		begininstructions,
		endinstructions, status, gradecourseid,
		contentareaid, createduser,
		activeflag, modifieduser,
		testformatcode
	</sql>
	<sql id="selectRel">t.id, t.assessmentid as "assessmentId", t.subjectid as
		"subjectId",
		t.gradeid as "gradeId", t.testname as "testName",
		t.numitems as
		"numItems", a.id as "assessment.id",
		a.assessmentprogramid as
		"assessment.assessmentProgramId",
		a.assessmentname as
		"assessment.assessmentName",
		ca.id as "subject.id",
		ca.categoryname as "subject.categoryName",
		ca.categorycode as
		"subject.categoryCode", ca.categorydescription as
		"subject.categoryDescription", ca.categorytypeid as
		"subject.categoryTypeId",
		ca2.id as "grade.id", ca2.categoryname as
		"grade.categoryName",
		ca2.categorycode as "grade.categoryCode",
		ca2.categorydescription as
		"grade.categoryDescription",
		ca2.categorytypeid as
		"grade.categoryTypeId"
	</sql>
	<select id="findById" resultType="edu.ku.cete.domain.content.Test"
		parameterType="long">
		Select
		<include refid="select" />
		FROM test
		WHERE id = #{testId}
	</select>
	<select id="findByKeyword" resultType="edu.ku.cete.domain.content.Test"
		parameterType="map">
		Select
		<include refid="selectRel" />
		FROM test as t, assessment as a, category as ca, category as ca2
		WHERE
		t.assessmentid = a.id
		AND t.subjectid = ca.id
		AND t.gradeid = ca2.id
		AND
		a.assessmentprogramid = #{assessmentProgramId}
		AND t.testname ILIKE
		#{keyword}
	</select>
	<select id="findByTestCollectionAndStatus" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		, taf.accessibilityflagcode
		from test join testcollectionstests tct on
		test.id = tct.testid
		left join testaccessibilityflag taf on test.id =
		taf.testid
		where tct.testcollectionid = #{testCollectionId}
		and
		test.status=#{testStatusId} and test.qccomplete is true
		and
		test.activeflag is true
	</select>
	<select id="findByTestCollectionAndStatusAndQC" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		, taf.accessibilityflagcode
		from test test
		join testcollectionstests tct
		on test.id = tct.testid
		left join testaccessibilityflag taf on test.id
		= taf.testid
		where tct.testcollectionid = #{testCollectionId}
		and
		test.status=#{testStatusId}
		<if test="qcComplete != null">and test.qccomplete = #{qcComplete}</if>
		and test.activeflag is true
	</select>
	<select id="findByTestAndStatus" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from test join testcollectionstests tct on test.id = tct.testid
		where
		tct.testid = #{testId}
		and test.status=#{testStatusId}
	</select>
	<select id="getAll" resultType="edu.ku.cete.domain.content.Test">
		Select
		<include refid="select" />
		FROM test
	</select>
	<select id="getTestTypeName" parameterType="String" resultType="String">Select
		testtypename FROM testtype where testtypecode = #{testTypeCode}
	</select>
	<select id="findQCTestsByTestCollectionAndStatus" resultMap="BaseResultMap"
		parameterType="map">
		SELECT
		<include refid="Base_Column_List" />
		<if test="accessibilityFlagCode != null">, taf.accessibilityflagcode</if>
		FROM test JOIN testcollectionstests tct ON test.id = tct.testid
		JOIN
		category c ON test.varianttypeid = c.id
		<if test="accessibilityFlagCode != null">JOIN testaccessibilityflag taf ON test.id = taf.testid
		</if>
		WHERE tct.testcollectionid = #{testCollectionId}
		AND
		test.status=#{testStatusId}
		AND test.qccomplete = true
		<if test="accessibleForm != null">AND test.accessibleform = #{accessibleForm}</if>
		<if test="accessibleForm == null">AND (test.accessibleform = false or test.accessibleform is
			null)
		</if>
		<!-- <if test="accessibilityFlagCode != null" > AND taf.accessibilityflagcode 
			= #{accessibilityFlagCode} </if> -->
	</select>
	<select id="findQCTestsByTestCollectionAndStatusAndAccFlags"
		resultMap="BaseResultMap" parameterType="map">
		SELECT
		<include refid="Base_Column_List" />
		FROM test
		JOIN testcollectionstests tct ON test.id = tct.testid
		WHERE
		tct.testcollectionid = #{testCollectionId}
		<if
			test="accessibilityFlagCode != null and  accessibilityFlagCounter &gt; 0">
			AND #{accessibilityFlagCounter} =
			(SELECT count(DISTINCT
			accessibilityflagcode)
			FROM testaccessibilityflag
			WHERE
			accessibilityflagcode IN
			<foreach collection="accessibilityFlagCode" item="accessibilityFlag"
				open="(" close=")" separator=",">#{accessibilityFlag}</foreach>
			AND testid=test.id)
		</if>
		AND test.status=#{testStatusId}
		AND test.qccomplete = true
		<if test="accessibleForm != null">AND test.accessibleform = #{accessibleForm}</if>
		<!-- <if test="accessibleForm == null" > AND (test.accessibleform = false 
			or test.accessibleform is null) </if> -->
	</select>
	<select id="findQCTestsAccFlagsByTestCollectionAndStatus"
		resultMap="BaseResultMap">
		SELECT distinct test.id, test.testname, test.numitems,
		test.qccomplete, taf.accessibilityflagcode,test.accessibleform
		FROM
		test
		JOIN testcollectionstests tct ON test.id = tct.testid
		left join
		testaccessibilityflag taf on taf.testid = test.id
		join testsection ts
		on ts.testid = tct.testid
		join testsectionstaskvariants tstv on
		tstv.testsectionid = ts.id
		left join taskvariantcontentframeworkdetail
		tvcfd on tvcfd.taskvariantid =
		tstv.taskvariantid
		left join
		contentframeworkdetail cfd on cfd.id =
		tvcfd.contentframeworkdetailid
		and cfd.activeflag=true
		WHERE tct.testcollectionid =
		#{testCollectionId} and test.activeflag=true
		AND
		test.status=#{testStatusId} AND test.testspecificationid =
		#{testSpecificationId,jdbcType=BIGINT}
		AND cfd.contentcode in
		<foreach close=")" collection="eElement" item="eElementItem"
			open="(" separator=",">#{eElementItem}</foreach>
		AND test.qccomplete = true
		order by accessibilityflagcode
	</select>
	<select id="findProfessionalDevelopmentTests" resultMap="BaseResultMap">
		SELECT distinct
		t.id,t.testname,tct.testCollectionId,t.maxscore
		FROM test t
		join
		category c on t.status = c.id
		join testcollectionstests tct on t.id =
		tct.testid
		join assessmentstestcollections asstTc on
		tct.testCollectionId =
		asstTc.testCollectionId
		join assessment a on
		asstTc.assessmentid = a.id
		join testingprogram tp on a.testingprogramid
		= tp.id
		join orgassessmentprogram oap on oap.assessmentprogramid =
		tp.assessmentprogramid and oap.activeflag is true
		WHERE a.testingprogramid in (select id from
		testingprogram where
		programabbr = #{testingProgramCode})
		AND
		c.categorycode = 'DEPLOYED' AND t.activeflag IS TRUE AND
		t.tutorialflag IS NOT TRUE
		AND oap.organizationid = (select id from
		organization_parent(#{organizationId}) where contractingorganization
		is true union
		select id from organization where id=#{organizationId}
		and
		contractingorganization is true)
	</select>
	<select id="findProfessionalDevelopmentTutorials" resultMap="BaseResultMap">
		SELECT distinct
		t.id,t.testname,tct.testCollectionId,t.maxscore
		FROM test t
		join
		category c on t.status = c.id
		join testcollectionstests tct on t.id =
		tct.testid
		join assessmentstestcollections asstTc on
		tct.testCollectionId =
		asstTc.testCollectionId
		join assessment a on
		asstTc.assessmentid = a.id
		join testingprogram tp on a.testingprogramid
		= tp.id
		join orgassessmentprogram oap on oap.assessmentprogramid =
		tp.assessmentprogramid and oap.activeflag is true
		WHERE a.testingprogramid in (select id from
		testingprogram where
		programabbr = #{testingProgramCode})
		AND
		c.categorycode = 'DEPLOYED' AND t.activeflag IS TRUE AND
		t.tutorialflag IS TRUE
		AND oap.organizationid = (select id from
		organization_parent(#{organizationId}) where contractingorganization
		is true union
		select id from organization where id=#{organizationId}
		and
		contractingorganization is true)
	</select>
	<select id="findByTestCollectionAndStatusByAccessibleForm"
		resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from test join testcollectionstests tct on test.id = tct.testid
		where
		tct.testcollectionid = #{testCollectionId}
		and
		test.status=#{testStatusId}
		<if test="accessibleForm != null">and test.accessibleform = #{accessibleForm}</if>
		<if test="accessibleForm == null">and (test.accessibleform = false or test.accessibleform is
			null)
		</if>
	</select>
	<select id="getAllIds" resultType="java.lang.Long">Select
		distinct id
		FROM test
	</select>
	<update id="updateQCComplete">
		update public.test
		set qccomplete = true, modifieduser =
		#{userId,jdbcType=BIGINT},
		modifieddate = now()
		where id in
		<foreach collection="testIds" item="testId" open="(" close=")"
			separator=",">#{testId}</foreach>
	</update>
	<update id="removeQCComplete">
		update public.test
		set qccomplete = false, modifieduser =
		#{userId,jdbcType=BIGINT},
		modifieddate = now()
		where id in
		<foreach collection="testIds" item="testId" open="(" close=")"
			separator=",">#{testId}</foreach>
	</update>
	<select id="getActiveTestByExternalIdGradeIdContentIdAssessmentId" resultMap="BaseResultMap">
		select t.*
		from test t
		join testcollectionstests tct on tct.testid = t.id
		join testcollection tc on tc.id = tct.testcollectionid
		join assessmentstestcollections atc on atc.testcollectionid = tct.testcollectionid
		join assessment a on a.id = atc.assessmentid
		join testingprogram tp on tp.id = a.testingprogramid
		<if test="testingProgramName != null and testingProgramName == 'Interim'">
			join testspecstatementofpurpose tstop on t.testspecificationid=tstop.testspecificationid and tstop.activeflag is true
			join category ct on ct.id=tstop.statementofpurposeid and ct.categorycode='PRDCTN'
		</if>
		where t.externalid = #{testId,jdbcType=BIGINT}
		and 
			case when tc.gradebandid is not null then
				tc.gradebandid in (
					select gbgc.gradebandid
					from gradecourse gc
					join gradebandgradecourse gbgc on gc.id = gbgc.gradecourseid
					where gc.abbreviatedname = #{gradeCourseAbbreviatedName,jdbcType=VARCHAR}
				) 
			else
				tc.gradecourseid in (
					select id
					from gradecourse
					where abbreviatedname = #{gradeCourseAbbreviatedName,jdbcType=VARCHAR}
				)
			end
		<if test="contentAreaId != null">and tc.contentareaid = #{contentAreaId,jdbcType=BIGINT}</if>
		and tp.assessmentprogramid = #{assessmentId,jdbcType=BIGINT}
		<if test="testingProgramName != null">
			and	tp.programname= #{testingProgramName,jdbcType=VARCHAR}
		</if>
		
		and t.activeflag = true
	</select>
	<select id="getCountOfTestCollectionsWithPerformanceTests"
		resultType="java.lang.Integer" parameterType="long">SELECT count(tc.id)
		from
		test t
		JOIN testcollectionstests tct on tct.testid = t.id
		JOIN
		testcollection tc on tc.id = tct.testcollectionid
		JOIN stage stage ON
		stage.id = tc.stageid
		WHERE stage.code = 'Prfrm'
		and t.externalid =
		#{testId,jdbcType=BIGINT}
	</select>
	<resultMap type="edu.ku.cete.domain.report.StudentReportTestResponses"
		id="studentReportTestResponsesMap">
		<id property="studentsTestsId" column="studentstestsid" />
		<result column="testid" property="testId" />
		<result column="sortorder" property="sortOrder" />
		<result column="stagecode" property="stageCode" />
		<result property="testExternalId" column="testexternalid" />
		<result property="responsestatus" column="responseStatus" />
		<result property="studentsTestStatus" column="studentstestsstatus" />
		<result property="enrollmentId" column="enrollmentid" />
		<result property="studentsTestStatus" column="studentsteststatus" />
		<result property="specialCircumstanceId" column="specialcircumstanceid" />
		<result property="scCodeStatus" column="sccodestatus" />
		<result property="ksdeRestricted" column="ksderestricted" />
		<result property="reportScore" column="reportScore" />
		<collection column="studentsTestsId" javaType="ArrayList"
			ofType="edu.ku.cete.domain.StudentsResponses" property="studentResponses">
			<result property="foilId" column="foilid" jdbcType="BIGINT" />
			<result property="response" column="response" jdbcType="VARCHAR" />
			<result property="score" column="score" />
			<result property="manualScore" column="manualscore" />
			<result property="nonScoringReasonId" column="nonscorereason" />
			<result property="studentsTestStatus" column="studentstestsstatus" />
			<result property="sectionStatus" column="sectionstatus" />
			<result property="studentsTestsId" column="studentstestsid" />
			<result property="studentsTestSectionsId" column="studentstestsectionsid" />
			<result property="specialCircumstanceId" column="specialcircumstanceid" />
			<result column="taskvariantid" property="taskVariantId"
				jdbcType="BIGINT" />
			<result column="taskvariantexternalid" property="taskVariantExternalId"
				jdbcType="BIGINT" />
			<result column="scoringneeded" property="scoringNeeded"
				jdbcType="BIT" />
			<result column="sectionorder" property="sectionOrder" />
			<result column="taskvariantposition" property="taskVariantPosition" />
		</collection>
	</resultMap>
	
	<resultMap type="edu.ku.cete.domain.report.StudentReportTestResponses"
		id="kelpaStudentReportTestResponsesMap">
		<id property="studentsTestsId" column="studentstestsid" />
		<result column="testid" property="testId" />
		<result column="sortorder" property="sortOrder" />
		<result column="stagecode" property="stageCode" />
		<result property="testExternalId" column="testexternalid" />
		<result property="responsestatus" column="responseStatus" />
		<result property="studentsTestStatus" column="studentstestsstatus" />
		<result property="enrollmentId" column="enrollmentid" />
		<result property="studentsTestStatus" column="studentsteststatus" />
		<result property="specialCircumstanceId" column="specialcircumstanceid" />
		<result property="scCodeStatus" column="sccodestatus" />
		<result property="ksdeRestricted" column="ksderestricted" />
		<result property="reportScore" column="reportScore" />
		<collection column="studentsTestsId" javaType="ArrayList"
			ofType="edu.ku.cete.domain.StudentsResponses" property="studentResponses">
			<result property="score" column="score" />
			<result property="ccqScore" column="ccqscore" />
			<result property="ccqNonScoringReason" column="nonscoringreason" />
			<result property="studentsTestStatus" column="studentstestsstatus" />
			<result property="sectionStatus" column="sectionstatus" />
			<result property="studentsTestsId" column="studentstestsid" />
			<result property="studentsTestSectionsId" column="studentstestsectionsid" />
			<result property="specialCircumstanceId" column="specialcircumstanceid" />
			<result column="taskvariantid" property="taskVariantId"
				jdbcType="BIGINT" />
			<result column="taskvariantexternalid" property="taskVariantExternalId"
				jdbcType="BIGINT" />
			<result column="scoringneeded" property="scoringNeeded"
				jdbcType="BIT" />
			<result column="sectionorder" property="sectionOrder" />
			<result column="clusterscoring" property="clusterScoring" jdbcType="BIT" />
			<result column="testletid" property="testletId" jdbcType="BIGINT" />
		</collection>
	</resultMap>
	
	<select id="getKelpaTestsScoreByStudentIdExternalTestIds" resultMap="kelpaStudentReportTestResponsesMap">
		/*NO LOAD BALANCE*/
		select distinct on (sts.id, tstv.testsectionid, tstv.taskvariantid) 
			sts.studentid AS studentid, sts.testid AS testid, t.externalid AS testexternalid, sts.id AS studentstestsid,
			tv.externalid AS taskvariantexternalid, tv.id AS taskvariantid, str.score,
			stscore.nonscorereason as nonscoringreason, stscore.score as ccqscore, tv.scoringneeded,
			tstv.testletid, tv.clusterscoring,
			ssc.specialcircumstanceid,
			ssc.status as sccodestatus,
			stsc.requireconfirmation as ksderestricted,
			stsc.reportscore,
			stg.code as stagecode, stg.sortorder,
			sts.status as studentstestsstatus,
			stsec.statusid as sectionstatus,
			tsec.sectionorder,
			str.studentstestsectionsid, sts.enrollmentid,
			(CASE
			WHEN sth.acteddate is null THEN sts.modifieddate
			ELSE sth.acteddate
			END) as datestudentstestsmodified
		FROM studentstests sts
		JOIN studentassessmentprogram sap ON sap.studentid = sts.studentid and sap.assessmentprogramid = 47
		JOIN testsession ts ON ts.id = sts.testsessionid
		JOIN testcollection tc ON tc.id = ts.testcollectionid
		JOIN stage stg ON stg.id = tc.stageid and stg.code in ('Wrtng', 'Spkng', 'Lstng', 'Rdng')
		JOIN test t ON t.id = sts.testid
		JOIN testsection tsec on t.id = tsec.testid
		JOIN testsectionstaskvariants tstv ON tsec.id = tstv.testsectionid
		JOIN taskvariant tv ON tstv.taskvariantid = tv.id
		JOIN studentstestsections stsec ON stsec.studentstestid = sts.id
		LEFT JOIN studentsresponses str
		  ON str.studentstestsid = sts.id
		  AND str.studentstestsectionsid = stsec.id
		  AND str.taskvariantid = tv.id
		  AND str.activeflag = true
		LEFT JOIN studentspecialcircumstance ssc ON	ssc.studenttestid = sts.id AND ssc.activeflag is true
		AND	ssc.status = ANY(ARRAY
			<foreach close="]" collection="specialCircumtanceStatusIds" item="scStatusId" open="[" separator=",">
				#{scStatusId}
			</foreach>
		)
		LEFT JOIN specialcircumstance sc ON sc.id = ssc.specialcircumstanceid AND sc.activeflag is true
		LEFT JOIN statespecialcircumstance stsc ON stsc.specialcircumstanceid = sc.id AND stsc.activeflag is true AND stsc.stateid = #{stateId,jdbcType=BIGINT}
		LEFT JOIN studentstestshistory sth ON sts.id = sth.studentstestsid AND sth.action = 'END TEST SESSION'
		<!-- these were the 2017 scoring joins
		LEFT JOIN scoringassignmentstudent sas ON sas.studentstestsid = sts.id and sas.activeflag
		LEFT JOIN ccqscore ccqs ON ccqs.scoringassignmentstudentid = sas.id and ccqs.activeflag
		LEFT JOIN ccqscoreitem ccqi ON ccqi.ccqscoreid = ccqs.id AND tv.id = ccqi.taskvariantid and ccqi.activeflag
		-->
		<!-- this is the 2018 scoring join -->
		LEFT JOIN studentstestscore stscore ON sts.id = stscore.studenttestid AND tv.id = stscore.taskvariantid AND stscore.activeflag IS TRUE
		WHERE sts.studentid = #{studentId,jdbcType=BIGINT}
		AND sts.id in (
			SELECT id FROM (
				SELECT
					st.id, ts.stageid as stageid, st.totalrawscore as rawscore, 
					row_number() OVER (PARTITION BY stageid order by totalrawscore desc) as rank
				FROM studentstests st
				JOIN testsession ts ON ts.id = st.testsessionid AND ts.activeflag is true
				JOIN stage stg ON stg.id = ts.stageid
				JOIN test t ON t.id = st.testid
				WHERE st.studentid = #{studentId,jdbcType=BIGINT}
					AND	ts.source = 'BATCHAUTO'
					AND st.activeflag is true 
					AND st.status = ANY(ARRAY
					<foreach close="]" collection="testsStatusIds" item="testsStatusId"
						open="[" separator=",">
						#{testsStatusId}
					</foreach>
					)
					AND st.enrollmentid = ANY(ARRAY
					<foreach close="]" collection="enrollmentIds" item="enrollmentId"
						open="[" separator=",">
						#{enrollmentId,jdbcType=BIGINT}
					</foreach>
					)
					AND t.externalid = ANY(Array
					<foreach collection="externalTestIds" item="testId" open="["
						close="]" separator=",">
						#{testId}
					</foreach>
					)
			) result
			WHERE rank = 1
		)
		order by sts.id, tstv.testsectionid, tstv.taskvariantid, stscore.modifieddate desc nulls last
	</select>
	
	<select id="getTestsScoreByStudentIdExternalTestIds" resultMap="studentReportTestResponsesMap">
		/*NO LOAD BALANCE*/
		SELECT DISTINCT sts.studentid AS studentid,
		sts.testid AS testid,
		t.externalid AS testexternalid,
		sts.id AS
		studentstestsid,
		tv.externalid AS taskvariantexternalid,
		tv.id AS
		taskvariantid,
		str.foilid,
		str.response,
		str.score,
		stscore.score as manualscore,
		stscore.nonscorereason,
		ssc.specialcircumstanceid,
		ssc.status as sccodestatus,
		stsc.requireconfirmation as ksderestricted,
		stsc.reportscore,
		stg.code as	stagecode, stg.sortorder,
		sts.status as studentstestsstatus,
		stsec.statusid as sectionstatus,
		tsec.sectionorder,
		tstv.taskvariantposition,
		str.studentstestsectionsid, tv.scoringneeded, sts.enrollmentid,
		(CASE
			WHEN sth.acteddate is null THEN sts.modifieddate
			ELSE sth.acteddate
			END) as datestudentstestsmodified
		FROM studentstests sts
		JOIN testsession ts ON ts.id = sts.testsessionid
		JOIN testcollection tc ON tc.id = ts.testcollectionid
		JOIN stage stg ON stg.id = tc.stageid
		JOIN test t ON t.id = sts.testid
		JOIN studentstestsections stsec ON stsec.studentstestid = sts.id
		LEFT JOIN studentsresponses str ON str.studentstestsid = sts.id AND	str.studentstestsectionsid = stsec.id AND str.activeflag = true
		LEFT JOIN taskvariant tv ON tv.id = str.taskvariantid
		LEFT JOIN testsectionstaskvariants tstv ON tstv.taskvariantid = tv.id
		LEFT JOIN testsection tsec ON tsec.id =	tstv.testsectionid
		LEFT JOIN studentspecialcircumstance ssc ON	ssc.studenttestid = sts.id AND ssc.activeflag is true 
		AND	ssc.status = ANY(ARRAY
			<foreach close="]" collection="specialCircumtanceStatusIds"
				item="scStatusId" open="[" separator=",">#{scStatusId}</foreach>::BIGINT[]
			)
		LEFT JOIN specialcircumstance sc ON sc.id = ssc.specialcircumstanceid AND sc.activeflag is true
		LEFT JOIN statespecialcircumstance stsc ON stsc.specialcircumstanceid = sc.id AND stsc.activeflag is true AND stsc.stateid = #{stateId,jdbcType=BIGINT}
		LEFT JOIN studentstestshistory sth ON sts.id = sth.studentstestsid AND sth.action = 'END TEST SESSION'
		
		LEFT JOIN scoringassignmentstudent sas ON sas.studentstestsid = sts.id and sas.activeflag is true AND sas.studentid = sts.studentid
		LEFT JOIN studentstestscore stscore ON stscore.studenttestid = sts.id AND str.taskvariantid = stscore.taskvariantid AND stscore.activeflag is true AND sas.kelpascoringstatus = #{scoringStatusCompletedId,jdbcType=BIGINT}
		
		WHERE sts.studentid = #{studentId,jdbcType=BIGINT}
		AND sts.id in(
			SELECT id FROM (
				SELECT st.id, ts.stageid as stageid, st.totalrawscore as rawscore, 
				row_number() OVER (PARTITION BY stageid order by totalrawscore desc) as rank
				FROM studentstests st
				JOIN testsession ts ON ts.id = st.testsessionid AND ts.activeflag is true
				JOIN stage stg ON stg.id = ts.stageid
				JOIN test t ON t.id = st.testid
				WHERE st.studentid = #{studentId,jdbcType=BIGINT}
					AND	ts.source = 'BATCHAUTO'
					AND st.activeflag is true 
					AND st.status = ANY(ARRAY
					<foreach close="]" collection="testsStatusIds" item="testsStatusId"
						open="[" separator=",">
						#{testsStatusId}
					</foreach>::BIGINT[]
					)
		
					AND st.enrollmentid = ANY(ARRAY
					<foreach close="]" collection="enrollmentIds" item="enrollmentId"
						open="[" separator=",">
						#{enrollmentId,jdbcType=BIGINT}
					</foreach>::BIGINT[]
					)
					AND t.externalid = ANY(Array
					<foreach collection="externalTestIds" item="testId" open="["
						close="]" separator=",">
						#{testId}
					</foreach>::BIGINT[]
					)
			) result
		WHERE rank = 1

		)

	</select>
	<select id="findLatestByExternalId" resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM test
		WHERE externalid = #{externalId,jdbcType=BIGINT}
		AND
		activeflag = TRUE
		AND qccomplete = TRUE
		ORDER BY id DESC
		LIMIT 1
	</select>
	<select id="mapExternalId" parameterType="java.lang.Long"
		resultType="java.lang.Long">SELECT mappedtestexternalid
		FROM testexternalidmap
		WHERE
		testexternalid = #{externalId,jdbcType=BIGINT}
	</select>
	<select id="getPanelTestsFromThetaValues" resultType="java.lang.Long">
		SELECT DISTINCT TST.ID
			FROM
			STUDENTSTESTS CST
			LEFT OUTER JOIN STUDENTSTESTS PST ON PST.ID = CST.PREVIOUSSTUDENTSTESTID
			INNER JOIN TESTSESSION TS ON TS.ID = CST.TESTSESSIONID
			INNER JOIN STAGE S ON TS.STAGEID = S.PREDECESSORID AND S.ACTIVEFLAG = TRUE
			INNER JOIN TESTPANELSTAGE TPS ON TPS.STAGEID = S.ID AND TPS.ACTIVEFLAG = TRUE
			INNER JOIN TESTPANELSTAGETESTCOLLECTION TPSTC ON TPSTC.TESTPANELSTAGEID = TPS.ID AND TPSTC.ACTIVEFLAG = TRUE
			INNER JOIN TESTPANELSTAGEMAPPING TPSM ON TPSM.TESTPANELSTAGEID = TPS.ID AND TPSM.ACTIVEFLAG = TRUE
			INNER JOIN TEST TST ON (TST.EXTERNALID = TPSM.EXTERNALTESTID1 OR
				TST.EXTERNALID = TPSM.EXTERNALTESTID2 
				OR TST.EXTERNALID = TPSM.EXTERNALTESTID3)
			WHERE
				CST.STUDENTID = #{studentId,jdbcType=BIGINT}
				AND CST.TESTSESSIONID =	#{previousTestSessionId,jdbcType=BIGINT}
				AND (PST.INTERIMTHETA IS NULL AND CST.INTERIMTHETA = INTERIMTHETA1)
				AND TPS.TESTPANELID = #{panelId,jdbcType=BIGINT}
				AND TST.qccomplete = true;
	</select>
	<select id="findThetaBasedTestsByTestCollectionAndStatusAndAccFlags"
		resultMap="BaseResultMap">
		SELECT
		<include refid="Base_Column_List" />
		FROM test
		JOIN testcollectionstests tct ON test.id = tct.testid
		WHERE
		tct.testcollectionid = #{testCollectionId}
		<if test="testsBasedOnTheta != null">
			AND test.id IN
			<foreach collection="testsBasedOnTheta" item="testform" open="("
				close=")" separator=",">#{testform,jdbcType=BIGINT }</foreach>
		</if>
		<if
			test="accessibilityFlagCode != null and  accessibilityFlagCounter &gt; 0">
			AND #{accessibilityFlagCounter} =
			(SELECT count(DISTINCT
			accessibilityflagcode)
			FROM testaccessibilityflag
			WHERE
			accessibilityflagcode IN
			<foreach collection="accessibilityFlagCode" item="accessibilityFlag"
				open="(" close=")" separator=",">#{accessibilityFlag}</foreach>
			AND testid=test.id)
		</if>
		AND test.status=#{testStatusId}
		AND test.qccomplete = true
		<if test="accessibleForm != null">AND test.accessibleform = #{accessibleForm}</if>
	</select>
	<select id="findTestsForDLMFixedAssign" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from test join testcollectionstests tct on test.id = tct.testid
		where
		tct.testcollectionid = #{testCollectionId}
		and
		test.status=#{testStatusId} and test.qccomplete is true
		and
		test.activeflag is true
		and test.id not in (select taf.testid from
		testaccessibilityflag taf
		join testcollectionstests tctest on
		tctest.testid = taf.testid
		where tctest.testcollectionid =
		#{testCollectionId})
	</select>
	<select id="getInterimTest" resultMap="BaseResultMap">
select distinct(t.id),t.testname,t.testinternalname,t.numitems,
	t.qccomplete,
	tct.testcollectionid as testcollectionid
	<if test="isInterim == true">,it.description as testdescription,(au.firstname || ' '|| au.surname) as createdby
	</if>
	, CASE WHEN f.feedbackallowed IS TRUE THEN TRUE ELSE FALSE END AS feedbackallowed
	from test t
	INNER JOIN testcollectionstests tct on t.id = tct.testid
	INNER JOIN contentarea ca on t.contentareaid = ca.id
	LEFT JOIN gradecourse gc on t.gradecourseid = gc.id
	INNER JOIN testspecstatementofpurpose tstop on t.testspecificationid=tstop.testspecificationid
	INNER JOIN category ct on ct.id=tstop.statementofpurposeid
	INNER JOIN testcollection tc on tct.testcollectionid=tc.id and tc.activeflag is true
	INNER JOIN operationaltestwindowstestcollections otwtc on otwtc.testcollectionid=tct.testcollectionid
    INNER JOIN operationaltestwindow otw on otw.id=otwtc.operationaltestwindowid and otw.activeflag is true 
    <!-- and otw.suspendwindow is false -->
	<if test="contentCode != null">
		LEFT OUTER JOIN testsection ts on t.id=ts.testid
		LEFT OUTER JOIN testsectionstaskvariants tstv on ts.id=tstv.testsectionid
		LEFT OUTER JOIN
		taskvariantcontentframeworkdetail tvcfd on
		tstv.taskvariantid=tvcfd.taskvariantid
		INNER JOIN contentframeworkdetail cfd
		on
		tvcfd.contentframeworkdetailid=cfd.id
	</if>
	<if test="isInterim == true">
		INNER JOIN interimtest it on it.testtestid=t.id and it.currentschoolyear = #{schoolYear}
		INNER JOIN aartuser au on au.id=it.createduser
		<if test="schoolName != null">
			INNER JOIN organization org on it.organizationid=org.id
		</if>
	</if>
	INNER JOIN assessmentstestcollections atc on atc.testcollectionid=tct.testcollectionid
	INNER JOIN assessment a on a.id=atc.assessmentid
	INNER JOIN testingprogram tp on tp.id=a.testingprogramid
	INNER JOIN assessmentprogram ap on tp.assessmentprogramid=ap.id
	INNER JOIN category c on c.id=t.status
	INNER JOIN categorytype cct on c.categorytypeid = cct.id and
	c.categorycode='DEPLOYED' and cct.typecode='TESTSTATUS'
	
	LEFT OUTER JOIN (SELECT DISTINCT testid, TRUE AS feedbackallowed FROM test t 
		JOIN testsection ts ON ts.testid = t.id 
		JOIN testsectionstaskvariants tstv ON tstv.testsectionid = ts.id 
		JOIN testlet tl ON tl.id = tstv.testletid
		JOIN testletfeedback tfb ON tfb.testletexternalid = tl.externalid
		WHERE 
			tfb.id IS NOT NULL
			AND tfb.assessmentprogramid = #{assessmentProgramId,jdbcType=BIGINT}
			AND tfb.startdate &lt; now() AND tfb.enddate &gt; now())
	f on f.testid = t.id
	
	where
	tstop.activeflag is true and t.qccomplete is true and t.activeflag is true
	and c.activeflag is true and ct.activeflag is true
	and tp.programname ilike 'interim' and ap.id = #{assessmentProgramId,jdbcType=BIGINT}
	and otw.expirydate &gt; now() and otw.effectivedate &lt; now()
	<if test="purpose != null">
	and ct.id=#{purpose,jdbcType=BIGINT}
	</if>
	<if test="gradeCourseId != 0 and gradeCourseId != null">
	and t.gradecourseid = #{gradeCourseId,jdbcType=BIGINT}
	</if>
	<if test="contentAreaId != 0">
	and t.contentareaid = #{contentAreaId,jdbcType=BIGINT}
	</if>
	<if test="isInterim != null">
	and t.is_interim_test = #{isInterim,jdbcType=BOOLEAN}
	</if>
	<if test="contentCode !=null">
	and cfd.activeflag is true
	and cfd.contentcode like #{contentCode,jdbcType=VARCHAR}
	</if>
	<if test="isInterim == true">
		and it.istestcopied is false
		<if test="createdBy != null">
		and (au.firstname||' '||au.surname) ilike #{createdBy,jdbcType=VARCHAR}
		</if>
		<if test="testName != null">
		and t.testname ilike #{testName,jdbcType=VARCHAR}
		</if>
		<if test="schoolName != null">
		and org.organizationname ilike #{schoolName,jdbcType=VARCHAR}
		</if>
		<if test="organizationId != null">
		and it.organizationid in (
		select id from organization_children((SELECT op.id
		from organization_parent(#{organizationId}) op
		inner join organizationtype ot ON op.organizationtypeid=ot.id
		where ot.typecode='DT'
		union
		select o.id from organization o
		inner join organizationtype ot ON o.organizationtypeid=ot.id
		where ot.typecode='DT' and o.id=#{organizationId})) oc
		union select distinct districtid from organizationtreedetail where schoolid=#{organizationId}
        union select o.id from organization o
		inner join organizationtype ot ON o.organizationtypeid=ot.id
		where ot.typecode='DT' and o.id=#{organizationId})
		</if>
	</if>
	order by t.testname
</select>

	<select id="getRosterName" resultType="map" >
		select
		distinct r.id as id,r.coursesectionname as name from roster r
		inner join enrollmentsrosters er on er.rosterid=r.id
		inner join enrollment e on e.id=er.enrollmentid and e.activeflag is true
		inner join student st on e.studentid=st.id 
		inner join studentassessmentprogram sap on sap.studentid = st.id and sap.activeflag is true and sap.assessmentprogramid = #{assessmentProgramId}
		where
		r.teacherid =#{userId,jdbcType=BIGINT}
		and r.attendanceschoolid=#{organizationId,jdbcType=BIGINT}
		and r.activeflag is true
		<if test="currentSchoolYear != null">
		and r.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
		and e.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
		</if>
		and r.statesubjectareaid in(select distinct contentareaid from interimtest where activeflag is true
		<if test="organizationId != null">
            and organizationid = #{organizationId,jdbcType=BIGINT}
        </if>
        <if test="interimTestId != null">
        	and testtestid = #{interimTestId}
        </if>
		)
		order by r.coursesectionname asc
	</select>
	<select id="getRosterNameByUserAndOrgList" resultType="map">
		select
		distinct ro.id as id, ro.coursesectionname as name,UPPER (ro.coursesectionname) as zorro
		from
		enrollment
		enrl
		JOIN student st ON enrl.studentid = st.id and st.activeflag is true and enrl.activeflag is true
		join studentassessmentprogram sap on sap.studentid = st.id and sap.activeflag is true and sap.assessmentprogramid = #{assessmentProgramId}
		JOIN enrollmentsrosters er ON enrl.id =er.enrollmentid and er.activeflag is true
		JOIN roster ro ON ro.id = er.rosterid and ro.activeflag is true
		JOIN Organization attendanceSchool ON attendanceSchool.id = enrl.attendanceschoolid
		where
		<if test="organizationId != null">
			ro.teacherid in(SELECT distinct au.id
				FROM aartuser as au
				join usersorganizations uo on uo.aartuserid=au.id and au.activeflag is true AND uo.activeflag = true
				join userorganizationsgroups uog on uog.userorganizationid=uo.id and uog.activeflag is true
				Join userassessmentprogram uap on au.id=uap.aartuserid AND uap.activeflag is true
				WHERE uap.assessmentprogramid =#{assessmentProgramId}
					AND uo.organizationid in
					(select distinct id from organization_children(#{organizationId})
					union
					select id from organization where id=#{organizationId}))
			and ro.attendanceschoolid in (select distinct id 
				from organization_children(#{organizationId}) 
				union 
				select id from organization where id=#{organizationId})
		</if>		
		<if test="currentSchoolYear != null">
		and ro.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
		and enrl.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
		</if>
		AND ro.statesubjectareaid in(select distinct contentareaid from interimtest where activeflag is true
		<if test="organizationId != null">
            and organizationid in
            (select distinct id from organization_children(#{organizationId})
			union
			select id from organization where id=#{organizationId})
        </if>
		)
		order by zorro asc
	</select>
	<select id="getRosterSubject" resultType="map">SELECT distinct
		coa.name, coa.id
		FROM roster ro
		INNER JOIN contentarea coa
		ON coa.id=
		ro.statesubjectareaid
	</select>
	
	<select id="getSubjectNameByUserAndOrgList" resultType="map">
        SELECT distinct coa.name, coa.id
        from
        enrollment enrl
        JOIN student st ON enrl.studentid = st.id and st.activeflag is true and enrl.activeflag is true
        join studentassessmentprogram sap on sap.studentid = st.id and sap.activeflag is true and sap.assessmentprogramid = #{assessmentProgramId}
        JOIN enrollmentsrosters er ON enrl.id =er.enrollmentid and er.activeflag is true
        JOIN roster ro ON ro.id = er.rosterid and ro.activeflag is true
        JOIN organization attendanceSchool ON attendanceSchool.id = enrl.attendanceschoolid
        INNER JOIN contentarea coa ON coa.id= ro.statesubjectareaid
        where
       <if test="organizationId != null">
	       attendanceSchool.id in
	            (select distinct id from organization_children(#{organizationId})
						union
			select id from organization where id=#{organizationId})
           AND ro.teacherid in(SELECT distinct au.id
				FROM aartuser as au
				join usersorganizations uo on uo.aartuserid=au.id and au.activeflag is true AND uo.activeflag = true
				join userorganizationsgroups uog on uog.userorganizationid=uo.id and uog.activeflag is true
				Join userassessmentprogram uap on au.id=uap.aartuserid AND uap.activeflag is true
				WHERE uap.assessmentprogramid =#{assessmentProgramId}
					AND uo.organizationid in
					(select distinct id from organization_children(#{organizationId})
					union
					select id from organization where id=#{organizationId})
				)
		</if>
        <if test="currentSchoolYear != null">
            and ro.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
            and enrl.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
        </if>
		and coa.id in (select distinct contentareaid from interimtest where activeflag is true
		<if test="organizationId != null">
			and organizationid in 
			(select distinct id from organization_children(#{organizationId})
			union
			select id from organization where id=#{organizationId})
        </if>
		)
        order by coa.name asc
    </select>
	
	<select id="getRosterGrade" resultType="map">
	SELECT distinct gc.id,gc.name
	FROM enrollment enrl
	JOIN Student st ON
	enrl.Studentid = st.id
	inner join studentassessmentprogram sap on sap.studentid = st.id and sap.activeflag is true and sap.assessmentprogramid = #{assessmentProgramId}
	JOIN enrollmentsrosters er ON enrl.id =er.enrollmentid
	JOIN roster ro ON ro.id = er.rosterid
	JOIN Organization attendanceSchool ON attendanceSchool.id = enrl.attendanceschoolid
	LEFT JOIN gradecourse gc ON enrl.currentgradelevel = gc.id
	WHERE
	enrl.activeflag = true AND st.activeflag = true AND gc.course is false
	<if test="organizationId != null">
		AND attendanceSchool.id in
		(select distinct id from organization_children(#{organizationId})
			union
		select id from organization where id=#{organizationId})
	</if>
	<if test="userId!=null">
		AND ro.teacherid=#{userId}
	</if>
	<if test="currentSchoolYear != null">
			and ro.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
			and enrl.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
	</if>
	
	order by gc.name asc
	</select>
	<select id="getStudentinfo" resultType="edu.ku.cete.domain.student.Student">
	SELECT distinct st.id, st.legalfirstname,
	st.legallastname,st.stateid
	from student st
	JOIN studentassessmentprogram sap on sap.studentid = st.id and sap.activeflag is true and sap.assessmentprogramid = #{assessmentProgramId}
	JOIN enrollment enrl ON enrl.studentid = st.id
	JOIN enrollmentsrosters er ON enrl.id =er.enrollmentid
	JOIN roster ro ON
	ro.id = er.rosterid
	JOIN Organization attendanceSchool ON
	attendanceSchool.id = enrl.attendanceschoolid and attendanceSchool.id = ro.attendanceschoolid
	<if test="gradeCourseIds!=null">
		LEFT JOIN gradecourse gc ON gc.id=enrl.currentgradelevel
	</if>
	where
	enrl.activeflag = true
	AND er.activeflag= true
	AND st.activeflag = true
	
	<if test="rosterIds!=null">
	 AND	ro.id= ANY(ARRAY
		<foreach collection="rosterIds" item="rosterId" open="["
			close="]" separator=",">
			#{rosterId}
		</foreach>
		)
	</if>
	<if test="gradeCourseIds!=null">
	AND	gc.id= ANY(ARRAY
		<foreach collection="gradeCourseIds" item="gradeCourseId"
			open="[" close="]" separator=",">
			#{gradeCourseId}
		</foreach>
		)
	</if>
	<if test="organizationIds != null">
		AND attendanceSchool.id = ANY(ARRAY
		<foreach collection="organizationIds" item="UserOrganizationId"
			open="[" close="]" separator=",">
			#{UserOrganizationId}
		</foreach>
		)
	</if>
	<if test="userIds != null">
		AND ro.teacherid = ANY(ARRAY
		<foreach collection="userIds" item="userId"
			open="[" close="]" separator=",">
			#{userId}
		</foreach>
		)
	</if>
	<if test="schoolYear != null">
		AND ro.currentschoolyear= #{schoolYear,jdbcType=BIGINT}
		AND enrl.currentschoolyear= #{schoolYear,jdbcType=BIGINT}
	</if>
	ORDER BY legallastname asc,
	legalfirstname asc
	</select>
	<select id="testCountDetails" resultType="INTEGER">
		SELECT count(distinct st.legalfirstname)
		from enrollment
		enrl
		JOIN
		student st ON
		enrl.studentid = st.id
		JOIN enrollmentsrosters er
		ON
		enrl.id =
		er.enrollmentid
		JOIN roster ro ON ro.id = er.rosterid
		JOIN
		contentarea
		coa ON coa.id =
		ro.statesubjectareaid
		JOIN gradecourse gc ON
		gc.id=
		ro.statecourseid
		where ro.id=#{rosterId,jdbcType=BIGINT}
		or coa.id
		=#{contentAreaId,jdbcType=BIGINT}
		or
		gc.id=#{gradeCourseId,jdbcType=BIGINT}

		<if test="criteria !=null">
			<include refid="Comminication_Message_Where_Clause" />
		</if>
	</select>

	<sql id="Comminication_Message_Where_Clause">
		<if test="criteria.createdDate != null">
			AND to_char(createddate, 'MM/DD/YYYY') ilike
			#{criteria.createdDate}
		</if>
		<if test="criteria.messageTitle != null">
			AND messageTitle ilike #{criteria.messageTitle}
		</if>
	</sql>

	<select id="getStudentinfoInterim" resultType="edu.ku.cete.domain.student.Student">
		SELECT distinct st.legalfirstname,
		st.legallastname,st.stateid
		from
		enrollment enrl
		JOIN student st ON
		enrl.studentid = st.id
		JOIN
		enrollmentsrosters er ON enrl.id =
		er.enrollmentid
		JOIN roster ro ON
		ro.id = er.rosterid
		JOIN contentarea
		coa ON coa.id =
		ro.statesubjectareaid
		JOIN gradecourse gc ON gc.id=
		ro.statecourseid
		where ro.id=#{rosterId,jdbcType=BIGINT}
		or
		coa.id=#{contentAreaId,jdbcType=BIGINT}
		or
		gc.id=#{gradeCourseId,jdbcType=BIGINT}
		<if test="sortByColumn != null and sortByColumn !='invid'">
			ORDER BY
			<choose>

				<when test="sortByColumn == 'legallastname'">legallastname</when>
				<when test="sortByColumn == 'legalfirstname'">legalfirstname</when>
			</choose>
			<if test="sortType=='desc'">
				desc
			</if>
			<if test="sortType=='asc' or sortType==null">
				asc
			</if>
		</if>
		limit #{limit}
		offset #{offset}
	</select>
	<update id="softDeleteById" parameterType="long">
		update public.test
		set
		activeflag= false
		where id = #{id,jdbcType=BIGINT}

	</update>
	<select id="getMiniTestsByInterimTestId" resultType="edu.ku.cete.domain.content.Test">
		Select
		<include refid="select" />
		FROM test
		WHERE id in (select testid from interimtesttest where
		interimtestid=#{interimTestId,jdbcType=BIGINT} and activeflag=true)
	</select>
	<select id="getTestStaus" resultType="java.lang.Long" parameterType="java.lang.Long">
		select status  from test 
		join testcollectionstests tct on test.id = tct.testid
		where tct.testid = #{selectedTestId, jdbcType=BIGINT}
	</select>
	
	<select id="findTestsForDLMResearchSurvey" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from test join testcollectionstests tct on test.id = tct.testid
		where
		tct.testcollectionid = #{testCollectionId}
		and
		test.status=#{testStatusId} and test.qccomplete is true
		and
		test.activeflag is true		
	</select>
	
	<select id="getCountOfTestCollectionsWithCorrectStageTests" resultType="java.lang.Integer">
		SELECT count(tc.id)
		from test t
		JOIN testcollectionstests tct on tct.testid = t.id
		JOIN testcollection tc on tc.id = tct.testcollectionid
		JOIN stage stage ON stage.id = tc.stageid		
		join assessmentstestcollections atc on atc.testcollectionid = tct.testcollectionid
		join assessment a on a.id = atc.assessmentid
		join testingprogram tp on tp.id = a.testingprogramid
		WHERE t.externalid = #{externalTestId}
		and tc.contentareaid = #{contentAreaId}
		and tc.gradecourseid in (select id from gradecourse where abbreviatedname=#{gradeAbbrName})
		and tp.assessmentprogramid = #{assessmentProgramId}
		and stage.code = #{stageCode}
		and tp.programname='Summative'
		and stage.activeflag is true
		and tc.activeflag is true		
		and t.activeflag = true
	</select>
	
	<select id="getTestIdBySchoolYearAndExternalId" resultType="java.lang.Long">
		select st.testid 
		from studentstests st 
		join testsession ts ON st.testsessionid = ts.id 
		JOIN test t on t.id = st.testid		
		where t.externalid = #{externalTestId}
		and ts.schoolyear = #{schoolYear}
		and t.activeflag is true and 
		t.status in (select id from category where categorycode = 'DEPLOYED' and categorytypeid = (select id from categorytype where typecode = 'TESTSTATUS')) 
		limit 1	
	</select>
	
   <select id="getGradesBySubjectsAndOrgList" resultType="edu.ku.cete.domain.content.GradeCourse">
	select max(id) as id,name from gradecourse gc where gc.id in (
	<if test="predictiveStudentScore == true">
		select case when sr.id is null then gc1.id else gc2.id end as id
		from gradecourse gc1
		INNER JOIN enrollment e on gc1.id=e.currentgradelevel and e.currentschoolyear=#{currentSchoolYear,jdbcType=BIGINT}
		inner join enrollmentsrosters er on er.enrollmentid=e.id
		inner join roster r on r.id=er.rosterid and r.currentschoolyear=#{currentSchoolYear,jdbcType=BIGINT}
		INNER JOIN organization o1 on o1.id=e.attendanceschoolid
		INNER JOIN interimstudentreport isr on isr.studentid=e.studentid and isr.status is true
		and gc1.name= (select name from gradecourse where id=isr.gradeid)
		INNER JOIN contentarea ca1 on ca1.abbreviatedname=(select abbreviatedname from contentarea where id=isr.contentareaid)
		LEFT OUTER JOIN studentreport sr on sr.studentid = e.studentid and sr.schoolyear=e.currentschoolyear
		and sr.assessmentProgramid= #{assessmentProgramId, jdbcType=BIGINT}
		LEFT OUTER JOIN organization o2 on o2.id=sr.attendanceschoolid
		LEFT OUTER JOIN contentarea ca2 on ca2.abbreviatedname=(select abbreviatedname from contentarea where id=sr.contentareaid)
		LEFT OUTER JOIN gradecourse gc2 on gc2.name= (select name from gradecourse where
		id=sr.gradeid)
		where
		((e.activeflag is true) or (e.activeflag is false and sr.id is not null and o2.id=o1.id)) 
		<if test="teacherId != null">
			and r.teacherid= #{teacherId}
			and er.activeflag is true
		</if>
		<if test="organizationIds != null">
			and (o1.id= ANY(ARRAY
			<foreach collection="organizationIds" item="organizationId" open="[" close="]" separator=",">
				#{organizationId}
			</foreach>
			) or o2.id= ANY(ARRAY
			<foreach collection="organizationIds" item="organizationId" open="[" close="]" separator=",">
				#{organizationId}
			</foreach>
			)
			)
		</if>
		<if test="subjectIds!=null">
			and (ca1.id=ANY(ARRAY
			<foreach collection="subjectIds" item="subjectId" open="[" close="]" separator=",">
				#{subjectId}
			</foreach>
			) or ca2.id=ANY(ARRAY
			<foreach collection="subjectIds" item="subjectId" open="[" close="]" separator=",">
				#{subjectId}
			</foreach>
			)
			)

		</if>
		and (e.activeflag is true or sr.id is not null)
	</if>
	<if test="predictiveStudentScore == false">
		select distinct gc.id as id
		from test t 
		inner join studentstests st on t.id=st.testid and st.activeflag is true and t.activeflag is true and t.is_interim_test is true
		inner join interimtest it on it.testtestid=t.id and it.activeflag is true
		inner join enrollment e on e.id=st.enrollmentid and e.currentschoolyear=#{currentSchoolYear,jdbcType=BIGINT}
		inner join enrollmentsrosters er on er.enrollmentid=e.id
		inner join roster r on r.id=er.rosterid and r.currentschoolyear=#{currentSchoolYear,jdbcType=BIGINT}
		inner join gradecourse gc on gc.id=e.currentgradelevel and gc.activeflag is true
		inner join contentarea ca on ca.id=r.statesubjectareaid and ca.activeflag is true
		inner join organization o on o.id=r.attendanceschoolid and o.activeflag is true
		join testspecstatementofpurpose tssop on t.testspecificationid = tssop.testspecificationid and tssop.activeflag is true
		inner join studentassessmentprogram sap on sap.studentid = st.studentid and sap.activeflag = true
		inner join assessmentstestcollections atc ON atc.testcollectionid = st.testcollectionid and atc.activeflag is true
		inner join assessment ass ON ass.id = atc.assessmentid and ass.activeflag is true 
		inner join testingprogram tp ON tp.id = ass.testingprogramid and tp.activeflag is true
		inner join assessmentprogram ap ON ap.id = tp.assessmentprogramid and ap.id=sap.assessmentprogramid and ap.activeflag is true
		where ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		and e.activeflag is true and er.activeflag is true and r.activeflag is true
		and tp.programname ilike 'interim'
		<if test="organizationIds != null">
			and o.id= ANY(ARRAY
			<foreach collection="organizationIds" item="organizationId" open="[" close="]" separator=",">
				#{organizationId}
			</foreach>
			)
		</if>
		<if test="subjectIds!=null">
			and ca.id=ANY(ARRAY
			<foreach collection="subjectIds" item="subjectId" open="[" close="]" separator=",">
				#{subjectId}
			</foreach>
			)

		</if>
		<if test="teacherId != null">
			and r.teacherid= #{teacherId}
			and er.activeflag is true
		</if>
	</if>
	)
	group by name
	order by name asc
	</select>

   <select id="getSubjectNamesByRosterAndOrgListInterim" resultType="edu.ku.cete.domain.content.ContentArea">
	select max(id) as id, name from contentarea where id in(
	<if test="predictiveStudentScore == true">
		select case when sr.id is null then ca1.id else ca2.id end as id
		from contentarea ca1
		INNER JOIN interimstudentreport isr on isr.status is true and
		ca1.abbreviatedname=(select abbreviatedname from contentarea where id=isr.contentareaid)
		INNER JOIN enrollment e on e.studentid=isr.studentid and e.currentschoolyear=#{currentSchoolYear,jdbcType=BIGINT}
		inner join enrollmentsrosters er on er.enrollmentid=e.id
		inner join roster r on r.id=er.rosterid and r.currentschoolyear=#{currentSchoolYear,jdbcType=BIGINT} and r.activeflag is true
		INNER JOIN organization o1 on o1.id=e.attendanceschoolid
		LEFT OUTER JOIN studentreport sr on sr.studentid = e.studentid and sr.schoolyear=#{currentSchoolYear,jdbcType=BIGINT}
		and sr.assessmentProgramid= #{assessmentProgramId, jdbcType=BIGINT}
		LEFT OUTER JOIN organization o2 on o2.id=sr.attendanceschoolid
		LEFT OUTER JOIN contentarea ca2 on ca2.abbreviatedname=(select abbreviatedname from contentarea where id=sr.contentareaid)
		and ca1.abbreviatedname=ca2.abbreviatedname
		where
			((e.activeflag is true) or (e.activeflag is false and sr.id is not null and o2.id=o1.id)) 
		<if test="teacherId != null">
			and r.teacherid= #{teacherId}
			and er.activeflag is true
			and ca1.id = r.statesubjectareaid
		</if>
		<if test="organizationIds != null">
			and (o1.id= ANY(ARRAY
			<foreach collection="organizationIds" item="organizationId" open="[" close="]" separator=",">
				#{organizationId}
			</foreach>
			) or o2.id= ANY(ARRAY
			<foreach collection="organizationIds" item="organizationId" open="[" close="]" separator=",">
				#{organizationId}
			</foreach>
			)
			)
		</if>
	</if>
	<if test="predictiveStudentScore == false">
		select distinct ca.id
			from test t 
			inner join interimtest it on it.testtestid=t.id and it.activeflag is true
			inner join studentstests st on st.testid= it.testtestid and st.activeflag is true
			inner join enrollment e on e.id=st.enrollmentid and e.currentschoolyear=#{currentSchoolYear,jdbcType=BIGINT} and e.activeflag is true
			inner join enrollmentsrosters er on er.enrollmentid=e.id and er.activeflag is true
			inner join roster r on r.id=er.rosterid and r.currentschoolyear=#{currentSchoolYear,jdbcType=BIGINT} and r.activeflag is true
			inner join contentarea ca on ca.id=r.statesubjectareaid and ca.activeflag is true and ca.id = it.contentareaid
			inner join organization o on o.id=r.attendanceschoolid and o.activeflag is true 
			inner join testspecstatementofpurpose tssop on t.testspecificationid = tssop.testspecificationid and tssop.activeflag is true
			inner join category c on tssop.statementofpurposeid = c.id
			inner join studentassessmentprogram sap on sap.studentid = st.studentid and sap.activeflag = true
			inner join assessmentstestcollections atc ON atc.testcollectionid = st.testcollectionid and atc.activeflag is true
			inner join assessment ass ON ass.id = atc.assessmentid and ass.activeflag is true 
			inner join testingprogram tp ON tp.id = ass.testingprogramid and tp.activeflag is true
			inner join assessmentprogram ap ON ap.id = tp.assessmentprogramid and ap.id=sap.assessmentprogramid and ap.activeflag is true
			where ap.id = #{assessmentProgramId, jdbcType=BIGINT}
			and tp.programname ilike 'interim'
		<if test="organizationIds != null">
			and o.id= ANY(ARRAY
			<foreach collection="organizationIds" item="organizationId" open="[" close="]" separator=",">
				#{organizationId}
			</foreach>
			)
		</if>
		<if test="teacherId != null">
			and r.teacherid= #{teacherId}
			and er.activeflag is true
		</if>
		and (t.is_interim_test is true or c.categorycode = 'PRDCTN')
	</if>
	)

	group by name
	order by name 
   </select>

	<select id="getStudentDetailsByGradeAndSubjectAndRoster" resultType="edu.ku.cete.domain.student.Student">
	select s1.id, s1.legalfirstname || ' ' || s1.legallastname as legalFirstName,s1.legalfirstname as fname,s1.legallastname as lname
	from student s1 where id in (
	<if test="predictiveStudentScore == true">
		select e.studentid
		from gradecourse gc1
		INNER JOIN enrollment e on gc1.id=e.currentgradelevel and e.currentschoolyear=#{currentSchoolYear,jdbcType=BIGINT}
		inner join enrollmentsrosters er on er.enrollmentid=e.id
		inner join roster r on r.id=er.rosterid and r.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
		INNER JOIN organization o1 on o1.id=e.attendanceschoolid
		INNER JOIN interimstudentreport isr on isr.studentid=e.studentid and isr.status is true
		and gc1.abbreviatedname= (select abbreviatedname from gradecourse where id=isr.gradeid)
		INNER JOIN contentarea ca1 on ca1.abbreviatedname=(select abbreviatedname from contentarea where id=isr.contentareaid)
		LEFT OUTER JOIN studentreport sr on sr.studentid = e.studentid and sr.schoolyear=e.currentschoolyear
		and sr.assessmentProgramid= #{assessmentProgramId, jdbcType=BIGINT}
		LEFT OUTER JOIN organization o2 on o2.id=sr.attendanceschoolid
		LEFT OUTER JOIN contentarea ca2 on ca2.abbreviatedname=(select abbreviatedname from contentarea where id=sr.contentareaid)
		LEFT OUTER JOIN gradecourse gc2 on gc2.abbreviatedname= (select abbreviatedname from gradecourse where
		id=sr.gradeid) 
		where 
			((e.activeflag is true) or (e.activeflag is false and sr.id is not null and o2.id=o1.id)) 
		<if test="teacherId != null">
			and r.teacherid= #{teacherId}
			and er.activeflag is true
		</if>
		<if test="organizationIds != null">
			and (o1.id= ANY(ARRAY
			<foreach collection="organizationIds" item="organizationId" open="[" close="]" separator=",">
				#{organizationId}
			</foreach>
			) or o2.id= ANY(ARRAY
			<foreach collection="organizationIds" item="organizationId" open="[" close="]" separator=",">
				#{organizationId}
			</foreach>
			)
			)
		</if>
		<if test="subjectIds!=null">
			and (ca1.id=ANY(ARRAY
			<foreach collection="subjectIds" item="subjectId" open="[" close="]" separator=",">
				#{subjectId}
			</foreach>
			) or ca2.id=ANY(ARRAY
			<foreach collection="subjectIds" item="subjectId" open="[" close="]" separator=",">
				#{subjectId}
			</foreach>
			)
			)
		</if>
		<if test="gradeIds!=null">
			and (gc1.id =ANY(ARRAY
			<foreach collection="gradeIds" item="gradeId" open="[" close="]" separator=",">
				#{gradeId}
			</foreach>
			) or gc2.id =ANY(ARRAY
			<foreach collection="gradeIds" item="gradeId" open="[" close="]" separator=",">
				#{gradeId}
			</foreach>
			))
		</if>
	</if>
	
	<if test="predictiveStudentScore == false">
		select distinct st.studentid
		from studentstests st
		inner join test t on t.id=st.testid and st.activeflag is true and t.activeflag is true
		inner join interimtest it on it.testtestid=t.id and it.activeflag is true
		inner join enrollment e on e.studentid = st.studentid and e.id=st.enrollmentid and e.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
		inner join enrollmentsrosters er on er.enrollmentid=e.id
		inner join roster r on r.id=er.rosterid and r.currentschoolyear= #{currentSchoolYear,jdbcType=BIGINT}
		inner join contentarea ca on ca.id = it.contentareaid and ca.activeflag is true
		inner join organization o on o.id=r.attendanceschoolid and o.activeflag is true
		inner join testspecstatementofpurpose tssop on t.testspecificationid = tssop.testspecificationid and tssop.activeflag is true
		inner join category c on tssop.statementofpurposeid = c.id
		inner join studentassessmentprogram sap on sap.studentid = st.studentid and sap.activeflag = true
		inner join assessmentstestcollections atc ON atc.testcollectionid = st.testcollectionid and atc.activeflag is true
		inner join assessment ass ON ass.id = atc.assessmentid and ass.activeflag is true 
		inner join testingprogram tp ON tp.id = ass.testingprogramid and tp.activeflag is true
		inner join assessmentprogram ap ON ap.id = tp.assessmentprogramid and ap.id=sap.assessmentprogramid and ap.activeflag is true
		where ap.id = #{assessmentProgramId, jdbcType=BIGINT}
		and tp.programname ilike 'interim'
		<if test="organizationIds != null">
			and o.id in
			<foreach collection="organizationIds" item="organizationId" open="(" close=")" separator=",">
				#{organizationId}
			</foreach>
		</if>
		<if test="subjectIds!=null">
			and ca.id in
			<foreach collection="subjectIds" item="subjectId" open="(" close=")" separator=",">
				#{subjectId}
			</foreach>

		</if>
		<if test="gradeIds!=null">
			and e.currentgradelevel in ( select distinct id from gradecourse 
			where abbreviatedname in (select distinct abbreviatedname from gradecourse where id in
			<foreach collection="gradeIds" item="gradeId" open="(" close=")" separator=",">
				#{gradeId}
			</foreach>
			) )
		</if>
		<if test="teacherId != null">
			and r.teacherid= #{teacherId}
			and er.activeflag is true
		</if>
		and
		(t.is_interim_test is true or c.categorycode = 'PRDCTN') and e.activeflag is true and er.activeflag is true and r.activeflag is true
	</if>
	) order by lname asc,fname asc
   </select>

	<select id="getPredictiveTestsInCollection" resultType="edu.ku.cete.domain.content.Test">
		SELECT <include refid="Base_Column_List" />
		FROM testcollectionstests tct
		JOIN test on tct.testid = test.id
		JOIN testspecstatementofpurpose tssop ON test.testspecificationid = tssop.testspecificationid
		JOIN category c ON tssop.statementofpurposeid = c.id
		WHERE test.activeflag
		AND test.qccomplete
		AND c.categorycode = 'PRDCTN'
		AND tct.testcollectionid = #{testCollectionId,jdbcType=BIGINT}
		AND test.status = #{testStatusId,jdbcType=BIGINT}
	</select>
	
	<select id="getPredictiveTestsScoreByStudentIdExternalTestIds" resultMap="studentReportTestResponsesMap">
		/*NO LOAD BALANCE*/
		SELECT DISTINCT sts.studentid AS studentid,
		sts.testid AS testid,
		t.externalid AS testexternalid,
		sts.id AS
		studentstestsid,
		tv.externalid AS taskvariantexternalid,
		tv.id AS
		taskvariantid,
		str.score,
		stg.code as	stagecode, stg.sortorder,
		sts.status as studentstestsstatus,
		stsec.statusid as sectionstatus,
		tsec.sectionorder,
		str.studentstestsectionsid, tv.scoringneeded, sts.enrollmentid,
		(CASE
			WHEN sth.acteddate is null THEN sts.modifieddate
			ELSE sth.acteddate
			END) as datestudentstestsmodified,
		str.foilid, str.response
		FROM studentstests sts
		JOIN testsession ts ON ts.id = sts.testsessionid AND ts.activeflag is true AND ts.source = 'BATCHAUTO'
		JOIN testcollection tc ON tc.id = ts.testcollectionid
		JOIN stage stg ON stg.id = tc.stageid
		JOIN test t ON t.id = sts.testid
		JOIN studentstestsections stsec ON stsec.studentstestid = sts.id
		LEFT JOIN studentsresponses str ON str.studentstestsid = sts.id AND	str.studentstestsectionsid = stsec.id AND str.activeflag = true
		LEFT JOIN taskvariant tv ON tv.id = str.taskvariantid
		LEFT JOIN testsectionstaskvariants tstv ON tstv.taskvariantid = tv.id
		LEFT JOIN testsection tsec ON tsec.id =	tstv.testsectionid		
		LEFT JOIN studentstestshistory sth ON sts.id = sth.studentstestsid AND sth.action = 'END TEST SESSION'
		WHERE sts.studentid = #{studentId,jdbcType=BIGINT}
		AND sts.activeflag is true 
		AND sts.status = ANY(ARRAY
			<foreach close="]" collection="testsStatusIds" item="testsStatusId"
				open="[" separator=",">
				#{testsStatusId}
			</foreach>::BIGINT[]
			)

			AND sts.enrollmentid = ANY(ARRAY
			<foreach close="]" collection="enrollmentIds" item="enrollmentId"
				open="[" separator=",">
				#{enrollmentId,jdbcType=BIGINT}
			</foreach>::BIGINT[]
			)
			AND t.externalid = ANY(Array
			<foreach collection="externalTestIds" item="testId" open="["
				close="]" separator=",">
				#{testId}
			</foreach>::BIGINT[]
			)

	</select>
	
	<select id="getAllPublishedTestByExternalId" resultType="java.lang.Long">
		SELECT DISTINCT id FROM test 
			WHERE externalid = #{externalTestId,jdbcType=BIGINT} 
			AND status = #{deployedStatusId,jdbcType=BIGINT} 
			AND qccomplete is true
			AND activeflag is true
	</select>
	
	<select id="gtAllQCTestsAccFlagsByTestCollectionIdAndTestStatus" resultMap="BaseResultMap">
		SELECT distinct test.id, 
				test.testname, 
				test.numitems,
				test.qccomplete, 
				taf.accessibilityflagcode,
				test.accessibleform
		FROM test
		JOIN testcollectionstests tct ON test.id = tct.testid
		LEFT JOIN testaccessibilityflag taf ON taf.testid = test.id		
		WHERE tct.testcollectionid = #{testCollectionId} 
			AND test.activeflag is true
			AND test.status=#{testStatusId}		
			AND test.qccomplete is true
			ORDER BY accessibilityflagcode
	</select>
	
	<select id="findQCTestsByTestCollectionAndStatusAndAccFlagsForPLTW" parameterType="map" resultMap="BaseResultMap">
		<if test="stagePredecessorId != null">
			WITH preceding_tests_in_window AS (
				SELECT st.id, st.testid, t.testname, t.testinternalname, tc.contentareaid
				FROM testsession ts
				JOIN studentstests st ON ts.id = st.testsessionid AND st.activeflag IS TRUE
				JOIN testcollection tc ON st.testcollectionid = tc.id
				JOIN test t ON st.testid = t.id AND t.activeflag IS TRUE
				WHERE ts.activeflag IS TRUE
				AND ts.source = 'BATCHAUTO'
				AND ts.operationaltestwindowid = #{operationalTestWindowId,jdbcType=BIGINT}
				AND tc.stageid = #{stagePredecessorId,jdbcType=BIGINT}
				AND st.studentid = #{studentId,jdbcType=BIGINT}
			)
		</if>
		SELECT <include refid="Base_Column_List" />
		FROM test
		JOIN testcollectionstests tct ON test.id = tct.testid
		<if test="stagePredecessorId != null">
			JOIN testcollection tc ON tct.testcollectionid = tc.id
			JOIN preceding_tests_in_window pre ON tc.contentareaid = pre.contentareaid
		</if>
		WHERE tct.testcollectionid = #{testCollectionId}
		AND #{accessibilityFlagCounter} = (
			SELECT count(DISTINCT accessibilityflagcode)
			FROM testaccessibilityflag
			WHERE testid = test.id
			<!--
			Moved this <if> condition from around the whole AND in the bigger query, which would allow general students to get accommodated forms.
			Since we don't want that anymore-if the size is 0, we just have to check by the test ID, not the accommodations included,
			because we want a test with NO accommodation entries.
			-->
			<if test="accessibilityFlagCode != null and accessibilityFlagCounter &gt; 0">
				AND accessibilityflagcode IN
				<foreach collection="accessibilityFlagCode" item="accessibilityFlag" open="(" close=")" separator=",">
					#{accessibilityFlag}
				</foreach>
			</if>
		)
		AND test.status = #{testStatusId}
		AND test.qccomplete = true
		<if test="stagePredecessorId != null">
			<!--
				This condition may look a bit strange, but at the initial time of implementation (October 2018),
				the previous stage's testinternalname should roughly match the testinternalname for the stage that we're looking for now.
				"CS CSE Form 3: Section 1" and "CS CSE Form 3: Section 2" - we take everything before the colon to match what we're looking for.
				Removing spaces from the string is mildly important because users are users, after all.
			-->
			AND regexp_replace(split_part(test.testinternalname, ':', 1), '\s', '', 'g') ILIKE regexp_replace(split_part(pre.testinternalname, ':', 1), '\s', '', 'g')
		</if>
		<if test="accessibleForm != null">
			AND test.accessibleform = #{accessibleForm}
		</if>
	</select>
</mapper>